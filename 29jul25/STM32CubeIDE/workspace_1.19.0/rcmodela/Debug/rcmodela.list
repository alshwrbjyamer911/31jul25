
rcmodela.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000434c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000274  080044dc  080044dc  000054dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004750  08004750  0000605c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004750  08004750  00005750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004758  08004758  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004758  08004758  00005758  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800475c  0800475c  0000575c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004760  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000605c  2**0
                  CONTENTS
 10 .bss          000002c8  2000005c  2000005c  0000605c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000324  20000324  0000605c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000eb0a  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f44  00000000  00000000  00014b96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e38  00000000  00000000  00016ae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b21  00000000  00000000  00017918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f7c7  00000000  00000000  00018439  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000efb6  00000000  00000000  00037c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c244d  00000000  00000000  00046bb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00109003  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004480  00000000  00000000  00109048  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  0010d4c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080044c4 	.word	0x080044c4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	080044c4 	.word	0x080044c4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	4603      	mov	r3, r0
 80005b4:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == GPIO_PIN_0)  // Check which pin triggered the EXTI
 80005b6:	88fb      	ldrh	r3, [r7, #6]
 80005b8:	2b01      	cmp	r3, #1
 80005ba:	d114      	bne.n	80005e6 <HAL_GPIO_EXTI_Callback+0x3a>
    {
    	//continous hitt
    	counter_exti0++;
 80005bc:	4b29      	ldr	r3, [pc, #164]	@ (8000664 <HAL_GPIO_EXTI_Callback+0xb8>)
 80005be:	881b      	ldrh	r3, [r3, #0]
 80005c0:	3301      	adds	r3, #1
 80005c2:	b29a      	uxth	r2, r3
 80005c4:	4b27      	ldr	r3, [pc, #156]	@ (8000664 <HAL_GPIO_EXTI_Callback+0xb8>)
 80005c6:	801a      	strh	r2, [r3, #0]
      if((counter_exti0%2) == 1){
 80005c8:	4b26      	ldr	r3, [pc, #152]	@ (8000664 <HAL_GPIO_EXTI_Callback+0xb8>)
 80005ca:	881b      	ldrh	r3, [r3, #0]
 80005cc:	f003 0301 	and.w	r3, r3, #1
 80005d0:	b29b      	uxth	r3, r3
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d003      	beq.n	80005de <HAL_GPIO_EXTI_Callback+0x32>

    	lora_send_char('c');
 80005d6:	2063      	movs	r0, #99	@ 0x63
 80005d8:	f000 fa7a 	bl	8000ad0 <lora_send_char>

    	//        //do somthing
    	//        // Your EXTI ha
        HAL_NVIC_EnableIRQ(EXTI4_IRQn);
    }
}
 80005dc:	e03e      	b.n	800065c <HAL_GPIO_EXTI_Callback+0xb0>
    	  lora_send_char('0');
 80005de:	2030      	movs	r0, #48	@ 0x30
 80005e0:	f000 fa76 	bl	8000ad0 <lora_send_char>
}
 80005e4:	e03a      	b.n	800065c <HAL_GPIO_EXTI_Callback+0xb0>
    else if(GPIO_Pin == GPIO_PIN_1){
 80005e6:	88fb      	ldrh	r3, [r7, #6]
 80005e8:	2b02      	cmp	r3, #2
 80005ea:	d103      	bne.n	80005f4 <HAL_GPIO_EXTI_Callback+0x48>
    	lora_send_char('d');
 80005ec:	2064      	movs	r0, #100	@ 0x64
 80005ee:	f000 fa6f 	bl	8000ad0 <lora_send_char>
}
 80005f2:	e033      	b.n	800065c <HAL_GPIO_EXTI_Callback+0xb0>
    else if(GPIO_Pin == GPIO_PIN_4){
 80005f4:	88fb      	ldrh	r3, [r7, #6]
 80005f6:	2b10      	cmp	r3, #16
 80005f8:	d130      	bne.n	800065c <HAL_GPIO_EXTI_Callback+0xb0>
    	HAL_NVIC_DisableIRQ(EXTI4_IRQn);  // Disable EXTI Line 4 interrupt for check what is happend
 80005fa:	200a      	movs	r0, #10
 80005fc:	f000 fead 	bl	800135a <HAL_NVIC_DisableIRQ>
    	HAL_Delay(600);
 8000600:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8000604:	f000 fd5c 	bl	80010c0 <HAL_Delay>
    	if(!HAL_GPIO_ReadPin(STOP_WATCH_GPIO_Port, STOP_WATCH_Pin)){
 8000608:	2110      	movs	r1, #16
 800060a:	4817      	ldr	r0, [pc, #92]	@ (8000668 <HAL_GPIO_EXTI_Callback+0xbc>)
 800060c:	f001 f85c 	bl	80016c8 <HAL_GPIO_ReadPin>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d10b      	bne.n	800062e <HAL_GPIO_EXTI_Callback+0x82>
    		counter_exti4 =0; mins_stopwatch = 0; sec_stopwatch = 0 ;stopwatch_screen_flag=0;
 8000616:	4b15      	ldr	r3, [pc, #84]	@ (800066c <HAL_GPIO_EXTI_Callback+0xc0>)
 8000618:	2200      	movs	r2, #0
 800061a:	801a      	strh	r2, [r3, #0]
 800061c:	4b14      	ldr	r3, [pc, #80]	@ (8000670 <HAL_GPIO_EXTI_Callback+0xc4>)
 800061e:	2200      	movs	r2, #0
 8000620:	701a      	strb	r2, [r3, #0]
 8000622:	4b14      	ldr	r3, [pc, #80]	@ (8000674 <HAL_GPIO_EXTI_Callback+0xc8>)
 8000624:	2200      	movs	r2, #0
 8000626:	701a      	strb	r2, [r3, #0]
 8000628:	4b13      	ldr	r3, [pc, #76]	@ (8000678 <HAL_GPIO_EXTI_Callback+0xcc>)
 800062a:	2200      	movs	r2, #0
 800062c:	701a      	strb	r2, [r3, #0]
    	counter_exti4++;
 800062e:	4b0f      	ldr	r3, [pc, #60]	@ (800066c <HAL_GPIO_EXTI_Callback+0xc0>)
 8000630:	881b      	ldrh	r3, [r3, #0]
 8000632:	3301      	adds	r3, #1
 8000634:	b29a      	uxth	r2, r3
 8000636:	4b0d      	ldr	r3, [pc, #52]	@ (800066c <HAL_GPIO_EXTI_Callback+0xc0>)
 8000638:	801a      	strh	r2, [r3, #0]
    	if((counter_exti4%2) == 0){
 800063a:	4b0c      	ldr	r3, [pc, #48]	@ (800066c <HAL_GPIO_EXTI_Callback+0xc0>)
 800063c:	881b      	ldrh	r3, [r3, #0]
 800063e:	f003 0301 	and.w	r3, r3, #1
 8000642:	b29b      	uxth	r3, r3
 8000644:	2b00      	cmp	r3, #0
 8000646:	d103      	bne.n	8000650 <HAL_GPIO_EXTI_Callback+0xa4>
    		stopwatch_screen_flag=0;
 8000648:	4b0b      	ldr	r3, [pc, #44]	@ (8000678 <HAL_GPIO_EXTI_Callback+0xcc>)
 800064a:	2200      	movs	r2, #0
 800064c:	701a      	strb	r2, [r3, #0]
 800064e:	e002      	b.n	8000656 <HAL_GPIO_EXTI_Callback+0xaa>
    		stopwatch_screen_flag=1;
 8000650:	4b09      	ldr	r3, [pc, #36]	@ (8000678 <HAL_GPIO_EXTI_Callback+0xcc>)
 8000652:	2201      	movs	r2, #1
 8000654:	701a      	strb	r2, [r3, #0]
        HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000656:	200a      	movs	r0, #10
 8000658:	f000 fe71 	bl	800133e <HAL_NVIC_EnableIRQ>
}
 800065c:	bf00      	nop
 800065e:	3708      	adds	r7, #8
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	200000d6 	.word	0x200000d6
 8000668:	40020000 	.word	0x40020000
 800066c:	200000d0 	.word	0x200000d0
 8000670:	200000d2 	.word	0x200000d2
 8000674:	200000d3 	.word	0x200000d3
 8000678:	200000d4 	.word	0x200000d4

0800067c <HAL_TIM_PeriodElapsedCallback>:
////        HAL_NVIC_EnableIRQ(EXTI1_IRQn);
//
//    }
//}
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800067c:	b480      	push	{r7}
 800067e:	b083      	sub	sp, #12
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
    if(htim->Instance == TIM2)
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800068c:	d120      	bne.n	80006d0 <HAL_TIM_PeriodElapsedCallback+0x54>
    {
    	if(stopwatch_screen_flag==1){
 800068e:	4b13      	ldr	r3, [pc, #76]	@ (80006dc <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	2b01      	cmp	r3, #1
 8000694:	d11c      	bne.n	80006d0 <HAL_TIM_PeriodElapsedCallback+0x54>
    		if(sec_stopwatch == 60){
 8000696:	4b12      	ldr	r3, [pc, #72]	@ (80006e0 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000698:	781b      	ldrb	r3, [r3, #0]
 800069a:	2b3c      	cmp	r3, #60	@ 0x3c
 800069c:	d108      	bne.n	80006b0 <HAL_TIM_PeriodElapsedCallback+0x34>
    			sec_stopwatch=0;
 800069e:	4b10      	ldr	r3, [pc, #64]	@ (80006e0 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	701a      	strb	r2, [r3, #0]
    			mins_stopwatch++;
 80006a4:	4b0f      	ldr	r3, [pc, #60]	@ (80006e4 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	3301      	adds	r3, #1
 80006aa:	b2da      	uxtb	r2, r3
 80006ac:	4b0d      	ldr	r3, [pc, #52]	@ (80006e4 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80006ae:	701a      	strb	r2, [r3, #0]
    		}
    		if(mins_stopwatch==60){
 80006b0:	4b0c      	ldr	r3, [pc, #48]	@ (80006e4 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	2b3c      	cmp	r3, #60	@ 0x3c
 80006b6:	d10b      	bne.n	80006d0 <HAL_TIM_PeriodElapsedCallback+0x54>
    			sec_stopwatch=0;
 80006b8:	4b09      	ldr	r3, [pc, #36]	@ (80006e0 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	701a      	strb	r2, [r3, #0]
    			mins_stopwatch++;
 80006be:	4b09      	ldr	r3, [pc, #36]	@ (80006e4 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	3301      	adds	r3, #1
 80006c4:	b2da      	uxtb	r2, r3
 80006c6:	4b07      	ldr	r3, [pc, #28]	@ (80006e4 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80006c8:	701a      	strb	r2, [r3, #0]
    			stopwatch_screen_flag=0;
 80006ca:	4b04      	ldr	r3, [pc, #16]	@ (80006dc <HAL_TIM_PeriodElapsedCallback+0x60>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	701a      	strb	r2, [r3, #0]

        // Your Timer2 interrupt code here
        //calculate soc each 4 sec
    	//update lcd data each sec
    }
}
 80006d0:	bf00      	nop
 80006d2:	370c      	adds	r7, #12
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr
 80006dc:	200000d4 	.word	0x200000d4
 80006e0:	200000d3 	.word	0x200000d3
 80006e4:	200000d2 	.word	0x200000d2

080006e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ec:	f000 fc76 	bl	8000fdc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006f0:	f000 f80e 	bl	8000710 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006f4:	f000 f950 	bl	8000998 <MX_GPIO_Init>
  MX_SPI1_Init();
 80006f8:	f000 f874 	bl	80007e4 <MX_SPI1_Init>
  MX_TIM2_Init();
 80006fc:	f000 f8aa 	bl	8000854 <MX_TIM2_Init>
  MX_UART5_Init();
 8000700:	f000 f8f6 	bl	80008f0 <MX_UART5_Init>
  MX_USART1_UART_Init();
 8000704:	f000 f91e 	bl	8000944 <MX_USART1_UART_Init>
  lora_init();
 8000708:	f000 f9be 	bl	8000a88 <lora_init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800070c:	bf00      	nop
 800070e:	e7fd      	b.n	800070c <main+0x24>

08000710 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b094      	sub	sp, #80	@ 0x50
 8000714:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000716:	f107 0320 	add.w	r3, r7, #32
 800071a:	2230      	movs	r2, #48	@ 0x30
 800071c:	2100      	movs	r1, #0
 800071e:	4618      	mov	r0, r3
 8000720:	f002 fe50 	bl	80033c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000724:	f107 030c 	add.w	r3, r7, #12
 8000728:	2200      	movs	r2, #0
 800072a:	601a      	str	r2, [r3, #0]
 800072c:	605a      	str	r2, [r3, #4]
 800072e:	609a      	str	r2, [r3, #8]
 8000730:	60da      	str	r2, [r3, #12]
 8000732:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000734:	2300      	movs	r3, #0
 8000736:	60bb      	str	r3, [r7, #8]
 8000738:	4b28      	ldr	r3, [pc, #160]	@ (80007dc <SystemClock_Config+0xcc>)
 800073a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800073c:	4a27      	ldr	r2, [pc, #156]	@ (80007dc <SystemClock_Config+0xcc>)
 800073e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000742:	6413      	str	r3, [r2, #64]	@ 0x40
 8000744:	4b25      	ldr	r3, [pc, #148]	@ (80007dc <SystemClock_Config+0xcc>)
 8000746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000748:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800074c:	60bb      	str	r3, [r7, #8]
 800074e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000750:	2300      	movs	r3, #0
 8000752:	607b      	str	r3, [r7, #4]
 8000754:	4b22      	ldr	r3, [pc, #136]	@ (80007e0 <SystemClock_Config+0xd0>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a21      	ldr	r2, [pc, #132]	@ (80007e0 <SystemClock_Config+0xd0>)
 800075a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800075e:	6013      	str	r3, [r2, #0]
 8000760:	4b1f      	ldr	r3, [pc, #124]	@ (80007e0 <SystemClock_Config+0xd0>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000768:	607b      	str	r3, [r7, #4]
 800076a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800076c:	2302      	movs	r3, #2
 800076e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000770:	2301      	movs	r3, #1
 8000772:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000774:	2310      	movs	r3, #16
 8000776:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000778:	2302      	movs	r3, #2
 800077a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800077c:	2300      	movs	r3, #0
 800077e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000780:	2308      	movs	r3, #8
 8000782:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000784:	23a8      	movs	r3, #168	@ 0xa8
 8000786:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000788:	2302      	movs	r3, #2
 800078a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800078c:	2304      	movs	r3, #4
 800078e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000790:	f107 0320 	add.w	r3, r7, #32
 8000794:	4618      	mov	r0, r3
 8000796:	f000 ffc7 	bl	8001728 <HAL_RCC_OscConfig>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007a0:	f000 f96c 	bl	8000a7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007a4:	230f      	movs	r3, #15
 80007a6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007a8:	2302      	movs	r3, #2
 80007aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ac:	2300      	movs	r3, #0
 80007ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007b0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80007b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007b6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007ba:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007bc:	f107 030c 	add.w	r3, r7, #12
 80007c0:	2105      	movs	r1, #5
 80007c2:	4618      	mov	r0, r3
 80007c4:	f001 fa28 	bl	8001c18 <HAL_RCC_ClockConfig>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80007ce:	f000 f955 	bl	8000a7c <Error_Handler>
  }
}
 80007d2:	bf00      	nop
 80007d4:	3750      	adds	r7, #80	@ 0x50
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	40023800 	.word	0x40023800
 80007e0:	40007000 	.word	0x40007000

080007e4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007e8:	4b18      	ldr	r3, [pc, #96]	@ (800084c <MX_SPI1_Init+0x68>)
 80007ea:	4a19      	ldr	r2, [pc, #100]	@ (8000850 <MX_SPI1_Init+0x6c>)
 80007ec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007ee:	4b17      	ldr	r3, [pc, #92]	@ (800084c <MX_SPI1_Init+0x68>)
 80007f0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80007f4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 80007f6:	4b15      	ldr	r3, [pc, #84]	@ (800084c <MX_SPI1_Init+0x68>)
 80007f8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80007fc:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007fe:	4b13      	ldr	r3, [pc, #76]	@ (800084c <MX_SPI1_Init+0x68>)
 8000800:	2200      	movs	r2, #0
 8000802:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000804:	4b11      	ldr	r3, [pc, #68]	@ (800084c <MX_SPI1_Init+0x68>)
 8000806:	2200      	movs	r2, #0
 8000808:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800080a:	4b10      	ldr	r3, [pc, #64]	@ (800084c <MX_SPI1_Init+0x68>)
 800080c:	2200      	movs	r2, #0
 800080e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000810:	4b0e      	ldr	r3, [pc, #56]	@ (800084c <MX_SPI1_Init+0x68>)
 8000812:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000816:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000818:	4b0c      	ldr	r3, [pc, #48]	@ (800084c <MX_SPI1_Init+0x68>)
 800081a:	2200      	movs	r2, #0
 800081c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800081e:	4b0b      	ldr	r3, [pc, #44]	@ (800084c <MX_SPI1_Init+0x68>)
 8000820:	2200      	movs	r2, #0
 8000822:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000824:	4b09      	ldr	r3, [pc, #36]	@ (800084c <MX_SPI1_Init+0x68>)
 8000826:	2200      	movs	r2, #0
 8000828:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800082a:	4b08      	ldr	r3, [pc, #32]	@ (800084c <MX_SPI1_Init+0x68>)
 800082c:	2200      	movs	r2, #0
 800082e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000830:	4b06      	ldr	r3, [pc, #24]	@ (800084c <MX_SPI1_Init+0x68>)
 8000832:	220a      	movs	r2, #10
 8000834:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000836:	4805      	ldr	r0, [pc, #20]	@ (800084c <MX_SPI1_Init+0x68>)
 8000838:	f001 fbce 	bl	8001fd8 <HAL_SPI_Init>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8000842:	f000 f91b 	bl	8000a7c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000846:	bf00      	nop
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	20000078 	.word	0x20000078
 8000850:	40013000 	.word	0x40013000

08000854 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b086      	sub	sp, #24
 8000858:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800085a:	f107 0308 	add.w	r3, r7, #8
 800085e:	2200      	movs	r2, #0
 8000860:	601a      	str	r2, [r3, #0]
 8000862:	605a      	str	r2, [r3, #4]
 8000864:	609a      	str	r2, [r3, #8]
 8000866:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000868:	463b      	mov	r3, r7
 800086a:	2200      	movs	r2, #0
 800086c:	601a      	str	r2, [r3, #0]
 800086e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000870:	4b1e      	ldr	r3, [pc, #120]	@ (80008ec <MX_TIM2_Init+0x98>)
 8000872:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000876:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16800-1;
 8000878:	4b1c      	ldr	r3, [pc, #112]	@ (80008ec <MX_TIM2_Init+0x98>)
 800087a:	f244 129f 	movw	r2, #16799	@ 0x419f
 800087e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000880:	4b1a      	ldr	r3, [pc, #104]	@ (80008ec <MX_TIM2_Init+0x98>)
 8000882:	2200      	movs	r2, #0
 8000884:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8000886:	4b19      	ldr	r3, [pc, #100]	@ (80008ec <MX_TIM2_Init+0x98>)
 8000888:	f242 720f 	movw	r2, #9999	@ 0x270f
 800088c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800088e:	4b17      	ldr	r3, [pc, #92]	@ (80008ec <MX_TIM2_Init+0x98>)
 8000890:	2200      	movs	r2, #0
 8000892:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000894:	4b15      	ldr	r3, [pc, #84]	@ (80008ec <MX_TIM2_Init+0x98>)
 8000896:	2200      	movs	r2, #0
 8000898:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800089a:	4814      	ldr	r0, [pc, #80]	@ (80008ec <MX_TIM2_Init+0x98>)
 800089c:	f001 fc25 	bl	80020ea <HAL_TIM_Base_Init>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80008a6:	f000 f8e9 	bl	8000a7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008ae:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008b0:	f107 0308 	add.w	r3, r7, #8
 80008b4:	4619      	mov	r1, r3
 80008b6:	480d      	ldr	r0, [pc, #52]	@ (80008ec <MX_TIM2_Init+0x98>)
 80008b8:	f001 fd56 	bl	8002368 <HAL_TIM_ConfigClockSource>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80008c2:	f000 f8db 	bl	8000a7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008c6:	2300      	movs	r3, #0
 80008c8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008ca:	2300      	movs	r3, #0
 80008cc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008ce:	463b      	mov	r3, r7
 80008d0:	4619      	mov	r1, r3
 80008d2:	4806      	ldr	r0, [pc, #24]	@ (80008ec <MX_TIM2_Init+0x98>)
 80008d4:	f001 ff78 	bl	80027c8 <HAL_TIMEx_MasterConfigSynchronization>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80008de:	f000 f8cd 	bl	8000a7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80008e2:	bf00      	nop
 80008e4:	3718      	adds	r7, #24
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	200000d8 	.word	0x200000d8

080008f0 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80008f4:	4b11      	ldr	r3, [pc, #68]	@ (800093c <MX_UART5_Init+0x4c>)
 80008f6:	4a12      	ldr	r2, [pc, #72]	@ (8000940 <MX_UART5_Init+0x50>)
 80008f8:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 80008fa:	4b10      	ldr	r3, [pc, #64]	@ (800093c <MX_UART5_Init+0x4c>)
 80008fc:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000900:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000902:	4b0e      	ldr	r3, [pc, #56]	@ (800093c <MX_UART5_Init+0x4c>)
 8000904:	2200      	movs	r2, #0
 8000906:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000908:	4b0c      	ldr	r3, [pc, #48]	@ (800093c <MX_UART5_Init+0x4c>)
 800090a:	2200      	movs	r2, #0
 800090c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800090e:	4b0b      	ldr	r3, [pc, #44]	@ (800093c <MX_UART5_Init+0x4c>)
 8000910:	2200      	movs	r2, #0
 8000912:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000914:	4b09      	ldr	r3, [pc, #36]	@ (800093c <MX_UART5_Init+0x4c>)
 8000916:	220c      	movs	r2, #12
 8000918:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800091a:	4b08      	ldr	r3, [pc, #32]	@ (800093c <MX_UART5_Init+0x4c>)
 800091c:	2200      	movs	r2, #0
 800091e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000920:	4b06      	ldr	r3, [pc, #24]	@ (800093c <MX_UART5_Init+0x4c>)
 8000922:	2200      	movs	r2, #0
 8000924:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000926:	4805      	ldr	r0, [pc, #20]	@ (800093c <MX_UART5_Init+0x4c>)
 8000928:	f001 ffde 	bl	80028e8 <HAL_UART_Init>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8000932:	f000 f8a3 	bl	8000a7c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000936:	bf00      	nop
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	20000120 	.word	0x20000120
 8000940:	40005000 	.word	0x40005000

08000944 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000948:	4b11      	ldr	r3, [pc, #68]	@ (8000990 <MX_USART1_UART_Init+0x4c>)
 800094a:	4a12      	ldr	r2, [pc, #72]	@ (8000994 <MX_USART1_UART_Init+0x50>)
 800094c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800094e:	4b10      	ldr	r3, [pc, #64]	@ (8000990 <MX_USART1_UART_Init+0x4c>)
 8000950:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000954:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000956:	4b0e      	ldr	r3, [pc, #56]	@ (8000990 <MX_USART1_UART_Init+0x4c>)
 8000958:	2200      	movs	r2, #0
 800095a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800095c:	4b0c      	ldr	r3, [pc, #48]	@ (8000990 <MX_USART1_UART_Init+0x4c>)
 800095e:	2200      	movs	r2, #0
 8000960:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000962:	4b0b      	ldr	r3, [pc, #44]	@ (8000990 <MX_USART1_UART_Init+0x4c>)
 8000964:	2200      	movs	r2, #0
 8000966:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000968:	4b09      	ldr	r3, [pc, #36]	@ (8000990 <MX_USART1_UART_Init+0x4c>)
 800096a:	220c      	movs	r2, #12
 800096c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800096e:	4b08      	ldr	r3, [pc, #32]	@ (8000990 <MX_USART1_UART_Init+0x4c>)
 8000970:	2200      	movs	r2, #0
 8000972:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000974:	4b06      	ldr	r3, [pc, #24]	@ (8000990 <MX_USART1_UART_Init+0x4c>)
 8000976:	2200      	movs	r2, #0
 8000978:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800097a:	4805      	ldr	r0, [pc, #20]	@ (8000990 <MX_USART1_UART_Init+0x4c>)
 800097c:	f001 ffb4 	bl	80028e8 <HAL_UART_Init>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000986:	f000 f879 	bl	8000a7c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800098a:	bf00      	nop
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	20000168 	.word	0x20000168
 8000994:	40011000 	.word	0x40011000

08000998 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b088      	sub	sp, #32
 800099c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800099e:	f107 030c 	add.w	r3, r7, #12
 80009a2:	2200      	movs	r2, #0
 80009a4:	601a      	str	r2, [r3, #0]
 80009a6:	605a      	str	r2, [r3, #4]
 80009a8:	609a      	str	r2, [r3, #8]
 80009aa:	60da      	str	r2, [r3, #12]
 80009ac:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ae:	2300      	movs	r3, #0
 80009b0:	60bb      	str	r3, [r7, #8]
 80009b2:	4b2f      	ldr	r3, [pc, #188]	@ (8000a70 <MX_GPIO_Init+0xd8>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b6:	4a2e      	ldr	r2, [pc, #184]	@ (8000a70 <MX_GPIO_Init+0xd8>)
 80009b8:	f043 0304 	orr.w	r3, r3, #4
 80009bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80009be:	4b2c      	ldr	r3, [pc, #176]	@ (8000a70 <MX_GPIO_Init+0xd8>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c2:	f003 0304 	and.w	r3, r3, #4
 80009c6:	60bb      	str	r3, [r7, #8]
 80009c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	607b      	str	r3, [r7, #4]
 80009ce:	4b28      	ldr	r3, [pc, #160]	@ (8000a70 <MX_GPIO_Init+0xd8>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d2:	4a27      	ldr	r2, [pc, #156]	@ (8000a70 <MX_GPIO_Init+0xd8>)
 80009d4:	f043 0301 	orr.w	r3, r3, #1
 80009d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009da:	4b25      	ldr	r3, [pc, #148]	@ (8000a70 <MX_GPIO_Init+0xd8>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009de:	f003 0301 	and.w	r3, r3, #1
 80009e2:	607b      	str	r3, [r7, #4]
 80009e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	603b      	str	r3, [r7, #0]
 80009ea:	4b21      	ldr	r3, [pc, #132]	@ (8000a70 <MX_GPIO_Init+0xd8>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ee:	4a20      	ldr	r2, [pc, #128]	@ (8000a70 <MX_GPIO_Init+0xd8>)
 80009f0:	f043 0308 	orr.w	r3, r3, #8
 80009f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009f6:	4b1e      	ldr	r3, [pc, #120]	@ (8000a70 <MX_GPIO_Init+0xd8>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fa:	f003 0308 	and.w	r3, r3, #8
 80009fe:	603b      	str	r3, [r7, #0]
 8000a00:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : CONT_Pin DISC_Pin */
  GPIO_InitStruct.Pin = CONT_Pin|DISC_Pin;
 8000a02:	2303      	movs	r3, #3
 8000a04:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a06:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000a0a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a10:	f107 030c 	add.w	r3, r7, #12
 8000a14:	4619      	mov	r1, r3
 8000a16:	4817      	ldr	r0, [pc, #92]	@ (8000a74 <MX_GPIO_Init+0xdc>)
 8000a18:	f000 fcba 	bl	8001390 <HAL_GPIO_Init>

  /*Configure GPIO pin : STOP_WATCH_Pin */
  GPIO_InitStruct.Pin = STOP_WATCH_Pin;
 8000a1c:	2310      	movs	r3, #16
 8000a1e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a20:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000a24:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a26:	2301      	movs	r3, #1
 8000a28:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(STOP_WATCH_GPIO_Port, &GPIO_InitStruct);
 8000a2a:	f107 030c 	add.w	r3, r7, #12
 8000a2e:	4619      	mov	r1, r3
 8000a30:	4811      	ldr	r0, [pc, #68]	@ (8000a78 <MX_GPIO_Init+0xe0>)
 8000a32:	f000 fcad 	bl	8001390 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000a36:	2200      	movs	r2, #0
 8000a38:	2100      	movs	r1, #0
 8000a3a:	2006      	movs	r0, #6
 8000a3c:	f000 fc63 	bl	8001306 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000a40:	2006      	movs	r0, #6
 8000a42:	f000 fc7c 	bl	800133e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000a46:	2200      	movs	r2, #0
 8000a48:	2100      	movs	r1, #0
 8000a4a:	2007      	movs	r0, #7
 8000a4c:	f000 fc5b 	bl	8001306 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000a50:	2007      	movs	r0, #7
 8000a52:	f000 fc74 	bl	800133e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000a56:	2200      	movs	r2, #0
 8000a58:	2100      	movs	r1, #0
 8000a5a:	200a      	movs	r0, #10
 8000a5c:	f000 fc53 	bl	8001306 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000a60:	200a      	movs	r0, #10
 8000a62:	f000 fc6c 	bl	800133e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000a66:	bf00      	nop
 8000a68:	3720      	adds	r7, #32
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	40023800 	.word	0x40023800
 8000a74:	40020800 	.word	0x40020800
 8000a78:	40020000 	.word	0x40020000

08000a7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a80:	b672      	cpsid	i
}
 8000a82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a84:	bf00      	nop
 8000a86:	e7fd      	b.n	8000a84 <Error_Handler+0x8>

08000a88 <lora_init>:
uint8_t uart_rx_buffer[100];
uint8_t uart6passwotd[14];

LoRaConfig_t lora_config;

void lora_init() {
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
    lora_config.receiver_id = get_id();
 8000a8c:	f000 f84c 	bl	8000b28 <get_id>
 8000a90:	4603      	mov	r3, r0
 8000a92:	461a      	mov	r2, r3
 8000a94:	4b0a      	ldr	r3, [pc, #40]	@ (8000ac0 <lora_init+0x38>)
 8000a96:	809a      	strh	r2, [r3, #4]
    lora_config.receiver_addr = get_address();
 8000a98:	f000 f878 	bl	8000b8c <get_address>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	461a      	mov	r2, r3
 8000aa0:	4b07      	ldr	r3, [pc, #28]	@ (8000ac0 <lora_init+0x38>)
 8000aa2:	80da      	strh	r2, [r3, #6]

    HAL_UART_Transmit(&huart1, LORA_AT_BAND, sizeof(LORA_AT_BAND)-1, 100);
 8000aa4:	2364      	movs	r3, #100	@ 0x64
 8000aa6:	2213      	movs	r2, #19
 8000aa8:	4906      	ldr	r1, [pc, #24]	@ (8000ac4 <lora_init+0x3c>)
 8000aaa:	4807      	ldr	r0, [pc, #28]	@ (8000ac8 <lora_init+0x40>)
 8000aac:	f001 ff6c 	bl	8002988 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, LORA_AT_PWD, sizeof(LORA_AT_PWD)-1, 100);
 8000ab0:	2364      	movs	r3, #100	@ 0x64
 8000ab2:	2218      	movs	r2, #24
 8000ab4:	4905      	ldr	r1, [pc, #20]	@ (8000acc <lora_init+0x44>)
 8000ab6:	4804      	ldr	r0, [pc, #16]	@ (8000ac8 <lora_init+0x40>)
 8000ab8:	f001 ff66 	bl	8002988 <HAL_UART_Transmit>
}
 8000abc:	bf00      	nop
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	200001b0 	.word	0x200001b0
 8000ac4:	08004598 	.word	0x08004598
 8000ac8:	20000168 	.word	0x20000168
 8000acc:	080045ac 	.word	0x080045ac

08000ad0 <lora_send_char>:
    char data = 0;
    sscanf(message, "+RCV=%d,%d,%c,%d,%*d", &address, &length, &data, &rssi);
    return (uint8_t)data;
}

void lora_send_char(uint8_t data) {
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b090      	sub	sp, #64	@ 0x40
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	71fb      	strb	r3, [r7, #7]
    char buffer[50] = {0};
 8000ada:	f107 030c 	add.w	r3, r7, #12
 8000ade:	2232      	movs	r2, #50	@ 0x32
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f002 fc6e 	bl	80033c4 <memset>
    sprintf(buffer, "AT+SEND=%d,1,%c\r\n", lora_config.receiver_addr, data);
 8000ae8:	4b0c      	ldr	r3, [pc, #48]	@ (8000b1c <lora_send_char+0x4c>)
 8000aea:	88db      	ldrh	r3, [r3, #6]
 8000aec:	461a      	mov	r2, r3
 8000aee:	79fb      	ldrb	r3, [r7, #7]
 8000af0:	f107 000c 	add.w	r0, r7, #12
 8000af4:	490a      	ldr	r1, [pc, #40]	@ (8000b20 <lora_send_char+0x50>)
 8000af6:	f002 fc15 	bl	8003324 <siprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 100);
 8000afa:	f107 030c 	add.w	r3, r7, #12
 8000afe:	4618      	mov	r0, r3
 8000b00:	f7ff fb66 	bl	80001d0 <strlen>
 8000b04:	4603      	mov	r3, r0
 8000b06:	b29a      	uxth	r2, r3
 8000b08:	f107 010c 	add.w	r1, r7, #12
 8000b0c:	2364      	movs	r3, #100	@ 0x64
 8000b0e:	4805      	ldr	r0, [pc, #20]	@ (8000b24 <lora_send_char+0x54>)
 8000b10:	f001 ff3a 	bl	8002988 <HAL_UART_Transmit>
}
 8000b14:	bf00      	nop
 8000b16:	3740      	adds	r7, #64	@ 0x40
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	200001b0 	.word	0x200001b0
 8000b20:	080044fc 	.word	0x080044fc
 8000b24:	20000168 	.word	0x20000168

08000b28 <get_id>:
    char buffer[250] = {0};
    sprintf(buffer, "AT+SEND=%d,%d,%s\r\n", lora_config.receiver_addr, len, pdata);
    HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 100);
}

uint16_t get_id() {
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b088      	sub	sp, #32
 8000b2c:	af00      	add	r7, sp, #0
    char buffer[25] = {0};
 8000b2e:	1d3b      	adds	r3, r7, #4
 8000b30:	2200      	movs	r2, #0
 8000b32:	601a      	str	r2, [r3, #0]
 8000b34:	605a      	str	r2, [r3, #4]
 8000b36:	609a      	str	r2, [r3, #8]
 8000b38:	60da      	str	r2, [r3, #12]
 8000b3a:	611a      	str	r2, [r3, #16]
 8000b3c:	615a      	str	r2, [r3, #20]
 8000b3e:	761a      	strb	r2, [r3, #24]
    uint16_t id = 0;
 8000b40:	2300      	movs	r3, #0
 8000b42:	807b      	strh	r3, [r7, #2]

    HAL_UART_Transmit(&huart1, LORA_AT_GETID, sizeof(LORA_AT_GETID)-1, 100);
 8000b44:	2364      	movs	r3, #100	@ 0x64
 8000b46:	220e      	movs	r2, #14
 8000b48:	490c      	ldr	r1, [pc, #48]	@ (8000b7c <get_id+0x54>)
 8000b4a:	480d      	ldr	r0, [pc, #52]	@ (8000b80 <get_id+0x58>)
 8000b4c:	f001 ff1c 	bl	8002988 <HAL_UART_Transmit>
    HAL_UART_Receive(&huart1, (uint8_t*)buffer, sizeof(buffer), 100);
 8000b50:	1d39      	adds	r1, r7, #4
 8000b52:	2364      	movs	r3, #100	@ 0x64
 8000b54:	2219      	movs	r2, #25
 8000b56:	480a      	ldr	r0, [pc, #40]	@ (8000b80 <get_id+0x58>)
 8000b58:	f001 ffa1 	bl	8002a9e <HAL_UART_Receive>

    sscanf(buffer, "+NETWORKID=%hu", &id);
 8000b5c:	1cba      	adds	r2, r7, #2
 8000b5e:	1d3b      	adds	r3, r7, #4
 8000b60:	4908      	ldr	r1, [pc, #32]	@ (8000b84 <get_id+0x5c>)
 8000b62:	4618      	mov	r0, r3
 8000b64:	f002 fc00 	bl	8003368 <siscanf>
    lora_config.id = id;
 8000b68:	887a      	ldrh	r2, [r7, #2]
 8000b6a:	4b07      	ldr	r3, [pc, #28]	@ (8000b88 <get_id+0x60>)
 8000b6c:	801a      	strh	r2, [r3, #0]

    return (IAM == LORA_ROLE_TRANSMITTER) ? id + 1 : id - 1;
 8000b6e:	887b      	ldrh	r3, [r7, #2]
 8000b70:	3b01      	subs	r3, #1
 8000b72:	b29b      	uxth	r3, r3
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	3720      	adds	r7, #32
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	080045c8 	.word	0x080045c8
 8000b80:	20000168 	.word	0x20000168
 8000b84:	08004524 	.word	0x08004524
 8000b88:	200001b0 	.word	0x200001b0

08000b8c <get_address>:

uint16_t get_address() {
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b088      	sub	sp, #32
 8000b90:	af00      	add	r7, sp, #0
    char buffer[25] = {0};
 8000b92:	1d3b      	adds	r3, r7, #4
 8000b94:	2200      	movs	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
 8000b98:	605a      	str	r2, [r3, #4]
 8000b9a:	609a      	str	r2, [r3, #8]
 8000b9c:	60da      	str	r2, [r3, #12]
 8000b9e:	611a      	str	r2, [r3, #16]
 8000ba0:	615a      	str	r2, [r3, #20]
 8000ba2:	761a      	strb	r2, [r3, #24]
    uint16_t addr = 0;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	807b      	strh	r3, [r7, #2]

    HAL_UART_Transmit(&huart1, LORA_AT_GETADDR, sizeof(LORA_AT_GETADDR)-1, 100);
 8000ba8:	2364      	movs	r3, #100	@ 0x64
 8000baa:	220c      	movs	r2, #12
 8000bac:	490c      	ldr	r1, [pc, #48]	@ (8000be0 <get_address+0x54>)
 8000bae:	480d      	ldr	r0, [pc, #52]	@ (8000be4 <get_address+0x58>)
 8000bb0:	f001 feea 	bl	8002988 <HAL_UART_Transmit>
    HAL_UART_Receive(&huart1, (uint8_t*)buffer, sizeof(buffer), 100);
 8000bb4:	1d39      	adds	r1, r7, #4
 8000bb6:	2364      	movs	r3, #100	@ 0x64
 8000bb8:	2219      	movs	r2, #25
 8000bba:	480a      	ldr	r0, [pc, #40]	@ (8000be4 <get_address+0x58>)
 8000bbc:	f001 ff6f 	bl	8002a9e <HAL_UART_Receive>

    sscanf(buffer, "+ADDRESS=%hu", &addr);
 8000bc0:	1cba      	adds	r2, r7, #2
 8000bc2:	1d3b      	adds	r3, r7, #4
 8000bc4:	4908      	ldr	r1, [pc, #32]	@ (8000be8 <get_address+0x5c>)
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f002 fbce 	bl	8003368 <siscanf>
    lora_config.addr = addr;
 8000bcc:	887a      	ldrh	r2, [r7, #2]
 8000bce:	4b07      	ldr	r3, [pc, #28]	@ (8000bec <get_address+0x60>)
 8000bd0:	805a      	strh	r2, [r3, #2]

    return (IAM == LORA_ROLE_TRANSMITTER) ? addr + 1 : addr - 1;
 8000bd2:	887b      	ldrh	r3, [r7, #2]
 8000bd4:	3b01      	subs	r3, #1
 8000bd6:	b29b      	uxth	r3, r3
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	3720      	adds	r7, #32
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	080045d8 	.word	0x080045d8
 8000be4:	20000168 	.word	0x20000168
 8000be8:	08004534 	.word	0x08004534
 8000bec:	200001b0 	.word	0x200001b0

08000bf0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b083      	sub	sp, #12
 8000bf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	607b      	str	r3, [r7, #4]
 8000bfa:	4b10      	ldr	r3, [pc, #64]	@ (8000c3c <HAL_MspInit+0x4c>)
 8000bfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bfe:	4a0f      	ldr	r2, [pc, #60]	@ (8000c3c <HAL_MspInit+0x4c>)
 8000c00:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c04:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c06:	4b0d      	ldr	r3, [pc, #52]	@ (8000c3c <HAL_MspInit+0x4c>)
 8000c08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c0e:	607b      	str	r3, [r7, #4]
 8000c10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c12:	2300      	movs	r3, #0
 8000c14:	603b      	str	r3, [r7, #0]
 8000c16:	4b09      	ldr	r3, [pc, #36]	@ (8000c3c <HAL_MspInit+0x4c>)
 8000c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c1a:	4a08      	ldr	r2, [pc, #32]	@ (8000c3c <HAL_MspInit+0x4c>)
 8000c1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c20:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c22:	4b06      	ldr	r3, [pc, #24]	@ (8000c3c <HAL_MspInit+0x4c>)
 8000c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c2a:	603b      	str	r3, [r7, #0]
 8000c2c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c2e:	bf00      	nop
 8000c30:	370c      	adds	r7, #12
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	40023800 	.word	0x40023800

08000c40 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b08a      	sub	sp, #40	@ 0x28
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c48:	f107 0314 	add.w	r3, r7, #20
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	601a      	str	r2, [r3, #0]
 8000c50:	605a      	str	r2, [r3, #4]
 8000c52:	609a      	str	r2, [r3, #8]
 8000c54:	60da      	str	r2, [r3, #12]
 8000c56:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a19      	ldr	r2, [pc, #100]	@ (8000cc4 <HAL_SPI_MspInit+0x84>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d12b      	bne.n	8000cba <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c62:	2300      	movs	r3, #0
 8000c64:	613b      	str	r3, [r7, #16]
 8000c66:	4b18      	ldr	r3, [pc, #96]	@ (8000cc8 <HAL_SPI_MspInit+0x88>)
 8000c68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c6a:	4a17      	ldr	r2, [pc, #92]	@ (8000cc8 <HAL_SPI_MspInit+0x88>)
 8000c6c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000c70:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c72:	4b15      	ldr	r3, [pc, #84]	@ (8000cc8 <HAL_SPI_MspInit+0x88>)
 8000c74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c76:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c7a:	613b      	str	r3, [r7, #16]
 8000c7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c7e:	2300      	movs	r3, #0
 8000c80:	60fb      	str	r3, [r7, #12]
 8000c82:	4b11      	ldr	r3, [pc, #68]	@ (8000cc8 <HAL_SPI_MspInit+0x88>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c86:	4a10      	ldr	r2, [pc, #64]	@ (8000cc8 <HAL_SPI_MspInit+0x88>)
 8000c88:	f043 0301 	orr.w	r3, r3, #1
 8000c8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c8e:	4b0e      	ldr	r3, [pc, #56]	@ (8000cc8 <HAL_SPI_MspInit+0x88>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c92:	f003 0301 	and.w	r3, r3, #1
 8000c96:	60fb      	str	r3, [r7, #12]
 8000c98:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000c9a:	23a0      	movs	r3, #160	@ 0xa0
 8000c9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9e:	2302      	movs	r3, #2
 8000ca0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca6:	2303      	movs	r3, #3
 8000ca8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000caa:	2305      	movs	r3, #5
 8000cac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cae:	f107 0314 	add.w	r3, r7, #20
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4805      	ldr	r0, [pc, #20]	@ (8000ccc <HAL_SPI_MspInit+0x8c>)
 8000cb6:	f000 fb6b 	bl	8001390 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000cba:	bf00      	nop
 8000cbc:	3728      	adds	r7, #40	@ 0x28
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	40013000 	.word	0x40013000
 8000cc8:	40023800 	.word	0x40023800
 8000ccc:	40020000 	.word	0x40020000

08000cd0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b084      	sub	sp, #16
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000ce0:	d115      	bne.n	8000d0e <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	60fb      	str	r3, [r7, #12]
 8000ce6:	4b0c      	ldr	r3, [pc, #48]	@ (8000d18 <HAL_TIM_Base_MspInit+0x48>)
 8000ce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cea:	4a0b      	ldr	r2, [pc, #44]	@ (8000d18 <HAL_TIM_Base_MspInit+0x48>)
 8000cec:	f043 0301 	orr.w	r3, r3, #1
 8000cf0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cf2:	4b09      	ldr	r3, [pc, #36]	@ (8000d18 <HAL_TIM_Base_MspInit+0x48>)
 8000cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cf6:	f003 0301 	and.w	r3, r3, #1
 8000cfa:	60fb      	str	r3, [r7, #12]
 8000cfc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000cfe:	2200      	movs	r2, #0
 8000d00:	2100      	movs	r1, #0
 8000d02:	201c      	movs	r0, #28
 8000d04:	f000 faff 	bl	8001306 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000d08:	201c      	movs	r0, #28
 8000d0a:	f000 fb18 	bl	800133e <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000d0e:	bf00      	nop
 8000d10:	3710      	adds	r7, #16
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	40023800 	.word	0x40023800

08000d1c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b08c      	sub	sp, #48	@ 0x30
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d24:	f107 031c 	add.w	r3, r7, #28
 8000d28:	2200      	movs	r2, #0
 8000d2a:	601a      	str	r2, [r3, #0]
 8000d2c:	605a      	str	r2, [r3, #4]
 8000d2e:	609a      	str	r2, [r3, #8]
 8000d30:	60da      	str	r2, [r3, #12]
 8000d32:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a42      	ldr	r2, [pc, #264]	@ (8000e44 <HAL_UART_MspInit+0x128>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d14b      	bne.n	8000dd6 <HAL_UART_MspInit+0xba>
  {
    /* USER CODE BEGIN UART5_MspInit 0 */

    /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8000d3e:	2300      	movs	r3, #0
 8000d40:	61bb      	str	r3, [r7, #24]
 8000d42:	4b41      	ldr	r3, [pc, #260]	@ (8000e48 <HAL_UART_MspInit+0x12c>)
 8000d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d46:	4a40      	ldr	r2, [pc, #256]	@ (8000e48 <HAL_UART_MspInit+0x12c>)
 8000d48:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000d4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d4e:	4b3e      	ldr	r3, [pc, #248]	@ (8000e48 <HAL_UART_MspInit+0x12c>)
 8000d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d52:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000d56:	61bb      	str	r3, [r7, #24]
 8000d58:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	617b      	str	r3, [r7, #20]
 8000d5e:	4b3a      	ldr	r3, [pc, #232]	@ (8000e48 <HAL_UART_MspInit+0x12c>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d62:	4a39      	ldr	r2, [pc, #228]	@ (8000e48 <HAL_UART_MspInit+0x12c>)
 8000d64:	f043 0304 	orr.w	r3, r3, #4
 8000d68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d6a:	4b37      	ldr	r3, [pc, #220]	@ (8000e48 <HAL_UART_MspInit+0x12c>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d6e:	f003 0304 	and.w	r3, r3, #4
 8000d72:	617b      	str	r3, [r7, #20]
 8000d74:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d76:	2300      	movs	r3, #0
 8000d78:	613b      	str	r3, [r7, #16]
 8000d7a:	4b33      	ldr	r3, [pc, #204]	@ (8000e48 <HAL_UART_MspInit+0x12c>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d7e:	4a32      	ldr	r2, [pc, #200]	@ (8000e48 <HAL_UART_MspInit+0x12c>)
 8000d80:	f043 0308 	orr.w	r3, r3, #8
 8000d84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d86:	4b30      	ldr	r3, [pc, #192]	@ (8000e48 <HAL_UART_MspInit+0x12c>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d8a:	f003 0308 	and.w	r3, r3, #8
 8000d8e:	613b      	str	r3, [r7, #16]
 8000d90:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000d92:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d98:	2302      	movs	r3, #2
 8000d9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da0:	2303      	movs	r3, #3
 8000da2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000da4:	2308      	movs	r3, #8
 8000da6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000da8:	f107 031c 	add.w	r3, r7, #28
 8000dac:	4619      	mov	r1, r3
 8000dae:	4827      	ldr	r0, [pc, #156]	@ (8000e4c <HAL_UART_MspInit+0x130>)
 8000db0:	f000 faee 	bl	8001390 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000db4:	2304      	movs	r3, #4
 8000db6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db8:	2302      	movs	r3, #2
 8000dba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dc0:	2303      	movs	r3, #3
 8000dc2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000dc4:	2308      	movs	r3, #8
 8000dc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dc8:	f107 031c 	add.w	r3, r7, #28
 8000dcc:	4619      	mov	r1, r3
 8000dce:	4820      	ldr	r0, [pc, #128]	@ (8000e50 <HAL_UART_MspInit+0x134>)
 8000dd0:	f000 fade 	bl	8001390 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART1_MspInit 1 */

    /* USER CODE END USART1_MspInit 1 */
  }

}
 8000dd4:	e031      	b.n	8000e3a <HAL_UART_MspInit+0x11e>
  else if(huart->Instance==USART1)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4a1e      	ldr	r2, [pc, #120]	@ (8000e54 <HAL_UART_MspInit+0x138>)
 8000ddc:	4293      	cmp	r3, r2
 8000dde:	d12c      	bne.n	8000e3a <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000de0:	2300      	movs	r3, #0
 8000de2:	60fb      	str	r3, [r7, #12]
 8000de4:	4b18      	ldr	r3, [pc, #96]	@ (8000e48 <HAL_UART_MspInit+0x12c>)
 8000de6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000de8:	4a17      	ldr	r2, [pc, #92]	@ (8000e48 <HAL_UART_MspInit+0x12c>)
 8000dea:	f043 0310 	orr.w	r3, r3, #16
 8000dee:	6453      	str	r3, [r2, #68]	@ 0x44
 8000df0:	4b15      	ldr	r3, [pc, #84]	@ (8000e48 <HAL_UART_MspInit+0x12c>)
 8000df2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000df4:	f003 0310 	and.w	r3, r3, #16
 8000df8:	60fb      	str	r3, [r7, #12]
 8000dfa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	60bb      	str	r3, [r7, #8]
 8000e00:	4b11      	ldr	r3, [pc, #68]	@ (8000e48 <HAL_UART_MspInit+0x12c>)
 8000e02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e04:	4a10      	ldr	r2, [pc, #64]	@ (8000e48 <HAL_UART_MspInit+0x12c>)
 8000e06:	f043 0301 	orr.w	r3, r3, #1
 8000e0a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e0c:	4b0e      	ldr	r3, [pc, #56]	@ (8000e48 <HAL_UART_MspInit+0x12c>)
 8000e0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e10:	f003 0301 	and.w	r3, r3, #1
 8000e14:	60bb      	str	r3, [r7, #8]
 8000e16:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000e18:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000e1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1e:	2302      	movs	r3, #2
 8000e20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e22:	2300      	movs	r3, #0
 8000e24:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e26:	2303      	movs	r3, #3
 8000e28:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e2a:	2307      	movs	r3, #7
 8000e2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e2e:	f107 031c 	add.w	r3, r7, #28
 8000e32:	4619      	mov	r1, r3
 8000e34:	4808      	ldr	r0, [pc, #32]	@ (8000e58 <HAL_UART_MspInit+0x13c>)
 8000e36:	f000 faab 	bl	8001390 <HAL_GPIO_Init>
}
 8000e3a:	bf00      	nop
 8000e3c:	3730      	adds	r7, #48	@ 0x30
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	40005000 	.word	0x40005000
 8000e48:	40023800 	.word	0x40023800
 8000e4c:	40020800 	.word	0x40020800
 8000e50:	40020c00 	.word	0x40020c00
 8000e54:	40011000 	.word	0x40011000
 8000e58:	40020000 	.word	0x40020000

08000e5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e60:	bf00      	nop
 8000e62:	e7fd      	b.n	8000e60 <NMI_Handler+0x4>

08000e64 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e68:	bf00      	nop
 8000e6a:	e7fd      	b.n	8000e68 <HardFault_Handler+0x4>

08000e6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e70:	bf00      	nop
 8000e72:	e7fd      	b.n	8000e70 <MemManage_Handler+0x4>

08000e74 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e78:	bf00      	nop
 8000e7a:	e7fd      	b.n	8000e78 <BusFault_Handler+0x4>

08000e7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e80:	bf00      	nop
 8000e82:	e7fd      	b.n	8000e80 <UsageFault_Handler+0x4>

08000e84 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e88:	bf00      	nop
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr

08000e92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e92:	b480      	push	{r7}
 8000e94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e96:	bf00      	nop
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr

08000ea0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ea4:	bf00      	nop
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr

08000eae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eae:	b580      	push	{r7, lr}
 8000eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000eb2:	f000 f8e5 	bl	8001080 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eb6:	bf00      	nop
 8000eb8:	bd80      	pop	{r7, pc}

08000eba <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000eba:	b580      	push	{r7, lr}
 8000ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CONT_Pin);
 8000ebe:	2001      	movs	r0, #1
 8000ec0:	f000 fc1a 	bl	80016f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000ec4:	bf00      	nop
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DISC_Pin);
 8000ecc:	2002      	movs	r0, #2
 8000ece:	f000 fc13 	bl	80016f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	bd80      	pop	{r7, pc}

08000ed6 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000ed6:	b580      	push	{r7, lr}
 8000ed8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(STOP_WATCH_Pin);
 8000eda:	2010      	movs	r0, #16
 8000edc:	f000 fc0c 	bl	80016f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000ee0:	bf00      	nop
 8000ee2:	bd80      	pop	{r7, pc}

08000ee4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ee8:	4802      	ldr	r0, [pc, #8]	@ (8000ef4 <TIM2_IRQHandler+0x10>)
 8000eea:	f001 f94d 	bl	8002188 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000eee:	bf00      	nop
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	200000d8 	.word	0x200000d8

08000ef8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b086      	sub	sp, #24
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f00:	4a14      	ldr	r2, [pc, #80]	@ (8000f54 <_sbrk+0x5c>)
 8000f02:	4b15      	ldr	r3, [pc, #84]	@ (8000f58 <_sbrk+0x60>)
 8000f04:	1ad3      	subs	r3, r2, r3
 8000f06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f0c:	4b13      	ldr	r3, [pc, #76]	@ (8000f5c <_sbrk+0x64>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d102      	bne.n	8000f1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f14:	4b11      	ldr	r3, [pc, #68]	@ (8000f5c <_sbrk+0x64>)
 8000f16:	4a12      	ldr	r2, [pc, #72]	@ (8000f60 <_sbrk+0x68>)
 8000f18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f1a:	4b10      	ldr	r3, [pc, #64]	@ (8000f5c <_sbrk+0x64>)
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4413      	add	r3, r2
 8000f22:	693a      	ldr	r2, [r7, #16]
 8000f24:	429a      	cmp	r2, r3
 8000f26:	d207      	bcs.n	8000f38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f28:	f002 fa54 	bl	80033d4 <__errno>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	220c      	movs	r2, #12
 8000f30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f32:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f36:	e009      	b.n	8000f4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f38:	4b08      	ldr	r3, [pc, #32]	@ (8000f5c <_sbrk+0x64>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f3e:	4b07      	ldr	r3, [pc, #28]	@ (8000f5c <_sbrk+0x64>)
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	4413      	add	r3, r2
 8000f46:	4a05      	ldr	r2, [pc, #20]	@ (8000f5c <_sbrk+0x64>)
 8000f48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f4a:	68fb      	ldr	r3, [r7, #12]
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	3718      	adds	r7, #24
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	20020000 	.word	0x20020000
 8000f58:	00000400 	.word	0x00000400
 8000f5c:	200001d4 	.word	0x200001d4
 8000f60:	20000328 	.word	0x20000328

08000f64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f68:	4b06      	ldr	r3, [pc, #24]	@ (8000f84 <SystemInit+0x20>)
 8000f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f6e:	4a05      	ldr	r2, [pc, #20]	@ (8000f84 <SystemInit+0x20>)
 8000f70:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f74:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f78:	bf00      	nop
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	e000ed00 	.word	0xe000ed00

08000f88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000f88:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000fc0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000f8c:	f7ff ffea 	bl	8000f64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f90:	480c      	ldr	r0, [pc, #48]	@ (8000fc4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f92:	490d      	ldr	r1, [pc, #52]	@ (8000fc8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f94:	4a0d      	ldr	r2, [pc, #52]	@ (8000fcc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f98:	e002      	b.n	8000fa0 <LoopCopyDataInit>

08000f9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f9e:	3304      	adds	r3, #4

08000fa0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fa0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fa2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fa4:	d3f9      	bcc.n	8000f9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fa6:	4a0a      	ldr	r2, [pc, #40]	@ (8000fd0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fa8:	4c0a      	ldr	r4, [pc, #40]	@ (8000fd4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000faa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fac:	e001      	b.n	8000fb2 <LoopFillZerobss>

08000fae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fb0:	3204      	adds	r2, #4

08000fb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fb4:	d3fb      	bcc.n	8000fae <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000fb6:	f002 fa13 	bl	80033e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fba:	f7ff fb95 	bl	80006e8 <main>
  bx  lr    
 8000fbe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000fc0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fc8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000fcc:	08004760 	.word	0x08004760
  ldr r2, =_sbss
 8000fd0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000fd4:	20000324 	.word	0x20000324

08000fd8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fd8:	e7fe      	b.n	8000fd8 <ADC_IRQHandler>
	...

08000fdc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fe0:	4b0e      	ldr	r3, [pc, #56]	@ (800101c <HAL_Init+0x40>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a0d      	ldr	r2, [pc, #52]	@ (800101c <HAL_Init+0x40>)
 8000fe6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000fea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fec:	4b0b      	ldr	r3, [pc, #44]	@ (800101c <HAL_Init+0x40>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a0a      	ldr	r2, [pc, #40]	@ (800101c <HAL_Init+0x40>)
 8000ff2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ff6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ff8:	4b08      	ldr	r3, [pc, #32]	@ (800101c <HAL_Init+0x40>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a07      	ldr	r2, [pc, #28]	@ (800101c <HAL_Init+0x40>)
 8000ffe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001002:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001004:	2003      	movs	r0, #3
 8001006:	f000 f973 	bl	80012f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800100a:	200f      	movs	r0, #15
 800100c:	f000 f808 	bl	8001020 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001010:	f7ff fdee 	bl	8000bf0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001014:	2300      	movs	r3, #0
}
 8001016:	4618      	mov	r0, r3
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	40023c00 	.word	0x40023c00

08001020 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001028:	4b12      	ldr	r3, [pc, #72]	@ (8001074 <HAL_InitTick+0x54>)
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	4b12      	ldr	r3, [pc, #72]	@ (8001078 <HAL_InitTick+0x58>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	4619      	mov	r1, r3
 8001032:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001036:	fbb3 f3f1 	udiv	r3, r3, r1
 800103a:	fbb2 f3f3 	udiv	r3, r2, r3
 800103e:	4618      	mov	r0, r3
 8001040:	f000 f999 	bl	8001376 <HAL_SYSTICK_Config>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800104a:	2301      	movs	r3, #1
 800104c:	e00e      	b.n	800106c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2b0f      	cmp	r3, #15
 8001052:	d80a      	bhi.n	800106a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001054:	2200      	movs	r2, #0
 8001056:	6879      	ldr	r1, [r7, #4]
 8001058:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800105c:	f000 f953 	bl	8001306 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001060:	4a06      	ldr	r2, [pc, #24]	@ (800107c <HAL_InitTick+0x5c>)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001066:	2300      	movs	r3, #0
 8001068:	e000      	b.n	800106c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800106a:	2301      	movs	r3, #1
}
 800106c:	4618      	mov	r0, r3
 800106e:	3708      	adds	r7, #8
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	20000000 	.word	0x20000000
 8001078:	20000008 	.word	0x20000008
 800107c:	20000004 	.word	0x20000004

08001080 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001084:	4b06      	ldr	r3, [pc, #24]	@ (80010a0 <HAL_IncTick+0x20>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	461a      	mov	r2, r3
 800108a:	4b06      	ldr	r3, [pc, #24]	@ (80010a4 <HAL_IncTick+0x24>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4413      	add	r3, r2
 8001090:	4a04      	ldr	r2, [pc, #16]	@ (80010a4 <HAL_IncTick+0x24>)
 8001092:	6013      	str	r3, [r2, #0]
}
 8001094:	bf00      	nop
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	20000008 	.word	0x20000008
 80010a4:	200001d8 	.word	0x200001d8

080010a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  return uwTick;
 80010ac:	4b03      	ldr	r3, [pc, #12]	@ (80010bc <HAL_GetTick+0x14>)
 80010ae:	681b      	ldr	r3, [r3, #0]
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	200001d8 	.word	0x200001d8

080010c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010c8:	f7ff ffee 	bl	80010a8 <HAL_GetTick>
 80010cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80010d8:	d005      	beq.n	80010e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010da:	4b0a      	ldr	r3, [pc, #40]	@ (8001104 <HAL_Delay+0x44>)
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	461a      	mov	r2, r3
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	4413      	add	r3, r2
 80010e4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010e6:	bf00      	nop
 80010e8:	f7ff ffde 	bl	80010a8 <HAL_GetTick>
 80010ec:	4602      	mov	r2, r0
 80010ee:	68bb      	ldr	r3, [r7, #8]
 80010f0:	1ad3      	subs	r3, r2, r3
 80010f2:	68fa      	ldr	r2, [r7, #12]
 80010f4:	429a      	cmp	r2, r3
 80010f6:	d8f7      	bhi.n	80010e8 <HAL_Delay+0x28>
  {
  }
}
 80010f8:	bf00      	nop
 80010fa:	bf00      	nop
 80010fc:	3710      	adds	r7, #16
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	20000008 	.word	0x20000008

08001108 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001108:	b480      	push	{r7}
 800110a:	b085      	sub	sp, #20
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	f003 0307 	and.w	r3, r3, #7
 8001116:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001118:	4b0c      	ldr	r3, [pc, #48]	@ (800114c <__NVIC_SetPriorityGrouping+0x44>)
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800111e:	68ba      	ldr	r2, [r7, #8]
 8001120:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001124:	4013      	ands	r3, r2
 8001126:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800112c:	68bb      	ldr	r3, [r7, #8]
 800112e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001130:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001134:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001138:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800113a:	4a04      	ldr	r2, [pc, #16]	@ (800114c <__NVIC_SetPriorityGrouping+0x44>)
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	60d3      	str	r3, [r2, #12]
}
 8001140:	bf00      	nop
 8001142:	3714      	adds	r7, #20
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr
 800114c:	e000ed00 	.word	0xe000ed00

08001150 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001154:	4b04      	ldr	r3, [pc, #16]	@ (8001168 <__NVIC_GetPriorityGrouping+0x18>)
 8001156:	68db      	ldr	r3, [r3, #12]
 8001158:	0a1b      	lsrs	r3, r3, #8
 800115a:	f003 0307 	and.w	r3, r3, #7
}
 800115e:	4618      	mov	r0, r3
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr
 8001168:	e000ed00 	.word	0xe000ed00

0800116c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
 8001172:	4603      	mov	r3, r0
 8001174:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117a:	2b00      	cmp	r3, #0
 800117c:	db0b      	blt.n	8001196 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800117e:	79fb      	ldrb	r3, [r7, #7]
 8001180:	f003 021f 	and.w	r2, r3, #31
 8001184:	4907      	ldr	r1, [pc, #28]	@ (80011a4 <__NVIC_EnableIRQ+0x38>)
 8001186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118a:	095b      	lsrs	r3, r3, #5
 800118c:	2001      	movs	r0, #1
 800118e:	fa00 f202 	lsl.w	r2, r0, r2
 8001192:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001196:	bf00      	nop
 8001198:	370c      	adds	r7, #12
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	e000e100 	.word	0xe000e100

080011a8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	4603      	mov	r3, r0
 80011b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	db12      	blt.n	80011e0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011ba:	79fb      	ldrb	r3, [r7, #7]
 80011bc:	f003 021f 	and.w	r2, r3, #31
 80011c0:	490a      	ldr	r1, [pc, #40]	@ (80011ec <__NVIC_DisableIRQ+0x44>)
 80011c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c6:	095b      	lsrs	r3, r3, #5
 80011c8:	2001      	movs	r0, #1
 80011ca:	fa00 f202 	lsl.w	r2, r0, r2
 80011ce:	3320      	adds	r3, #32
 80011d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80011d4:	f3bf 8f4f 	dsb	sy
}
 80011d8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80011da:	f3bf 8f6f 	isb	sy
}
 80011de:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80011e0:	bf00      	nop
 80011e2:	370c      	adds	r7, #12
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr
 80011ec:	e000e100 	.word	0xe000e100

080011f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	4603      	mov	r3, r0
 80011f8:	6039      	str	r1, [r7, #0]
 80011fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001200:	2b00      	cmp	r3, #0
 8001202:	db0a      	blt.n	800121a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	b2da      	uxtb	r2, r3
 8001208:	490c      	ldr	r1, [pc, #48]	@ (800123c <__NVIC_SetPriority+0x4c>)
 800120a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120e:	0112      	lsls	r2, r2, #4
 8001210:	b2d2      	uxtb	r2, r2
 8001212:	440b      	add	r3, r1
 8001214:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001218:	e00a      	b.n	8001230 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	b2da      	uxtb	r2, r3
 800121e:	4908      	ldr	r1, [pc, #32]	@ (8001240 <__NVIC_SetPriority+0x50>)
 8001220:	79fb      	ldrb	r3, [r7, #7]
 8001222:	f003 030f 	and.w	r3, r3, #15
 8001226:	3b04      	subs	r3, #4
 8001228:	0112      	lsls	r2, r2, #4
 800122a:	b2d2      	uxtb	r2, r2
 800122c:	440b      	add	r3, r1
 800122e:	761a      	strb	r2, [r3, #24]
}
 8001230:	bf00      	nop
 8001232:	370c      	adds	r7, #12
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr
 800123c:	e000e100 	.word	0xe000e100
 8001240:	e000ed00 	.word	0xe000ed00

08001244 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001244:	b480      	push	{r7}
 8001246:	b089      	sub	sp, #36	@ 0x24
 8001248:	af00      	add	r7, sp, #0
 800124a:	60f8      	str	r0, [r7, #12]
 800124c:	60b9      	str	r1, [r7, #8]
 800124e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	f003 0307 	and.w	r3, r3, #7
 8001256:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001258:	69fb      	ldr	r3, [r7, #28]
 800125a:	f1c3 0307 	rsb	r3, r3, #7
 800125e:	2b04      	cmp	r3, #4
 8001260:	bf28      	it	cs
 8001262:	2304      	movcs	r3, #4
 8001264:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	3304      	adds	r3, #4
 800126a:	2b06      	cmp	r3, #6
 800126c:	d902      	bls.n	8001274 <NVIC_EncodePriority+0x30>
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	3b03      	subs	r3, #3
 8001272:	e000      	b.n	8001276 <NVIC_EncodePriority+0x32>
 8001274:	2300      	movs	r3, #0
 8001276:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001278:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800127c:	69bb      	ldr	r3, [r7, #24]
 800127e:	fa02 f303 	lsl.w	r3, r2, r3
 8001282:	43da      	mvns	r2, r3
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	401a      	ands	r2, r3
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800128c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	fa01 f303 	lsl.w	r3, r1, r3
 8001296:	43d9      	mvns	r1, r3
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800129c:	4313      	orrs	r3, r2
         );
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3724      	adds	r7, #36	@ 0x24
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
	...

080012ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	3b01      	subs	r3, #1
 80012b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012bc:	d301      	bcc.n	80012c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012be:	2301      	movs	r3, #1
 80012c0:	e00f      	b.n	80012e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012c2:	4a0a      	ldr	r2, [pc, #40]	@ (80012ec <SysTick_Config+0x40>)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	3b01      	subs	r3, #1
 80012c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012ca:	210f      	movs	r1, #15
 80012cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80012d0:	f7ff ff8e 	bl	80011f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012d4:	4b05      	ldr	r3, [pc, #20]	@ (80012ec <SysTick_Config+0x40>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012da:	4b04      	ldr	r3, [pc, #16]	@ (80012ec <SysTick_Config+0x40>)
 80012dc:	2207      	movs	r2, #7
 80012de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012e0:	2300      	movs	r3, #0
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	e000e010 	.word	0xe000e010

080012f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012f8:	6878      	ldr	r0, [r7, #4]
 80012fa:	f7ff ff05 	bl	8001108 <__NVIC_SetPriorityGrouping>
}
 80012fe:	bf00      	nop
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}

08001306 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001306:	b580      	push	{r7, lr}
 8001308:	b086      	sub	sp, #24
 800130a:	af00      	add	r7, sp, #0
 800130c:	4603      	mov	r3, r0
 800130e:	60b9      	str	r1, [r7, #8]
 8001310:	607a      	str	r2, [r7, #4]
 8001312:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001314:	2300      	movs	r3, #0
 8001316:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001318:	f7ff ff1a 	bl	8001150 <__NVIC_GetPriorityGrouping>
 800131c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800131e:	687a      	ldr	r2, [r7, #4]
 8001320:	68b9      	ldr	r1, [r7, #8]
 8001322:	6978      	ldr	r0, [r7, #20]
 8001324:	f7ff ff8e 	bl	8001244 <NVIC_EncodePriority>
 8001328:	4602      	mov	r2, r0
 800132a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800132e:	4611      	mov	r1, r2
 8001330:	4618      	mov	r0, r3
 8001332:	f7ff ff5d 	bl	80011f0 <__NVIC_SetPriority>
}
 8001336:	bf00      	nop
 8001338:	3718      	adds	r7, #24
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}

0800133e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800133e:	b580      	push	{r7, lr}
 8001340:	b082      	sub	sp, #8
 8001342:	af00      	add	r7, sp, #0
 8001344:	4603      	mov	r3, r0
 8001346:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001348:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff ff0d 	bl	800116c <__NVIC_EnableIRQ>
}
 8001352:	bf00      	nop
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}

0800135a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800135a:	b580      	push	{r7, lr}
 800135c:	b082      	sub	sp, #8
 800135e:	af00      	add	r7, sp, #0
 8001360:	4603      	mov	r3, r0
 8001362:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001364:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff ff1d 	bl	80011a8 <__NVIC_DisableIRQ>
}
 800136e:	bf00      	nop
 8001370:	3708      	adds	r7, #8
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}

08001376 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001376:	b580      	push	{r7, lr}
 8001378:	b082      	sub	sp, #8
 800137a:	af00      	add	r7, sp, #0
 800137c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800137e:	6878      	ldr	r0, [r7, #4]
 8001380:	f7ff ff94 	bl	80012ac <SysTick_Config>
 8001384:	4603      	mov	r3, r0
}
 8001386:	4618      	mov	r0, r3
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
	...

08001390 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001390:	b480      	push	{r7}
 8001392:	b089      	sub	sp, #36	@ 0x24
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800139a:	2300      	movs	r3, #0
 800139c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800139e:	2300      	movs	r3, #0
 80013a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013a2:	2300      	movs	r3, #0
 80013a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013a6:	2300      	movs	r3, #0
 80013a8:	61fb      	str	r3, [r7, #28]
 80013aa:	e16b      	b.n	8001684 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013ac:	2201      	movs	r2, #1
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	fa02 f303 	lsl.w	r3, r2, r3
 80013b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	697a      	ldr	r2, [r7, #20]
 80013bc:	4013      	ands	r3, r2
 80013be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013c0:	693a      	ldr	r2, [r7, #16]
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	429a      	cmp	r2, r3
 80013c6:	f040 815a 	bne.w	800167e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	f003 0303 	and.w	r3, r3, #3
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d005      	beq.n	80013e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013de:	2b02      	cmp	r3, #2
 80013e0:	d130      	bne.n	8001444 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013e8:	69fb      	ldr	r3, [r7, #28]
 80013ea:	005b      	lsls	r3, r3, #1
 80013ec:	2203      	movs	r2, #3
 80013ee:	fa02 f303 	lsl.w	r3, r2, r3
 80013f2:	43db      	mvns	r3, r3
 80013f4:	69ba      	ldr	r2, [r7, #24]
 80013f6:	4013      	ands	r3, r2
 80013f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	68da      	ldr	r2, [r3, #12]
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	005b      	lsls	r3, r3, #1
 8001402:	fa02 f303 	lsl.w	r3, r2, r3
 8001406:	69ba      	ldr	r2, [r7, #24]
 8001408:	4313      	orrs	r3, r2
 800140a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	69ba      	ldr	r2, [r7, #24]
 8001410:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001418:	2201      	movs	r2, #1
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	fa02 f303 	lsl.w	r3, r2, r3
 8001420:	43db      	mvns	r3, r3
 8001422:	69ba      	ldr	r2, [r7, #24]
 8001424:	4013      	ands	r3, r2
 8001426:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	091b      	lsrs	r3, r3, #4
 800142e:	f003 0201 	and.w	r2, r3, #1
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	fa02 f303 	lsl.w	r3, r2, r3
 8001438:	69ba      	ldr	r2, [r7, #24]
 800143a:	4313      	orrs	r3, r2
 800143c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f003 0303 	and.w	r3, r3, #3
 800144c:	2b03      	cmp	r3, #3
 800144e:	d017      	beq.n	8001480 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	005b      	lsls	r3, r3, #1
 800145a:	2203      	movs	r2, #3
 800145c:	fa02 f303 	lsl.w	r3, r2, r3
 8001460:	43db      	mvns	r3, r3
 8001462:	69ba      	ldr	r2, [r7, #24]
 8001464:	4013      	ands	r3, r2
 8001466:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	689a      	ldr	r2, [r3, #8]
 800146c:	69fb      	ldr	r3, [r7, #28]
 800146e:	005b      	lsls	r3, r3, #1
 8001470:	fa02 f303 	lsl.w	r3, r2, r3
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	4313      	orrs	r3, r2
 8001478:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f003 0303 	and.w	r3, r3, #3
 8001488:	2b02      	cmp	r3, #2
 800148a:	d123      	bne.n	80014d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	08da      	lsrs	r2, r3, #3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	3208      	adds	r2, #8
 8001494:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001498:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	f003 0307 	and.w	r3, r3, #7
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	220f      	movs	r2, #15
 80014a4:	fa02 f303 	lsl.w	r3, r2, r3
 80014a8:	43db      	mvns	r3, r3
 80014aa:	69ba      	ldr	r2, [r7, #24]
 80014ac:	4013      	ands	r3, r2
 80014ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	691a      	ldr	r2, [r3, #16]
 80014b4:	69fb      	ldr	r3, [r7, #28]
 80014b6:	f003 0307 	and.w	r3, r3, #7
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	fa02 f303 	lsl.w	r3, r2, r3
 80014c0:	69ba      	ldr	r2, [r7, #24]
 80014c2:	4313      	orrs	r3, r2
 80014c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	08da      	lsrs	r2, r3, #3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	3208      	adds	r2, #8
 80014ce:	69b9      	ldr	r1, [r7, #24]
 80014d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	2203      	movs	r2, #3
 80014e0:	fa02 f303 	lsl.w	r3, r2, r3
 80014e4:	43db      	mvns	r3, r3
 80014e6:	69ba      	ldr	r2, [r7, #24]
 80014e8:	4013      	ands	r3, r2
 80014ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f003 0203 	and.w	r2, r3, #3
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	005b      	lsls	r3, r3, #1
 80014f8:	fa02 f303 	lsl.w	r3, r2, r3
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	4313      	orrs	r3, r2
 8001500:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	69ba      	ldr	r2, [r7, #24]
 8001506:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001510:	2b00      	cmp	r3, #0
 8001512:	f000 80b4 	beq.w	800167e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001516:	2300      	movs	r3, #0
 8001518:	60fb      	str	r3, [r7, #12]
 800151a:	4b60      	ldr	r3, [pc, #384]	@ (800169c <HAL_GPIO_Init+0x30c>)
 800151c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800151e:	4a5f      	ldr	r2, [pc, #380]	@ (800169c <HAL_GPIO_Init+0x30c>)
 8001520:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001524:	6453      	str	r3, [r2, #68]	@ 0x44
 8001526:	4b5d      	ldr	r3, [pc, #372]	@ (800169c <HAL_GPIO_Init+0x30c>)
 8001528:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800152a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800152e:	60fb      	str	r3, [r7, #12]
 8001530:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001532:	4a5b      	ldr	r2, [pc, #364]	@ (80016a0 <HAL_GPIO_Init+0x310>)
 8001534:	69fb      	ldr	r3, [r7, #28]
 8001536:	089b      	lsrs	r3, r3, #2
 8001538:	3302      	adds	r3, #2
 800153a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800153e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001540:	69fb      	ldr	r3, [r7, #28]
 8001542:	f003 0303 	and.w	r3, r3, #3
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	220f      	movs	r2, #15
 800154a:	fa02 f303 	lsl.w	r3, r2, r3
 800154e:	43db      	mvns	r3, r3
 8001550:	69ba      	ldr	r2, [r7, #24]
 8001552:	4013      	ands	r3, r2
 8001554:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4a52      	ldr	r2, [pc, #328]	@ (80016a4 <HAL_GPIO_Init+0x314>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d02b      	beq.n	80015b6 <HAL_GPIO_Init+0x226>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4a51      	ldr	r2, [pc, #324]	@ (80016a8 <HAL_GPIO_Init+0x318>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d025      	beq.n	80015b2 <HAL_GPIO_Init+0x222>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4a50      	ldr	r2, [pc, #320]	@ (80016ac <HAL_GPIO_Init+0x31c>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d01f      	beq.n	80015ae <HAL_GPIO_Init+0x21e>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4a4f      	ldr	r2, [pc, #316]	@ (80016b0 <HAL_GPIO_Init+0x320>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d019      	beq.n	80015aa <HAL_GPIO_Init+0x21a>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4a4e      	ldr	r2, [pc, #312]	@ (80016b4 <HAL_GPIO_Init+0x324>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d013      	beq.n	80015a6 <HAL_GPIO_Init+0x216>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4a4d      	ldr	r2, [pc, #308]	@ (80016b8 <HAL_GPIO_Init+0x328>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d00d      	beq.n	80015a2 <HAL_GPIO_Init+0x212>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4a4c      	ldr	r2, [pc, #304]	@ (80016bc <HAL_GPIO_Init+0x32c>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d007      	beq.n	800159e <HAL_GPIO_Init+0x20e>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4a4b      	ldr	r2, [pc, #300]	@ (80016c0 <HAL_GPIO_Init+0x330>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d101      	bne.n	800159a <HAL_GPIO_Init+0x20a>
 8001596:	2307      	movs	r3, #7
 8001598:	e00e      	b.n	80015b8 <HAL_GPIO_Init+0x228>
 800159a:	2308      	movs	r3, #8
 800159c:	e00c      	b.n	80015b8 <HAL_GPIO_Init+0x228>
 800159e:	2306      	movs	r3, #6
 80015a0:	e00a      	b.n	80015b8 <HAL_GPIO_Init+0x228>
 80015a2:	2305      	movs	r3, #5
 80015a4:	e008      	b.n	80015b8 <HAL_GPIO_Init+0x228>
 80015a6:	2304      	movs	r3, #4
 80015a8:	e006      	b.n	80015b8 <HAL_GPIO_Init+0x228>
 80015aa:	2303      	movs	r3, #3
 80015ac:	e004      	b.n	80015b8 <HAL_GPIO_Init+0x228>
 80015ae:	2302      	movs	r3, #2
 80015b0:	e002      	b.n	80015b8 <HAL_GPIO_Init+0x228>
 80015b2:	2301      	movs	r3, #1
 80015b4:	e000      	b.n	80015b8 <HAL_GPIO_Init+0x228>
 80015b6:	2300      	movs	r3, #0
 80015b8:	69fa      	ldr	r2, [r7, #28]
 80015ba:	f002 0203 	and.w	r2, r2, #3
 80015be:	0092      	lsls	r2, r2, #2
 80015c0:	4093      	lsls	r3, r2
 80015c2:	69ba      	ldr	r2, [r7, #24]
 80015c4:	4313      	orrs	r3, r2
 80015c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015c8:	4935      	ldr	r1, [pc, #212]	@ (80016a0 <HAL_GPIO_Init+0x310>)
 80015ca:	69fb      	ldr	r3, [r7, #28]
 80015cc:	089b      	lsrs	r3, r3, #2
 80015ce:	3302      	adds	r3, #2
 80015d0:	69ba      	ldr	r2, [r7, #24]
 80015d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015d6:	4b3b      	ldr	r3, [pc, #236]	@ (80016c4 <HAL_GPIO_Init+0x334>)
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	43db      	mvns	r3, r3
 80015e0:	69ba      	ldr	r2, [r7, #24]
 80015e2:	4013      	ands	r3, r2
 80015e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d003      	beq.n	80015fa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80015f2:	69ba      	ldr	r2, [r7, #24]
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	4313      	orrs	r3, r2
 80015f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015fa:	4a32      	ldr	r2, [pc, #200]	@ (80016c4 <HAL_GPIO_Init+0x334>)
 80015fc:	69bb      	ldr	r3, [r7, #24]
 80015fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001600:	4b30      	ldr	r3, [pc, #192]	@ (80016c4 <HAL_GPIO_Init+0x334>)
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	43db      	mvns	r3, r3
 800160a:	69ba      	ldr	r2, [r7, #24]
 800160c:	4013      	ands	r3, r2
 800160e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001618:	2b00      	cmp	r3, #0
 800161a:	d003      	beq.n	8001624 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800161c:	69ba      	ldr	r2, [r7, #24]
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	4313      	orrs	r3, r2
 8001622:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001624:	4a27      	ldr	r2, [pc, #156]	@ (80016c4 <HAL_GPIO_Init+0x334>)
 8001626:	69bb      	ldr	r3, [r7, #24]
 8001628:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800162a:	4b26      	ldr	r3, [pc, #152]	@ (80016c4 <HAL_GPIO_Init+0x334>)
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	43db      	mvns	r3, r3
 8001634:	69ba      	ldr	r2, [r7, #24]
 8001636:	4013      	ands	r3, r2
 8001638:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001642:	2b00      	cmp	r3, #0
 8001644:	d003      	beq.n	800164e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001646:	69ba      	ldr	r2, [r7, #24]
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	4313      	orrs	r3, r2
 800164c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800164e:	4a1d      	ldr	r2, [pc, #116]	@ (80016c4 <HAL_GPIO_Init+0x334>)
 8001650:	69bb      	ldr	r3, [r7, #24]
 8001652:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001654:	4b1b      	ldr	r3, [pc, #108]	@ (80016c4 <HAL_GPIO_Init+0x334>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	43db      	mvns	r3, r3
 800165e:	69ba      	ldr	r2, [r7, #24]
 8001660:	4013      	ands	r3, r2
 8001662:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800166c:	2b00      	cmp	r3, #0
 800166e:	d003      	beq.n	8001678 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001670:	69ba      	ldr	r2, [r7, #24]
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	4313      	orrs	r3, r2
 8001676:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001678:	4a12      	ldr	r2, [pc, #72]	@ (80016c4 <HAL_GPIO_Init+0x334>)
 800167a:	69bb      	ldr	r3, [r7, #24]
 800167c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	3301      	adds	r3, #1
 8001682:	61fb      	str	r3, [r7, #28]
 8001684:	69fb      	ldr	r3, [r7, #28]
 8001686:	2b0f      	cmp	r3, #15
 8001688:	f67f ae90 	bls.w	80013ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800168c:	bf00      	nop
 800168e:	bf00      	nop
 8001690:	3724      	adds	r7, #36	@ 0x24
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	40023800 	.word	0x40023800
 80016a0:	40013800 	.word	0x40013800
 80016a4:	40020000 	.word	0x40020000
 80016a8:	40020400 	.word	0x40020400
 80016ac:	40020800 	.word	0x40020800
 80016b0:	40020c00 	.word	0x40020c00
 80016b4:	40021000 	.word	0x40021000
 80016b8:	40021400 	.word	0x40021400
 80016bc:	40021800 	.word	0x40021800
 80016c0:	40021c00 	.word	0x40021c00
 80016c4:	40013c00 	.word	0x40013c00

080016c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b085      	sub	sp, #20
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	460b      	mov	r3, r1
 80016d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	691a      	ldr	r2, [r3, #16]
 80016d8:	887b      	ldrh	r3, [r7, #2]
 80016da:	4013      	ands	r3, r2
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d002      	beq.n	80016e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80016e0:	2301      	movs	r3, #1
 80016e2:	73fb      	strb	r3, [r7, #15]
 80016e4:	e001      	b.n	80016ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80016e6:	2300      	movs	r3, #0
 80016e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80016ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	3714      	adds	r7, #20
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr

080016f8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	4603      	mov	r3, r0
 8001700:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001702:	4b08      	ldr	r3, [pc, #32]	@ (8001724 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001704:	695a      	ldr	r2, [r3, #20]
 8001706:	88fb      	ldrh	r3, [r7, #6]
 8001708:	4013      	ands	r3, r2
 800170a:	2b00      	cmp	r3, #0
 800170c:	d006      	beq.n	800171c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800170e:	4a05      	ldr	r2, [pc, #20]	@ (8001724 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001710:	88fb      	ldrh	r3, [r7, #6]
 8001712:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001714:	88fb      	ldrh	r3, [r7, #6]
 8001716:	4618      	mov	r0, r3
 8001718:	f7fe ff48 	bl	80005ac <HAL_GPIO_EXTI_Callback>
  }
}
 800171c:	bf00      	nop
 800171e:	3708      	adds	r7, #8
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	40013c00 	.word	0x40013c00

08001728 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b086      	sub	sp, #24
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d101      	bne.n	800173a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	e267      	b.n	8001c0a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f003 0301 	and.w	r3, r3, #1
 8001742:	2b00      	cmp	r3, #0
 8001744:	d075      	beq.n	8001832 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001746:	4b88      	ldr	r3, [pc, #544]	@ (8001968 <HAL_RCC_OscConfig+0x240>)
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	f003 030c 	and.w	r3, r3, #12
 800174e:	2b04      	cmp	r3, #4
 8001750:	d00c      	beq.n	800176c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001752:	4b85      	ldr	r3, [pc, #532]	@ (8001968 <HAL_RCC_OscConfig+0x240>)
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800175a:	2b08      	cmp	r3, #8
 800175c:	d112      	bne.n	8001784 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800175e:	4b82      	ldr	r3, [pc, #520]	@ (8001968 <HAL_RCC_OscConfig+0x240>)
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001766:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800176a:	d10b      	bne.n	8001784 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800176c:	4b7e      	ldr	r3, [pc, #504]	@ (8001968 <HAL_RCC_OscConfig+0x240>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001774:	2b00      	cmp	r3, #0
 8001776:	d05b      	beq.n	8001830 <HAL_RCC_OscConfig+0x108>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d157      	bne.n	8001830 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	e242      	b.n	8001c0a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800178c:	d106      	bne.n	800179c <HAL_RCC_OscConfig+0x74>
 800178e:	4b76      	ldr	r3, [pc, #472]	@ (8001968 <HAL_RCC_OscConfig+0x240>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a75      	ldr	r2, [pc, #468]	@ (8001968 <HAL_RCC_OscConfig+0x240>)
 8001794:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001798:	6013      	str	r3, [r2, #0]
 800179a:	e01d      	b.n	80017d8 <HAL_RCC_OscConfig+0xb0>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80017a4:	d10c      	bne.n	80017c0 <HAL_RCC_OscConfig+0x98>
 80017a6:	4b70      	ldr	r3, [pc, #448]	@ (8001968 <HAL_RCC_OscConfig+0x240>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a6f      	ldr	r2, [pc, #444]	@ (8001968 <HAL_RCC_OscConfig+0x240>)
 80017ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80017b0:	6013      	str	r3, [r2, #0]
 80017b2:	4b6d      	ldr	r3, [pc, #436]	@ (8001968 <HAL_RCC_OscConfig+0x240>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a6c      	ldr	r2, [pc, #432]	@ (8001968 <HAL_RCC_OscConfig+0x240>)
 80017b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017bc:	6013      	str	r3, [r2, #0]
 80017be:	e00b      	b.n	80017d8 <HAL_RCC_OscConfig+0xb0>
 80017c0:	4b69      	ldr	r3, [pc, #420]	@ (8001968 <HAL_RCC_OscConfig+0x240>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a68      	ldr	r2, [pc, #416]	@ (8001968 <HAL_RCC_OscConfig+0x240>)
 80017c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017ca:	6013      	str	r3, [r2, #0]
 80017cc:	4b66      	ldr	r3, [pc, #408]	@ (8001968 <HAL_RCC_OscConfig+0x240>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a65      	ldr	r2, [pc, #404]	@ (8001968 <HAL_RCC_OscConfig+0x240>)
 80017d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d013      	beq.n	8001808 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e0:	f7ff fc62 	bl	80010a8 <HAL_GetTick>
 80017e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017e6:	e008      	b.n	80017fa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017e8:	f7ff fc5e 	bl	80010a8 <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	2b64      	cmp	r3, #100	@ 0x64
 80017f4:	d901      	bls.n	80017fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80017f6:	2303      	movs	r3, #3
 80017f8:	e207      	b.n	8001c0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017fa:	4b5b      	ldr	r3, [pc, #364]	@ (8001968 <HAL_RCC_OscConfig+0x240>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d0f0      	beq.n	80017e8 <HAL_RCC_OscConfig+0xc0>
 8001806:	e014      	b.n	8001832 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001808:	f7ff fc4e 	bl	80010a8 <HAL_GetTick>
 800180c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800180e:	e008      	b.n	8001822 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001810:	f7ff fc4a 	bl	80010a8 <HAL_GetTick>
 8001814:	4602      	mov	r2, r0
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	2b64      	cmp	r3, #100	@ 0x64
 800181c:	d901      	bls.n	8001822 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800181e:	2303      	movs	r3, #3
 8001820:	e1f3      	b.n	8001c0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001822:	4b51      	ldr	r3, [pc, #324]	@ (8001968 <HAL_RCC_OscConfig+0x240>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d1f0      	bne.n	8001810 <HAL_RCC_OscConfig+0xe8>
 800182e:	e000      	b.n	8001832 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001830:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 0302 	and.w	r3, r3, #2
 800183a:	2b00      	cmp	r3, #0
 800183c:	d063      	beq.n	8001906 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800183e:	4b4a      	ldr	r3, [pc, #296]	@ (8001968 <HAL_RCC_OscConfig+0x240>)
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	f003 030c 	and.w	r3, r3, #12
 8001846:	2b00      	cmp	r3, #0
 8001848:	d00b      	beq.n	8001862 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800184a:	4b47      	ldr	r3, [pc, #284]	@ (8001968 <HAL_RCC_OscConfig+0x240>)
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001852:	2b08      	cmp	r3, #8
 8001854:	d11c      	bne.n	8001890 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001856:	4b44      	ldr	r3, [pc, #272]	@ (8001968 <HAL_RCC_OscConfig+0x240>)
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800185e:	2b00      	cmp	r3, #0
 8001860:	d116      	bne.n	8001890 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001862:	4b41      	ldr	r3, [pc, #260]	@ (8001968 <HAL_RCC_OscConfig+0x240>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 0302 	and.w	r3, r3, #2
 800186a:	2b00      	cmp	r3, #0
 800186c:	d005      	beq.n	800187a <HAL_RCC_OscConfig+0x152>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	68db      	ldr	r3, [r3, #12]
 8001872:	2b01      	cmp	r3, #1
 8001874:	d001      	beq.n	800187a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	e1c7      	b.n	8001c0a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800187a:	4b3b      	ldr	r3, [pc, #236]	@ (8001968 <HAL_RCC_OscConfig+0x240>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	691b      	ldr	r3, [r3, #16]
 8001886:	00db      	lsls	r3, r3, #3
 8001888:	4937      	ldr	r1, [pc, #220]	@ (8001968 <HAL_RCC_OscConfig+0x240>)
 800188a:	4313      	orrs	r3, r2
 800188c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800188e:	e03a      	b.n	8001906 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d020      	beq.n	80018da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001898:	4b34      	ldr	r3, [pc, #208]	@ (800196c <HAL_RCC_OscConfig+0x244>)
 800189a:	2201      	movs	r2, #1
 800189c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800189e:	f7ff fc03 	bl	80010a8 <HAL_GetTick>
 80018a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018a4:	e008      	b.n	80018b8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018a6:	f7ff fbff 	bl	80010a8 <HAL_GetTick>
 80018aa:	4602      	mov	r2, r0
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	1ad3      	subs	r3, r2, r3
 80018b0:	2b02      	cmp	r3, #2
 80018b2:	d901      	bls.n	80018b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80018b4:	2303      	movs	r3, #3
 80018b6:	e1a8      	b.n	8001c0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018b8:	4b2b      	ldr	r3, [pc, #172]	@ (8001968 <HAL_RCC_OscConfig+0x240>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 0302 	and.w	r3, r3, #2
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d0f0      	beq.n	80018a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018c4:	4b28      	ldr	r3, [pc, #160]	@ (8001968 <HAL_RCC_OscConfig+0x240>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	691b      	ldr	r3, [r3, #16]
 80018d0:	00db      	lsls	r3, r3, #3
 80018d2:	4925      	ldr	r1, [pc, #148]	@ (8001968 <HAL_RCC_OscConfig+0x240>)
 80018d4:	4313      	orrs	r3, r2
 80018d6:	600b      	str	r3, [r1, #0]
 80018d8:	e015      	b.n	8001906 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018da:	4b24      	ldr	r3, [pc, #144]	@ (800196c <HAL_RCC_OscConfig+0x244>)
 80018dc:	2200      	movs	r2, #0
 80018de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018e0:	f7ff fbe2 	bl	80010a8 <HAL_GetTick>
 80018e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018e6:	e008      	b.n	80018fa <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018e8:	f7ff fbde 	bl	80010a8 <HAL_GetTick>
 80018ec:	4602      	mov	r2, r0
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d901      	bls.n	80018fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80018f6:	2303      	movs	r3, #3
 80018f8:	e187      	b.n	8001c0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018fa:	4b1b      	ldr	r3, [pc, #108]	@ (8001968 <HAL_RCC_OscConfig+0x240>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 0302 	and.w	r3, r3, #2
 8001902:	2b00      	cmp	r3, #0
 8001904:	d1f0      	bne.n	80018e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 0308 	and.w	r3, r3, #8
 800190e:	2b00      	cmp	r3, #0
 8001910:	d036      	beq.n	8001980 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	695b      	ldr	r3, [r3, #20]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d016      	beq.n	8001948 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800191a:	4b15      	ldr	r3, [pc, #84]	@ (8001970 <HAL_RCC_OscConfig+0x248>)
 800191c:	2201      	movs	r2, #1
 800191e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001920:	f7ff fbc2 	bl	80010a8 <HAL_GetTick>
 8001924:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001926:	e008      	b.n	800193a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001928:	f7ff fbbe 	bl	80010a8 <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	2b02      	cmp	r3, #2
 8001934:	d901      	bls.n	800193a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001936:	2303      	movs	r3, #3
 8001938:	e167      	b.n	8001c0a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800193a:	4b0b      	ldr	r3, [pc, #44]	@ (8001968 <HAL_RCC_OscConfig+0x240>)
 800193c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800193e:	f003 0302 	and.w	r3, r3, #2
 8001942:	2b00      	cmp	r3, #0
 8001944:	d0f0      	beq.n	8001928 <HAL_RCC_OscConfig+0x200>
 8001946:	e01b      	b.n	8001980 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001948:	4b09      	ldr	r3, [pc, #36]	@ (8001970 <HAL_RCC_OscConfig+0x248>)
 800194a:	2200      	movs	r2, #0
 800194c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800194e:	f7ff fbab 	bl	80010a8 <HAL_GetTick>
 8001952:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001954:	e00e      	b.n	8001974 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001956:	f7ff fba7 	bl	80010a8 <HAL_GetTick>
 800195a:	4602      	mov	r2, r0
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	1ad3      	subs	r3, r2, r3
 8001960:	2b02      	cmp	r3, #2
 8001962:	d907      	bls.n	8001974 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001964:	2303      	movs	r3, #3
 8001966:	e150      	b.n	8001c0a <HAL_RCC_OscConfig+0x4e2>
 8001968:	40023800 	.word	0x40023800
 800196c:	42470000 	.word	0x42470000
 8001970:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001974:	4b88      	ldr	r3, [pc, #544]	@ (8001b98 <HAL_RCC_OscConfig+0x470>)
 8001976:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001978:	f003 0302 	and.w	r3, r3, #2
 800197c:	2b00      	cmp	r3, #0
 800197e:	d1ea      	bne.n	8001956 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 0304 	and.w	r3, r3, #4
 8001988:	2b00      	cmp	r3, #0
 800198a:	f000 8097 	beq.w	8001abc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800198e:	2300      	movs	r3, #0
 8001990:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001992:	4b81      	ldr	r3, [pc, #516]	@ (8001b98 <HAL_RCC_OscConfig+0x470>)
 8001994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001996:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800199a:	2b00      	cmp	r3, #0
 800199c:	d10f      	bne.n	80019be <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800199e:	2300      	movs	r3, #0
 80019a0:	60bb      	str	r3, [r7, #8]
 80019a2:	4b7d      	ldr	r3, [pc, #500]	@ (8001b98 <HAL_RCC_OscConfig+0x470>)
 80019a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019a6:	4a7c      	ldr	r2, [pc, #496]	@ (8001b98 <HAL_RCC_OscConfig+0x470>)
 80019a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80019ae:	4b7a      	ldr	r3, [pc, #488]	@ (8001b98 <HAL_RCC_OscConfig+0x470>)
 80019b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019b6:	60bb      	str	r3, [r7, #8]
 80019b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019ba:	2301      	movs	r3, #1
 80019bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019be:	4b77      	ldr	r3, [pc, #476]	@ (8001b9c <HAL_RCC_OscConfig+0x474>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d118      	bne.n	80019fc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019ca:	4b74      	ldr	r3, [pc, #464]	@ (8001b9c <HAL_RCC_OscConfig+0x474>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a73      	ldr	r2, [pc, #460]	@ (8001b9c <HAL_RCC_OscConfig+0x474>)
 80019d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019d6:	f7ff fb67 	bl	80010a8 <HAL_GetTick>
 80019da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019dc:	e008      	b.n	80019f0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019de:	f7ff fb63 	bl	80010a8 <HAL_GetTick>
 80019e2:	4602      	mov	r2, r0
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	1ad3      	subs	r3, r2, r3
 80019e8:	2b02      	cmp	r3, #2
 80019ea:	d901      	bls.n	80019f0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80019ec:	2303      	movs	r3, #3
 80019ee:	e10c      	b.n	8001c0a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019f0:	4b6a      	ldr	r3, [pc, #424]	@ (8001b9c <HAL_RCC_OscConfig+0x474>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d0f0      	beq.n	80019de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d106      	bne.n	8001a12 <HAL_RCC_OscConfig+0x2ea>
 8001a04:	4b64      	ldr	r3, [pc, #400]	@ (8001b98 <HAL_RCC_OscConfig+0x470>)
 8001a06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a08:	4a63      	ldr	r2, [pc, #396]	@ (8001b98 <HAL_RCC_OscConfig+0x470>)
 8001a0a:	f043 0301 	orr.w	r3, r3, #1
 8001a0e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a10:	e01c      	b.n	8001a4c <HAL_RCC_OscConfig+0x324>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	2b05      	cmp	r3, #5
 8001a18:	d10c      	bne.n	8001a34 <HAL_RCC_OscConfig+0x30c>
 8001a1a:	4b5f      	ldr	r3, [pc, #380]	@ (8001b98 <HAL_RCC_OscConfig+0x470>)
 8001a1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a1e:	4a5e      	ldr	r2, [pc, #376]	@ (8001b98 <HAL_RCC_OscConfig+0x470>)
 8001a20:	f043 0304 	orr.w	r3, r3, #4
 8001a24:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a26:	4b5c      	ldr	r3, [pc, #368]	@ (8001b98 <HAL_RCC_OscConfig+0x470>)
 8001a28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a2a:	4a5b      	ldr	r2, [pc, #364]	@ (8001b98 <HAL_RCC_OscConfig+0x470>)
 8001a2c:	f043 0301 	orr.w	r3, r3, #1
 8001a30:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a32:	e00b      	b.n	8001a4c <HAL_RCC_OscConfig+0x324>
 8001a34:	4b58      	ldr	r3, [pc, #352]	@ (8001b98 <HAL_RCC_OscConfig+0x470>)
 8001a36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a38:	4a57      	ldr	r2, [pc, #348]	@ (8001b98 <HAL_RCC_OscConfig+0x470>)
 8001a3a:	f023 0301 	bic.w	r3, r3, #1
 8001a3e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a40:	4b55      	ldr	r3, [pc, #340]	@ (8001b98 <HAL_RCC_OscConfig+0x470>)
 8001a42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a44:	4a54      	ldr	r2, [pc, #336]	@ (8001b98 <HAL_RCC_OscConfig+0x470>)
 8001a46:	f023 0304 	bic.w	r3, r3, #4
 8001a4a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d015      	beq.n	8001a80 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a54:	f7ff fb28 	bl	80010a8 <HAL_GetTick>
 8001a58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a5a:	e00a      	b.n	8001a72 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a5c:	f7ff fb24 	bl	80010a8 <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d901      	bls.n	8001a72 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	e0cb      	b.n	8001c0a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a72:	4b49      	ldr	r3, [pc, #292]	@ (8001b98 <HAL_RCC_OscConfig+0x470>)
 8001a74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a76:	f003 0302 	and.w	r3, r3, #2
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d0ee      	beq.n	8001a5c <HAL_RCC_OscConfig+0x334>
 8001a7e:	e014      	b.n	8001aaa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a80:	f7ff fb12 	bl	80010a8 <HAL_GetTick>
 8001a84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a86:	e00a      	b.n	8001a9e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a88:	f7ff fb0e 	bl	80010a8 <HAL_GetTick>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d901      	bls.n	8001a9e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	e0b5      	b.n	8001c0a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a9e:	4b3e      	ldr	r3, [pc, #248]	@ (8001b98 <HAL_RCC_OscConfig+0x470>)
 8001aa0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001aa2:	f003 0302 	and.w	r3, r3, #2
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d1ee      	bne.n	8001a88 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001aaa:	7dfb      	ldrb	r3, [r7, #23]
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d105      	bne.n	8001abc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ab0:	4b39      	ldr	r3, [pc, #228]	@ (8001b98 <HAL_RCC_OscConfig+0x470>)
 8001ab2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ab4:	4a38      	ldr	r2, [pc, #224]	@ (8001b98 <HAL_RCC_OscConfig+0x470>)
 8001ab6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001aba:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	699b      	ldr	r3, [r3, #24]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	f000 80a1 	beq.w	8001c08 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ac6:	4b34      	ldr	r3, [pc, #208]	@ (8001b98 <HAL_RCC_OscConfig+0x470>)
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	f003 030c 	and.w	r3, r3, #12
 8001ace:	2b08      	cmp	r3, #8
 8001ad0:	d05c      	beq.n	8001b8c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	699b      	ldr	r3, [r3, #24]
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	d141      	bne.n	8001b5e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ada:	4b31      	ldr	r3, [pc, #196]	@ (8001ba0 <HAL_RCC_OscConfig+0x478>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae0:	f7ff fae2 	bl	80010a8 <HAL_GetTick>
 8001ae4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ae6:	e008      	b.n	8001afa <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ae8:	f7ff fade 	bl	80010a8 <HAL_GetTick>
 8001aec:	4602      	mov	r2, r0
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	2b02      	cmp	r3, #2
 8001af4:	d901      	bls.n	8001afa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
 8001af8:	e087      	b.n	8001c0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001afa:	4b27      	ldr	r3, [pc, #156]	@ (8001b98 <HAL_RCC_OscConfig+0x470>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d1f0      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	69da      	ldr	r2, [r3, #28]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6a1b      	ldr	r3, [r3, #32]
 8001b0e:	431a      	orrs	r2, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b14:	019b      	lsls	r3, r3, #6
 8001b16:	431a      	orrs	r2, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b1c:	085b      	lsrs	r3, r3, #1
 8001b1e:	3b01      	subs	r3, #1
 8001b20:	041b      	lsls	r3, r3, #16
 8001b22:	431a      	orrs	r2, r3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b28:	061b      	lsls	r3, r3, #24
 8001b2a:	491b      	ldr	r1, [pc, #108]	@ (8001b98 <HAL_RCC_OscConfig+0x470>)
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b30:	4b1b      	ldr	r3, [pc, #108]	@ (8001ba0 <HAL_RCC_OscConfig+0x478>)
 8001b32:	2201      	movs	r2, #1
 8001b34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b36:	f7ff fab7 	bl	80010a8 <HAL_GetTick>
 8001b3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b3c:	e008      	b.n	8001b50 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b3e:	f7ff fab3 	bl	80010a8 <HAL_GetTick>
 8001b42:	4602      	mov	r2, r0
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	2b02      	cmp	r3, #2
 8001b4a:	d901      	bls.n	8001b50 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	e05c      	b.n	8001c0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b50:	4b11      	ldr	r3, [pc, #68]	@ (8001b98 <HAL_RCC_OscConfig+0x470>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d0f0      	beq.n	8001b3e <HAL_RCC_OscConfig+0x416>
 8001b5c:	e054      	b.n	8001c08 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b5e:	4b10      	ldr	r3, [pc, #64]	@ (8001ba0 <HAL_RCC_OscConfig+0x478>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b64:	f7ff faa0 	bl	80010a8 <HAL_GetTick>
 8001b68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b6a:	e008      	b.n	8001b7e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b6c:	f7ff fa9c 	bl	80010a8 <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d901      	bls.n	8001b7e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e045      	b.n	8001c0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b7e:	4b06      	ldr	r3, [pc, #24]	@ (8001b98 <HAL_RCC_OscConfig+0x470>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d1f0      	bne.n	8001b6c <HAL_RCC_OscConfig+0x444>
 8001b8a:	e03d      	b.n	8001c08 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	699b      	ldr	r3, [r3, #24]
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d107      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	e038      	b.n	8001c0a <HAL_RCC_OscConfig+0x4e2>
 8001b98:	40023800 	.word	0x40023800
 8001b9c:	40007000 	.word	0x40007000
 8001ba0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ba4:	4b1b      	ldr	r3, [pc, #108]	@ (8001c14 <HAL_RCC_OscConfig+0x4ec>)
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	699b      	ldr	r3, [r3, #24]
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d028      	beq.n	8001c04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d121      	bne.n	8001c04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d11a      	bne.n	8001c04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bce:	68fa      	ldr	r2, [r7, #12]
 8001bd0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	687a      	ldr	r2, [r7, #4]
 8001bd8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001bda:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d111      	bne.n	8001c04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bea:	085b      	lsrs	r3, r3, #1
 8001bec:	3b01      	subs	r3, #1
 8001bee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d107      	bne.n	8001c04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bfe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d001      	beq.n	8001c08 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	e000      	b.n	8001c0a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001c08:	2300      	movs	r3, #0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3718      	adds	r7, #24
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	40023800 	.word	0x40023800

08001c18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b084      	sub	sp, #16
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d101      	bne.n	8001c2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e0cc      	b.n	8001dc6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c2c:	4b68      	ldr	r3, [pc, #416]	@ (8001dd0 <HAL_RCC_ClockConfig+0x1b8>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 0307 	and.w	r3, r3, #7
 8001c34:	683a      	ldr	r2, [r7, #0]
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d90c      	bls.n	8001c54 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c3a:	4b65      	ldr	r3, [pc, #404]	@ (8001dd0 <HAL_RCC_ClockConfig+0x1b8>)
 8001c3c:	683a      	ldr	r2, [r7, #0]
 8001c3e:	b2d2      	uxtb	r2, r2
 8001c40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c42:	4b63      	ldr	r3, [pc, #396]	@ (8001dd0 <HAL_RCC_ClockConfig+0x1b8>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 0307 	and.w	r3, r3, #7
 8001c4a:	683a      	ldr	r2, [r7, #0]
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d001      	beq.n	8001c54 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	e0b8      	b.n	8001dc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 0302 	and.w	r3, r3, #2
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d020      	beq.n	8001ca2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 0304 	and.w	r3, r3, #4
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d005      	beq.n	8001c78 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c6c:	4b59      	ldr	r3, [pc, #356]	@ (8001dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	4a58      	ldr	r2, [pc, #352]	@ (8001dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c72:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001c76:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 0308 	and.w	r3, r3, #8
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d005      	beq.n	8001c90 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c84:	4b53      	ldr	r3, [pc, #332]	@ (8001dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	4a52      	ldr	r2, [pc, #328]	@ (8001dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c8a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001c8e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c90:	4b50      	ldr	r3, [pc, #320]	@ (8001dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	494d      	ldr	r1, [pc, #308]	@ (8001dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 0301 	and.w	r3, r3, #1
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d044      	beq.n	8001d38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d107      	bne.n	8001cc6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cb6:	4b47      	ldr	r3, [pc, #284]	@ (8001dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d119      	bne.n	8001cf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e07f      	b.n	8001dc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d003      	beq.n	8001cd6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cd2:	2b03      	cmp	r3, #3
 8001cd4:	d107      	bne.n	8001ce6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cd6:	4b3f      	ldr	r3, [pc, #252]	@ (8001dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d109      	bne.n	8001cf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e06f      	b.n	8001dc6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ce6:	4b3b      	ldr	r3, [pc, #236]	@ (8001dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 0302 	and.w	r3, r3, #2
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d101      	bne.n	8001cf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e067      	b.n	8001dc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cf6:	4b37      	ldr	r3, [pc, #220]	@ (8001dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	f023 0203 	bic.w	r2, r3, #3
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	4934      	ldr	r1, [pc, #208]	@ (8001dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d04:	4313      	orrs	r3, r2
 8001d06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d08:	f7ff f9ce 	bl	80010a8 <HAL_GetTick>
 8001d0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d0e:	e00a      	b.n	8001d26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d10:	f7ff f9ca 	bl	80010a8 <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d901      	bls.n	8001d26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d22:	2303      	movs	r3, #3
 8001d24:	e04f      	b.n	8001dc6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d26:	4b2b      	ldr	r3, [pc, #172]	@ (8001dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	f003 020c 	and.w	r2, r3, #12
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d1eb      	bne.n	8001d10 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d38:	4b25      	ldr	r3, [pc, #148]	@ (8001dd0 <HAL_RCC_ClockConfig+0x1b8>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0307 	and.w	r3, r3, #7
 8001d40:	683a      	ldr	r2, [r7, #0]
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d20c      	bcs.n	8001d60 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d46:	4b22      	ldr	r3, [pc, #136]	@ (8001dd0 <HAL_RCC_ClockConfig+0x1b8>)
 8001d48:	683a      	ldr	r2, [r7, #0]
 8001d4a:	b2d2      	uxtb	r2, r2
 8001d4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d4e:	4b20      	ldr	r3, [pc, #128]	@ (8001dd0 <HAL_RCC_ClockConfig+0x1b8>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 0307 	and.w	r3, r3, #7
 8001d56:	683a      	ldr	r2, [r7, #0]
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d001      	beq.n	8001d60 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e032      	b.n	8001dc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 0304 	and.w	r3, r3, #4
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d008      	beq.n	8001d7e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d6c:	4b19      	ldr	r3, [pc, #100]	@ (8001dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	4916      	ldr	r1, [pc, #88]	@ (8001dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 0308 	and.w	r3, r3, #8
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d009      	beq.n	8001d9e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d8a:	4b12      	ldr	r3, [pc, #72]	@ (8001dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	691b      	ldr	r3, [r3, #16]
 8001d96:	00db      	lsls	r3, r3, #3
 8001d98:	490e      	ldr	r1, [pc, #56]	@ (8001dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d9e:	f000 f821 	bl	8001de4 <HAL_RCC_GetSysClockFreq>
 8001da2:	4602      	mov	r2, r0
 8001da4:	4b0b      	ldr	r3, [pc, #44]	@ (8001dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	091b      	lsrs	r3, r3, #4
 8001daa:	f003 030f 	and.w	r3, r3, #15
 8001dae:	490a      	ldr	r1, [pc, #40]	@ (8001dd8 <HAL_RCC_ClockConfig+0x1c0>)
 8001db0:	5ccb      	ldrb	r3, [r1, r3]
 8001db2:	fa22 f303 	lsr.w	r3, r2, r3
 8001db6:	4a09      	ldr	r2, [pc, #36]	@ (8001ddc <HAL_RCC_ClockConfig+0x1c4>)
 8001db8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001dba:	4b09      	ldr	r3, [pc, #36]	@ (8001de0 <HAL_RCC_ClockConfig+0x1c8>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f7ff f92e 	bl	8001020 <HAL_InitTick>

  return HAL_OK;
 8001dc4:	2300      	movs	r3, #0
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3710      	adds	r7, #16
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	40023c00 	.word	0x40023c00
 8001dd4:	40023800 	.word	0x40023800
 8001dd8:	080045e8 	.word	0x080045e8
 8001ddc:	20000000 	.word	0x20000000
 8001de0:	20000004 	.word	0x20000004

08001de4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001de4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001de8:	b090      	sub	sp, #64	@ 0x40
 8001dea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001dec:	2300      	movs	r3, #0
 8001dee:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8001df0:	2300      	movs	r3, #0
 8001df2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8001df4:	2300      	movs	r3, #0
 8001df6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001dfc:	4b59      	ldr	r3, [pc, #356]	@ (8001f64 <HAL_RCC_GetSysClockFreq+0x180>)
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	f003 030c 	and.w	r3, r3, #12
 8001e04:	2b08      	cmp	r3, #8
 8001e06:	d00d      	beq.n	8001e24 <HAL_RCC_GetSysClockFreq+0x40>
 8001e08:	2b08      	cmp	r3, #8
 8001e0a:	f200 80a1 	bhi.w	8001f50 <HAL_RCC_GetSysClockFreq+0x16c>
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d002      	beq.n	8001e18 <HAL_RCC_GetSysClockFreq+0x34>
 8001e12:	2b04      	cmp	r3, #4
 8001e14:	d003      	beq.n	8001e1e <HAL_RCC_GetSysClockFreq+0x3a>
 8001e16:	e09b      	b.n	8001f50 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e18:	4b53      	ldr	r3, [pc, #332]	@ (8001f68 <HAL_RCC_GetSysClockFreq+0x184>)
 8001e1a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001e1c:	e09b      	b.n	8001f56 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e1e:	4b53      	ldr	r3, [pc, #332]	@ (8001f6c <HAL_RCC_GetSysClockFreq+0x188>)
 8001e20:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001e22:	e098      	b.n	8001f56 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e24:	4b4f      	ldr	r3, [pc, #316]	@ (8001f64 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001e2c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e2e:	4b4d      	ldr	r3, [pc, #308]	@ (8001f64 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d028      	beq.n	8001e8c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e3a:	4b4a      	ldr	r3, [pc, #296]	@ (8001f64 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	099b      	lsrs	r3, r3, #6
 8001e40:	2200      	movs	r2, #0
 8001e42:	623b      	str	r3, [r7, #32]
 8001e44:	627a      	str	r2, [r7, #36]	@ 0x24
 8001e46:	6a3b      	ldr	r3, [r7, #32]
 8001e48:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001e4c:	2100      	movs	r1, #0
 8001e4e:	4b47      	ldr	r3, [pc, #284]	@ (8001f6c <HAL_RCC_GetSysClockFreq+0x188>)
 8001e50:	fb03 f201 	mul.w	r2, r3, r1
 8001e54:	2300      	movs	r3, #0
 8001e56:	fb00 f303 	mul.w	r3, r0, r3
 8001e5a:	4413      	add	r3, r2
 8001e5c:	4a43      	ldr	r2, [pc, #268]	@ (8001f6c <HAL_RCC_GetSysClockFreq+0x188>)
 8001e5e:	fba0 1202 	umull	r1, r2, r0, r2
 8001e62:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001e64:	460a      	mov	r2, r1
 8001e66:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001e68:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001e6a:	4413      	add	r3, r2
 8001e6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001e6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e70:	2200      	movs	r2, #0
 8001e72:	61bb      	str	r3, [r7, #24]
 8001e74:	61fa      	str	r2, [r7, #28]
 8001e76:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e7a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001e7e:	f7fe f9ff 	bl	8000280 <__aeabi_uldivmod>
 8001e82:	4602      	mov	r2, r0
 8001e84:	460b      	mov	r3, r1
 8001e86:	4613      	mov	r3, r2
 8001e88:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001e8a:	e053      	b.n	8001f34 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e8c:	4b35      	ldr	r3, [pc, #212]	@ (8001f64 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	099b      	lsrs	r3, r3, #6
 8001e92:	2200      	movs	r2, #0
 8001e94:	613b      	str	r3, [r7, #16]
 8001e96:	617a      	str	r2, [r7, #20]
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001e9e:	f04f 0b00 	mov.w	fp, #0
 8001ea2:	4652      	mov	r2, sl
 8001ea4:	465b      	mov	r3, fp
 8001ea6:	f04f 0000 	mov.w	r0, #0
 8001eaa:	f04f 0100 	mov.w	r1, #0
 8001eae:	0159      	lsls	r1, r3, #5
 8001eb0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001eb4:	0150      	lsls	r0, r2, #5
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	460b      	mov	r3, r1
 8001eba:	ebb2 080a 	subs.w	r8, r2, sl
 8001ebe:	eb63 090b 	sbc.w	r9, r3, fp
 8001ec2:	f04f 0200 	mov.w	r2, #0
 8001ec6:	f04f 0300 	mov.w	r3, #0
 8001eca:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001ece:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001ed2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001ed6:	ebb2 0408 	subs.w	r4, r2, r8
 8001eda:	eb63 0509 	sbc.w	r5, r3, r9
 8001ede:	f04f 0200 	mov.w	r2, #0
 8001ee2:	f04f 0300 	mov.w	r3, #0
 8001ee6:	00eb      	lsls	r3, r5, #3
 8001ee8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001eec:	00e2      	lsls	r2, r4, #3
 8001eee:	4614      	mov	r4, r2
 8001ef0:	461d      	mov	r5, r3
 8001ef2:	eb14 030a 	adds.w	r3, r4, sl
 8001ef6:	603b      	str	r3, [r7, #0]
 8001ef8:	eb45 030b 	adc.w	r3, r5, fp
 8001efc:	607b      	str	r3, [r7, #4]
 8001efe:	f04f 0200 	mov.w	r2, #0
 8001f02:	f04f 0300 	mov.w	r3, #0
 8001f06:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001f0a:	4629      	mov	r1, r5
 8001f0c:	028b      	lsls	r3, r1, #10
 8001f0e:	4621      	mov	r1, r4
 8001f10:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f14:	4621      	mov	r1, r4
 8001f16:	028a      	lsls	r2, r1, #10
 8001f18:	4610      	mov	r0, r2
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f1e:	2200      	movs	r2, #0
 8001f20:	60bb      	str	r3, [r7, #8]
 8001f22:	60fa      	str	r2, [r7, #12]
 8001f24:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f28:	f7fe f9aa 	bl	8000280 <__aeabi_uldivmod>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	460b      	mov	r3, r1
 8001f30:	4613      	mov	r3, r2
 8001f32:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001f34:	4b0b      	ldr	r3, [pc, #44]	@ (8001f64 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	0c1b      	lsrs	r3, r3, #16
 8001f3a:	f003 0303 	and.w	r3, r3, #3
 8001f3e:	3301      	adds	r3, #1
 8001f40:	005b      	lsls	r3, r3, #1
 8001f42:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001f44:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001f46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f48:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f4c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001f4e:	e002      	b.n	8001f56 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f50:	4b05      	ldr	r3, [pc, #20]	@ (8001f68 <HAL_RCC_GetSysClockFreq+0x184>)
 8001f52:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001f54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3740      	adds	r7, #64	@ 0x40
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f62:	bf00      	nop
 8001f64:	40023800 	.word	0x40023800
 8001f68:	00f42400 	.word	0x00f42400
 8001f6c:	017d7840 	.word	0x017d7840

08001f70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f74:	4b03      	ldr	r3, [pc, #12]	@ (8001f84 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f76:	681b      	ldr	r3, [r3, #0]
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	20000000 	.word	0x20000000

08001f88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001f8c:	f7ff fff0 	bl	8001f70 <HAL_RCC_GetHCLKFreq>
 8001f90:	4602      	mov	r2, r0
 8001f92:	4b05      	ldr	r3, [pc, #20]	@ (8001fa8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	0a9b      	lsrs	r3, r3, #10
 8001f98:	f003 0307 	and.w	r3, r3, #7
 8001f9c:	4903      	ldr	r1, [pc, #12]	@ (8001fac <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f9e:	5ccb      	ldrb	r3, [r1, r3]
 8001fa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	40023800 	.word	0x40023800
 8001fac:	080045f8 	.word	0x080045f8

08001fb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001fb4:	f7ff ffdc 	bl	8001f70 <HAL_RCC_GetHCLKFreq>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	4b05      	ldr	r3, [pc, #20]	@ (8001fd0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	0b5b      	lsrs	r3, r3, #13
 8001fc0:	f003 0307 	and.w	r3, r3, #7
 8001fc4:	4903      	ldr	r1, [pc, #12]	@ (8001fd4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fc6:	5ccb      	ldrb	r3, [r1, r3]
 8001fc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	40023800 	.word	0x40023800
 8001fd4:	080045f8 	.word	0x080045f8

08001fd8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d101      	bne.n	8001fea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e07b      	b.n	80020e2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d108      	bne.n	8002004 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001ffa:	d009      	beq.n	8002010 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2200      	movs	r2, #0
 8002000:	61da      	str	r2, [r3, #28]
 8002002:	e005      	b.n	8002010 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2200      	movs	r2, #0
 8002008:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2200      	movs	r2, #0
 800200e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2200      	movs	r2, #0
 8002014:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800201c:	b2db      	uxtb	r3, r3
 800201e:	2b00      	cmp	r3, #0
 8002020:	d106      	bne.n	8002030 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2200      	movs	r2, #0
 8002026:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f7fe fe08 	bl	8000c40 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2202      	movs	r2, #2
 8002034:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002046:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002058:	431a      	orrs	r2, r3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	68db      	ldr	r3, [r3, #12]
 800205e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002062:	431a      	orrs	r2, r3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	691b      	ldr	r3, [r3, #16]
 8002068:	f003 0302 	and.w	r3, r3, #2
 800206c:	431a      	orrs	r2, r3
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	695b      	ldr	r3, [r3, #20]
 8002072:	f003 0301 	and.w	r3, r3, #1
 8002076:	431a      	orrs	r2, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	699b      	ldr	r3, [r3, #24]
 800207c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002080:	431a      	orrs	r2, r3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	69db      	ldr	r3, [r3, #28]
 8002086:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800208a:	431a      	orrs	r2, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6a1b      	ldr	r3, [r3, #32]
 8002090:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002094:	ea42 0103 	orr.w	r1, r2, r3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800209c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	430a      	orrs	r2, r1
 80020a6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	699b      	ldr	r3, [r3, #24]
 80020ac:	0c1b      	lsrs	r3, r3, #16
 80020ae:	f003 0104 	and.w	r1, r3, #4
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020b6:	f003 0210 	and.w	r2, r3, #16
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	430a      	orrs	r2, r1
 80020c0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	69da      	ldr	r2, [r3, #28]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80020d0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2200      	movs	r2, #0
 80020d6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2201      	movs	r2, #1
 80020dc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80020e0:	2300      	movs	r3, #0
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3708      	adds	r7, #8
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}

080020ea <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80020ea:	b580      	push	{r7, lr}
 80020ec:	b082      	sub	sp, #8
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d101      	bne.n	80020fc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	e041      	b.n	8002180 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002102:	b2db      	uxtb	r3, r3
 8002104:	2b00      	cmp	r3, #0
 8002106:	d106      	bne.n	8002116 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2200      	movs	r2, #0
 800210c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f7fe fddd 	bl	8000cd0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2202      	movs	r2, #2
 800211a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	3304      	adds	r3, #4
 8002126:	4619      	mov	r1, r3
 8002128:	4610      	mov	r0, r2
 800212a:	f000 fa0d 	bl	8002548 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2201      	movs	r2, #1
 8002132:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2201      	movs	r2, #1
 800213a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2201      	movs	r2, #1
 8002142:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2201      	movs	r2, #1
 800214a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2201      	movs	r2, #1
 8002152:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2201      	movs	r2, #1
 800215a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2201      	movs	r2, #1
 8002162:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2201      	movs	r2, #1
 800216a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2201      	movs	r2, #1
 8002172:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2201      	movs	r2, #1
 800217a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800217e:	2300      	movs	r3, #0
}
 8002180:	4618      	mov	r0, r3
 8002182:	3708      	adds	r7, #8
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}

08002188 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b084      	sub	sp, #16
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	68db      	ldr	r3, [r3, #12]
 8002196:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	691b      	ldr	r3, [r3, #16]
 800219e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	f003 0302 	and.w	r3, r3, #2
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d020      	beq.n	80021ec <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	f003 0302 	and.w	r3, r3, #2
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d01b      	beq.n	80021ec <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f06f 0202 	mvn.w	r2, #2
 80021bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2201      	movs	r2, #1
 80021c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	699b      	ldr	r3, [r3, #24]
 80021ca:	f003 0303 	and.w	r3, r3, #3
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d003      	beq.n	80021da <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f000 f999 	bl	800250a <HAL_TIM_IC_CaptureCallback>
 80021d8:	e005      	b.n	80021e6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f000 f98b 	bl	80024f6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	f000 f99c 	bl	800251e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2200      	movs	r2, #0
 80021ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	f003 0304 	and.w	r3, r3, #4
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d020      	beq.n	8002238 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	f003 0304 	and.w	r3, r3, #4
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d01b      	beq.n	8002238 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f06f 0204 	mvn.w	r2, #4
 8002208:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2202      	movs	r2, #2
 800220e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	699b      	ldr	r3, [r3, #24]
 8002216:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800221a:	2b00      	cmp	r3, #0
 800221c:	d003      	beq.n	8002226 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f000 f973 	bl	800250a <HAL_TIM_IC_CaptureCallback>
 8002224:	e005      	b.n	8002232 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f000 f965 	bl	80024f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	f000 f976 	bl	800251e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2200      	movs	r2, #0
 8002236:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	f003 0308 	and.w	r3, r3, #8
 800223e:	2b00      	cmp	r3, #0
 8002240:	d020      	beq.n	8002284 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	f003 0308 	and.w	r3, r3, #8
 8002248:	2b00      	cmp	r3, #0
 800224a:	d01b      	beq.n	8002284 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f06f 0208 	mvn.w	r2, #8
 8002254:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2204      	movs	r2, #4
 800225a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	69db      	ldr	r3, [r3, #28]
 8002262:	f003 0303 	and.w	r3, r3, #3
 8002266:	2b00      	cmp	r3, #0
 8002268:	d003      	beq.n	8002272 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f000 f94d 	bl	800250a <HAL_TIM_IC_CaptureCallback>
 8002270:	e005      	b.n	800227e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f000 f93f 	bl	80024f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	f000 f950 	bl	800251e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2200      	movs	r2, #0
 8002282:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	f003 0310 	and.w	r3, r3, #16
 800228a:	2b00      	cmp	r3, #0
 800228c:	d020      	beq.n	80022d0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	f003 0310 	and.w	r3, r3, #16
 8002294:	2b00      	cmp	r3, #0
 8002296:	d01b      	beq.n	80022d0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f06f 0210 	mvn.w	r2, #16
 80022a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2208      	movs	r2, #8
 80022a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	69db      	ldr	r3, [r3, #28]
 80022ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d003      	beq.n	80022be <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f000 f927 	bl	800250a <HAL_TIM_IC_CaptureCallback>
 80022bc:	e005      	b.n	80022ca <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f000 f919 	bl	80024f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	f000 f92a 	bl	800251e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2200      	movs	r2, #0
 80022ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	f003 0301 	and.w	r3, r3, #1
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d00c      	beq.n	80022f4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	f003 0301 	and.w	r3, r3, #1
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d007      	beq.n	80022f4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f06f 0201 	mvn.w	r2, #1
 80022ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f7fe f9c4 	bl	800067c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d00c      	beq.n	8002318 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002304:	2b00      	cmp	r3, #0
 8002306:	d007      	beq.n	8002318 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002310:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f000 fade 	bl	80028d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800231e:	2b00      	cmp	r3, #0
 8002320:	d00c      	beq.n	800233c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002328:	2b00      	cmp	r3, #0
 800232a:	d007      	beq.n	800233c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002334:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f000 f8fb 	bl	8002532 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	f003 0320 	and.w	r3, r3, #32
 8002342:	2b00      	cmp	r3, #0
 8002344:	d00c      	beq.n	8002360 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	f003 0320 	and.w	r3, r3, #32
 800234c:	2b00      	cmp	r3, #0
 800234e:	d007      	beq.n	8002360 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f06f 0220 	mvn.w	r2, #32
 8002358:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f000 fab0 	bl	80028c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002360:	bf00      	nop
 8002362:	3710      	adds	r7, #16
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}

08002368 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b084      	sub	sp, #16
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002372:	2300      	movs	r3, #0
 8002374:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800237c:	2b01      	cmp	r3, #1
 800237e:	d101      	bne.n	8002384 <HAL_TIM_ConfigClockSource+0x1c>
 8002380:	2302      	movs	r3, #2
 8002382:	e0b4      	b.n	80024ee <HAL_TIM_ConfigClockSource+0x186>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2201      	movs	r2, #1
 8002388:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2202      	movs	r2, #2
 8002390:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80023a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80023aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	68ba      	ldr	r2, [r7, #8]
 80023b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80023bc:	d03e      	beq.n	800243c <HAL_TIM_ConfigClockSource+0xd4>
 80023be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80023c2:	f200 8087 	bhi.w	80024d4 <HAL_TIM_ConfigClockSource+0x16c>
 80023c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80023ca:	f000 8086 	beq.w	80024da <HAL_TIM_ConfigClockSource+0x172>
 80023ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80023d2:	d87f      	bhi.n	80024d4 <HAL_TIM_ConfigClockSource+0x16c>
 80023d4:	2b70      	cmp	r3, #112	@ 0x70
 80023d6:	d01a      	beq.n	800240e <HAL_TIM_ConfigClockSource+0xa6>
 80023d8:	2b70      	cmp	r3, #112	@ 0x70
 80023da:	d87b      	bhi.n	80024d4 <HAL_TIM_ConfigClockSource+0x16c>
 80023dc:	2b60      	cmp	r3, #96	@ 0x60
 80023de:	d050      	beq.n	8002482 <HAL_TIM_ConfigClockSource+0x11a>
 80023e0:	2b60      	cmp	r3, #96	@ 0x60
 80023e2:	d877      	bhi.n	80024d4 <HAL_TIM_ConfigClockSource+0x16c>
 80023e4:	2b50      	cmp	r3, #80	@ 0x50
 80023e6:	d03c      	beq.n	8002462 <HAL_TIM_ConfigClockSource+0xfa>
 80023e8:	2b50      	cmp	r3, #80	@ 0x50
 80023ea:	d873      	bhi.n	80024d4 <HAL_TIM_ConfigClockSource+0x16c>
 80023ec:	2b40      	cmp	r3, #64	@ 0x40
 80023ee:	d058      	beq.n	80024a2 <HAL_TIM_ConfigClockSource+0x13a>
 80023f0:	2b40      	cmp	r3, #64	@ 0x40
 80023f2:	d86f      	bhi.n	80024d4 <HAL_TIM_ConfigClockSource+0x16c>
 80023f4:	2b30      	cmp	r3, #48	@ 0x30
 80023f6:	d064      	beq.n	80024c2 <HAL_TIM_ConfigClockSource+0x15a>
 80023f8:	2b30      	cmp	r3, #48	@ 0x30
 80023fa:	d86b      	bhi.n	80024d4 <HAL_TIM_ConfigClockSource+0x16c>
 80023fc:	2b20      	cmp	r3, #32
 80023fe:	d060      	beq.n	80024c2 <HAL_TIM_ConfigClockSource+0x15a>
 8002400:	2b20      	cmp	r3, #32
 8002402:	d867      	bhi.n	80024d4 <HAL_TIM_ConfigClockSource+0x16c>
 8002404:	2b00      	cmp	r3, #0
 8002406:	d05c      	beq.n	80024c2 <HAL_TIM_ConfigClockSource+0x15a>
 8002408:	2b10      	cmp	r3, #16
 800240a:	d05a      	beq.n	80024c2 <HAL_TIM_ConfigClockSource+0x15a>
 800240c:	e062      	b.n	80024d4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800241e:	f000 f9b3 	bl	8002788 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002430:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	68ba      	ldr	r2, [r7, #8]
 8002438:	609a      	str	r2, [r3, #8]
      break;
 800243a:	e04f      	b.n	80024dc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800244c:	f000 f99c 	bl	8002788 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	689a      	ldr	r2, [r3, #8]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800245e:	609a      	str	r2, [r3, #8]
      break;
 8002460:	e03c      	b.n	80024dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800246e:	461a      	mov	r2, r3
 8002470:	f000 f910 	bl	8002694 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	2150      	movs	r1, #80	@ 0x50
 800247a:	4618      	mov	r0, r3
 800247c:	f000 f969 	bl	8002752 <TIM_ITRx_SetConfig>
      break;
 8002480:	e02c      	b.n	80024dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800248e:	461a      	mov	r2, r3
 8002490:	f000 f92f 	bl	80026f2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	2160      	movs	r1, #96	@ 0x60
 800249a:	4618      	mov	r0, r3
 800249c:	f000 f959 	bl	8002752 <TIM_ITRx_SetConfig>
      break;
 80024a0:	e01c      	b.n	80024dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80024ae:	461a      	mov	r2, r3
 80024b0:	f000 f8f0 	bl	8002694 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	2140      	movs	r1, #64	@ 0x40
 80024ba:	4618      	mov	r0, r3
 80024bc:	f000 f949 	bl	8002752 <TIM_ITRx_SetConfig>
      break;
 80024c0:	e00c      	b.n	80024dc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4619      	mov	r1, r3
 80024cc:	4610      	mov	r0, r2
 80024ce:	f000 f940 	bl	8002752 <TIM_ITRx_SetConfig>
      break;
 80024d2:	e003      	b.n	80024dc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	73fb      	strb	r3, [r7, #15]
      break;
 80024d8:	e000      	b.n	80024dc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80024da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2201      	movs	r2, #1
 80024e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2200      	movs	r2, #0
 80024e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80024ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3710      	adds	r7, #16
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}

080024f6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80024f6:	b480      	push	{r7}
 80024f8:	b083      	sub	sp, #12
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80024fe:	bf00      	nop
 8002500:	370c      	adds	r7, #12
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr

0800250a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800250a:	b480      	push	{r7}
 800250c:	b083      	sub	sp, #12
 800250e:	af00      	add	r7, sp, #0
 8002510:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002512:	bf00      	nop
 8002514:	370c      	adds	r7, #12
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr

0800251e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800251e:	b480      	push	{r7}
 8002520:	b083      	sub	sp, #12
 8002522:	af00      	add	r7, sp, #0
 8002524:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002526:	bf00      	nop
 8002528:	370c      	adds	r7, #12
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr

08002532 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002532:	b480      	push	{r7}
 8002534:	b083      	sub	sp, #12
 8002536:	af00      	add	r7, sp, #0
 8002538:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800253a:	bf00      	nop
 800253c:	370c      	adds	r7, #12
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr
	...

08002548 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002548:	b480      	push	{r7}
 800254a:	b085      	sub	sp, #20
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	4a43      	ldr	r2, [pc, #268]	@ (8002668 <TIM_Base_SetConfig+0x120>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d013      	beq.n	8002588 <TIM_Base_SetConfig+0x40>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002566:	d00f      	beq.n	8002588 <TIM_Base_SetConfig+0x40>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	4a40      	ldr	r2, [pc, #256]	@ (800266c <TIM_Base_SetConfig+0x124>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d00b      	beq.n	8002588 <TIM_Base_SetConfig+0x40>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	4a3f      	ldr	r2, [pc, #252]	@ (8002670 <TIM_Base_SetConfig+0x128>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d007      	beq.n	8002588 <TIM_Base_SetConfig+0x40>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	4a3e      	ldr	r2, [pc, #248]	@ (8002674 <TIM_Base_SetConfig+0x12c>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d003      	beq.n	8002588 <TIM_Base_SetConfig+0x40>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	4a3d      	ldr	r2, [pc, #244]	@ (8002678 <TIM_Base_SetConfig+0x130>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d108      	bne.n	800259a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800258e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	68fa      	ldr	r2, [r7, #12]
 8002596:	4313      	orrs	r3, r2
 8002598:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4a32      	ldr	r2, [pc, #200]	@ (8002668 <TIM_Base_SetConfig+0x120>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d02b      	beq.n	80025fa <TIM_Base_SetConfig+0xb2>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025a8:	d027      	beq.n	80025fa <TIM_Base_SetConfig+0xb2>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4a2f      	ldr	r2, [pc, #188]	@ (800266c <TIM_Base_SetConfig+0x124>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d023      	beq.n	80025fa <TIM_Base_SetConfig+0xb2>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4a2e      	ldr	r2, [pc, #184]	@ (8002670 <TIM_Base_SetConfig+0x128>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d01f      	beq.n	80025fa <TIM_Base_SetConfig+0xb2>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4a2d      	ldr	r2, [pc, #180]	@ (8002674 <TIM_Base_SetConfig+0x12c>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d01b      	beq.n	80025fa <TIM_Base_SetConfig+0xb2>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4a2c      	ldr	r2, [pc, #176]	@ (8002678 <TIM_Base_SetConfig+0x130>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d017      	beq.n	80025fa <TIM_Base_SetConfig+0xb2>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4a2b      	ldr	r2, [pc, #172]	@ (800267c <TIM_Base_SetConfig+0x134>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d013      	beq.n	80025fa <TIM_Base_SetConfig+0xb2>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4a2a      	ldr	r2, [pc, #168]	@ (8002680 <TIM_Base_SetConfig+0x138>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d00f      	beq.n	80025fa <TIM_Base_SetConfig+0xb2>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a29      	ldr	r2, [pc, #164]	@ (8002684 <TIM_Base_SetConfig+0x13c>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d00b      	beq.n	80025fa <TIM_Base_SetConfig+0xb2>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a28      	ldr	r2, [pc, #160]	@ (8002688 <TIM_Base_SetConfig+0x140>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d007      	beq.n	80025fa <TIM_Base_SetConfig+0xb2>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a27      	ldr	r2, [pc, #156]	@ (800268c <TIM_Base_SetConfig+0x144>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d003      	beq.n	80025fa <TIM_Base_SetConfig+0xb2>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a26      	ldr	r2, [pc, #152]	@ (8002690 <TIM_Base_SetConfig+0x148>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d108      	bne.n	800260c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002600:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	68db      	ldr	r3, [r3, #12]
 8002606:	68fa      	ldr	r2, [r7, #12]
 8002608:	4313      	orrs	r3, r2
 800260a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	695b      	ldr	r3, [r3, #20]
 8002616:	4313      	orrs	r3, r2
 8002618:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	689a      	ldr	r2, [r3, #8]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4a0e      	ldr	r2, [pc, #56]	@ (8002668 <TIM_Base_SetConfig+0x120>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d003      	beq.n	800263a <TIM_Base_SetConfig+0xf2>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4a10      	ldr	r2, [pc, #64]	@ (8002678 <TIM_Base_SetConfig+0x130>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d103      	bne.n	8002642 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	691a      	ldr	r2, [r3, #16]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f043 0204 	orr.w	r2, r3, #4
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2201      	movs	r2, #1
 8002652:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	68fa      	ldr	r2, [r7, #12]
 8002658:	601a      	str	r2, [r3, #0]
}
 800265a:	bf00      	nop
 800265c:	3714      	adds	r7, #20
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr
 8002666:	bf00      	nop
 8002668:	40010000 	.word	0x40010000
 800266c:	40000400 	.word	0x40000400
 8002670:	40000800 	.word	0x40000800
 8002674:	40000c00 	.word	0x40000c00
 8002678:	40010400 	.word	0x40010400
 800267c:	40014000 	.word	0x40014000
 8002680:	40014400 	.word	0x40014400
 8002684:	40014800 	.word	0x40014800
 8002688:	40001800 	.word	0x40001800
 800268c:	40001c00 	.word	0x40001c00
 8002690:	40002000 	.word	0x40002000

08002694 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002694:	b480      	push	{r7}
 8002696:	b087      	sub	sp, #28
 8002698:	af00      	add	r7, sp, #0
 800269a:	60f8      	str	r0, [r7, #12]
 800269c:	60b9      	str	r1, [r7, #8]
 800269e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	6a1b      	ldr	r3, [r3, #32]
 80026a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	6a1b      	ldr	r3, [r3, #32]
 80026aa:	f023 0201 	bic.w	r2, r3, #1
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	699b      	ldr	r3, [r3, #24]
 80026b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80026be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	011b      	lsls	r3, r3, #4
 80026c4:	693a      	ldr	r2, [r7, #16]
 80026c6:	4313      	orrs	r3, r2
 80026c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	f023 030a 	bic.w	r3, r3, #10
 80026d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80026d2:	697a      	ldr	r2, [r7, #20]
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	693a      	ldr	r2, [r7, #16]
 80026de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	697a      	ldr	r2, [r7, #20]
 80026e4:	621a      	str	r2, [r3, #32]
}
 80026e6:	bf00      	nop
 80026e8:	371c      	adds	r7, #28
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr

080026f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80026f2:	b480      	push	{r7}
 80026f4:	b087      	sub	sp, #28
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	60f8      	str	r0, [r7, #12]
 80026fa:	60b9      	str	r1, [r7, #8]
 80026fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	6a1b      	ldr	r3, [r3, #32]
 8002702:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	6a1b      	ldr	r3, [r3, #32]
 8002708:	f023 0210 	bic.w	r2, r3, #16
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	699b      	ldr	r3, [r3, #24]
 8002714:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800271c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	031b      	lsls	r3, r3, #12
 8002722:	693a      	ldr	r2, [r7, #16]
 8002724:	4313      	orrs	r3, r2
 8002726:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800272e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	011b      	lsls	r3, r3, #4
 8002734:	697a      	ldr	r2, [r7, #20]
 8002736:	4313      	orrs	r3, r2
 8002738:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	693a      	ldr	r2, [r7, #16]
 800273e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	697a      	ldr	r2, [r7, #20]
 8002744:	621a      	str	r2, [r3, #32]
}
 8002746:	bf00      	nop
 8002748:	371c      	adds	r7, #28
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr

08002752 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002752:	b480      	push	{r7}
 8002754:	b085      	sub	sp, #20
 8002756:	af00      	add	r7, sp, #0
 8002758:	6078      	str	r0, [r7, #4]
 800275a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002768:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800276a:	683a      	ldr	r2, [r7, #0]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	4313      	orrs	r3, r2
 8002770:	f043 0307 	orr.w	r3, r3, #7
 8002774:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	68fa      	ldr	r2, [r7, #12]
 800277a:	609a      	str	r2, [r3, #8]
}
 800277c:	bf00      	nop
 800277e:	3714      	adds	r7, #20
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr

08002788 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002788:	b480      	push	{r7}
 800278a:	b087      	sub	sp, #28
 800278c:	af00      	add	r7, sp, #0
 800278e:	60f8      	str	r0, [r7, #12]
 8002790:	60b9      	str	r1, [r7, #8]
 8002792:	607a      	str	r2, [r7, #4]
 8002794:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80027a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	021a      	lsls	r2, r3, #8
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	431a      	orrs	r2, r3
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	4313      	orrs	r3, r2
 80027b0:	697a      	ldr	r2, [r7, #20]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	697a      	ldr	r2, [r7, #20]
 80027ba:	609a      	str	r2, [r3, #8]
}
 80027bc:	bf00      	nop
 80027be:	371c      	adds	r7, #28
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr

080027c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b085      	sub	sp, #20
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d101      	bne.n	80027e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80027dc:	2302      	movs	r3, #2
 80027de:	e05a      	b.n	8002896 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2201      	movs	r2, #1
 80027e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2202      	movs	r2, #2
 80027ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002806:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	68fa      	ldr	r2, [r7, #12]
 800280e:	4313      	orrs	r3, r2
 8002810:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	68fa      	ldr	r2, [r7, #12]
 8002818:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a21      	ldr	r2, [pc, #132]	@ (80028a4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d022      	beq.n	800286a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800282c:	d01d      	beq.n	800286a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a1d      	ldr	r2, [pc, #116]	@ (80028a8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d018      	beq.n	800286a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a1b      	ldr	r2, [pc, #108]	@ (80028ac <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d013      	beq.n	800286a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a1a      	ldr	r2, [pc, #104]	@ (80028b0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d00e      	beq.n	800286a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a18      	ldr	r2, [pc, #96]	@ (80028b4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d009      	beq.n	800286a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a17      	ldr	r2, [pc, #92]	@ (80028b8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d004      	beq.n	800286a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a15      	ldr	r2, [pc, #84]	@ (80028bc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d10c      	bne.n	8002884 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002870:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	68ba      	ldr	r2, [r7, #8]
 8002878:	4313      	orrs	r3, r2
 800287a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	68ba      	ldr	r2, [r7, #8]
 8002882:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2201      	movs	r2, #1
 8002888:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2200      	movs	r2, #0
 8002890:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002894:	2300      	movs	r3, #0
}
 8002896:	4618      	mov	r0, r3
 8002898:	3714      	adds	r7, #20
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr
 80028a2:	bf00      	nop
 80028a4:	40010000 	.word	0x40010000
 80028a8:	40000400 	.word	0x40000400
 80028ac:	40000800 	.word	0x40000800
 80028b0:	40000c00 	.word	0x40000c00
 80028b4:	40010400 	.word	0x40010400
 80028b8:	40014000 	.word	0x40014000
 80028bc:	40001800 	.word	0x40001800

080028c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80028c8:	bf00      	nop
 80028ca:	370c      	adds	r7, #12
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr

080028d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80028dc:	bf00      	nop
 80028de:	370c      	adds	r7, #12
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr

080028e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b082      	sub	sp, #8
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d101      	bne.n	80028fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e042      	b.n	8002980 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002900:	b2db      	uxtb	r3, r3
 8002902:	2b00      	cmp	r3, #0
 8002904:	d106      	bne.n	8002914 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2200      	movs	r2, #0
 800290a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f7fe fa04 	bl	8000d1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2224      	movs	r2, #36	@ 0x24
 8002918:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	68da      	ldr	r2, [r3, #12]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800292a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800292c:	6878      	ldr	r0, [r7, #4]
 800292e:	f000 fa09 	bl	8002d44 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	691a      	ldr	r2, [r3, #16]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002940:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	695a      	ldr	r2, [r3, #20]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002950:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	68da      	ldr	r2, [r3, #12]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002960:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2200      	movs	r2, #0
 8002966:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2220      	movs	r2, #32
 800296c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2220      	movs	r2, #32
 8002974:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2200      	movs	r2, #0
 800297c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800297e:	2300      	movs	r3, #0
}
 8002980:	4618      	mov	r0, r3
 8002982:	3708      	adds	r7, #8
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}

08002988 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b08a      	sub	sp, #40	@ 0x28
 800298c:	af02      	add	r7, sp, #8
 800298e:	60f8      	str	r0, [r7, #12]
 8002990:	60b9      	str	r1, [r7, #8]
 8002992:	603b      	str	r3, [r7, #0]
 8002994:	4613      	mov	r3, r2
 8002996:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002998:	2300      	movs	r3, #0
 800299a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	2b20      	cmp	r3, #32
 80029a6:	d175      	bne.n	8002a94 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d002      	beq.n	80029b4 <HAL_UART_Transmit+0x2c>
 80029ae:	88fb      	ldrh	r3, [r7, #6]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d101      	bne.n	80029b8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e06e      	b.n	8002a96 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2200      	movs	r2, #0
 80029bc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2221      	movs	r2, #33	@ 0x21
 80029c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80029c6:	f7fe fb6f 	bl	80010a8 <HAL_GetTick>
 80029ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	88fa      	ldrh	r2, [r7, #6]
 80029d0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	88fa      	ldrh	r2, [r7, #6]
 80029d6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029e0:	d108      	bne.n	80029f4 <HAL_UART_Transmit+0x6c>
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	691b      	ldr	r3, [r3, #16]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d104      	bne.n	80029f4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80029ea:	2300      	movs	r3, #0
 80029ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	61bb      	str	r3, [r7, #24]
 80029f2:	e003      	b.n	80029fc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80029f8:	2300      	movs	r3, #0
 80029fa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80029fc:	e02e      	b.n	8002a5c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	9300      	str	r3, [sp, #0]
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	2200      	movs	r2, #0
 8002a06:	2180      	movs	r1, #128	@ 0x80
 8002a08:	68f8      	ldr	r0, [r7, #12]
 8002a0a:	f000 f8df 	bl	8002bcc <UART_WaitOnFlagUntilTimeout>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d005      	beq.n	8002a20 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2220      	movs	r2, #32
 8002a18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	e03a      	b.n	8002a96 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002a20:	69fb      	ldr	r3, [r7, #28]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d10b      	bne.n	8002a3e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a26:	69bb      	ldr	r3, [r7, #24]
 8002a28:	881b      	ldrh	r3, [r3, #0]
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a34:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002a36:	69bb      	ldr	r3, [r7, #24]
 8002a38:	3302      	adds	r3, #2
 8002a3a:	61bb      	str	r3, [r7, #24]
 8002a3c:	e007      	b.n	8002a4e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	781a      	ldrb	r2, [r3, #0]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	3301      	adds	r3, #1
 8002a4c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002a52:	b29b      	uxth	r3, r3
 8002a54:	3b01      	subs	r3, #1
 8002a56:	b29a      	uxth	r2, r3
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002a60:	b29b      	uxth	r3, r3
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d1cb      	bne.n	80029fe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	9300      	str	r3, [sp, #0]
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	2140      	movs	r1, #64	@ 0x40
 8002a70:	68f8      	ldr	r0, [r7, #12]
 8002a72:	f000 f8ab 	bl	8002bcc <UART_WaitOnFlagUntilTimeout>
 8002a76:	4603      	mov	r3, r0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d005      	beq.n	8002a88 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2220      	movs	r2, #32
 8002a80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002a84:	2303      	movs	r3, #3
 8002a86:	e006      	b.n	8002a96 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2220      	movs	r2, #32
 8002a8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002a90:	2300      	movs	r3, #0
 8002a92:	e000      	b.n	8002a96 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002a94:	2302      	movs	r3, #2
  }
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3720      	adds	r7, #32
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}

08002a9e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a9e:	b580      	push	{r7, lr}
 8002aa0:	b08a      	sub	sp, #40	@ 0x28
 8002aa2:	af02      	add	r7, sp, #8
 8002aa4:	60f8      	str	r0, [r7, #12]
 8002aa6:	60b9      	str	r1, [r7, #8]
 8002aa8:	603b      	str	r3, [r7, #0]
 8002aaa:	4613      	mov	r3, r2
 8002aac:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	2b20      	cmp	r3, #32
 8002abc:	f040 8081 	bne.w	8002bc2 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d002      	beq.n	8002acc <HAL_UART_Receive+0x2e>
 8002ac6:	88fb      	ldrh	r3, [r7, #6]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d101      	bne.n	8002ad0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e079      	b.n	8002bc4 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2222      	movs	r2, #34	@ 0x22
 8002ada:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ae4:	f7fe fae0 	bl	80010a8 <HAL_GetTick>
 8002ae8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	88fa      	ldrh	r2, [r7, #6]
 8002aee:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	88fa      	ldrh	r2, [r7, #6]
 8002af4:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002afe:	d108      	bne.n	8002b12 <HAL_UART_Receive+0x74>
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	691b      	ldr	r3, [r3, #16]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d104      	bne.n	8002b12 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	61bb      	str	r3, [r7, #24]
 8002b10:	e003      	b.n	8002b1a <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b16:	2300      	movs	r3, #0
 8002b18:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002b1a:	e047      	b.n	8002bac <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	9300      	str	r3, [sp, #0]
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	2200      	movs	r2, #0
 8002b24:	2120      	movs	r1, #32
 8002b26:	68f8      	ldr	r0, [r7, #12]
 8002b28:	f000 f850 	bl	8002bcc <UART_WaitOnFlagUntilTimeout>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d005      	beq.n	8002b3e <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2220      	movs	r2, #32
 8002b36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e042      	b.n	8002bc4 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d10c      	bne.n	8002b5e <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b50:	b29a      	uxth	r2, r3
 8002b52:	69bb      	ldr	r3, [r7, #24]
 8002b54:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002b56:	69bb      	ldr	r3, [r7, #24]
 8002b58:	3302      	adds	r3, #2
 8002b5a:	61bb      	str	r3, [r7, #24]
 8002b5c:	e01f      	b.n	8002b9e <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b66:	d007      	beq.n	8002b78 <HAL_UART_Receive+0xda>
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d10a      	bne.n	8002b86 <HAL_UART_Receive+0xe8>
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	691b      	ldr	r3, [r3, #16]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d106      	bne.n	8002b86 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	b2da      	uxtb	r2, r3
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	701a      	strb	r2, [r3, #0]
 8002b84:	e008      	b.n	8002b98 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002b92:	b2da      	uxtb	r2, r3
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	3301      	adds	r3, #1
 8002b9c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002ba2:	b29b      	uxth	r3, r3
 8002ba4:	3b01      	subs	r3, #1
 8002ba6:	b29a      	uxth	r2, r3
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d1b2      	bne.n	8002b1c <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2220      	movs	r2, #32
 8002bba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	e000      	b.n	8002bc4 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8002bc2:	2302      	movs	r3, #2
  }
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3720      	adds	r7, #32
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}

08002bcc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b086      	sub	sp, #24
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	60f8      	str	r0, [r7, #12]
 8002bd4:	60b9      	str	r1, [r7, #8]
 8002bd6:	603b      	str	r3, [r7, #0]
 8002bd8:	4613      	mov	r3, r2
 8002bda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002bdc:	e03b      	b.n	8002c56 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bde:	6a3b      	ldr	r3, [r7, #32]
 8002be0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002be4:	d037      	beq.n	8002c56 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002be6:	f7fe fa5f 	bl	80010a8 <HAL_GetTick>
 8002bea:	4602      	mov	r2, r0
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	1ad3      	subs	r3, r2, r3
 8002bf0:	6a3a      	ldr	r2, [r7, #32]
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d302      	bcc.n	8002bfc <UART_WaitOnFlagUntilTimeout+0x30>
 8002bf6:	6a3b      	ldr	r3, [r7, #32]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d101      	bne.n	8002c00 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002bfc:	2303      	movs	r3, #3
 8002bfe:	e03a      	b.n	8002c76 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	68db      	ldr	r3, [r3, #12]
 8002c06:	f003 0304 	and.w	r3, r3, #4
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d023      	beq.n	8002c56 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	2b80      	cmp	r3, #128	@ 0x80
 8002c12:	d020      	beq.n	8002c56 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	2b40      	cmp	r3, #64	@ 0x40
 8002c18:	d01d      	beq.n	8002c56 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0308 	and.w	r3, r3, #8
 8002c24:	2b08      	cmp	r3, #8
 8002c26:	d116      	bne.n	8002c56 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002c28:	2300      	movs	r3, #0
 8002c2a:	617b      	str	r3, [r7, #20]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	617b      	str	r3, [r7, #20]
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	617b      	str	r3, [r7, #20]
 8002c3c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002c3e:	68f8      	ldr	r0, [r7, #12]
 8002c40:	f000 f81d 	bl	8002c7e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2208      	movs	r2, #8
 8002c48:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e00f      	b.n	8002c76 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	4013      	ands	r3, r2
 8002c60:	68ba      	ldr	r2, [r7, #8]
 8002c62:	429a      	cmp	r2, r3
 8002c64:	bf0c      	ite	eq
 8002c66:	2301      	moveq	r3, #1
 8002c68:	2300      	movne	r3, #0
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	79fb      	ldrb	r3, [r7, #7]
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d0b4      	beq.n	8002bde <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002c74:	2300      	movs	r3, #0
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3718      	adds	r7, #24
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}

08002c7e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002c7e:	b480      	push	{r7}
 8002c80:	b095      	sub	sp, #84	@ 0x54
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	330c      	adds	r3, #12
 8002c8c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c90:	e853 3f00 	ldrex	r3, [r3]
 8002c94:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002c96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c98:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002c9c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	330c      	adds	r3, #12
 8002ca4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002ca6:	643a      	str	r2, [r7, #64]	@ 0x40
 8002ca8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002caa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002cac:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002cae:	e841 2300 	strex	r3, r2, [r1]
 8002cb2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002cb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d1e5      	bne.n	8002c86 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	3314      	adds	r3, #20
 8002cc0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cc2:	6a3b      	ldr	r3, [r7, #32]
 8002cc4:	e853 3f00 	ldrex	r3, [r3]
 8002cc8:	61fb      	str	r3, [r7, #28]
   return(result);
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	f023 0301 	bic.w	r3, r3, #1
 8002cd0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	3314      	adds	r3, #20
 8002cd8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002cda:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002cdc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cde:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002ce0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002ce2:	e841 2300 	strex	r3, r2, [r1]
 8002ce6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d1e5      	bne.n	8002cba <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d119      	bne.n	8002d2a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	330c      	adds	r3, #12
 8002cfc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	e853 3f00 	ldrex	r3, [r3]
 8002d04:	60bb      	str	r3, [r7, #8]
   return(result);
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	f023 0310 	bic.w	r3, r3, #16
 8002d0c:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	330c      	adds	r3, #12
 8002d14:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002d16:	61ba      	str	r2, [r7, #24]
 8002d18:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d1a:	6979      	ldr	r1, [r7, #20]
 8002d1c:	69ba      	ldr	r2, [r7, #24]
 8002d1e:	e841 2300 	strex	r3, r2, [r1]
 8002d22:	613b      	str	r3, [r7, #16]
   return(result);
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d1e5      	bne.n	8002cf6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2220      	movs	r2, #32
 8002d2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002d38:	bf00      	nop
 8002d3a:	3754      	adds	r7, #84	@ 0x54
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr

08002d44 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d48:	b0c0      	sub	sp, #256	@ 0x100
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	691b      	ldr	r3, [r3, #16]
 8002d58:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002d5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d60:	68d9      	ldr	r1, [r3, #12]
 8002d62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	ea40 0301 	orr.w	r3, r0, r1
 8002d6c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002d6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d72:	689a      	ldr	r2, [r3, #8]
 8002d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d78:	691b      	ldr	r3, [r3, #16]
 8002d7a:	431a      	orrs	r2, r3
 8002d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d80:	695b      	ldr	r3, [r3, #20]
 8002d82:	431a      	orrs	r2, r3
 8002d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d88:	69db      	ldr	r3, [r3, #28]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002d90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002d9c:	f021 010c 	bic.w	r1, r1, #12
 8002da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002daa:	430b      	orrs	r3, r1
 8002dac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002dae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	695b      	ldr	r3, [r3, #20]
 8002db6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002dba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dbe:	6999      	ldr	r1, [r3, #24]
 8002dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	ea40 0301 	orr.w	r3, r0, r1
 8002dca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	4b8f      	ldr	r3, [pc, #572]	@ (8003010 <UART_SetConfig+0x2cc>)
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d005      	beq.n	8002de4 <UART_SetConfig+0xa0>
 8002dd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	4b8d      	ldr	r3, [pc, #564]	@ (8003014 <UART_SetConfig+0x2d0>)
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d104      	bne.n	8002dee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002de4:	f7ff f8e4 	bl	8001fb0 <HAL_RCC_GetPCLK2Freq>
 8002de8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002dec:	e003      	b.n	8002df6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002dee:	f7ff f8cb 	bl	8001f88 <HAL_RCC_GetPCLK1Freq>
 8002df2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002df6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dfa:	69db      	ldr	r3, [r3, #28]
 8002dfc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002e00:	f040 810c 	bne.w	800301c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002e04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e08:	2200      	movs	r2, #0
 8002e0a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002e0e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002e12:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002e16:	4622      	mov	r2, r4
 8002e18:	462b      	mov	r3, r5
 8002e1a:	1891      	adds	r1, r2, r2
 8002e1c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002e1e:	415b      	adcs	r3, r3
 8002e20:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002e22:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002e26:	4621      	mov	r1, r4
 8002e28:	eb12 0801 	adds.w	r8, r2, r1
 8002e2c:	4629      	mov	r1, r5
 8002e2e:	eb43 0901 	adc.w	r9, r3, r1
 8002e32:	f04f 0200 	mov.w	r2, #0
 8002e36:	f04f 0300 	mov.w	r3, #0
 8002e3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e46:	4690      	mov	r8, r2
 8002e48:	4699      	mov	r9, r3
 8002e4a:	4623      	mov	r3, r4
 8002e4c:	eb18 0303 	adds.w	r3, r8, r3
 8002e50:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002e54:	462b      	mov	r3, r5
 8002e56:	eb49 0303 	adc.w	r3, r9, r3
 8002e5a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002e5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002e6a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002e6e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002e72:	460b      	mov	r3, r1
 8002e74:	18db      	adds	r3, r3, r3
 8002e76:	653b      	str	r3, [r7, #80]	@ 0x50
 8002e78:	4613      	mov	r3, r2
 8002e7a:	eb42 0303 	adc.w	r3, r2, r3
 8002e7e:	657b      	str	r3, [r7, #84]	@ 0x54
 8002e80:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002e84:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002e88:	f7fd f9fa 	bl	8000280 <__aeabi_uldivmod>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	460b      	mov	r3, r1
 8002e90:	4b61      	ldr	r3, [pc, #388]	@ (8003018 <UART_SetConfig+0x2d4>)
 8002e92:	fba3 2302 	umull	r2, r3, r3, r2
 8002e96:	095b      	lsrs	r3, r3, #5
 8002e98:	011c      	lsls	r4, r3, #4
 8002e9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002ea4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002ea8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002eac:	4642      	mov	r2, r8
 8002eae:	464b      	mov	r3, r9
 8002eb0:	1891      	adds	r1, r2, r2
 8002eb2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002eb4:	415b      	adcs	r3, r3
 8002eb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002eb8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002ebc:	4641      	mov	r1, r8
 8002ebe:	eb12 0a01 	adds.w	sl, r2, r1
 8002ec2:	4649      	mov	r1, r9
 8002ec4:	eb43 0b01 	adc.w	fp, r3, r1
 8002ec8:	f04f 0200 	mov.w	r2, #0
 8002ecc:	f04f 0300 	mov.w	r3, #0
 8002ed0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002ed4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002ed8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002edc:	4692      	mov	sl, r2
 8002ede:	469b      	mov	fp, r3
 8002ee0:	4643      	mov	r3, r8
 8002ee2:	eb1a 0303 	adds.w	r3, sl, r3
 8002ee6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002eea:	464b      	mov	r3, r9
 8002eec:	eb4b 0303 	adc.w	r3, fp, r3
 8002ef0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	2200      	movs	r2, #0
 8002efc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002f00:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002f04:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002f08:	460b      	mov	r3, r1
 8002f0a:	18db      	adds	r3, r3, r3
 8002f0c:	643b      	str	r3, [r7, #64]	@ 0x40
 8002f0e:	4613      	mov	r3, r2
 8002f10:	eb42 0303 	adc.w	r3, r2, r3
 8002f14:	647b      	str	r3, [r7, #68]	@ 0x44
 8002f16:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002f1a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002f1e:	f7fd f9af 	bl	8000280 <__aeabi_uldivmod>
 8002f22:	4602      	mov	r2, r0
 8002f24:	460b      	mov	r3, r1
 8002f26:	4611      	mov	r1, r2
 8002f28:	4b3b      	ldr	r3, [pc, #236]	@ (8003018 <UART_SetConfig+0x2d4>)
 8002f2a:	fba3 2301 	umull	r2, r3, r3, r1
 8002f2e:	095b      	lsrs	r3, r3, #5
 8002f30:	2264      	movs	r2, #100	@ 0x64
 8002f32:	fb02 f303 	mul.w	r3, r2, r3
 8002f36:	1acb      	subs	r3, r1, r3
 8002f38:	00db      	lsls	r3, r3, #3
 8002f3a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002f3e:	4b36      	ldr	r3, [pc, #216]	@ (8003018 <UART_SetConfig+0x2d4>)
 8002f40:	fba3 2302 	umull	r2, r3, r3, r2
 8002f44:	095b      	lsrs	r3, r3, #5
 8002f46:	005b      	lsls	r3, r3, #1
 8002f48:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002f4c:	441c      	add	r4, r3
 8002f4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f52:	2200      	movs	r2, #0
 8002f54:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002f58:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002f5c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002f60:	4642      	mov	r2, r8
 8002f62:	464b      	mov	r3, r9
 8002f64:	1891      	adds	r1, r2, r2
 8002f66:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002f68:	415b      	adcs	r3, r3
 8002f6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002f6c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002f70:	4641      	mov	r1, r8
 8002f72:	1851      	adds	r1, r2, r1
 8002f74:	6339      	str	r1, [r7, #48]	@ 0x30
 8002f76:	4649      	mov	r1, r9
 8002f78:	414b      	adcs	r3, r1
 8002f7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f7c:	f04f 0200 	mov.w	r2, #0
 8002f80:	f04f 0300 	mov.w	r3, #0
 8002f84:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002f88:	4659      	mov	r1, fp
 8002f8a:	00cb      	lsls	r3, r1, #3
 8002f8c:	4651      	mov	r1, sl
 8002f8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f92:	4651      	mov	r1, sl
 8002f94:	00ca      	lsls	r2, r1, #3
 8002f96:	4610      	mov	r0, r2
 8002f98:	4619      	mov	r1, r3
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	4642      	mov	r2, r8
 8002f9e:	189b      	adds	r3, r3, r2
 8002fa0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002fa4:	464b      	mov	r3, r9
 8002fa6:	460a      	mov	r2, r1
 8002fa8:	eb42 0303 	adc.w	r3, r2, r3
 8002fac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002fbc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002fc0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002fc4:	460b      	mov	r3, r1
 8002fc6:	18db      	adds	r3, r3, r3
 8002fc8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002fca:	4613      	mov	r3, r2
 8002fcc:	eb42 0303 	adc.w	r3, r2, r3
 8002fd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002fd2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002fd6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002fda:	f7fd f951 	bl	8000280 <__aeabi_uldivmod>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	460b      	mov	r3, r1
 8002fe2:	4b0d      	ldr	r3, [pc, #52]	@ (8003018 <UART_SetConfig+0x2d4>)
 8002fe4:	fba3 1302 	umull	r1, r3, r3, r2
 8002fe8:	095b      	lsrs	r3, r3, #5
 8002fea:	2164      	movs	r1, #100	@ 0x64
 8002fec:	fb01 f303 	mul.w	r3, r1, r3
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	00db      	lsls	r3, r3, #3
 8002ff4:	3332      	adds	r3, #50	@ 0x32
 8002ff6:	4a08      	ldr	r2, [pc, #32]	@ (8003018 <UART_SetConfig+0x2d4>)
 8002ff8:	fba2 2303 	umull	r2, r3, r2, r3
 8002ffc:	095b      	lsrs	r3, r3, #5
 8002ffe:	f003 0207 	and.w	r2, r3, #7
 8003002:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4422      	add	r2, r4
 800300a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800300c:	e106      	b.n	800321c <UART_SetConfig+0x4d8>
 800300e:	bf00      	nop
 8003010:	40011000 	.word	0x40011000
 8003014:	40011400 	.word	0x40011400
 8003018:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800301c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003020:	2200      	movs	r2, #0
 8003022:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003026:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800302a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800302e:	4642      	mov	r2, r8
 8003030:	464b      	mov	r3, r9
 8003032:	1891      	adds	r1, r2, r2
 8003034:	6239      	str	r1, [r7, #32]
 8003036:	415b      	adcs	r3, r3
 8003038:	627b      	str	r3, [r7, #36]	@ 0x24
 800303a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800303e:	4641      	mov	r1, r8
 8003040:	1854      	adds	r4, r2, r1
 8003042:	4649      	mov	r1, r9
 8003044:	eb43 0501 	adc.w	r5, r3, r1
 8003048:	f04f 0200 	mov.w	r2, #0
 800304c:	f04f 0300 	mov.w	r3, #0
 8003050:	00eb      	lsls	r3, r5, #3
 8003052:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003056:	00e2      	lsls	r2, r4, #3
 8003058:	4614      	mov	r4, r2
 800305a:	461d      	mov	r5, r3
 800305c:	4643      	mov	r3, r8
 800305e:	18e3      	adds	r3, r4, r3
 8003060:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003064:	464b      	mov	r3, r9
 8003066:	eb45 0303 	adc.w	r3, r5, r3
 800306a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800306e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800307a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800307e:	f04f 0200 	mov.w	r2, #0
 8003082:	f04f 0300 	mov.w	r3, #0
 8003086:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800308a:	4629      	mov	r1, r5
 800308c:	008b      	lsls	r3, r1, #2
 800308e:	4621      	mov	r1, r4
 8003090:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003094:	4621      	mov	r1, r4
 8003096:	008a      	lsls	r2, r1, #2
 8003098:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800309c:	f7fd f8f0 	bl	8000280 <__aeabi_uldivmod>
 80030a0:	4602      	mov	r2, r0
 80030a2:	460b      	mov	r3, r1
 80030a4:	4b60      	ldr	r3, [pc, #384]	@ (8003228 <UART_SetConfig+0x4e4>)
 80030a6:	fba3 2302 	umull	r2, r3, r3, r2
 80030aa:	095b      	lsrs	r3, r3, #5
 80030ac:	011c      	lsls	r4, r3, #4
 80030ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80030b2:	2200      	movs	r2, #0
 80030b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80030b8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80030bc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80030c0:	4642      	mov	r2, r8
 80030c2:	464b      	mov	r3, r9
 80030c4:	1891      	adds	r1, r2, r2
 80030c6:	61b9      	str	r1, [r7, #24]
 80030c8:	415b      	adcs	r3, r3
 80030ca:	61fb      	str	r3, [r7, #28]
 80030cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80030d0:	4641      	mov	r1, r8
 80030d2:	1851      	adds	r1, r2, r1
 80030d4:	6139      	str	r1, [r7, #16]
 80030d6:	4649      	mov	r1, r9
 80030d8:	414b      	adcs	r3, r1
 80030da:	617b      	str	r3, [r7, #20]
 80030dc:	f04f 0200 	mov.w	r2, #0
 80030e0:	f04f 0300 	mov.w	r3, #0
 80030e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80030e8:	4659      	mov	r1, fp
 80030ea:	00cb      	lsls	r3, r1, #3
 80030ec:	4651      	mov	r1, sl
 80030ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80030f2:	4651      	mov	r1, sl
 80030f4:	00ca      	lsls	r2, r1, #3
 80030f6:	4610      	mov	r0, r2
 80030f8:	4619      	mov	r1, r3
 80030fa:	4603      	mov	r3, r0
 80030fc:	4642      	mov	r2, r8
 80030fe:	189b      	adds	r3, r3, r2
 8003100:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003104:	464b      	mov	r3, r9
 8003106:	460a      	mov	r2, r1
 8003108:	eb42 0303 	adc.w	r3, r2, r3
 800310c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	2200      	movs	r2, #0
 8003118:	67bb      	str	r3, [r7, #120]	@ 0x78
 800311a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800311c:	f04f 0200 	mov.w	r2, #0
 8003120:	f04f 0300 	mov.w	r3, #0
 8003124:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003128:	4649      	mov	r1, r9
 800312a:	008b      	lsls	r3, r1, #2
 800312c:	4641      	mov	r1, r8
 800312e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003132:	4641      	mov	r1, r8
 8003134:	008a      	lsls	r2, r1, #2
 8003136:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800313a:	f7fd f8a1 	bl	8000280 <__aeabi_uldivmod>
 800313e:	4602      	mov	r2, r0
 8003140:	460b      	mov	r3, r1
 8003142:	4611      	mov	r1, r2
 8003144:	4b38      	ldr	r3, [pc, #224]	@ (8003228 <UART_SetConfig+0x4e4>)
 8003146:	fba3 2301 	umull	r2, r3, r3, r1
 800314a:	095b      	lsrs	r3, r3, #5
 800314c:	2264      	movs	r2, #100	@ 0x64
 800314e:	fb02 f303 	mul.w	r3, r2, r3
 8003152:	1acb      	subs	r3, r1, r3
 8003154:	011b      	lsls	r3, r3, #4
 8003156:	3332      	adds	r3, #50	@ 0x32
 8003158:	4a33      	ldr	r2, [pc, #204]	@ (8003228 <UART_SetConfig+0x4e4>)
 800315a:	fba2 2303 	umull	r2, r3, r2, r3
 800315e:	095b      	lsrs	r3, r3, #5
 8003160:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003164:	441c      	add	r4, r3
 8003166:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800316a:	2200      	movs	r2, #0
 800316c:	673b      	str	r3, [r7, #112]	@ 0x70
 800316e:	677a      	str	r2, [r7, #116]	@ 0x74
 8003170:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003174:	4642      	mov	r2, r8
 8003176:	464b      	mov	r3, r9
 8003178:	1891      	adds	r1, r2, r2
 800317a:	60b9      	str	r1, [r7, #8]
 800317c:	415b      	adcs	r3, r3
 800317e:	60fb      	str	r3, [r7, #12]
 8003180:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003184:	4641      	mov	r1, r8
 8003186:	1851      	adds	r1, r2, r1
 8003188:	6039      	str	r1, [r7, #0]
 800318a:	4649      	mov	r1, r9
 800318c:	414b      	adcs	r3, r1
 800318e:	607b      	str	r3, [r7, #4]
 8003190:	f04f 0200 	mov.w	r2, #0
 8003194:	f04f 0300 	mov.w	r3, #0
 8003198:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800319c:	4659      	mov	r1, fp
 800319e:	00cb      	lsls	r3, r1, #3
 80031a0:	4651      	mov	r1, sl
 80031a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80031a6:	4651      	mov	r1, sl
 80031a8:	00ca      	lsls	r2, r1, #3
 80031aa:	4610      	mov	r0, r2
 80031ac:	4619      	mov	r1, r3
 80031ae:	4603      	mov	r3, r0
 80031b0:	4642      	mov	r2, r8
 80031b2:	189b      	adds	r3, r3, r2
 80031b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80031b6:	464b      	mov	r3, r9
 80031b8:	460a      	mov	r2, r1
 80031ba:	eb42 0303 	adc.w	r3, r2, r3
 80031be:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80031c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	2200      	movs	r2, #0
 80031c8:	663b      	str	r3, [r7, #96]	@ 0x60
 80031ca:	667a      	str	r2, [r7, #100]	@ 0x64
 80031cc:	f04f 0200 	mov.w	r2, #0
 80031d0:	f04f 0300 	mov.w	r3, #0
 80031d4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80031d8:	4649      	mov	r1, r9
 80031da:	008b      	lsls	r3, r1, #2
 80031dc:	4641      	mov	r1, r8
 80031de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80031e2:	4641      	mov	r1, r8
 80031e4:	008a      	lsls	r2, r1, #2
 80031e6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80031ea:	f7fd f849 	bl	8000280 <__aeabi_uldivmod>
 80031ee:	4602      	mov	r2, r0
 80031f0:	460b      	mov	r3, r1
 80031f2:	4b0d      	ldr	r3, [pc, #52]	@ (8003228 <UART_SetConfig+0x4e4>)
 80031f4:	fba3 1302 	umull	r1, r3, r3, r2
 80031f8:	095b      	lsrs	r3, r3, #5
 80031fa:	2164      	movs	r1, #100	@ 0x64
 80031fc:	fb01 f303 	mul.w	r3, r1, r3
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	011b      	lsls	r3, r3, #4
 8003204:	3332      	adds	r3, #50	@ 0x32
 8003206:	4a08      	ldr	r2, [pc, #32]	@ (8003228 <UART_SetConfig+0x4e4>)
 8003208:	fba2 2303 	umull	r2, r3, r2, r3
 800320c:	095b      	lsrs	r3, r3, #5
 800320e:	f003 020f 	and.w	r2, r3, #15
 8003212:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4422      	add	r2, r4
 800321a:	609a      	str	r2, [r3, #8]
}
 800321c:	bf00      	nop
 800321e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003222:	46bd      	mov	sp, r7
 8003224:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003228:	51eb851f 	.word	0x51eb851f

0800322c <_strtol_l.isra.0>:
 800322c:	2b24      	cmp	r3, #36	@ 0x24
 800322e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003232:	4686      	mov	lr, r0
 8003234:	4690      	mov	r8, r2
 8003236:	d801      	bhi.n	800323c <_strtol_l.isra.0+0x10>
 8003238:	2b01      	cmp	r3, #1
 800323a:	d106      	bne.n	800324a <_strtol_l.isra.0+0x1e>
 800323c:	f000 f8ca 	bl	80033d4 <__errno>
 8003240:	2316      	movs	r3, #22
 8003242:	6003      	str	r3, [r0, #0]
 8003244:	2000      	movs	r0, #0
 8003246:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800324a:	4834      	ldr	r0, [pc, #208]	@ (800331c <_strtol_l.isra.0+0xf0>)
 800324c:	460d      	mov	r5, r1
 800324e:	462a      	mov	r2, r5
 8003250:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003254:	5d06      	ldrb	r6, [r0, r4]
 8003256:	f016 0608 	ands.w	r6, r6, #8
 800325a:	d1f8      	bne.n	800324e <_strtol_l.isra.0+0x22>
 800325c:	2c2d      	cmp	r4, #45	@ 0x2d
 800325e:	d110      	bne.n	8003282 <_strtol_l.isra.0+0x56>
 8003260:	782c      	ldrb	r4, [r5, #0]
 8003262:	2601      	movs	r6, #1
 8003264:	1c95      	adds	r5, r2, #2
 8003266:	f033 0210 	bics.w	r2, r3, #16
 800326a:	d115      	bne.n	8003298 <_strtol_l.isra.0+0x6c>
 800326c:	2c30      	cmp	r4, #48	@ 0x30
 800326e:	d10d      	bne.n	800328c <_strtol_l.isra.0+0x60>
 8003270:	782a      	ldrb	r2, [r5, #0]
 8003272:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8003276:	2a58      	cmp	r2, #88	@ 0x58
 8003278:	d108      	bne.n	800328c <_strtol_l.isra.0+0x60>
 800327a:	786c      	ldrb	r4, [r5, #1]
 800327c:	3502      	adds	r5, #2
 800327e:	2310      	movs	r3, #16
 8003280:	e00a      	b.n	8003298 <_strtol_l.isra.0+0x6c>
 8003282:	2c2b      	cmp	r4, #43	@ 0x2b
 8003284:	bf04      	itt	eq
 8003286:	782c      	ldrbeq	r4, [r5, #0]
 8003288:	1c95      	addeq	r5, r2, #2
 800328a:	e7ec      	b.n	8003266 <_strtol_l.isra.0+0x3a>
 800328c:	2b00      	cmp	r3, #0
 800328e:	d1f6      	bne.n	800327e <_strtol_l.isra.0+0x52>
 8003290:	2c30      	cmp	r4, #48	@ 0x30
 8003292:	bf14      	ite	ne
 8003294:	230a      	movne	r3, #10
 8003296:	2308      	moveq	r3, #8
 8003298:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800329c:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 80032a0:	2200      	movs	r2, #0
 80032a2:	fbbc f9f3 	udiv	r9, ip, r3
 80032a6:	4610      	mov	r0, r2
 80032a8:	fb03 ca19 	mls	sl, r3, r9, ip
 80032ac:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80032b0:	2f09      	cmp	r7, #9
 80032b2:	d80f      	bhi.n	80032d4 <_strtol_l.isra.0+0xa8>
 80032b4:	463c      	mov	r4, r7
 80032b6:	42a3      	cmp	r3, r4
 80032b8:	dd1b      	ble.n	80032f2 <_strtol_l.isra.0+0xc6>
 80032ba:	1c57      	adds	r7, r2, #1
 80032bc:	d007      	beq.n	80032ce <_strtol_l.isra.0+0xa2>
 80032be:	4581      	cmp	r9, r0
 80032c0:	d314      	bcc.n	80032ec <_strtol_l.isra.0+0xc0>
 80032c2:	d101      	bne.n	80032c8 <_strtol_l.isra.0+0x9c>
 80032c4:	45a2      	cmp	sl, r4
 80032c6:	db11      	blt.n	80032ec <_strtol_l.isra.0+0xc0>
 80032c8:	fb00 4003 	mla	r0, r0, r3, r4
 80032cc:	2201      	movs	r2, #1
 80032ce:	f815 4b01 	ldrb.w	r4, [r5], #1
 80032d2:	e7eb      	b.n	80032ac <_strtol_l.isra.0+0x80>
 80032d4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80032d8:	2f19      	cmp	r7, #25
 80032da:	d801      	bhi.n	80032e0 <_strtol_l.isra.0+0xb4>
 80032dc:	3c37      	subs	r4, #55	@ 0x37
 80032de:	e7ea      	b.n	80032b6 <_strtol_l.isra.0+0x8a>
 80032e0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80032e4:	2f19      	cmp	r7, #25
 80032e6:	d804      	bhi.n	80032f2 <_strtol_l.isra.0+0xc6>
 80032e8:	3c57      	subs	r4, #87	@ 0x57
 80032ea:	e7e4      	b.n	80032b6 <_strtol_l.isra.0+0x8a>
 80032ec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80032f0:	e7ed      	b.n	80032ce <_strtol_l.isra.0+0xa2>
 80032f2:	1c53      	adds	r3, r2, #1
 80032f4:	d108      	bne.n	8003308 <_strtol_l.isra.0+0xdc>
 80032f6:	2322      	movs	r3, #34	@ 0x22
 80032f8:	f8ce 3000 	str.w	r3, [lr]
 80032fc:	4660      	mov	r0, ip
 80032fe:	f1b8 0f00 	cmp.w	r8, #0
 8003302:	d0a0      	beq.n	8003246 <_strtol_l.isra.0+0x1a>
 8003304:	1e69      	subs	r1, r5, #1
 8003306:	e006      	b.n	8003316 <_strtol_l.isra.0+0xea>
 8003308:	b106      	cbz	r6, 800330c <_strtol_l.isra.0+0xe0>
 800330a:	4240      	negs	r0, r0
 800330c:	f1b8 0f00 	cmp.w	r8, #0
 8003310:	d099      	beq.n	8003246 <_strtol_l.isra.0+0x1a>
 8003312:	2a00      	cmp	r2, #0
 8003314:	d1f6      	bne.n	8003304 <_strtol_l.isra.0+0xd8>
 8003316:	f8c8 1000 	str.w	r1, [r8]
 800331a:	e794      	b.n	8003246 <_strtol_l.isra.0+0x1a>
 800331c:	08004601 	.word	0x08004601

08003320 <_strtol_r>:
 8003320:	f7ff bf84 	b.w	800322c <_strtol_l.isra.0>

08003324 <siprintf>:
 8003324:	b40e      	push	{r1, r2, r3}
 8003326:	b510      	push	{r4, lr}
 8003328:	b09d      	sub	sp, #116	@ 0x74
 800332a:	ab1f      	add	r3, sp, #124	@ 0x7c
 800332c:	9002      	str	r0, [sp, #8]
 800332e:	9006      	str	r0, [sp, #24]
 8003330:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003334:	480a      	ldr	r0, [pc, #40]	@ (8003360 <siprintf+0x3c>)
 8003336:	9107      	str	r1, [sp, #28]
 8003338:	9104      	str	r1, [sp, #16]
 800333a:	490a      	ldr	r1, [pc, #40]	@ (8003364 <siprintf+0x40>)
 800333c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003340:	9105      	str	r1, [sp, #20]
 8003342:	2400      	movs	r4, #0
 8003344:	a902      	add	r1, sp, #8
 8003346:	6800      	ldr	r0, [r0, #0]
 8003348:	9301      	str	r3, [sp, #4]
 800334a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800334c:	f000 f9d0 	bl	80036f0 <_svfiprintf_r>
 8003350:	9b02      	ldr	r3, [sp, #8]
 8003352:	701c      	strb	r4, [r3, #0]
 8003354:	b01d      	add	sp, #116	@ 0x74
 8003356:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800335a:	b003      	add	sp, #12
 800335c:	4770      	bx	lr
 800335e:	bf00      	nop
 8003360:	2000000c 	.word	0x2000000c
 8003364:	ffff0208 	.word	0xffff0208

08003368 <siscanf>:
 8003368:	b40e      	push	{r1, r2, r3}
 800336a:	b570      	push	{r4, r5, r6, lr}
 800336c:	b09d      	sub	sp, #116	@ 0x74
 800336e:	ac21      	add	r4, sp, #132	@ 0x84
 8003370:	2500      	movs	r5, #0
 8003372:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8003376:	f854 6b04 	ldr.w	r6, [r4], #4
 800337a:	f8ad 2014 	strh.w	r2, [sp, #20]
 800337e:	951b      	str	r5, [sp, #108]	@ 0x6c
 8003380:	9002      	str	r0, [sp, #8]
 8003382:	9006      	str	r0, [sp, #24]
 8003384:	f7fc ff24 	bl	80001d0 <strlen>
 8003388:	4b0b      	ldr	r3, [pc, #44]	@ (80033b8 <siscanf+0x50>)
 800338a:	9003      	str	r0, [sp, #12]
 800338c:	9007      	str	r0, [sp, #28]
 800338e:	480b      	ldr	r0, [pc, #44]	@ (80033bc <siscanf+0x54>)
 8003390:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003392:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003396:	f8ad 3016 	strh.w	r3, [sp, #22]
 800339a:	4632      	mov	r2, r6
 800339c:	4623      	mov	r3, r4
 800339e:	a902      	add	r1, sp, #8
 80033a0:	6800      	ldr	r0, [r0, #0]
 80033a2:	950f      	str	r5, [sp, #60]	@ 0x3c
 80033a4:	9514      	str	r5, [sp, #80]	@ 0x50
 80033a6:	9401      	str	r4, [sp, #4]
 80033a8:	f000 faf8 	bl	800399c <__ssvfiscanf_r>
 80033ac:	b01d      	add	sp, #116	@ 0x74
 80033ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80033b2:	b003      	add	sp, #12
 80033b4:	4770      	bx	lr
 80033b6:	bf00      	nop
 80033b8:	080033c1 	.word	0x080033c1
 80033bc:	2000000c 	.word	0x2000000c

080033c0 <__seofread>:
 80033c0:	2000      	movs	r0, #0
 80033c2:	4770      	bx	lr

080033c4 <memset>:
 80033c4:	4402      	add	r2, r0
 80033c6:	4603      	mov	r3, r0
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d100      	bne.n	80033ce <memset+0xa>
 80033cc:	4770      	bx	lr
 80033ce:	f803 1b01 	strb.w	r1, [r3], #1
 80033d2:	e7f9      	b.n	80033c8 <memset+0x4>

080033d4 <__errno>:
 80033d4:	4b01      	ldr	r3, [pc, #4]	@ (80033dc <__errno+0x8>)
 80033d6:	6818      	ldr	r0, [r3, #0]
 80033d8:	4770      	bx	lr
 80033da:	bf00      	nop
 80033dc:	2000000c 	.word	0x2000000c

080033e0 <__libc_init_array>:
 80033e0:	b570      	push	{r4, r5, r6, lr}
 80033e2:	4d0d      	ldr	r5, [pc, #52]	@ (8003418 <__libc_init_array+0x38>)
 80033e4:	4c0d      	ldr	r4, [pc, #52]	@ (800341c <__libc_init_array+0x3c>)
 80033e6:	1b64      	subs	r4, r4, r5
 80033e8:	10a4      	asrs	r4, r4, #2
 80033ea:	2600      	movs	r6, #0
 80033ec:	42a6      	cmp	r6, r4
 80033ee:	d109      	bne.n	8003404 <__libc_init_array+0x24>
 80033f0:	4d0b      	ldr	r5, [pc, #44]	@ (8003420 <__libc_init_array+0x40>)
 80033f2:	4c0c      	ldr	r4, [pc, #48]	@ (8003424 <__libc_init_array+0x44>)
 80033f4:	f001 f866 	bl	80044c4 <_init>
 80033f8:	1b64      	subs	r4, r4, r5
 80033fa:	10a4      	asrs	r4, r4, #2
 80033fc:	2600      	movs	r6, #0
 80033fe:	42a6      	cmp	r6, r4
 8003400:	d105      	bne.n	800340e <__libc_init_array+0x2e>
 8003402:	bd70      	pop	{r4, r5, r6, pc}
 8003404:	f855 3b04 	ldr.w	r3, [r5], #4
 8003408:	4798      	blx	r3
 800340a:	3601      	adds	r6, #1
 800340c:	e7ee      	b.n	80033ec <__libc_init_array+0xc>
 800340e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003412:	4798      	blx	r3
 8003414:	3601      	adds	r6, #1
 8003416:	e7f2      	b.n	80033fe <__libc_init_array+0x1e>
 8003418:	08004758 	.word	0x08004758
 800341c:	08004758 	.word	0x08004758
 8003420:	08004758 	.word	0x08004758
 8003424:	0800475c 	.word	0x0800475c

08003428 <__retarget_lock_acquire_recursive>:
 8003428:	4770      	bx	lr

0800342a <__retarget_lock_release_recursive>:
 800342a:	4770      	bx	lr

0800342c <memcpy>:
 800342c:	440a      	add	r2, r1
 800342e:	4291      	cmp	r1, r2
 8003430:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8003434:	d100      	bne.n	8003438 <memcpy+0xc>
 8003436:	4770      	bx	lr
 8003438:	b510      	push	{r4, lr}
 800343a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800343e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003442:	4291      	cmp	r1, r2
 8003444:	d1f9      	bne.n	800343a <memcpy+0xe>
 8003446:	bd10      	pop	{r4, pc}

08003448 <_free_r>:
 8003448:	b538      	push	{r3, r4, r5, lr}
 800344a:	4605      	mov	r5, r0
 800344c:	2900      	cmp	r1, #0
 800344e:	d041      	beq.n	80034d4 <_free_r+0x8c>
 8003450:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003454:	1f0c      	subs	r4, r1, #4
 8003456:	2b00      	cmp	r3, #0
 8003458:	bfb8      	it	lt
 800345a:	18e4      	addlt	r4, r4, r3
 800345c:	f000 f8e0 	bl	8003620 <__malloc_lock>
 8003460:	4a1d      	ldr	r2, [pc, #116]	@ (80034d8 <_free_r+0x90>)
 8003462:	6813      	ldr	r3, [r2, #0]
 8003464:	b933      	cbnz	r3, 8003474 <_free_r+0x2c>
 8003466:	6063      	str	r3, [r4, #4]
 8003468:	6014      	str	r4, [r2, #0]
 800346a:	4628      	mov	r0, r5
 800346c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003470:	f000 b8dc 	b.w	800362c <__malloc_unlock>
 8003474:	42a3      	cmp	r3, r4
 8003476:	d908      	bls.n	800348a <_free_r+0x42>
 8003478:	6820      	ldr	r0, [r4, #0]
 800347a:	1821      	adds	r1, r4, r0
 800347c:	428b      	cmp	r3, r1
 800347e:	bf01      	itttt	eq
 8003480:	6819      	ldreq	r1, [r3, #0]
 8003482:	685b      	ldreq	r3, [r3, #4]
 8003484:	1809      	addeq	r1, r1, r0
 8003486:	6021      	streq	r1, [r4, #0]
 8003488:	e7ed      	b.n	8003466 <_free_r+0x1e>
 800348a:	461a      	mov	r2, r3
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	b10b      	cbz	r3, 8003494 <_free_r+0x4c>
 8003490:	42a3      	cmp	r3, r4
 8003492:	d9fa      	bls.n	800348a <_free_r+0x42>
 8003494:	6811      	ldr	r1, [r2, #0]
 8003496:	1850      	adds	r0, r2, r1
 8003498:	42a0      	cmp	r0, r4
 800349a:	d10b      	bne.n	80034b4 <_free_r+0x6c>
 800349c:	6820      	ldr	r0, [r4, #0]
 800349e:	4401      	add	r1, r0
 80034a0:	1850      	adds	r0, r2, r1
 80034a2:	4283      	cmp	r3, r0
 80034a4:	6011      	str	r1, [r2, #0]
 80034a6:	d1e0      	bne.n	800346a <_free_r+0x22>
 80034a8:	6818      	ldr	r0, [r3, #0]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	6053      	str	r3, [r2, #4]
 80034ae:	4408      	add	r0, r1
 80034b0:	6010      	str	r0, [r2, #0]
 80034b2:	e7da      	b.n	800346a <_free_r+0x22>
 80034b4:	d902      	bls.n	80034bc <_free_r+0x74>
 80034b6:	230c      	movs	r3, #12
 80034b8:	602b      	str	r3, [r5, #0]
 80034ba:	e7d6      	b.n	800346a <_free_r+0x22>
 80034bc:	6820      	ldr	r0, [r4, #0]
 80034be:	1821      	adds	r1, r4, r0
 80034c0:	428b      	cmp	r3, r1
 80034c2:	bf04      	itt	eq
 80034c4:	6819      	ldreq	r1, [r3, #0]
 80034c6:	685b      	ldreq	r3, [r3, #4]
 80034c8:	6063      	str	r3, [r4, #4]
 80034ca:	bf04      	itt	eq
 80034cc:	1809      	addeq	r1, r1, r0
 80034ce:	6021      	streq	r1, [r4, #0]
 80034d0:	6054      	str	r4, [r2, #4]
 80034d2:	e7ca      	b.n	800346a <_free_r+0x22>
 80034d4:	bd38      	pop	{r3, r4, r5, pc}
 80034d6:	bf00      	nop
 80034d8:	20000320 	.word	0x20000320

080034dc <sbrk_aligned>:
 80034dc:	b570      	push	{r4, r5, r6, lr}
 80034de:	4e0f      	ldr	r6, [pc, #60]	@ (800351c <sbrk_aligned+0x40>)
 80034e0:	460c      	mov	r4, r1
 80034e2:	6831      	ldr	r1, [r6, #0]
 80034e4:	4605      	mov	r5, r0
 80034e6:	b911      	cbnz	r1, 80034ee <sbrk_aligned+0x12>
 80034e8:	f000 ff36 	bl	8004358 <_sbrk_r>
 80034ec:	6030      	str	r0, [r6, #0]
 80034ee:	4621      	mov	r1, r4
 80034f0:	4628      	mov	r0, r5
 80034f2:	f000 ff31 	bl	8004358 <_sbrk_r>
 80034f6:	1c43      	adds	r3, r0, #1
 80034f8:	d103      	bne.n	8003502 <sbrk_aligned+0x26>
 80034fa:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80034fe:	4620      	mov	r0, r4
 8003500:	bd70      	pop	{r4, r5, r6, pc}
 8003502:	1cc4      	adds	r4, r0, #3
 8003504:	f024 0403 	bic.w	r4, r4, #3
 8003508:	42a0      	cmp	r0, r4
 800350a:	d0f8      	beq.n	80034fe <sbrk_aligned+0x22>
 800350c:	1a21      	subs	r1, r4, r0
 800350e:	4628      	mov	r0, r5
 8003510:	f000 ff22 	bl	8004358 <_sbrk_r>
 8003514:	3001      	adds	r0, #1
 8003516:	d1f2      	bne.n	80034fe <sbrk_aligned+0x22>
 8003518:	e7ef      	b.n	80034fa <sbrk_aligned+0x1e>
 800351a:	bf00      	nop
 800351c:	2000031c 	.word	0x2000031c

08003520 <_malloc_r>:
 8003520:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003524:	1ccd      	adds	r5, r1, #3
 8003526:	f025 0503 	bic.w	r5, r5, #3
 800352a:	3508      	adds	r5, #8
 800352c:	2d0c      	cmp	r5, #12
 800352e:	bf38      	it	cc
 8003530:	250c      	movcc	r5, #12
 8003532:	2d00      	cmp	r5, #0
 8003534:	4606      	mov	r6, r0
 8003536:	db01      	blt.n	800353c <_malloc_r+0x1c>
 8003538:	42a9      	cmp	r1, r5
 800353a:	d904      	bls.n	8003546 <_malloc_r+0x26>
 800353c:	230c      	movs	r3, #12
 800353e:	6033      	str	r3, [r6, #0]
 8003540:	2000      	movs	r0, #0
 8003542:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003546:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800361c <_malloc_r+0xfc>
 800354a:	f000 f869 	bl	8003620 <__malloc_lock>
 800354e:	f8d8 3000 	ldr.w	r3, [r8]
 8003552:	461c      	mov	r4, r3
 8003554:	bb44      	cbnz	r4, 80035a8 <_malloc_r+0x88>
 8003556:	4629      	mov	r1, r5
 8003558:	4630      	mov	r0, r6
 800355a:	f7ff ffbf 	bl	80034dc <sbrk_aligned>
 800355e:	1c43      	adds	r3, r0, #1
 8003560:	4604      	mov	r4, r0
 8003562:	d158      	bne.n	8003616 <_malloc_r+0xf6>
 8003564:	f8d8 4000 	ldr.w	r4, [r8]
 8003568:	4627      	mov	r7, r4
 800356a:	2f00      	cmp	r7, #0
 800356c:	d143      	bne.n	80035f6 <_malloc_r+0xd6>
 800356e:	2c00      	cmp	r4, #0
 8003570:	d04b      	beq.n	800360a <_malloc_r+0xea>
 8003572:	6823      	ldr	r3, [r4, #0]
 8003574:	4639      	mov	r1, r7
 8003576:	4630      	mov	r0, r6
 8003578:	eb04 0903 	add.w	r9, r4, r3
 800357c:	f000 feec 	bl	8004358 <_sbrk_r>
 8003580:	4581      	cmp	r9, r0
 8003582:	d142      	bne.n	800360a <_malloc_r+0xea>
 8003584:	6821      	ldr	r1, [r4, #0]
 8003586:	1a6d      	subs	r5, r5, r1
 8003588:	4629      	mov	r1, r5
 800358a:	4630      	mov	r0, r6
 800358c:	f7ff ffa6 	bl	80034dc <sbrk_aligned>
 8003590:	3001      	adds	r0, #1
 8003592:	d03a      	beq.n	800360a <_malloc_r+0xea>
 8003594:	6823      	ldr	r3, [r4, #0]
 8003596:	442b      	add	r3, r5
 8003598:	6023      	str	r3, [r4, #0]
 800359a:	f8d8 3000 	ldr.w	r3, [r8]
 800359e:	685a      	ldr	r2, [r3, #4]
 80035a0:	bb62      	cbnz	r2, 80035fc <_malloc_r+0xdc>
 80035a2:	f8c8 7000 	str.w	r7, [r8]
 80035a6:	e00f      	b.n	80035c8 <_malloc_r+0xa8>
 80035a8:	6822      	ldr	r2, [r4, #0]
 80035aa:	1b52      	subs	r2, r2, r5
 80035ac:	d420      	bmi.n	80035f0 <_malloc_r+0xd0>
 80035ae:	2a0b      	cmp	r2, #11
 80035b0:	d917      	bls.n	80035e2 <_malloc_r+0xc2>
 80035b2:	1961      	adds	r1, r4, r5
 80035b4:	42a3      	cmp	r3, r4
 80035b6:	6025      	str	r5, [r4, #0]
 80035b8:	bf18      	it	ne
 80035ba:	6059      	strne	r1, [r3, #4]
 80035bc:	6863      	ldr	r3, [r4, #4]
 80035be:	bf08      	it	eq
 80035c0:	f8c8 1000 	streq.w	r1, [r8]
 80035c4:	5162      	str	r2, [r4, r5]
 80035c6:	604b      	str	r3, [r1, #4]
 80035c8:	4630      	mov	r0, r6
 80035ca:	f000 f82f 	bl	800362c <__malloc_unlock>
 80035ce:	f104 000b 	add.w	r0, r4, #11
 80035d2:	1d23      	adds	r3, r4, #4
 80035d4:	f020 0007 	bic.w	r0, r0, #7
 80035d8:	1ac2      	subs	r2, r0, r3
 80035da:	bf1c      	itt	ne
 80035dc:	1a1b      	subne	r3, r3, r0
 80035de:	50a3      	strne	r3, [r4, r2]
 80035e0:	e7af      	b.n	8003542 <_malloc_r+0x22>
 80035e2:	6862      	ldr	r2, [r4, #4]
 80035e4:	42a3      	cmp	r3, r4
 80035e6:	bf0c      	ite	eq
 80035e8:	f8c8 2000 	streq.w	r2, [r8]
 80035ec:	605a      	strne	r2, [r3, #4]
 80035ee:	e7eb      	b.n	80035c8 <_malloc_r+0xa8>
 80035f0:	4623      	mov	r3, r4
 80035f2:	6864      	ldr	r4, [r4, #4]
 80035f4:	e7ae      	b.n	8003554 <_malloc_r+0x34>
 80035f6:	463c      	mov	r4, r7
 80035f8:	687f      	ldr	r7, [r7, #4]
 80035fa:	e7b6      	b.n	800356a <_malloc_r+0x4a>
 80035fc:	461a      	mov	r2, r3
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	42a3      	cmp	r3, r4
 8003602:	d1fb      	bne.n	80035fc <_malloc_r+0xdc>
 8003604:	2300      	movs	r3, #0
 8003606:	6053      	str	r3, [r2, #4]
 8003608:	e7de      	b.n	80035c8 <_malloc_r+0xa8>
 800360a:	230c      	movs	r3, #12
 800360c:	6033      	str	r3, [r6, #0]
 800360e:	4630      	mov	r0, r6
 8003610:	f000 f80c 	bl	800362c <__malloc_unlock>
 8003614:	e794      	b.n	8003540 <_malloc_r+0x20>
 8003616:	6005      	str	r5, [r0, #0]
 8003618:	e7d6      	b.n	80035c8 <_malloc_r+0xa8>
 800361a:	bf00      	nop
 800361c:	20000320 	.word	0x20000320

08003620 <__malloc_lock>:
 8003620:	4801      	ldr	r0, [pc, #4]	@ (8003628 <__malloc_lock+0x8>)
 8003622:	f7ff bf01 	b.w	8003428 <__retarget_lock_acquire_recursive>
 8003626:	bf00      	nop
 8003628:	20000318 	.word	0x20000318

0800362c <__malloc_unlock>:
 800362c:	4801      	ldr	r0, [pc, #4]	@ (8003634 <__malloc_unlock+0x8>)
 800362e:	f7ff befc 	b.w	800342a <__retarget_lock_release_recursive>
 8003632:	bf00      	nop
 8003634:	20000318 	.word	0x20000318

08003638 <__ssputs_r>:
 8003638:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800363c:	688e      	ldr	r6, [r1, #8]
 800363e:	461f      	mov	r7, r3
 8003640:	42be      	cmp	r6, r7
 8003642:	680b      	ldr	r3, [r1, #0]
 8003644:	4682      	mov	sl, r0
 8003646:	460c      	mov	r4, r1
 8003648:	4690      	mov	r8, r2
 800364a:	d82d      	bhi.n	80036a8 <__ssputs_r+0x70>
 800364c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003650:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003654:	d026      	beq.n	80036a4 <__ssputs_r+0x6c>
 8003656:	6965      	ldr	r5, [r4, #20]
 8003658:	6909      	ldr	r1, [r1, #16]
 800365a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800365e:	eba3 0901 	sub.w	r9, r3, r1
 8003662:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003666:	1c7b      	adds	r3, r7, #1
 8003668:	444b      	add	r3, r9
 800366a:	106d      	asrs	r5, r5, #1
 800366c:	429d      	cmp	r5, r3
 800366e:	bf38      	it	cc
 8003670:	461d      	movcc	r5, r3
 8003672:	0553      	lsls	r3, r2, #21
 8003674:	d527      	bpl.n	80036c6 <__ssputs_r+0x8e>
 8003676:	4629      	mov	r1, r5
 8003678:	f7ff ff52 	bl	8003520 <_malloc_r>
 800367c:	4606      	mov	r6, r0
 800367e:	b360      	cbz	r0, 80036da <__ssputs_r+0xa2>
 8003680:	6921      	ldr	r1, [r4, #16]
 8003682:	464a      	mov	r2, r9
 8003684:	f7ff fed2 	bl	800342c <memcpy>
 8003688:	89a3      	ldrh	r3, [r4, #12]
 800368a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800368e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003692:	81a3      	strh	r3, [r4, #12]
 8003694:	6126      	str	r6, [r4, #16]
 8003696:	6165      	str	r5, [r4, #20]
 8003698:	444e      	add	r6, r9
 800369a:	eba5 0509 	sub.w	r5, r5, r9
 800369e:	6026      	str	r6, [r4, #0]
 80036a0:	60a5      	str	r5, [r4, #8]
 80036a2:	463e      	mov	r6, r7
 80036a4:	42be      	cmp	r6, r7
 80036a6:	d900      	bls.n	80036aa <__ssputs_r+0x72>
 80036a8:	463e      	mov	r6, r7
 80036aa:	6820      	ldr	r0, [r4, #0]
 80036ac:	4632      	mov	r2, r6
 80036ae:	4641      	mov	r1, r8
 80036b0:	f000 fe37 	bl	8004322 <memmove>
 80036b4:	68a3      	ldr	r3, [r4, #8]
 80036b6:	1b9b      	subs	r3, r3, r6
 80036b8:	60a3      	str	r3, [r4, #8]
 80036ba:	6823      	ldr	r3, [r4, #0]
 80036bc:	4433      	add	r3, r6
 80036be:	6023      	str	r3, [r4, #0]
 80036c0:	2000      	movs	r0, #0
 80036c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036c6:	462a      	mov	r2, r5
 80036c8:	f000 fe56 	bl	8004378 <_realloc_r>
 80036cc:	4606      	mov	r6, r0
 80036ce:	2800      	cmp	r0, #0
 80036d0:	d1e0      	bne.n	8003694 <__ssputs_r+0x5c>
 80036d2:	6921      	ldr	r1, [r4, #16]
 80036d4:	4650      	mov	r0, sl
 80036d6:	f7ff feb7 	bl	8003448 <_free_r>
 80036da:	230c      	movs	r3, #12
 80036dc:	f8ca 3000 	str.w	r3, [sl]
 80036e0:	89a3      	ldrh	r3, [r4, #12]
 80036e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80036e6:	81a3      	strh	r3, [r4, #12]
 80036e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80036ec:	e7e9      	b.n	80036c2 <__ssputs_r+0x8a>
	...

080036f0 <_svfiprintf_r>:
 80036f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036f4:	4698      	mov	r8, r3
 80036f6:	898b      	ldrh	r3, [r1, #12]
 80036f8:	061b      	lsls	r3, r3, #24
 80036fa:	b09d      	sub	sp, #116	@ 0x74
 80036fc:	4607      	mov	r7, r0
 80036fe:	460d      	mov	r5, r1
 8003700:	4614      	mov	r4, r2
 8003702:	d510      	bpl.n	8003726 <_svfiprintf_r+0x36>
 8003704:	690b      	ldr	r3, [r1, #16]
 8003706:	b973      	cbnz	r3, 8003726 <_svfiprintf_r+0x36>
 8003708:	2140      	movs	r1, #64	@ 0x40
 800370a:	f7ff ff09 	bl	8003520 <_malloc_r>
 800370e:	6028      	str	r0, [r5, #0]
 8003710:	6128      	str	r0, [r5, #16]
 8003712:	b930      	cbnz	r0, 8003722 <_svfiprintf_r+0x32>
 8003714:	230c      	movs	r3, #12
 8003716:	603b      	str	r3, [r7, #0]
 8003718:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800371c:	b01d      	add	sp, #116	@ 0x74
 800371e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003722:	2340      	movs	r3, #64	@ 0x40
 8003724:	616b      	str	r3, [r5, #20]
 8003726:	2300      	movs	r3, #0
 8003728:	9309      	str	r3, [sp, #36]	@ 0x24
 800372a:	2320      	movs	r3, #32
 800372c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003730:	f8cd 800c 	str.w	r8, [sp, #12]
 8003734:	2330      	movs	r3, #48	@ 0x30
 8003736:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80038d4 <_svfiprintf_r+0x1e4>
 800373a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800373e:	f04f 0901 	mov.w	r9, #1
 8003742:	4623      	mov	r3, r4
 8003744:	469a      	mov	sl, r3
 8003746:	f813 2b01 	ldrb.w	r2, [r3], #1
 800374a:	b10a      	cbz	r2, 8003750 <_svfiprintf_r+0x60>
 800374c:	2a25      	cmp	r2, #37	@ 0x25
 800374e:	d1f9      	bne.n	8003744 <_svfiprintf_r+0x54>
 8003750:	ebba 0b04 	subs.w	fp, sl, r4
 8003754:	d00b      	beq.n	800376e <_svfiprintf_r+0x7e>
 8003756:	465b      	mov	r3, fp
 8003758:	4622      	mov	r2, r4
 800375a:	4629      	mov	r1, r5
 800375c:	4638      	mov	r0, r7
 800375e:	f7ff ff6b 	bl	8003638 <__ssputs_r>
 8003762:	3001      	adds	r0, #1
 8003764:	f000 80a7 	beq.w	80038b6 <_svfiprintf_r+0x1c6>
 8003768:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800376a:	445a      	add	r2, fp
 800376c:	9209      	str	r2, [sp, #36]	@ 0x24
 800376e:	f89a 3000 	ldrb.w	r3, [sl]
 8003772:	2b00      	cmp	r3, #0
 8003774:	f000 809f 	beq.w	80038b6 <_svfiprintf_r+0x1c6>
 8003778:	2300      	movs	r3, #0
 800377a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800377e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003782:	f10a 0a01 	add.w	sl, sl, #1
 8003786:	9304      	str	r3, [sp, #16]
 8003788:	9307      	str	r3, [sp, #28]
 800378a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800378e:	931a      	str	r3, [sp, #104]	@ 0x68
 8003790:	4654      	mov	r4, sl
 8003792:	2205      	movs	r2, #5
 8003794:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003798:	484e      	ldr	r0, [pc, #312]	@ (80038d4 <_svfiprintf_r+0x1e4>)
 800379a:	f7fc fd21 	bl	80001e0 <memchr>
 800379e:	9a04      	ldr	r2, [sp, #16]
 80037a0:	b9d8      	cbnz	r0, 80037da <_svfiprintf_r+0xea>
 80037a2:	06d0      	lsls	r0, r2, #27
 80037a4:	bf44      	itt	mi
 80037a6:	2320      	movmi	r3, #32
 80037a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80037ac:	0711      	lsls	r1, r2, #28
 80037ae:	bf44      	itt	mi
 80037b0:	232b      	movmi	r3, #43	@ 0x2b
 80037b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80037b6:	f89a 3000 	ldrb.w	r3, [sl]
 80037ba:	2b2a      	cmp	r3, #42	@ 0x2a
 80037bc:	d015      	beq.n	80037ea <_svfiprintf_r+0xfa>
 80037be:	9a07      	ldr	r2, [sp, #28]
 80037c0:	4654      	mov	r4, sl
 80037c2:	2000      	movs	r0, #0
 80037c4:	f04f 0c0a 	mov.w	ip, #10
 80037c8:	4621      	mov	r1, r4
 80037ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80037ce:	3b30      	subs	r3, #48	@ 0x30
 80037d0:	2b09      	cmp	r3, #9
 80037d2:	d94b      	bls.n	800386c <_svfiprintf_r+0x17c>
 80037d4:	b1b0      	cbz	r0, 8003804 <_svfiprintf_r+0x114>
 80037d6:	9207      	str	r2, [sp, #28]
 80037d8:	e014      	b.n	8003804 <_svfiprintf_r+0x114>
 80037da:	eba0 0308 	sub.w	r3, r0, r8
 80037de:	fa09 f303 	lsl.w	r3, r9, r3
 80037e2:	4313      	orrs	r3, r2
 80037e4:	9304      	str	r3, [sp, #16]
 80037e6:	46a2      	mov	sl, r4
 80037e8:	e7d2      	b.n	8003790 <_svfiprintf_r+0xa0>
 80037ea:	9b03      	ldr	r3, [sp, #12]
 80037ec:	1d19      	adds	r1, r3, #4
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	9103      	str	r1, [sp, #12]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	bfbb      	ittet	lt
 80037f6:	425b      	neglt	r3, r3
 80037f8:	f042 0202 	orrlt.w	r2, r2, #2
 80037fc:	9307      	strge	r3, [sp, #28]
 80037fe:	9307      	strlt	r3, [sp, #28]
 8003800:	bfb8      	it	lt
 8003802:	9204      	strlt	r2, [sp, #16]
 8003804:	7823      	ldrb	r3, [r4, #0]
 8003806:	2b2e      	cmp	r3, #46	@ 0x2e
 8003808:	d10a      	bne.n	8003820 <_svfiprintf_r+0x130>
 800380a:	7863      	ldrb	r3, [r4, #1]
 800380c:	2b2a      	cmp	r3, #42	@ 0x2a
 800380e:	d132      	bne.n	8003876 <_svfiprintf_r+0x186>
 8003810:	9b03      	ldr	r3, [sp, #12]
 8003812:	1d1a      	adds	r2, r3, #4
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	9203      	str	r2, [sp, #12]
 8003818:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800381c:	3402      	adds	r4, #2
 800381e:	9305      	str	r3, [sp, #20]
 8003820:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80038e4 <_svfiprintf_r+0x1f4>
 8003824:	7821      	ldrb	r1, [r4, #0]
 8003826:	2203      	movs	r2, #3
 8003828:	4650      	mov	r0, sl
 800382a:	f7fc fcd9 	bl	80001e0 <memchr>
 800382e:	b138      	cbz	r0, 8003840 <_svfiprintf_r+0x150>
 8003830:	9b04      	ldr	r3, [sp, #16]
 8003832:	eba0 000a 	sub.w	r0, r0, sl
 8003836:	2240      	movs	r2, #64	@ 0x40
 8003838:	4082      	lsls	r2, r0
 800383a:	4313      	orrs	r3, r2
 800383c:	3401      	adds	r4, #1
 800383e:	9304      	str	r3, [sp, #16]
 8003840:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003844:	4824      	ldr	r0, [pc, #144]	@ (80038d8 <_svfiprintf_r+0x1e8>)
 8003846:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800384a:	2206      	movs	r2, #6
 800384c:	f7fc fcc8 	bl	80001e0 <memchr>
 8003850:	2800      	cmp	r0, #0
 8003852:	d036      	beq.n	80038c2 <_svfiprintf_r+0x1d2>
 8003854:	4b21      	ldr	r3, [pc, #132]	@ (80038dc <_svfiprintf_r+0x1ec>)
 8003856:	bb1b      	cbnz	r3, 80038a0 <_svfiprintf_r+0x1b0>
 8003858:	9b03      	ldr	r3, [sp, #12]
 800385a:	3307      	adds	r3, #7
 800385c:	f023 0307 	bic.w	r3, r3, #7
 8003860:	3308      	adds	r3, #8
 8003862:	9303      	str	r3, [sp, #12]
 8003864:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003866:	4433      	add	r3, r6
 8003868:	9309      	str	r3, [sp, #36]	@ 0x24
 800386a:	e76a      	b.n	8003742 <_svfiprintf_r+0x52>
 800386c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003870:	460c      	mov	r4, r1
 8003872:	2001      	movs	r0, #1
 8003874:	e7a8      	b.n	80037c8 <_svfiprintf_r+0xd8>
 8003876:	2300      	movs	r3, #0
 8003878:	3401      	adds	r4, #1
 800387a:	9305      	str	r3, [sp, #20]
 800387c:	4619      	mov	r1, r3
 800387e:	f04f 0c0a 	mov.w	ip, #10
 8003882:	4620      	mov	r0, r4
 8003884:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003888:	3a30      	subs	r2, #48	@ 0x30
 800388a:	2a09      	cmp	r2, #9
 800388c:	d903      	bls.n	8003896 <_svfiprintf_r+0x1a6>
 800388e:	2b00      	cmp	r3, #0
 8003890:	d0c6      	beq.n	8003820 <_svfiprintf_r+0x130>
 8003892:	9105      	str	r1, [sp, #20]
 8003894:	e7c4      	b.n	8003820 <_svfiprintf_r+0x130>
 8003896:	fb0c 2101 	mla	r1, ip, r1, r2
 800389a:	4604      	mov	r4, r0
 800389c:	2301      	movs	r3, #1
 800389e:	e7f0      	b.n	8003882 <_svfiprintf_r+0x192>
 80038a0:	ab03      	add	r3, sp, #12
 80038a2:	9300      	str	r3, [sp, #0]
 80038a4:	462a      	mov	r2, r5
 80038a6:	4b0e      	ldr	r3, [pc, #56]	@ (80038e0 <_svfiprintf_r+0x1f0>)
 80038a8:	a904      	add	r1, sp, #16
 80038aa:	4638      	mov	r0, r7
 80038ac:	f3af 8000 	nop.w
 80038b0:	1c42      	adds	r2, r0, #1
 80038b2:	4606      	mov	r6, r0
 80038b4:	d1d6      	bne.n	8003864 <_svfiprintf_r+0x174>
 80038b6:	89ab      	ldrh	r3, [r5, #12]
 80038b8:	065b      	lsls	r3, r3, #25
 80038ba:	f53f af2d 	bmi.w	8003718 <_svfiprintf_r+0x28>
 80038be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80038c0:	e72c      	b.n	800371c <_svfiprintf_r+0x2c>
 80038c2:	ab03      	add	r3, sp, #12
 80038c4:	9300      	str	r3, [sp, #0]
 80038c6:	462a      	mov	r2, r5
 80038c8:	4b05      	ldr	r3, [pc, #20]	@ (80038e0 <_svfiprintf_r+0x1f0>)
 80038ca:	a904      	add	r1, sp, #16
 80038cc:	4638      	mov	r0, r7
 80038ce:	f000 fa49 	bl	8003d64 <_printf_i>
 80038d2:	e7ed      	b.n	80038b0 <_svfiprintf_r+0x1c0>
 80038d4:	08004701 	.word	0x08004701
 80038d8:	0800470b 	.word	0x0800470b
 80038dc:	00000000 	.word	0x00000000
 80038e0:	08003639 	.word	0x08003639
 80038e4:	08004707 	.word	0x08004707

080038e8 <_sungetc_r>:
 80038e8:	b538      	push	{r3, r4, r5, lr}
 80038ea:	1c4b      	adds	r3, r1, #1
 80038ec:	4614      	mov	r4, r2
 80038ee:	d103      	bne.n	80038f8 <_sungetc_r+0x10>
 80038f0:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80038f4:	4628      	mov	r0, r5
 80038f6:	bd38      	pop	{r3, r4, r5, pc}
 80038f8:	8993      	ldrh	r3, [r2, #12]
 80038fa:	f023 0320 	bic.w	r3, r3, #32
 80038fe:	8193      	strh	r3, [r2, #12]
 8003900:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003902:	6852      	ldr	r2, [r2, #4]
 8003904:	b2cd      	uxtb	r5, r1
 8003906:	b18b      	cbz	r3, 800392c <_sungetc_r+0x44>
 8003908:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800390a:	4293      	cmp	r3, r2
 800390c:	dd08      	ble.n	8003920 <_sungetc_r+0x38>
 800390e:	6823      	ldr	r3, [r4, #0]
 8003910:	1e5a      	subs	r2, r3, #1
 8003912:	6022      	str	r2, [r4, #0]
 8003914:	f803 5c01 	strb.w	r5, [r3, #-1]
 8003918:	6863      	ldr	r3, [r4, #4]
 800391a:	3301      	adds	r3, #1
 800391c:	6063      	str	r3, [r4, #4]
 800391e:	e7e9      	b.n	80038f4 <_sungetc_r+0xc>
 8003920:	4621      	mov	r1, r4
 8003922:	f000 fcc4 	bl	80042ae <__submore>
 8003926:	2800      	cmp	r0, #0
 8003928:	d0f1      	beq.n	800390e <_sungetc_r+0x26>
 800392a:	e7e1      	b.n	80038f0 <_sungetc_r+0x8>
 800392c:	6921      	ldr	r1, [r4, #16]
 800392e:	6823      	ldr	r3, [r4, #0]
 8003930:	b151      	cbz	r1, 8003948 <_sungetc_r+0x60>
 8003932:	4299      	cmp	r1, r3
 8003934:	d208      	bcs.n	8003948 <_sungetc_r+0x60>
 8003936:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800393a:	42a9      	cmp	r1, r5
 800393c:	d104      	bne.n	8003948 <_sungetc_r+0x60>
 800393e:	3b01      	subs	r3, #1
 8003940:	3201      	adds	r2, #1
 8003942:	6023      	str	r3, [r4, #0]
 8003944:	6062      	str	r2, [r4, #4]
 8003946:	e7d5      	b.n	80038f4 <_sungetc_r+0xc>
 8003948:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 800394c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003950:	6363      	str	r3, [r4, #52]	@ 0x34
 8003952:	2303      	movs	r3, #3
 8003954:	63a3      	str	r3, [r4, #56]	@ 0x38
 8003956:	4623      	mov	r3, r4
 8003958:	f803 5f46 	strb.w	r5, [r3, #70]!
 800395c:	6023      	str	r3, [r4, #0]
 800395e:	2301      	movs	r3, #1
 8003960:	e7dc      	b.n	800391c <_sungetc_r+0x34>

08003962 <__ssrefill_r>:
 8003962:	b510      	push	{r4, lr}
 8003964:	460c      	mov	r4, r1
 8003966:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8003968:	b169      	cbz	r1, 8003986 <__ssrefill_r+0x24>
 800396a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800396e:	4299      	cmp	r1, r3
 8003970:	d001      	beq.n	8003976 <__ssrefill_r+0x14>
 8003972:	f7ff fd69 	bl	8003448 <_free_r>
 8003976:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003978:	6063      	str	r3, [r4, #4]
 800397a:	2000      	movs	r0, #0
 800397c:	6360      	str	r0, [r4, #52]	@ 0x34
 800397e:	b113      	cbz	r3, 8003986 <__ssrefill_r+0x24>
 8003980:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8003982:	6023      	str	r3, [r4, #0]
 8003984:	bd10      	pop	{r4, pc}
 8003986:	6923      	ldr	r3, [r4, #16]
 8003988:	6023      	str	r3, [r4, #0]
 800398a:	2300      	movs	r3, #0
 800398c:	6063      	str	r3, [r4, #4]
 800398e:	89a3      	ldrh	r3, [r4, #12]
 8003990:	f043 0320 	orr.w	r3, r3, #32
 8003994:	81a3      	strh	r3, [r4, #12]
 8003996:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800399a:	e7f3      	b.n	8003984 <__ssrefill_r+0x22>

0800399c <__ssvfiscanf_r>:
 800399c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039a0:	460c      	mov	r4, r1
 80039a2:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 80039a6:	2100      	movs	r1, #0
 80039a8:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 80039ac:	49a6      	ldr	r1, [pc, #664]	@ (8003c48 <__ssvfiscanf_r+0x2ac>)
 80039ae:	91a0      	str	r1, [sp, #640]	@ 0x280
 80039b0:	f10d 0804 	add.w	r8, sp, #4
 80039b4:	49a5      	ldr	r1, [pc, #660]	@ (8003c4c <__ssvfiscanf_r+0x2b0>)
 80039b6:	4fa6      	ldr	r7, [pc, #664]	@ (8003c50 <__ssvfiscanf_r+0x2b4>)
 80039b8:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 80039bc:	4606      	mov	r6, r0
 80039be:	91a1      	str	r1, [sp, #644]	@ 0x284
 80039c0:	9300      	str	r3, [sp, #0]
 80039c2:	f892 9000 	ldrb.w	r9, [r2]
 80039c6:	f1b9 0f00 	cmp.w	r9, #0
 80039ca:	f000 8158 	beq.w	8003c7e <__ssvfiscanf_r+0x2e2>
 80039ce:	f817 3009 	ldrb.w	r3, [r7, r9]
 80039d2:	f013 0308 	ands.w	r3, r3, #8
 80039d6:	f102 0501 	add.w	r5, r2, #1
 80039da:	d019      	beq.n	8003a10 <__ssvfiscanf_r+0x74>
 80039dc:	6863      	ldr	r3, [r4, #4]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	dd0f      	ble.n	8003a02 <__ssvfiscanf_r+0x66>
 80039e2:	6823      	ldr	r3, [r4, #0]
 80039e4:	781a      	ldrb	r2, [r3, #0]
 80039e6:	5cba      	ldrb	r2, [r7, r2]
 80039e8:	0712      	lsls	r2, r2, #28
 80039ea:	d401      	bmi.n	80039f0 <__ssvfiscanf_r+0x54>
 80039ec:	462a      	mov	r2, r5
 80039ee:	e7e8      	b.n	80039c2 <__ssvfiscanf_r+0x26>
 80039f0:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80039f2:	3201      	adds	r2, #1
 80039f4:	9245      	str	r2, [sp, #276]	@ 0x114
 80039f6:	6862      	ldr	r2, [r4, #4]
 80039f8:	3301      	adds	r3, #1
 80039fa:	3a01      	subs	r2, #1
 80039fc:	6062      	str	r2, [r4, #4]
 80039fe:	6023      	str	r3, [r4, #0]
 8003a00:	e7ec      	b.n	80039dc <__ssvfiscanf_r+0x40>
 8003a02:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8003a04:	4621      	mov	r1, r4
 8003a06:	4630      	mov	r0, r6
 8003a08:	4798      	blx	r3
 8003a0a:	2800      	cmp	r0, #0
 8003a0c:	d0e9      	beq.n	80039e2 <__ssvfiscanf_r+0x46>
 8003a0e:	e7ed      	b.n	80039ec <__ssvfiscanf_r+0x50>
 8003a10:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 8003a14:	f040 8085 	bne.w	8003b22 <__ssvfiscanf_r+0x186>
 8003a18:	9341      	str	r3, [sp, #260]	@ 0x104
 8003a1a:	9343      	str	r3, [sp, #268]	@ 0x10c
 8003a1c:	7853      	ldrb	r3, [r2, #1]
 8003a1e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003a20:	bf02      	ittt	eq
 8003a22:	2310      	moveq	r3, #16
 8003a24:	1c95      	addeq	r5, r2, #2
 8003a26:	9341      	streq	r3, [sp, #260]	@ 0x104
 8003a28:	220a      	movs	r2, #10
 8003a2a:	46aa      	mov	sl, r5
 8003a2c:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8003a30:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8003a34:	2b09      	cmp	r3, #9
 8003a36:	d91e      	bls.n	8003a76 <__ssvfiscanf_r+0xda>
 8003a38:	f8df b218 	ldr.w	fp, [pc, #536]	@ 8003c54 <__ssvfiscanf_r+0x2b8>
 8003a3c:	2203      	movs	r2, #3
 8003a3e:	4658      	mov	r0, fp
 8003a40:	f7fc fbce 	bl	80001e0 <memchr>
 8003a44:	b138      	cbz	r0, 8003a56 <__ssvfiscanf_r+0xba>
 8003a46:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8003a48:	eba0 000b 	sub.w	r0, r0, fp
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	4083      	lsls	r3, r0
 8003a50:	4313      	orrs	r3, r2
 8003a52:	9341      	str	r3, [sp, #260]	@ 0x104
 8003a54:	4655      	mov	r5, sl
 8003a56:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003a5a:	2b78      	cmp	r3, #120	@ 0x78
 8003a5c:	d806      	bhi.n	8003a6c <__ssvfiscanf_r+0xd0>
 8003a5e:	2b57      	cmp	r3, #87	@ 0x57
 8003a60:	d810      	bhi.n	8003a84 <__ssvfiscanf_r+0xe8>
 8003a62:	2b25      	cmp	r3, #37	@ 0x25
 8003a64:	d05d      	beq.n	8003b22 <__ssvfiscanf_r+0x186>
 8003a66:	d857      	bhi.n	8003b18 <__ssvfiscanf_r+0x17c>
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d075      	beq.n	8003b58 <__ssvfiscanf_r+0x1bc>
 8003a6c:	2303      	movs	r3, #3
 8003a6e:	9347      	str	r3, [sp, #284]	@ 0x11c
 8003a70:	230a      	movs	r3, #10
 8003a72:	9342      	str	r3, [sp, #264]	@ 0x108
 8003a74:	e088      	b.n	8003b88 <__ssvfiscanf_r+0x1ec>
 8003a76:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8003a78:	fb02 1103 	mla	r1, r2, r3, r1
 8003a7c:	3930      	subs	r1, #48	@ 0x30
 8003a7e:	9143      	str	r1, [sp, #268]	@ 0x10c
 8003a80:	4655      	mov	r5, sl
 8003a82:	e7d2      	b.n	8003a2a <__ssvfiscanf_r+0x8e>
 8003a84:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8003a88:	2a20      	cmp	r2, #32
 8003a8a:	d8ef      	bhi.n	8003a6c <__ssvfiscanf_r+0xd0>
 8003a8c:	a101      	add	r1, pc, #4	@ (adr r1, 8003a94 <__ssvfiscanf_r+0xf8>)
 8003a8e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8003a92:	bf00      	nop
 8003a94:	08003b67 	.word	0x08003b67
 8003a98:	08003a6d 	.word	0x08003a6d
 8003a9c:	08003a6d 	.word	0x08003a6d
 8003aa0:	08003bc1 	.word	0x08003bc1
 8003aa4:	08003a6d 	.word	0x08003a6d
 8003aa8:	08003a6d 	.word	0x08003a6d
 8003aac:	08003a6d 	.word	0x08003a6d
 8003ab0:	08003a6d 	.word	0x08003a6d
 8003ab4:	08003a6d 	.word	0x08003a6d
 8003ab8:	08003a6d 	.word	0x08003a6d
 8003abc:	08003a6d 	.word	0x08003a6d
 8003ac0:	08003bd7 	.word	0x08003bd7
 8003ac4:	08003bbd 	.word	0x08003bbd
 8003ac8:	08003b1f 	.word	0x08003b1f
 8003acc:	08003b1f 	.word	0x08003b1f
 8003ad0:	08003b1f 	.word	0x08003b1f
 8003ad4:	08003a6d 	.word	0x08003a6d
 8003ad8:	08003b79 	.word	0x08003b79
 8003adc:	08003a6d 	.word	0x08003a6d
 8003ae0:	08003a6d 	.word	0x08003a6d
 8003ae4:	08003a6d 	.word	0x08003a6d
 8003ae8:	08003a6d 	.word	0x08003a6d
 8003aec:	08003be7 	.word	0x08003be7
 8003af0:	08003b81 	.word	0x08003b81
 8003af4:	08003b5f 	.word	0x08003b5f
 8003af8:	08003a6d 	.word	0x08003a6d
 8003afc:	08003a6d 	.word	0x08003a6d
 8003b00:	08003be3 	.word	0x08003be3
 8003b04:	08003a6d 	.word	0x08003a6d
 8003b08:	08003bbd 	.word	0x08003bbd
 8003b0c:	08003a6d 	.word	0x08003a6d
 8003b10:	08003a6d 	.word	0x08003a6d
 8003b14:	08003b67 	.word	0x08003b67
 8003b18:	3b45      	subs	r3, #69	@ 0x45
 8003b1a:	2b02      	cmp	r3, #2
 8003b1c:	d8a6      	bhi.n	8003a6c <__ssvfiscanf_r+0xd0>
 8003b1e:	2305      	movs	r3, #5
 8003b20:	e031      	b.n	8003b86 <__ssvfiscanf_r+0x1ea>
 8003b22:	6863      	ldr	r3, [r4, #4]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	dd0d      	ble.n	8003b44 <__ssvfiscanf_r+0x1a8>
 8003b28:	6823      	ldr	r3, [r4, #0]
 8003b2a:	781a      	ldrb	r2, [r3, #0]
 8003b2c:	454a      	cmp	r2, r9
 8003b2e:	f040 80a6 	bne.w	8003c7e <__ssvfiscanf_r+0x2e2>
 8003b32:	3301      	adds	r3, #1
 8003b34:	6862      	ldr	r2, [r4, #4]
 8003b36:	6023      	str	r3, [r4, #0]
 8003b38:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8003b3a:	3a01      	subs	r2, #1
 8003b3c:	3301      	adds	r3, #1
 8003b3e:	6062      	str	r2, [r4, #4]
 8003b40:	9345      	str	r3, [sp, #276]	@ 0x114
 8003b42:	e753      	b.n	80039ec <__ssvfiscanf_r+0x50>
 8003b44:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8003b46:	4621      	mov	r1, r4
 8003b48:	4630      	mov	r0, r6
 8003b4a:	4798      	blx	r3
 8003b4c:	2800      	cmp	r0, #0
 8003b4e:	d0eb      	beq.n	8003b28 <__ssvfiscanf_r+0x18c>
 8003b50:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8003b52:	2800      	cmp	r0, #0
 8003b54:	f040 808b 	bne.w	8003c6e <__ssvfiscanf_r+0x2d2>
 8003b58:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003b5c:	e08b      	b.n	8003c76 <__ssvfiscanf_r+0x2da>
 8003b5e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8003b60:	f042 0220 	orr.w	r2, r2, #32
 8003b64:	9241      	str	r2, [sp, #260]	@ 0x104
 8003b66:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8003b68:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b6c:	9241      	str	r2, [sp, #260]	@ 0x104
 8003b6e:	2210      	movs	r2, #16
 8003b70:	2b6e      	cmp	r3, #110	@ 0x6e
 8003b72:	9242      	str	r2, [sp, #264]	@ 0x108
 8003b74:	d902      	bls.n	8003b7c <__ssvfiscanf_r+0x1e0>
 8003b76:	e005      	b.n	8003b84 <__ssvfiscanf_r+0x1e8>
 8003b78:	2300      	movs	r3, #0
 8003b7a:	9342      	str	r3, [sp, #264]	@ 0x108
 8003b7c:	2303      	movs	r3, #3
 8003b7e:	e002      	b.n	8003b86 <__ssvfiscanf_r+0x1ea>
 8003b80:	2308      	movs	r3, #8
 8003b82:	9342      	str	r3, [sp, #264]	@ 0x108
 8003b84:	2304      	movs	r3, #4
 8003b86:	9347      	str	r3, [sp, #284]	@ 0x11c
 8003b88:	6863      	ldr	r3, [r4, #4]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	dd39      	ble.n	8003c02 <__ssvfiscanf_r+0x266>
 8003b8e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8003b90:	0659      	lsls	r1, r3, #25
 8003b92:	d404      	bmi.n	8003b9e <__ssvfiscanf_r+0x202>
 8003b94:	6823      	ldr	r3, [r4, #0]
 8003b96:	781a      	ldrb	r2, [r3, #0]
 8003b98:	5cba      	ldrb	r2, [r7, r2]
 8003b9a:	0712      	lsls	r2, r2, #28
 8003b9c:	d438      	bmi.n	8003c10 <__ssvfiscanf_r+0x274>
 8003b9e:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8003ba0:	2b02      	cmp	r3, #2
 8003ba2:	dc47      	bgt.n	8003c34 <__ssvfiscanf_r+0x298>
 8003ba4:	466b      	mov	r3, sp
 8003ba6:	4622      	mov	r2, r4
 8003ba8:	a941      	add	r1, sp, #260	@ 0x104
 8003baa:	4630      	mov	r0, r6
 8003bac:	f000 f9f8 	bl	8003fa0 <_scanf_chars>
 8003bb0:	2801      	cmp	r0, #1
 8003bb2:	d064      	beq.n	8003c7e <__ssvfiscanf_r+0x2e2>
 8003bb4:	2802      	cmp	r0, #2
 8003bb6:	f47f af19 	bne.w	80039ec <__ssvfiscanf_r+0x50>
 8003bba:	e7c9      	b.n	8003b50 <__ssvfiscanf_r+0x1b4>
 8003bbc:	220a      	movs	r2, #10
 8003bbe:	e7d7      	b.n	8003b70 <__ssvfiscanf_r+0x1d4>
 8003bc0:	4629      	mov	r1, r5
 8003bc2:	4640      	mov	r0, r8
 8003bc4:	f000 fb3a 	bl	800423c <__sccl>
 8003bc8:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8003bca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003bce:	9341      	str	r3, [sp, #260]	@ 0x104
 8003bd0:	4605      	mov	r5, r0
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e7d7      	b.n	8003b86 <__ssvfiscanf_r+0x1ea>
 8003bd6:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8003bd8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003bdc:	9341      	str	r3, [sp, #260]	@ 0x104
 8003bde:	2300      	movs	r3, #0
 8003be0:	e7d1      	b.n	8003b86 <__ssvfiscanf_r+0x1ea>
 8003be2:	2302      	movs	r3, #2
 8003be4:	e7cf      	b.n	8003b86 <__ssvfiscanf_r+0x1ea>
 8003be6:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8003be8:	06c3      	lsls	r3, r0, #27
 8003bea:	f53f aeff 	bmi.w	80039ec <__ssvfiscanf_r+0x50>
 8003bee:	9b00      	ldr	r3, [sp, #0]
 8003bf0:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8003bf2:	1d19      	adds	r1, r3, #4
 8003bf4:	9100      	str	r1, [sp, #0]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	07c0      	lsls	r0, r0, #31
 8003bfa:	bf4c      	ite	mi
 8003bfc:	801a      	strhmi	r2, [r3, #0]
 8003bfe:	601a      	strpl	r2, [r3, #0]
 8003c00:	e6f4      	b.n	80039ec <__ssvfiscanf_r+0x50>
 8003c02:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8003c04:	4621      	mov	r1, r4
 8003c06:	4630      	mov	r0, r6
 8003c08:	4798      	blx	r3
 8003c0a:	2800      	cmp	r0, #0
 8003c0c:	d0bf      	beq.n	8003b8e <__ssvfiscanf_r+0x1f2>
 8003c0e:	e79f      	b.n	8003b50 <__ssvfiscanf_r+0x1b4>
 8003c10:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8003c12:	3201      	adds	r2, #1
 8003c14:	9245      	str	r2, [sp, #276]	@ 0x114
 8003c16:	6862      	ldr	r2, [r4, #4]
 8003c18:	3a01      	subs	r2, #1
 8003c1a:	2a00      	cmp	r2, #0
 8003c1c:	6062      	str	r2, [r4, #4]
 8003c1e:	dd02      	ble.n	8003c26 <__ssvfiscanf_r+0x28a>
 8003c20:	3301      	adds	r3, #1
 8003c22:	6023      	str	r3, [r4, #0]
 8003c24:	e7b6      	b.n	8003b94 <__ssvfiscanf_r+0x1f8>
 8003c26:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8003c28:	4621      	mov	r1, r4
 8003c2a:	4630      	mov	r0, r6
 8003c2c:	4798      	blx	r3
 8003c2e:	2800      	cmp	r0, #0
 8003c30:	d0b0      	beq.n	8003b94 <__ssvfiscanf_r+0x1f8>
 8003c32:	e78d      	b.n	8003b50 <__ssvfiscanf_r+0x1b4>
 8003c34:	2b04      	cmp	r3, #4
 8003c36:	dc0f      	bgt.n	8003c58 <__ssvfiscanf_r+0x2bc>
 8003c38:	466b      	mov	r3, sp
 8003c3a:	4622      	mov	r2, r4
 8003c3c:	a941      	add	r1, sp, #260	@ 0x104
 8003c3e:	4630      	mov	r0, r6
 8003c40:	f000 fa08 	bl	8004054 <_scanf_i>
 8003c44:	e7b4      	b.n	8003bb0 <__ssvfiscanf_r+0x214>
 8003c46:	bf00      	nop
 8003c48:	080038e9 	.word	0x080038e9
 8003c4c:	08003963 	.word	0x08003963
 8003c50:	08004601 	.word	0x08004601
 8003c54:	08004707 	.word	0x08004707
 8003c58:	4b0a      	ldr	r3, [pc, #40]	@ (8003c84 <__ssvfiscanf_r+0x2e8>)
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	f43f aec6 	beq.w	80039ec <__ssvfiscanf_r+0x50>
 8003c60:	466b      	mov	r3, sp
 8003c62:	4622      	mov	r2, r4
 8003c64:	a941      	add	r1, sp, #260	@ 0x104
 8003c66:	4630      	mov	r0, r6
 8003c68:	f3af 8000 	nop.w
 8003c6c:	e7a0      	b.n	8003bb0 <__ssvfiscanf_r+0x214>
 8003c6e:	89a3      	ldrh	r3, [r4, #12]
 8003c70:	065b      	lsls	r3, r3, #25
 8003c72:	f53f af71 	bmi.w	8003b58 <__ssvfiscanf_r+0x1bc>
 8003c76:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 8003c7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c7e:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8003c80:	e7f9      	b.n	8003c76 <__ssvfiscanf_r+0x2da>
 8003c82:	bf00      	nop
 8003c84:	00000000 	.word	0x00000000

08003c88 <_printf_common>:
 8003c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c8c:	4616      	mov	r6, r2
 8003c8e:	4698      	mov	r8, r3
 8003c90:	688a      	ldr	r2, [r1, #8]
 8003c92:	690b      	ldr	r3, [r1, #16]
 8003c94:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	bfb8      	it	lt
 8003c9c:	4613      	movlt	r3, r2
 8003c9e:	6033      	str	r3, [r6, #0]
 8003ca0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003ca4:	4607      	mov	r7, r0
 8003ca6:	460c      	mov	r4, r1
 8003ca8:	b10a      	cbz	r2, 8003cae <_printf_common+0x26>
 8003caa:	3301      	adds	r3, #1
 8003cac:	6033      	str	r3, [r6, #0]
 8003cae:	6823      	ldr	r3, [r4, #0]
 8003cb0:	0699      	lsls	r1, r3, #26
 8003cb2:	bf42      	ittt	mi
 8003cb4:	6833      	ldrmi	r3, [r6, #0]
 8003cb6:	3302      	addmi	r3, #2
 8003cb8:	6033      	strmi	r3, [r6, #0]
 8003cba:	6825      	ldr	r5, [r4, #0]
 8003cbc:	f015 0506 	ands.w	r5, r5, #6
 8003cc0:	d106      	bne.n	8003cd0 <_printf_common+0x48>
 8003cc2:	f104 0a19 	add.w	sl, r4, #25
 8003cc6:	68e3      	ldr	r3, [r4, #12]
 8003cc8:	6832      	ldr	r2, [r6, #0]
 8003cca:	1a9b      	subs	r3, r3, r2
 8003ccc:	42ab      	cmp	r3, r5
 8003cce:	dc26      	bgt.n	8003d1e <_printf_common+0x96>
 8003cd0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003cd4:	6822      	ldr	r2, [r4, #0]
 8003cd6:	3b00      	subs	r3, #0
 8003cd8:	bf18      	it	ne
 8003cda:	2301      	movne	r3, #1
 8003cdc:	0692      	lsls	r2, r2, #26
 8003cde:	d42b      	bmi.n	8003d38 <_printf_common+0xb0>
 8003ce0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003ce4:	4641      	mov	r1, r8
 8003ce6:	4638      	mov	r0, r7
 8003ce8:	47c8      	blx	r9
 8003cea:	3001      	adds	r0, #1
 8003cec:	d01e      	beq.n	8003d2c <_printf_common+0xa4>
 8003cee:	6823      	ldr	r3, [r4, #0]
 8003cf0:	6922      	ldr	r2, [r4, #16]
 8003cf2:	f003 0306 	and.w	r3, r3, #6
 8003cf6:	2b04      	cmp	r3, #4
 8003cf8:	bf02      	ittt	eq
 8003cfa:	68e5      	ldreq	r5, [r4, #12]
 8003cfc:	6833      	ldreq	r3, [r6, #0]
 8003cfe:	1aed      	subeq	r5, r5, r3
 8003d00:	68a3      	ldr	r3, [r4, #8]
 8003d02:	bf0c      	ite	eq
 8003d04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003d08:	2500      	movne	r5, #0
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	bfc4      	itt	gt
 8003d0e:	1a9b      	subgt	r3, r3, r2
 8003d10:	18ed      	addgt	r5, r5, r3
 8003d12:	2600      	movs	r6, #0
 8003d14:	341a      	adds	r4, #26
 8003d16:	42b5      	cmp	r5, r6
 8003d18:	d11a      	bne.n	8003d50 <_printf_common+0xc8>
 8003d1a:	2000      	movs	r0, #0
 8003d1c:	e008      	b.n	8003d30 <_printf_common+0xa8>
 8003d1e:	2301      	movs	r3, #1
 8003d20:	4652      	mov	r2, sl
 8003d22:	4641      	mov	r1, r8
 8003d24:	4638      	mov	r0, r7
 8003d26:	47c8      	blx	r9
 8003d28:	3001      	adds	r0, #1
 8003d2a:	d103      	bne.n	8003d34 <_printf_common+0xac>
 8003d2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d34:	3501      	adds	r5, #1
 8003d36:	e7c6      	b.n	8003cc6 <_printf_common+0x3e>
 8003d38:	18e1      	adds	r1, r4, r3
 8003d3a:	1c5a      	adds	r2, r3, #1
 8003d3c:	2030      	movs	r0, #48	@ 0x30
 8003d3e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003d42:	4422      	add	r2, r4
 8003d44:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003d48:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003d4c:	3302      	adds	r3, #2
 8003d4e:	e7c7      	b.n	8003ce0 <_printf_common+0x58>
 8003d50:	2301      	movs	r3, #1
 8003d52:	4622      	mov	r2, r4
 8003d54:	4641      	mov	r1, r8
 8003d56:	4638      	mov	r0, r7
 8003d58:	47c8      	blx	r9
 8003d5a:	3001      	adds	r0, #1
 8003d5c:	d0e6      	beq.n	8003d2c <_printf_common+0xa4>
 8003d5e:	3601      	adds	r6, #1
 8003d60:	e7d9      	b.n	8003d16 <_printf_common+0x8e>
	...

08003d64 <_printf_i>:
 8003d64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003d68:	7e0f      	ldrb	r7, [r1, #24]
 8003d6a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003d6c:	2f78      	cmp	r7, #120	@ 0x78
 8003d6e:	4691      	mov	r9, r2
 8003d70:	4680      	mov	r8, r0
 8003d72:	460c      	mov	r4, r1
 8003d74:	469a      	mov	sl, r3
 8003d76:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003d7a:	d807      	bhi.n	8003d8c <_printf_i+0x28>
 8003d7c:	2f62      	cmp	r7, #98	@ 0x62
 8003d7e:	d80a      	bhi.n	8003d96 <_printf_i+0x32>
 8003d80:	2f00      	cmp	r7, #0
 8003d82:	f000 80d1 	beq.w	8003f28 <_printf_i+0x1c4>
 8003d86:	2f58      	cmp	r7, #88	@ 0x58
 8003d88:	f000 80b8 	beq.w	8003efc <_printf_i+0x198>
 8003d8c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003d90:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003d94:	e03a      	b.n	8003e0c <_printf_i+0xa8>
 8003d96:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003d9a:	2b15      	cmp	r3, #21
 8003d9c:	d8f6      	bhi.n	8003d8c <_printf_i+0x28>
 8003d9e:	a101      	add	r1, pc, #4	@ (adr r1, 8003da4 <_printf_i+0x40>)
 8003da0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003da4:	08003dfd 	.word	0x08003dfd
 8003da8:	08003e11 	.word	0x08003e11
 8003dac:	08003d8d 	.word	0x08003d8d
 8003db0:	08003d8d 	.word	0x08003d8d
 8003db4:	08003d8d 	.word	0x08003d8d
 8003db8:	08003d8d 	.word	0x08003d8d
 8003dbc:	08003e11 	.word	0x08003e11
 8003dc0:	08003d8d 	.word	0x08003d8d
 8003dc4:	08003d8d 	.word	0x08003d8d
 8003dc8:	08003d8d 	.word	0x08003d8d
 8003dcc:	08003d8d 	.word	0x08003d8d
 8003dd0:	08003f0f 	.word	0x08003f0f
 8003dd4:	08003e3b 	.word	0x08003e3b
 8003dd8:	08003ec9 	.word	0x08003ec9
 8003ddc:	08003d8d 	.word	0x08003d8d
 8003de0:	08003d8d 	.word	0x08003d8d
 8003de4:	08003f31 	.word	0x08003f31
 8003de8:	08003d8d 	.word	0x08003d8d
 8003dec:	08003e3b 	.word	0x08003e3b
 8003df0:	08003d8d 	.word	0x08003d8d
 8003df4:	08003d8d 	.word	0x08003d8d
 8003df8:	08003ed1 	.word	0x08003ed1
 8003dfc:	6833      	ldr	r3, [r6, #0]
 8003dfe:	1d1a      	adds	r2, r3, #4
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	6032      	str	r2, [r6, #0]
 8003e04:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003e08:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	e09c      	b.n	8003f4a <_printf_i+0x1e6>
 8003e10:	6833      	ldr	r3, [r6, #0]
 8003e12:	6820      	ldr	r0, [r4, #0]
 8003e14:	1d19      	adds	r1, r3, #4
 8003e16:	6031      	str	r1, [r6, #0]
 8003e18:	0606      	lsls	r6, r0, #24
 8003e1a:	d501      	bpl.n	8003e20 <_printf_i+0xbc>
 8003e1c:	681d      	ldr	r5, [r3, #0]
 8003e1e:	e003      	b.n	8003e28 <_printf_i+0xc4>
 8003e20:	0645      	lsls	r5, r0, #25
 8003e22:	d5fb      	bpl.n	8003e1c <_printf_i+0xb8>
 8003e24:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003e28:	2d00      	cmp	r5, #0
 8003e2a:	da03      	bge.n	8003e34 <_printf_i+0xd0>
 8003e2c:	232d      	movs	r3, #45	@ 0x2d
 8003e2e:	426d      	negs	r5, r5
 8003e30:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003e34:	4858      	ldr	r0, [pc, #352]	@ (8003f98 <_printf_i+0x234>)
 8003e36:	230a      	movs	r3, #10
 8003e38:	e011      	b.n	8003e5e <_printf_i+0xfa>
 8003e3a:	6821      	ldr	r1, [r4, #0]
 8003e3c:	6833      	ldr	r3, [r6, #0]
 8003e3e:	0608      	lsls	r0, r1, #24
 8003e40:	f853 5b04 	ldr.w	r5, [r3], #4
 8003e44:	d402      	bmi.n	8003e4c <_printf_i+0xe8>
 8003e46:	0649      	lsls	r1, r1, #25
 8003e48:	bf48      	it	mi
 8003e4a:	b2ad      	uxthmi	r5, r5
 8003e4c:	2f6f      	cmp	r7, #111	@ 0x6f
 8003e4e:	4852      	ldr	r0, [pc, #328]	@ (8003f98 <_printf_i+0x234>)
 8003e50:	6033      	str	r3, [r6, #0]
 8003e52:	bf14      	ite	ne
 8003e54:	230a      	movne	r3, #10
 8003e56:	2308      	moveq	r3, #8
 8003e58:	2100      	movs	r1, #0
 8003e5a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003e5e:	6866      	ldr	r6, [r4, #4]
 8003e60:	60a6      	str	r6, [r4, #8]
 8003e62:	2e00      	cmp	r6, #0
 8003e64:	db05      	blt.n	8003e72 <_printf_i+0x10e>
 8003e66:	6821      	ldr	r1, [r4, #0]
 8003e68:	432e      	orrs	r6, r5
 8003e6a:	f021 0104 	bic.w	r1, r1, #4
 8003e6e:	6021      	str	r1, [r4, #0]
 8003e70:	d04b      	beq.n	8003f0a <_printf_i+0x1a6>
 8003e72:	4616      	mov	r6, r2
 8003e74:	fbb5 f1f3 	udiv	r1, r5, r3
 8003e78:	fb03 5711 	mls	r7, r3, r1, r5
 8003e7c:	5dc7      	ldrb	r7, [r0, r7]
 8003e7e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003e82:	462f      	mov	r7, r5
 8003e84:	42bb      	cmp	r3, r7
 8003e86:	460d      	mov	r5, r1
 8003e88:	d9f4      	bls.n	8003e74 <_printf_i+0x110>
 8003e8a:	2b08      	cmp	r3, #8
 8003e8c:	d10b      	bne.n	8003ea6 <_printf_i+0x142>
 8003e8e:	6823      	ldr	r3, [r4, #0]
 8003e90:	07df      	lsls	r7, r3, #31
 8003e92:	d508      	bpl.n	8003ea6 <_printf_i+0x142>
 8003e94:	6923      	ldr	r3, [r4, #16]
 8003e96:	6861      	ldr	r1, [r4, #4]
 8003e98:	4299      	cmp	r1, r3
 8003e9a:	bfde      	ittt	le
 8003e9c:	2330      	movle	r3, #48	@ 0x30
 8003e9e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003ea2:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8003ea6:	1b92      	subs	r2, r2, r6
 8003ea8:	6122      	str	r2, [r4, #16]
 8003eaa:	f8cd a000 	str.w	sl, [sp]
 8003eae:	464b      	mov	r3, r9
 8003eb0:	aa03      	add	r2, sp, #12
 8003eb2:	4621      	mov	r1, r4
 8003eb4:	4640      	mov	r0, r8
 8003eb6:	f7ff fee7 	bl	8003c88 <_printf_common>
 8003eba:	3001      	adds	r0, #1
 8003ebc:	d14a      	bne.n	8003f54 <_printf_i+0x1f0>
 8003ebe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003ec2:	b004      	add	sp, #16
 8003ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ec8:	6823      	ldr	r3, [r4, #0]
 8003eca:	f043 0320 	orr.w	r3, r3, #32
 8003ece:	6023      	str	r3, [r4, #0]
 8003ed0:	4832      	ldr	r0, [pc, #200]	@ (8003f9c <_printf_i+0x238>)
 8003ed2:	2778      	movs	r7, #120	@ 0x78
 8003ed4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003ed8:	6823      	ldr	r3, [r4, #0]
 8003eda:	6831      	ldr	r1, [r6, #0]
 8003edc:	061f      	lsls	r7, r3, #24
 8003ede:	f851 5b04 	ldr.w	r5, [r1], #4
 8003ee2:	d402      	bmi.n	8003eea <_printf_i+0x186>
 8003ee4:	065f      	lsls	r7, r3, #25
 8003ee6:	bf48      	it	mi
 8003ee8:	b2ad      	uxthmi	r5, r5
 8003eea:	6031      	str	r1, [r6, #0]
 8003eec:	07d9      	lsls	r1, r3, #31
 8003eee:	bf44      	itt	mi
 8003ef0:	f043 0320 	orrmi.w	r3, r3, #32
 8003ef4:	6023      	strmi	r3, [r4, #0]
 8003ef6:	b11d      	cbz	r5, 8003f00 <_printf_i+0x19c>
 8003ef8:	2310      	movs	r3, #16
 8003efa:	e7ad      	b.n	8003e58 <_printf_i+0xf4>
 8003efc:	4826      	ldr	r0, [pc, #152]	@ (8003f98 <_printf_i+0x234>)
 8003efe:	e7e9      	b.n	8003ed4 <_printf_i+0x170>
 8003f00:	6823      	ldr	r3, [r4, #0]
 8003f02:	f023 0320 	bic.w	r3, r3, #32
 8003f06:	6023      	str	r3, [r4, #0]
 8003f08:	e7f6      	b.n	8003ef8 <_printf_i+0x194>
 8003f0a:	4616      	mov	r6, r2
 8003f0c:	e7bd      	b.n	8003e8a <_printf_i+0x126>
 8003f0e:	6833      	ldr	r3, [r6, #0]
 8003f10:	6825      	ldr	r5, [r4, #0]
 8003f12:	6961      	ldr	r1, [r4, #20]
 8003f14:	1d18      	adds	r0, r3, #4
 8003f16:	6030      	str	r0, [r6, #0]
 8003f18:	062e      	lsls	r6, r5, #24
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	d501      	bpl.n	8003f22 <_printf_i+0x1be>
 8003f1e:	6019      	str	r1, [r3, #0]
 8003f20:	e002      	b.n	8003f28 <_printf_i+0x1c4>
 8003f22:	0668      	lsls	r0, r5, #25
 8003f24:	d5fb      	bpl.n	8003f1e <_printf_i+0x1ba>
 8003f26:	8019      	strh	r1, [r3, #0]
 8003f28:	2300      	movs	r3, #0
 8003f2a:	6123      	str	r3, [r4, #16]
 8003f2c:	4616      	mov	r6, r2
 8003f2e:	e7bc      	b.n	8003eaa <_printf_i+0x146>
 8003f30:	6833      	ldr	r3, [r6, #0]
 8003f32:	1d1a      	adds	r2, r3, #4
 8003f34:	6032      	str	r2, [r6, #0]
 8003f36:	681e      	ldr	r6, [r3, #0]
 8003f38:	6862      	ldr	r2, [r4, #4]
 8003f3a:	2100      	movs	r1, #0
 8003f3c:	4630      	mov	r0, r6
 8003f3e:	f7fc f94f 	bl	80001e0 <memchr>
 8003f42:	b108      	cbz	r0, 8003f48 <_printf_i+0x1e4>
 8003f44:	1b80      	subs	r0, r0, r6
 8003f46:	6060      	str	r0, [r4, #4]
 8003f48:	6863      	ldr	r3, [r4, #4]
 8003f4a:	6123      	str	r3, [r4, #16]
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003f52:	e7aa      	b.n	8003eaa <_printf_i+0x146>
 8003f54:	6923      	ldr	r3, [r4, #16]
 8003f56:	4632      	mov	r2, r6
 8003f58:	4649      	mov	r1, r9
 8003f5a:	4640      	mov	r0, r8
 8003f5c:	47d0      	blx	sl
 8003f5e:	3001      	adds	r0, #1
 8003f60:	d0ad      	beq.n	8003ebe <_printf_i+0x15a>
 8003f62:	6823      	ldr	r3, [r4, #0]
 8003f64:	079b      	lsls	r3, r3, #30
 8003f66:	d413      	bmi.n	8003f90 <_printf_i+0x22c>
 8003f68:	68e0      	ldr	r0, [r4, #12]
 8003f6a:	9b03      	ldr	r3, [sp, #12]
 8003f6c:	4298      	cmp	r0, r3
 8003f6e:	bfb8      	it	lt
 8003f70:	4618      	movlt	r0, r3
 8003f72:	e7a6      	b.n	8003ec2 <_printf_i+0x15e>
 8003f74:	2301      	movs	r3, #1
 8003f76:	4632      	mov	r2, r6
 8003f78:	4649      	mov	r1, r9
 8003f7a:	4640      	mov	r0, r8
 8003f7c:	47d0      	blx	sl
 8003f7e:	3001      	adds	r0, #1
 8003f80:	d09d      	beq.n	8003ebe <_printf_i+0x15a>
 8003f82:	3501      	adds	r5, #1
 8003f84:	68e3      	ldr	r3, [r4, #12]
 8003f86:	9903      	ldr	r1, [sp, #12]
 8003f88:	1a5b      	subs	r3, r3, r1
 8003f8a:	42ab      	cmp	r3, r5
 8003f8c:	dcf2      	bgt.n	8003f74 <_printf_i+0x210>
 8003f8e:	e7eb      	b.n	8003f68 <_printf_i+0x204>
 8003f90:	2500      	movs	r5, #0
 8003f92:	f104 0619 	add.w	r6, r4, #25
 8003f96:	e7f5      	b.n	8003f84 <_printf_i+0x220>
 8003f98:	08004712 	.word	0x08004712
 8003f9c:	08004723 	.word	0x08004723

08003fa0 <_scanf_chars>:
 8003fa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003fa4:	4615      	mov	r5, r2
 8003fa6:	688a      	ldr	r2, [r1, #8]
 8003fa8:	4680      	mov	r8, r0
 8003faa:	460c      	mov	r4, r1
 8003fac:	b932      	cbnz	r2, 8003fbc <_scanf_chars+0x1c>
 8003fae:	698a      	ldr	r2, [r1, #24]
 8003fb0:	2a00      	cmp	r2, #0
 8003fb2:	bf14      	ite	ne
 8003fb4:	f04f 32ff 	movne.w	r2, #4294967295	@ 0xffffffff
 8003fb8:	2201      	moveq	r2, #1
 8003fba:	608a      	str	r2, [r1, #8]
 8003fbc:	6822      	ldr	r2, [r4, #0]
 8003fbe:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8004050 <_scanf_chars+0xb0>
 8003fc2:	06d1      	lsls	r1, r2, #27
 8003fc4:	bf5f      	itttt	pl
 8003fc6:	681a      	ldrpl	r2, [r3, #0]
 8003fc8:	1d11      	addpl	r1, r2, #4
 8003fca:	6019      	strpl	r1, [r3, #0]
 8003fcc:	6816      	ldrpl	r6, [r2, #0]
 8003fce:	2700      	movs	r7, #0
 8003fd0:	69a0      	ldr	r0, [r4, #24]
 8003fd2:	b188      	cbz	r0, 8003ff8 <_scanf_chars+0x58>
 8003fd4:	2801      	cmp	r0, #1
 8003fd6:	d107      	bne.n	8003fe8 <_scanf_chars+0x48>
 8003fd8:	682b      	ldr	r3, [r5, #0]
 8003fda:	781a      	ldrb	r2, [r3, #0]
 8003fdc:	6963      	ldr	r3, [r4, #20]
 8003fde:	5c9b      	ldrb	r3, [r3, r2]
 8003fe0:	b953      	cbnz	r3, 8003ff8 <_scanf_chars+0x58>
 8003fe2:	2f00      	cmp	r7, #0
 8003fe4:	d031      	beq.n	800404a <_scanf_chars+0xaa>
 8003fe6:	e022      	b.n	800402e <_scanf_chars+0x8e>
 8003fe8:	2802      	cmp	r0, #2
 8003fea:	d120      	bne.n	800402e <_scanf_chars+0x8e>
 8003fec:	682b      	ldr	r3, [r5, #0]
 8003fee:	781b      	ldrb	r3, [r3, #0]
 8003ff0:	f819 3003 	ldrb.w	r3, [r9, r3]
 8003ff4:	071b      	lsls	r3, r3, #28
 8003ff6:	d41a      	bmi.n	800402e <_scanf_chars+0x8e>
 8003ff8:	6823      	ldr	r3, [r4, #0]
 8003ffa:	06da      	lsls	r2, r3, #27
 8003ffc:	bf5e      	ittt	pl
 8003ffe:	682b      	ldrpl	r3, [r5, #0]
 8004000:	781b      	ldrbpl	r3, [r3, #0]
 8004002:	f806 3b01 	strbpl.w	r3, [r6], #1
 8004006:	682a      	ldr	r2, [r5, #0]
 8004008:	686b      	ldr	r3, [r5, #4]
 800400a:	3201      	adds	r2, #1
 800400c:	602a      	str	r2, [r5, #0]
 800400e:	68a2      	ldr	r2, [r4, #8]
 8004010:	3b01      	subs	r3, #1
 8004012:	3a01      	subs	r2, #1
 8004014:	606b      	str	r3, [r5, #4]
 8004016:	3701      	adds	r7, #1
 8004018:	60a2      	str	r2, [r4, #8]
 800401a:	b142      	cbz	r2, 800402e <_scanf_chars+0x8e>
 800401c:	2b00      	cmp	r3, #0
 800401e:	dcd7      	bgt.n	8003fd0 <_scanf_chars+0x30>
 8004020:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8004024:	4629      	mov	r1, r5
 8004026:	4640      	mov	r0, r8
 8004028:	4798      	blx	r3
 800402a:	2800      	cmp	r0, #0
 800402c:	d0d0      	beq.n	8003fd0 <_scanf_chars+0x30>
 800402e:	6823      	ldr	r3, [r4, #0]
 8004030:	f013 0310 	ands.w	r3, r3, #16
 8004034:	d105      	bne.n	8004042 <_scanf_chars+0xa2>
 8004036:	68e2      	ldr	r2, [r4, #12]
 8004038:	3201      	adds	r2, #1
 800403a:	60e2      	str	r2, [r4, #12]
 800403c:	69a2      	ldr	r2, [r4, #24]
 800403e:	b102      	cbz	r2, 8004042 <_scanf_chars+0xa2>
 8004040:	7033      	strb	r3, [r6, #0]
 8004042:	6923      	ldr	r3, [r4, #16]
 8004044:	443b      	add	r3, r7
 8004046:	6123      	str	r3, [r4, #16]
 8004048:	2000      	movs	r0, #0
 800404a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800404e:	bf00      	nop
 8004050:	08004601 	.word	0x08004601

08004054 <_scanf_i>:
 8004054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004058:	4698      	mov	r8, r3
 800405a:	4b74      	ldr	r3, [pc, #464]	@ (800422c <_scanf_i+0x1d8>)
 800405c:	460c      	mov	r4, r1
 800405e:	4682      	mov	sl, r0
 8004060:	4616      	mov	r6, r2
 8004062:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004066:	b087      	sub	sp, #28
 8004068:	ab03      	add	r3, sp, #12
 800406a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800406e:	4b70      	ldr	r3, [pc, #448]	@ (8004230 <_scanf_i+0x1dc>)
 8004070:	69a1      	ldr	r1, [r4, #24]
 8004072:	4a70      	ldr	r2, [pc, #448]	@ (8004234 <_scanf_i+0x1e0>)
 8004074:	2903      	cmp	r1, #3
 8004076:	bf08      	it	eq
 8004078:	461a      	moveq	r2, r3
 800407a:	68a3      	ldr	r3, [r4, #8]
 800407c:	9201      	str	r2, [sp, #4]
 800407e:	1e5a      	subs	r2, r3, #1
 8004080:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8004084:	bf88      	it	hi
 8004086:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800408a:	4627      	mov	r7, r4
 800408c:	bf82      	ittt	hi
 800408e:	eb03 0905 	addhi.w	r9, r3, r5
 8004092:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8004096:	60a3      	strhi	r3, [r4, #8]
 8004098:	f857 3b1c 	ldr.w	r3, [r7], #28
 800409c:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 80040a0:	bf98      	it	ls
 80040a2:	f04f 0900 	movls.w	r9, #0
 80040a6:	6023      	str	r3, [r4, #0]
 80040a8:	463d      	mov	r5, r7
 80040aa:	f04f 0b00 	mov.w	fp, #0
 80040ae:	6831      	ldr	r1, [r6, #0]
 80040b0:	ab03      	add	r3, sp, #12
 80040b2:	7809      	ldrb	r1, [r1, #0]
 80040b4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80040b8:	2202      	movs	r2, #2
 80040ba:	f7fc f891 	bl	80001e0 <memchr>
 80040be:	b328      	cbz	r0, 800410c <_scanf_i+0xb8>
 80040c0:	f1bb 0f01 	cmp.w	fp, #1
 80040c4:	d159      	bne.n	800417a <_scanf_i+0x126>
 80040c6:	6862      	ldr	r2, [r4, #4]
 80040c8:	b92a      	cbnz	r2, 80040d6 <_scanf_i+0x82>
 80040ca:	6822      	ldr	r2, [r4, #0]
 80040cc:	2108      	movs	r1, #8
 80040ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040d2:	6061      	str	r1, [r4, #4]
 80040d4:	6022      	str	r2, [r4, #0]
 80040d6:	6822      	ldr	r2, [r4, #0]
 80040d8:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 80040dc:	6022      	str	r2, [r4, #0]
 80040de:	68a2      	ldr	r2, [r4, #8]
 80040e0:	1e51      	subs	r1, r2, #1
 80040e2:	60a1      	str	r1, [r4, #8]
 80040e4:	b192      	cbz	r2, 800410c <_scanf_i+0xb8>
 80040e6:	6832      	ldr	r2, [r6, #0]
 80040e8:	1c51      	adds	r1, r2, #1
 80040ea:	6031      	str	r1, [r6, #0]
 80040ec:	7812      	ldrb	r2, [r2, #0]
 80040ee:	f805 2b01 	strb.w	r2, [r5], #1
 80040f2:	6872      	ldr	r2, [r6, #4]
 80040f4:	3a01      	subs	r2, #1
 80040f6:	2a00      	cmp	r2, #0
 80040f8:	6072      	str	r2, [r6, #4]
 80040fa:	dc07      	bgt.n	800410c <_scanf_i+0xb8>
 80040fc:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8004100:	4631      	mov	r1, r6
 8004102:	4650      	mov	r0, sl
 8004104:	4790      	blx	r2
 8004106:	2800      	cmp	r0, #0
 8004108:	f040 8085 	bne.w	8004216 <_scanf_i+0x1c2>
 800410c:	f10b 0b01 	add.w	fp, fp, #1
 8004110:	f1bb 0f03 	cmp.w	fp, #3
 8004114:	d1cb      	bne.n	80040ae <_scanf_i+0x5a>
 8004116:	6863      	ldr	r3, [r4, #4]
 8004118:	b90b      	cbnz	r3, 800411e <_scanf_i+0xca>
 800411a:	230a      	movs	r3, #10
 800411c:	6063      	str	r3, [r4, #4]
 800411e:	6863      	ldr	r3, [r4, #4]
 8004120:	4945      	ldr	r1, [pc, #276]	@ (8004238 <_scanf_i+0x1e4>)
 8004122:	6960      	ldr	r0, [r4, #20]
 8004124:	1ac9      	subs	r1, r1, r3
 8004126:	f000 f889 	bl	800423c <__sccl>
 800412a:	f04f 0b00 	mov.w	fp, #0
 800412e:	68a3      	ldr	r3, [r4, #8]
 8004130:	6822      	ldr	r2, [r4, #0]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d03d      	beq.n	80041b2 <_scanf_i+0x15e>
 8004136:	6831      	ldr	r1, [r6, #0]
 8004138:	6960      	ldr	r0, [r4, #20]
 800413a:	f891 c000 	ldrb.w	ip, [r1]
 800413e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8004142:	2800      	cmp	r0, #0
 8004144:	d035      	beq.n	80041b2 <_scanf_i+0x15e>
 8004146:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800414a:	d124      	bne.n	8004196 <_scanf_i+0x142>
 800414c:	0510      	lsls	r0, r2, #20
 800414e:	d522      	bpl.n	8004196 <_scanf_i+0x142>
 8004150:	f10b 0b01 	add.w	fp, fp, #1
 8004154:	f1b9 0f00 	cmp.w	r9, #0
 8004158:	d003      	beq.n	8004162 <_scanf_i+0x10e>
 800415a:	3301      	adds	r3, #1
 800415c:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 8004160:	60a3      	str	r3, [r4, #8]
 8004162:	6873      	ldr	r3, [r6, #4]
 8004164:	3b01      	subs	r3, #1
 8004166:	2b00      	cmp	r3, #0
 8004168:	6073      	str	r3, [r6, #4]
 800416a:	dd1b      	ble.n	80041a4 <_scanf_i+0x150>
 800416c:	6833      	ldr	r3, [r6, #0]
 800416e:	3301      	adds	r3, #1
 8004170:	6033      	str	r3, [r6, #0]
 8004172:	68a3      	ldr	r3, [r4, #8]
 8004174:	3b01      	subs	r3, #1
 8004176:	60a3      	str	r3, [r4, #8]
 8004178:	e7d9      	b.n	800412e <_scanf_i+0xda>
 800417a:	f1bb 0f02 	cmp.w	fp, #2
 800417e:	d1ae      	bne.n	80040de <_scanf_i+0x8a>
 8004180:	6822      	ldr	r2, [r4, #0]
 8004182:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8004186:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800418a:	d1c4      	bne.n	8004116 <_scanf_i+0xc2>
 800418c:	2110      	movs	r1, #16
 800418e:	6061      	str	r1, [r4, #4]
 8004190:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004194:	e7a2      	b.n	80040dc <_scanf_i+0x88>
 8004196:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800419a:	6022      	str	r2, [r4, #0]
 800419c:	780b      	ldrb	r3, [r1, #0]
 800419e:	f805 3b01 	strb.w	r3, [r5], #1
 80041a2:	e7de      	b.n	8004162 <_scanf_i+0x10e>
 80041a4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80041a8:	4631      	mov	r1, r6
 80041aa:	4650      	mov	r0, sl
 80041ac:	4798      	blx	r3
 80041ae:	2800      	cmp	r0, #0
 80041b0:	d0df      	beq.n	8004172 <_scanf_i+0x11e>
 80041b2:	6823      	ldr	r3, [r4, #0]
 80041b4:	05d9      	lsls	r1, r3, #23
 80041b6:	d50d      	bpl.n	80041d4 <_scanf_i+0x180>
 80041b8:	42bd      	cmp	r5, r7
 80041ba:	d909      	bls.n	80041d0 <_scanf_i+0x17c>
 80041bc:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80041c0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80041c4:	4632      	mov	r2, r6
 80041c6:	4650      	mov	r0, sl
 80041c8:	4798      	blx	r3
 80041ca:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 80041ce:	464d      	mov	r5, r9
 80041d0:	42bd      	cmp	r5, r7
 80041d2:	d028      	beq.n	8004226 <_scanf_i+0x1d2>
 80041d4:	6822      	ldr	r2, [r4, #0]
 80041d6:	f012 0210 	ands.w	r2, r2, #16
 80041da:	d113      	bne.n	8004204 <_scanf_i+0x1b0>
 80041dc:	702a      	strb	r2, [r5, #0]
 80041de:	6863      	ldr	r3, [r4, #4]
 80041e0:	9e01      	ldr	r6, [sp, #4]
 80041e2:	4639      	mov	r1, r7
 80041e4:	4650      	mov	r0, sl
 80041e6:	47b0      	blx	r6
 80041e8:	f8d8 3000 	ldr.w	r3, [r8]
 80041ec:	6821      	ldr	r1, [r4, #0]
 80041ee:	1d1a      	adds	r2, r3, #4
 80041f0:	f8c8 2000 	str.w	r2, [r8]
 80041f4:	f011 0f20 	tst.w	r1, #32
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	d00f      	beq.n	800421c <_scanf_i+0x1c8>
 80041fc:	6018      	str	r0, [r3, #0]
 80041fe:	68e3      	ldr	r3, [r4, #12]
 8004200:	3301      	adds	r3, #1
 8004202:	60e3      	str	r3, [r4, #12]
 8004204:	6923      	ldr	r3, [r4, #16]
 8004206:	1bed      	subs	r5, r5, r7
 8004208:	445d      	add	r5, fp
 800420a:	442b      	add	r3, r5
 800420c:	6123      	str	r3, [r4, #16]
 800420e:	2000      	movs	r0, #0
 8004210:	b007      	add	sp, #28
 8004212:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004216:	f04f 0b00 	mov.w	fp, #0
 800421a:	e7ca      	b.n	80041b2 <_scanf_i+0x15e>
 800421c:	07ca      	lsls	r2, r1, #31
 800421e:	bf4c      	ite	mi
 8004220:	8018      	strhmi	r0, [r3, #0]
 8004222:	6018      	strpl	r0, [r3, #0]
 8004224:	e7eb      	b.n	80041fe <_scanf_i+0x1aa>
 8004226:	2001      	movs	r0, #1
 8004228:	e7f2      	b.n	8004210 <_scanf_i+0x1bc>
 800422a:	bf00      	nop
 800422c:	0800458c 	.word	0x0800458c
 8004230:	08003321 	.word	0x08003321
 8004234:	080044b1 	.word	0x080044b1
 8004238:	08004744 	.word	0x08004744

0800423c <__sccl>:
 800423c:	b570      	push	{r4, r5, r6, lr}
 800423e:	780b      	ldrb	r3, [r1, #0]
 8004240:	4604      	mov	r4, r0
 8004242:	2b5e      	cmp	r3, #94	@ 0x5e
 8004244:	bf0b      	itete	eq
 8004246:	784b      	ldrbeq	r3, [r1, #1]
 8004248:	1c4a      	addne	r2, r1, #1
 800424a:	1c8a      	addeq	r2, r1, #2
 800424c:	2100      	movne	r1, #0
 800424e:	bf08      	it	eq
 8004250:	2101      	moveq	r1, #1
 8004252:	3801      	subs	r0, #1
 8004254:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8004258:	f800 1f01 	strb.w	r1, [r0, #1]!
 800425c:	42a8      	cmp	r0, r5
 800425e:	d1fb      	bne.n	8004258 <__sccl+0x1c>
 8004260:	b90b      	cbnz	r3, 8004266 <__sccl+0x2a>
 8004262:	1e50      	subs	r0, r2, #1
 8004264:	bd70      	pop	{r4, r5, r6, pc}
 8004266:	f081 0101 	eor.w	r1, r1, #1
 800426a:	54e1      	strb	r1, [r4, r3]
 800426c:	4610      	mov	r0, r2
 800426e:	4602      	mov	r2, r0
 8004270:	f812 5b01 	ldrb.w	r5, [r2], #1
 8004274:	2d2d      	cmp	r5, #45	@ 0x2d
 8004276:	d005      	beq.n	8004284 <__sccl+0x48>
 8004278:	2d5d      	cmp	r5, #93	@ 0x5d
 800427a:	d016      	beq.n	80042aa <__sccl+0x6e>
 800427c:	2d00      	cmp	r5, #0
 800427e:	d0f1      	beq.n	8004264 <__sccl+0x28>
 8004280:	462b      	mov	r3, r5
 8004282:	e7f2      	b.n	800426a <__sccl+0x2e>
 8004284:	7846      	ldrb	r6, [r0, #1]
 8004286:	2e5d      	cmp	r6, #93	@ 0x5d
 8004288:	d0fa      	beq.n	8004280 <__sccl+0x44>
 800428a:	42b3      	cmp	r3, r6
 800428c:	dcf8      	bgt.n	8004280 <__sccl+0x44>
 800428e:	3002      	adds	r0, #2
 8004290:	461a      	mov	r2, r3
 8004292:	3201      	adds	r2, #1
 8004294:	4296      	cmp	r6, r2
 8004296:	54a1      	strb	r1, [r4, r2]
 8004298:	dcfb      	bgt.n	8004292 <__sccl+0x56>
 800429a:	1af2      	subs	r2, r6, r3
 800429c:	3a01      	subs	r2, #1
 800429e:	1c5d      	adds	r5, r3, #1
 80042a0:	42b3      	cmp	r3, r6
 80042a2:	bfa8      	it	ge
 80042a4:	2200      	movge	r2, #0
 80042a6:	18ab      	adds	r3, r5, r2
 80042a8:	e7e1      	b.n	800426e <__sccl+0x32>
 80042aa:	4610      	mov	r0, r2
 80042ac:	e7da      	b.n	8004264 <__sccl+0x28>

080042ae <__submore>:
 80042ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042b2:	460c      	mov	r4, r1
 80042b4:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80042b6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80042ba:	4299      	cmp	r1, r3
 80042bc:	d11d      	bne.n	80042fa <__submore+0x4c>
 80042be:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80042c2:	f7ff f92d 	bl	8003520 <_malloc_r>
 80042c6:	b918      	cbnz	r0, 80042d0 <__submore+0x22>
 80042c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80042cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80042d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80042d4:	63a3      	str	r3, [r4, #56]	@ 0x38
 80042d6:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 80042da:	6360      	str	r0, [r4, #52]	@ 0x34
 80042dc:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 80042e0:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80042e4:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 80042e8:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80042ec:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 80042f0:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 80042f4:	6020      	str	r0, [r4, #0]
 80042f6:	2000      	movs	r0, #0
 80042f8:	e7e8      	b.n	80042cc <__submore+0x1e>
 80042fa:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 80042fc:	0077      	lsls	r7, r6, #1
 80042fe:	463a      	mov	r2, r7
 8004300:	f000 f83a 	bl	8004378 <_realloc_r>
 8004304:	4605      	mov	r5, r0
 8004306:	2800      	cmp	r0, #0
 8004308:	d0de      	beq.n	80042c8 <__submore+0x1a>
 800430a:	eb00 0806 	add.w	r8, r0, r6
 800430e:	4601      	mov	r1, r0
 8004310:	4632      	mov	r2, r6
 8004312:	4640      	mov	r0, r8
 8004314:	f7ff f88a 	bl	800342c <memcpy>
 8004318:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800431c:	f8c4 8000 	str.w	r8, [r4]
 8004320:	e7e9      	b.n	80042f6 <__submore+0x48>

08004322 <memmove>:
 8004322:	4288      	cmp	r0, r1
 8004324:	b510      	push	{r4, lr}
 8004326:	eb01 0402 	add.w	r4, r1, r2
 800432a:	d902      	bls.n	8004332 <memmove+0x10>
 800432c:	4284      	cmp	r4, r0
 800432e:	4623      	mov	r3, r4
 8004330:	d807      	bhi.n	8004342 <memmove+0x20>
 8004332:	1e43      	subs	r3, r0, #1
 8004334:	42a1      	cmp	r1, r4
 8004336:	d008      	beq.n	800434a <memmove+0x28>
 8004338:	f811 2b01 	ldrb.w	r2, [r1], #1
 800433c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004340:	e7f8      	b.n	8004334 <memmove+0x12>
 8004342:	4402      	add	r2, r0
 8004344:	4601      	mov	r1, r0
 8004346:	428a      	cmp	r2, r1
 8004348:	d100      	bne.n	800434c <memmove+0x2a>
 800434a:	bd10      	pop	{r4, pc}
 800434c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004350:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004354:	e7f7      	b.n	8004346 <memmove+0x24>
	...

08004358 <_sbrk_r>:
 8004358:	b538      	push	{r3, r4, r5, lr}
 800435a:	4d06      	ldr	r5, [pc, #24]	@ (8004374 <_sbrk_r+0x1c>)
 800435c:	2300      	movs	r3, #0
 800435e:	4604      	mov	r4, r0
 8004360:	4608      	mov	r0, r1
 8004362:	602b      	str	r3, [r5, #0]
 8004364:	f7fc fdc8 	bl	8000ef8 <_sbrk>
 8004368:	1c43      	adds	r3, r0, #1
 800436a:	d102      	bne.n	8004372 <_sbrk_r+0x1a>
 800436c:	682b      	ldr	r3, [r5, #0]
 800436e:	b103      	cbz	r3, 8004372 <_sbrk_r+0x1a>
 8004370:	6023      	str	r3, [r4, #0]
 8004372:	bd38      	pop	{r3, r4, r5, pc}
 8004374:	20000314 	.word	0x20000314

08004378 <_realloc_r>:
 8004378:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800437c:	4607      	mov	r7, r0
 800437e:	4614      	mov	r4, r2
 8004380:	460d      	mov	r5, r1
 8004382:	b921      	cbnz	r1, 800438e <_realloc_r+0x16>
 8004384:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004388:	4611      	mov	r1, r2
 800438a:	f7ff b8c9 	b.w	8003520 <_malloc_r>
 800438e:	b92a      	cbnz	r2, 800439c <_realloc_r+0x24>
 8004390:	f7ff f85a 	bl	8003448 <_free_r>
 8004394:	4625      	mov	r5, r4
 8004396:	4628      	mov	r0, r5
 8004398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800439c:	f000 f88a 	bl	80044b4 <_malloc_usable_size_r>
 80043a0:	4284      	cmp	r4, r0
 80043a2:	4606      	mov	r6, r0
 80043a4:	d802      	bhi.n	80043ac <_realloc_r+0x34>
 80043a6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80043aa:	d8f4      	bhi.n	8004396 <_realloc_r+0x1e>
 80043ac:	4621      	mov	r1, r4
 80043ae:	4638      	mov	r0, r7
 80043b0:	f7ff f8b6 	bl	8003520 <_malloc_r>
 80043b4:	4680      	mov	r8, r0
 80043b6:	b908      	cbnz	r0, 80043bc <_realloc_r+0x44>
 80043b8:	4645      	mov	r5, r8
 80043ba:	e7ec      	b.n	8004396 <_realloc_r+0x1e>
 80043bc:	42b4      	cmp	r4, r6
 80043be:	4622      	mov	r2, r4
 80043c0:	4629      	mov	r1, r5
 80043c2:	bf28      	it	cs
 80043c4:	4632      	movcs	r2, r6
 80043c6:	f7ff f831 	bl	800342c <memcpy>
 80043ca:	4629      	mov	r1, r5
 80043cc:	4638      	mov	r0, r7
 80043ce:	f7ff f83b 	bl	8003448 <_free_r>
 80043d2:	e7f1      	b.n	80043b8 <_realloc_r+0x40>

080043d4 <_strtoul_l.isra.0>:
 80043d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80043d8:	4e34      	ldr	r6, [pc, #208]	@ (80044ac <_strtoul_l.isra.0+0xd8>)
 80043da:	4686      	mov	lr, r0
 80043dc:	460d      	mov	r5, r1
 80043de:	4628      	mov	r0, r5
 80043e0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80043e4:	5d37      	ldrb	r7, [r6, r4]
 80043e6:	f017 0708 	ands.w	r7, r7, #8
 80043ea:	d1f8      	bne.n	80043de <_strtoul_l.isra.0+0xa>
 80043ec:	2c2d      	cmp	r4, #45	@ 0x2d
 80043ee:	d110      	bne.n	8004412 <_strtoul_l.isra.0+0x3e>
 80043f0:	782c      	ldrb	r4, [r5, #0]
 80043f2:	2701      	movs	r7, #1
 80043f4:	1c85      	adds	r5, r0, #2
 80043f6:	f033 0010 	bics.w	r0, r3, #16
 80043fa:	d115      	bne.n	8004428 <_strtoul_l.isra.0+0x54>
 80043fc:	2c30      	cmp	r4, #48	@ 0x30
 80043fe:	d10d      	bne.n	800441c <_strtoul_l.isra.0+0x48>
 8004400:	7828      	ldrb	r0, [r5, #0]
 8004402:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8004406:	2858      	cmp	r0, #88	@ 0x58
 8004408:	d108      	bne.n	800441c <_strtoul_l.isra.0+0x48>
 800440a:	786c      	ldrb	r4, [r5, #1]
 800440c:	3502      	adds	r5, #2
 800440e:	2310      	movs	r3, #16
 8004410:	e00a      	b.n	8004428 <_strtoul_l.isra.0+0x54>
 8004412:	2c2b      	cmp	r4, #43	@ 0x2b
 8004414:	bf04      	itt	eq
 8004416:	782c      	ldrbeq	r4, [r5, #0]
 8004418:	1c85      	addeq	r5, r0, #2
 800441a:	e7ec      	b.n	80043f6 <_strtoul_l.isra.0+0x22>
 800441c:	2b00      	cmp	r3, #0
 800441e:	d1f6      	bne.n	800440e <_strtoul_l.isra.0+0x3a>
 8004420:	2c30      	cmp	r4, #48	@ 0x30
 8004422:	bf14      	ite	ne
 8004424:	230a      	movne	r3, #10
 8004426:	2308      	moveq	r3, #8
 8004428:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 800442c:	2600      	movs	r6, #0
 800442e:	fbb8 f8f3 	udiv	r8, r8, r3
 8004432:	fb03 f908 	mul.w	r9, r3, r8
 8004436:	ea6f 0909 	mvn.w	r9, r9
 800443a:	4630      	mov	r0, r6
 800443c:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8004440:	f1bc 0f09 	cmp.w	ip, #9
 8004444:	d810      	bhi.n	8004468 <_strtoul_l.isra.0+0x94>
 8004446:	4664      	mov	r4, ip
 8004448:	42a3      	cmp	r3, r4
 800444a:	dd1e      	ble.n	800448a <_strtoul_l.isra.0+0xb6>
 800444c:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8004450:	d007      	beq.n	8004462 <_strtoul_l.isra.0+0x8e>
 8004452:	4580      	cmp	r8, r0
 8004454:	d316      	bcc.n	8004484 <_strtoul_l.isra.0+0xb0>
 8004456:	d101      	bne.n	800445c <_strtoul_l.isra.0+0x88>
 8004458:	45a1      	cmp	r9, r4
 800445a:	db13      	blt.n	8004484 <_strtoul_l.isra.0+0xb0>
 800445c:	fb00 4003 	mla	r0, r0, r3, r4
 8004460:	2601      	movs	r6, #1
 8004462:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004466:	e7e9      	b.n	800443c <_strtoul_l.isra.0+0x68>
 8004468:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800446c:	f1bc 0f19 	cmp.w	ip, #25
 8004470:	d801      	bhi.n	8004476 <_strtoul_l.isra.0+0xa2>
 8004472:	3c37      	subs	r4, #55	@ 0x37
 8004474:	e7e8      	b.n	8004448 <_strtoul_l.isra.0+0x74>
 8004476:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800447a:	f1bc 0f19 	cmp.w	ip, #25
 800447e:	d804      	bhi.n	800448a <_strtoul_l.isra.0+0xb6>
 8004480:	3c57      	subs	r4, #87	@ 0x57
 8004482:	e7e1      	b.n	8004448 <_strtoul_l.isra.0+0x74>
 8004484:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8004488:	e7eb      	b.n	8004462 <_strtoul_l.isra.0+0x8e>
 800448a:	1c73      	adds	r3, r6, #1
 800448c:	d106      	bne.n	800449c <_strtoul_l.isra.0+0xc8>
 800448e:	2322      	movs	r3, #34	@ 0x22
 8004490:	f8ce 3000 	str.w	r3, [lr]
 8004494:	4630      	mov	r0, r6
 8004496:	b932      	cbnz	r2, 80044a6 <_strtoul_l.isra.0+0xd2>
 8004498:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800449c:	b107      	cbz	r7, 80044a0 <_strtoul_l.isra.0+0xcc>
 800449e:	4240      	negs	r0, r0
 80044a0:	2a00      	cmp	r2, #0
 80044a2:	d0f9      	beq.n	8004498 <_strtoul_l.isra.0+0xc4>
 80044a4:	b106      	cbz	r6, 80044a8 <_strtoul_l.isra.0+0xd4>
 80044a6:	1e69      	subs	r1, r5, #1
 80044a8:	6011      	str	r1, [r2, #0]
 80044aa:	e7f5      	b.n	8004498 <_strtoul_l.isra.0+0xc4>
 80044ac:	08004601 	.word	0x08004601

080044b0 <_strtoul_r>:
 80044b0:	f7ff bf90 	b.w	80043d4 <_strtoul_l.isra.0>

080044b4 <_malloc_usable_size_r>:
 80044b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80044b8:	1f18      	subs	r0, r3, #4
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	bfbc      	itt	lt
 80044be:	580b      	ldrlt	r3, [r1, r0]
 80044c0:	18c0      	addlt	r0, r0, r3
 80044c2:	4770      	bx	lr

080044c4 <_init>:
 80044c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044c6:	bf00      	nop
 80044c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044ca:	bc08      	pop	{r3}
 80044cc:	469e      	mov	lr, r3
 80044ce:	4770      	bx	lr

080044d0 <_fini>:
 80044d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044d2:	bf00      	nop
 80044d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044d6:	bc08      	pop	{r3}
 80044d8:	469e      	mov	lr, r3
 80044da:	4770      	bx	lr
