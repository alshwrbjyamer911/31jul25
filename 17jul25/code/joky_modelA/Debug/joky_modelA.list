
joky_modelA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aa50  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000057c  0800abe0  0800abe0  0000bbe0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.exidx    00000008  0800b15c  0800b15c  0000c15c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .preinit_array 00000000  0800b164  0800b164  0000d390  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  5 .init_array   00000004  0800b164  0800b164  0000c164  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  0800b168  0800b168  0000c168  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         00000390  20000000  0800b16c  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .ccmram       00000000  10000000  10000000  0000d390  2**0
                  CONTENTS
  9 .bss          000004ac  20000390  20000390  0000d390  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000083c  2000083c  0000d390  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d390  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011ded  00000000  00000000  0000d3c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000280e  00000000  00000000  0001f1ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010d0  00000000  00000000  000219c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d15  00000000  00000000  00022a90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000d89e  00000000  00000000  000237a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00004b17  00000000  00000000  00031043  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  00035b5a  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00005e28  00000000  00000000  00035ba0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 0000005e  00000000  00000000  0003b9c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000390 	.word	0x20000390
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800abc8 	.word	0x0800abc8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000394 	.word	0x20000394
 80001cc:	0800abc8 	.word	0x0800abc8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c9c:	f000 b9be 	b.w	800101c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	468e      	mov	lr, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	4688      	mov	r8, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d962      	bls.n	8000e00 <__udivmoddi4+0xdc>
 8000d3a:	fab2 f682 	clz	r6, r2
 8000d3e:	b14e      	cbz	r6, 8000d54 <__udivmoddi4+0x30>
 8000d40:	f1c6 0320 	rsb	r3, r6, #32
 8000d44:	fa01 f806 	lsl.w	r8, r1, r6
 8000d48:	fa20 f303 	lsr.w	r3, r0, r3
 8000d4c:	40b7      	lsls	r7, r6
 8000d4e:	ea43 0808 	orr.w	r8, r3, r8
 8000d52:	40b4      	lsls	r4, r6
 8000d54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d58:	fa1f fc87 	uxth.w	ip, r7
 8000d5c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d60:	0c23      	lsrs	r3, r4, #16
 8000d62:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d6a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d72:	18fb      	adds	r3, r7, r3
 8000d74:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000d78:	f080 80ea 	bcs.w	8000f50 <__udivmoddi4+0x22c>
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	f240 80e7 	bls.w	8000f50 <__udivmoddi4+0x22c>
 8000d82:	3902      	subs	r1, #2
 8000d84:	443b      	add	r3, r7
 8000d86:	1a9a      	subs	r2, r3, r2
 8000d88:	b2a3      	uxth	r3, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d9a:	459c      	cmp	ip, r3
 8000d9c:	d909      	bls.n	8000db2 <__udivmoddi4+0x8e>
 8000d9e:	18fb      	adds	r3, r7, r3
 8000da0:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000da4:	f080 80d6 	bcs.w	8000f54 <__udivmoddi4+0x230>
 8000da8:	459c      	cmp	ip, r3
 8000daa:	f240 80d3 	bls.w	8000f54 <__udivmoddi4+0x230>
 8000dae:	443b      	add	r3, r7
 8000db0:	3802      	subs	r0, #2
 8000db2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db6:	eba3 030c 	sub.w	r3, r3, ip
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11d      	cbz	r5, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40f3      	lsrs	r3, r6
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d905      	bls.n	8000dda <__udivmoddi4+0xb6>
 8000dce:	b10d      	cbz	r5, 8000dd4 <__udivmoddi4+0xb0>
 8000dd0:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4608      	mov	r0, r1
 8000dd8:	e7f5      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000dda:	fab3 f183 	clz	r1, r3
 8000dde:	2900      	cmp	r1, #0
 8000de0:	d146      	bne.n	8000e70 <__udivmoddi4+0x14c>
 8000de2:	4573      	cmp	r3, lr
 8000de4:	d302      	bcc.n	8000dec <__udivmoddi4+0xc8>
 8000de6:	4282      	cmp	r2, r0
 8000de8:	f200 8105 	bhi.w	8000ff6 <__udivmoddi4+0x2d2>
 8000dec:	1a84      	subs	r4, r0, r2
 8000dee:	eb6e 0203 	sbc.w	r2, lr, r3
 8000df2:	2001      	movs	r0, #1
 8000df4:	4690      	mov	r8, r2
 8000df6:	2d00      	cmp	r5, #0
 8000df8:	d0e5      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000dfa:	e9c5 4800 	strd	r4, r8, [r5]
 8000dfe:	e7e2      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	2a00      	cmp	r2, #0
 8000e02:	f000 8090 	beq.w	8000f26 <__udivmoddi4+0x202>
 8000e06:	fab2 f682 	clz	r6, r2
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	f040 80a4 	bne.w	8000f58 <__udivmoddi4+0x234>
 8000e10:	1a8a      	subs	r2, r1, r2
 8000e12:	0c03      	lsrs	r3, r0, #16
 8000e14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e18:	b280      	uxth	r0, r0
 8000e1a:	b2bc      	uxth	r4, r7
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e22:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e2a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d907      	bls.n	8000e42 <__udivmoddi4+0x11e>
 8000e32:	18fb      	adds	r3, r7, r3
 8000e34:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000e38:	d202      	bcs.n	8000e40 <__udivmoddi4+0x11c>
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	f200 80e0 	bhi.w	8001000 <__udivmoddi4+0x2dc>
 8000e40:	46c4      	mov	ip, r8
 8000e42:	1a9b      	subs	r3, r3, r2
 8000e44:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e48:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e4c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e50:	fb02 f404 	mul.w	r4, r2, r4
 8000e54:	429c      	cmp	r4, r3
 8000e56:	d907      	bls.n	8000e68 <__udivmoddi4+0x144>
 8000e58:	18fb      	adds	r3, r7, r3
 8000e5a:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0x142>
 8000e60:	429c      	cmp	r4, r3
 8000e62:	f200 80ca 	bhi.w	8000ffa <__udivmoddi4+0x2d6>
 8000e66:	4602      	mov	r2, r0
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e6e:	e7a5      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e70:	f1c1 0620 	rsb	r6, r1, #32
 8000e74:	408b      	lsls	r3, r1
 8000e76:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7a:	431f      	orrs	r7, r3
 8000e7c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e80:	fa20 f306 	lsr.w	r3, r0, r6
 8000e84:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e88:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e8c:	4323      	orrs	r3, r4
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	fa1f fc87 	uxth.w	ip, r7
 8000e96:	fbbe f0f9 	udiv	r0, lr, r9
 8000e9a:	0c1c      	lsrs	r4, r3, #16
 8000e9c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ea0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ea4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ea8:	45a6      	cmp	lr, r4
 8000eaa:	fa02 f201 	lsl.w	r2, r2, r1
 8000eae:	d909      	bls.n	8000ec4 <__udivmoddi4+0x1a0>
 8000eb0:	193c      	adds	r4, r7, r4
 8000eb2:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000eb6:	f080 809c 	bcs.w	8000ff2 <__udivmoddi4+0x2ce>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	f240 8099 	bls.w	8000ff2 <__udivmoddi4+0x2ce>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	443c      	add	r4, r7
 8000ec4:	eba4 040e 	sub.w	r4, r4, lr
 8000ec8:	fa1f fe83 	uxth.w	lr, r3
 8000ecc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ed0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ed4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ed8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000edc:	45a4      	cmp	ip, r4
 8000ede:	d908      	bls.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ee0:	193c      	adds	r4, r7, r4
 8000ee2:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000ee6:	f080 8082 	bcs.w	8000fee <__udivmoddi4+0x2ca>
 8000eea:	45a4      	cmp	ip, r4
 8000eec:	d97f      	bls.n	8000fee <__udivmoddi4+0x2ca>
 8000eee:	3b02      	subs	r3, #2
 8000ef0:	443c      	add	r4, r7
 8000ef2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ef6:	eba4 040c 	sub.w	r4, r4, ip
 8000efa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000efe:	4564      	cmp	r4, ip
 8000f00:	4673      	mov	r3, lr
 8000f02:	46e1      	mov	r9, ip
 8000f04:	d362      	bcc.n	8000fcc <__udivmoddi4+0x2a8>
 8000f06:	d05f      	beq.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f08:	b15d      	cbz	r5, 8000f22 <__udivmoddi4+0x1fe>
 8000f0a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f0e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f12:	fa04 f606 	lsl.w	r6, r4, r6
 8000f16:	fa22 f301 	lsr.w	r3, r2, r1
 8000f1a:	431e      	orrs	r6, r3
 8000f1c:	40cc      	lsrs	r4, r1
 8000f1e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f22:	2100      	movs	r1, #0
 8000f24:	e74f      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000f26:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f2a:	0c01      	lsrs	r1, r0, #16
 8000f2c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f30:	b280      	uxth	r0, r0
 8000f32:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f36:	463b      	mov	r3, r7
 8000f38:	4638      	mov	r0, r7
 8000f3a:	463c      	mov	r4, r7
 8000f3c:	46b8      	mov	r8, r7
 8000f3e:	46be      	mov	lr, r7
 8000f40:	2620      	movs	r6, #32
 8000f42:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f46:	eba2 0208 	sub.w	r2, r2, r8
 8000f4a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f4e:	e766      	b.n	8000e1e <__udivmoddi4+0xfa>
 8000f50:	4601      	mov	r1, r0
 8000f52:	e718      	b.n	8000d86 <__udivmoddi4+0x62>
 8000f54:	4610      	mov	r0, r2
 8000f56:	e72c      	b.n	8000db2 <__udivmoddi4+0x8e>
 8000f58:	f1c6 0220 	rsb	r2, r6, #32
 8000f5c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f60:	40b7      	lsls	r7, r6
 8000f62:	40b1      	lsls	r1, r6
 8000f64:	fa20 f202 	lsr.w	r2, r0, r2
 8000f68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f6c:	430a      	orrs	r2, r1
 8000f6e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f72:	b2bc      	uxth	r4, r7
 8000f74:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f78:	0c11      	lsrs	r1, r2, #16
 8000f7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f7e:	fb08 f904 	mul.w	r9, r8, r4
 8000f82:	40b0      	lsls	r0, r6
 8000f84:	4589      	cmp	r9, r1
 8000f86:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f8a:	b280      	uxth	r0, r0
 8000f8c:	d93e      	bls.n	800100c <__udivmoddi4+0x2e8>
 8000f8e:	1879      	adds	r1, r7, r1
 8000f90:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000f94:	d201      	bcs.n	8000f9a <__udivmoddi4+0x276>
 8000f96:	4589      	cmp	r9, r1
 8000f98:	d81f      	bhi.n	8000fda <__udivmoddi4+0x2b6>
 8000f9a:	eba1 0109 	sub.w	r1, r1, r9
 8000f9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fa2:	fb09 f804 	mul.w	r8, r9, r4
 8000fa6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000faa:	b292      	uxth	r2, r2
 8000fac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fb0:	4542      	cmp	r2, r8
 8000fb2:	d229      	bcs.n	8001008 <__udivmoddi4+0x2e4>
 8000fb4:	18ba      	adds	r2, r7, r2
 8000fb6:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000fba:	d2c4      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fbc:	4542      	cmp	r2, r8
 8000fbe:	d2c2      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fc0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fc4:	443a      	add	r2, r7
 8000fc6:	e7be      	b.n	8000f46 <__udivmoddi4+0x222>
 8000fc8:	45f0      	cmp	r8, lr
 8000fca:	d29d      	bcs.n	8000f08 <__udivmoddi4+0x1e4>
 8000fcc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fd0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fd4:	3801      	subs	r0, #1
 8000fd6:	46e1      	mov	r9, ip
 8000fd8:	e796      	b.n	8000f08 <__udivmoddi4+0x1e4>
 8000fda:	eba7 0909 	sub.w	r9, r7, r9
 8000fde:	4449      	add	r1, r9
 8000fe0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fe4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe8:	fb09 f804 	mul.w	r8, r9, r4
 8000fec:	e7db      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fee:	4673      	mov	r3, lr
 8000ff0:	e77f      	b.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ff2:	4650      	mov	r0, sl
 8000ff4:	e766      	b.n	8000ec4 <__udivmoddi4+0x1a0>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e6fd      	b.n	8000df6 <__udivmoddi4+0xd2>
 8000ffa:	443b      	add	r3, r7
 8000ffc:	3a02      	subs	r2, #2
 8000ffe:	e733      	b.n	8000e68 <__udivmoddi4+0x144>
 8001000:	f1ac 0c02 	sub.w	ip, ip, #2
 8001004:	443b      	add	r3, r7
 8001006:	e71c      	b.n	8000e42 <__udivmoddi4+0x11e>
 8001008:	4649      	mov	r1, r9
 800100a:	e79c      	b.n	8000f46 <__udivmoddi4+0x222>
 800100c:	eba1 0109 	sub.w	r1, r1, r9
 8001010:	46c4      	mov	ip, r8
 8001012:	fbb1 f9fe 	udiv	r9, r1, lr
 8001016:	fb09 f804 	mul.w	r8, r9, r4
 800101a:	e7c4      	b.n	8000fa6 <__udivmoddi4+0x282>

0800101c <__aeabi_idiv0>:
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <SSD1309_WriteCommand>:

extern SPI_HandleTypeDef hspi1;

uint8_t SSD1309_Buffer[SSD1309_WIDTH * SSD1309_HEIGHT / 8];

void SSD1309_WriteCommand(uint8_t cmd) {
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);    // CS LOW
 800102a:	2200      	movs	r2, #0
 800102c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001030:	480c      	ldr	r0, [pc, #48]	@ (8001064 <SSD1309_WriteCommand+0x44>)
 8001032:	f002 fa89 	bl	8003548 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DATA_CMD_PORT, DATA_CMD_PIN, GPIO_PIN_RESET);    // D/C pin LOW (Command)
 8001036:	2200      	movs	r2, #0
 8001038:	2120      	movs	r1, #32
 800103a:	480a      	ldr	r0, [pc, #40]	@ (8001064 <SSD1309_WriteCommand+0x44>)
 800103c:	f002 fa84 	bl	8003548 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, &cmd, 1, HAL_MAX_DELAY);            // Send command byte
 8001040:	1df9      	adds	r1, r7, #7
 8001042:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001046:	2201      	movs	r2, #1
 8001048:	4807      	ldr	r0, [pc, #28]	@ (8001068 <SSD1309_WriteCommand+0x48>)
 800104a:	f002 ff9c 	bl	8003f86 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);      // CS HIGH
 800104e:	2201      	movs	r2, #1
 8001050:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001054:	4803      	ldr	r0, [pc, #12]	@ (8001064 <SSD1309_WriteCommand+0x44>)
 8001056:	f002 fa77 	bl	8003548 <HAL_GPIO_WritePin>
}
 800105a:	bf00      	nop
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	40020800 	.word	0x40020800
 8001068:	20000484 	.word	0x20000484

0800106c <SSD1309_WriteData>:



void SSD1309_WriteData(uint8_t * data, size_t length) {
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);    // CS LOW
 8001076:	2200      	movs	r2, #0
 8001078:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800107c:	480c      	ldr	r0, [pc, #48]	@ (80010b0 <SSD1309_WriteData+0x44>)
 800107e:	f002 fa63 	bl	8003548 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DATA_CMD_PORT, DATA_CMD_PIN, GPIO_PIN_SET);      // D/C HIGH (Data)
 8001082:	2201      	movs	r2, #1
 8001084:	2120      	movs	r1, #32
 8001086:	480a      	ldr	r0, [pc, #40]	@ (80010b0 <SSD1309_WriteData+0x44>)
 8001088:	f002 fa5e 	bl	8003548 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, data, length, HAL_MAX_DELAY);       // Send display buffer
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	b29a      	uxth	r2, r3
 8001090:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001094:	6879      	ldr	r1, [r7, #4]
 8001096:	4807      	ldr	r0, [pc, #28]	@ (80010b4 <SSD1309_WriteData+0x48>)
 8001098:	f002 ff75 	bl	8003f86 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);      // CS HIGH
 800109c:	2201      	movs	r2, #1
 800109e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80010a2:	4803      	ldr	r0, [pc, #12]	@ (80010b0 <SSD1309_WriteData+0x44>)
 80010a4:	f002 fa50 	bl	8003548 <HAL_GPIO_WritePin>
}
 80010a8:	bf00      	nop
 80010aa:	3708      	adds	r7, #8
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	40020800 	.word	0x40020800
 80010b4:	20000484 	.word	0x20000484

080010b8 <SSD1309_Reset>:



void SSD1309_Reset(void) {
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RES_PORT, RES_PIN, GPIO_PIN_RESET);
 80010bc:	2200      	movs	r2, #0
 80010be:	2110      	movs	r1, #16
 80010c0:	4807      	ldr	r0, [pc, #28]	@ (80010e0 <SSD1309_Reset+0x28>)
 80010c2:	f002 fa41 	bl	8003548 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80010c6:	200a      	movs	r0, #10
 80010c8:	f001 fb6c 	bl	80027a4 <HAL_Delay>
	HAL_GPIO_WritePin(RES_PORT, RES_PIN, GPIO_PIN_SET);
 80010cc:	2201      	movs	r2, #1
 80010ce:	2110      	movs	r1, #16
 80010d0:	4803      	ldr	r0, [pc, #12]	@ (80010e0 <SSD1309_Reset+0x28>)
 80010d2:	f002 fa39 	bl	8003548 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80010d6:	200a      	movs	r0, #10
 80010d8:	f001 fb64 	bl	80027a4 <HAL_Delay>
}
 80010dc:	bf00      	nop
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	40020800 	.word	0x40020800

080010e4 <InitDisplay>:

void InitDisplay()
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
	int i=0;
 80010ea:	2300      	movs	r3, #0
 80010ec:	607b      	str	r3, [r7, #4]

	for(i=0; i<20; i++)
 80010ee:	2300      	movs	r3, #0
 80010f0:	607b      	str	r3, [r7, #4]
 80010f2:	e009      	b.n	8001108 <InitDisplay+0x24>
	{
		SSD1309_WriteCommand(init_sequence[i]);
 80010f4:	4a08      	ldr	r2, [pc, #32]	@ (8001118 <InitDisplay+0x34>)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4413      	add	r3, r2
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff ff8f 	bl	8001020 <SSD1309_WriteCommand>
	for(i=0; i<20; i++)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	3301      	adds	r3, #1
 8001106:	607b      	str	r3, [r7, #4]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2b13      	cmp	r3, #19
 800110c:	ddf2      	ble.n	80010f4 <InitDisplay+0x10>
	}
}
 800110e:	bf00      	nop
 8001110:	bf00      	nop
 8001112:	3708      	adds	r7, #8
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	0800ac9c 	.word	0x0800ac9c

0800111c <ClearScreen>:
	}

}

void ClearScreen()
{
 800111c:	b580      	push	{r7, lr}
 800111e:	f5ad 6d81 	sub.w	sp, sp, #1032	@ 0x408
 8001122:	af00      	add	r7, sp, #0
	uint8_t page=0;
 8001124:	2300      	movs	r3, #0
 8001126:	f887 3407 	strb.w	r3, [r7, #1031]	@ 0x407
	uint8_t clearbuff[1024]={0};
 800112a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 800112e:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 8001132:	4618      	mov	r0, r3
 8001134:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001138:	461a      	mov	r2, r3
 800113a:	2100      	movs	r1, #0
 800113c:	f005 fd4d 	bl	8006bda <memset>
	for(page=0; page<8; page++)
 8001140:	2300      	movs	r3, #0
 8001142:	f887 3407 	strb.w	r3, [r7, #1031]	@ 0x407
 8001146:	e016      	b.n	8001176 <ClearScreen+0x5a>
	{

		/*page addressing mode*/
		SSD1309_WriteCommand(0xB0 + page);
 8001148:	f897 3407 	ldrb.w	r3, [r7, #1031]	@ 0x407
 800114c:	3b50      	subs	r3, #80	@ 0x50
 800114e:	b2db      	uxtb	r3, r3
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff ff65 	bl	8001020 <SSD1309_WriteCommand>
		SSD1309_WriteCommand(0x00 );
 8001156:	2000      	movs	r0, #0
 8001158:	f7ff ff62 	bl	8001020 <SSD1309_WriteCommand>
		SSD1309_WriteCommand(0x10);
 800115c:	2010      	movs	r0, #16
 800115e:	f7ff ff5f 	bl	8001020 <SSD1309_WriteCommand>
		/*write char*/
		SSD1309_WriteData(&clearbuff, 128);
 8001162:	1d3b      	adds	r3, r7, #4
 8001164:	2180      	movs	r1, #128	@ 0x80
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff ff80 	bl	800106c <SSD1309_WriteData>
	for(page=0; page<8; page++)
 800116c:	f897 3407 	ldrb.w	r3, [r7, #1031]	@ 0x407
 8001170:	3301      	adds	r3, #1
 8001172:	f887 3407 	strb.w	r3, [r7, #1031]	@ 0x407
 8001176:	f897 3407 	ldrb.w	r3, [r7, #1031]	@ 0x407
 800117a:	2b07      	cmp	r3, #7
 800117c:	d9e4      	bls.n	8001148 <ClearScreen+0x2c>
	}
}
 800117e:	bf00      	nop
 8001180:	bf00      	nop
 8001182:	f507 6781 	add.w	r7, r7, #1032	@ 0x408
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
	...

0800118c <WriteText>:

void WriteText(uint8_t u8Colmn, uint8_t u8page,unsigned char * data)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b084      	sub	sp, #16
 8001190:	af00      	add	r7, sp, #0
 8001192:	4603      	mov	r3, r0
 8001194:	603a      	str	r2, [r7, #0]
 8001196:	71fb      	strb	r3, [r7, #7]
 8001198:	460b      	mov	r3, r1
 800119a:	71bb      	strb	r3, [r7, #6]



	uint8_t i=0;
 800119c:	2300      	movs	r3, #0
 800119e:	73fb      	strb	r3, [r7, #15]

	uint8_t temp=0;
 80011a0:	2300      	movs	r3, #0
 80011a2:	73bb      	strb	r3, [r7, #14]


	/*page addressing mode*/
			SSD1309_WriteCommand(0xB0 + u8page);
 80011a4:	79bb      	ldrb	r3, [r7, #6]
 80011a6:	3b50      	subs	r3, #80	@ 0x50
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	4618      	mov	r0, r3
 80011ac:	f7ff ff38 	bl	8001020 <SSD1309_WriteCommand>
			SSD1309_WriteCommand(0x00 | (u8Colmn & 0x0F));
 80011b0:	79fb      	ldrb	r3, [r7, #7]
 80011b2:	f003 030f 	and.w	r3, r3, #15
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	4618      	mov	r0, r3
 80011ba:	f7ff ff31 	bl	8001020 <SSD1309_WriteCommand>
			SSD1309_WriteCommand(0x10 | (u8Colmn >> 4));
 80011be:	79fb      	ldrb	r3, [r7, #7]
 80011c0:	091b      	lsrs	r3, r3, #4
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	f043 0310 	orr.w	r3, r3, #16
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	4618      	mov	r0, r3
 80011cc:	f7ff ff28 	bl	8001020 <SSD1309_WriteCommand>



	if((u8page < 8) && (u8Colmn< 128))
 80011d0:	79bb      	ldrb	r3, [r7, #6]
 80011d2:	2b07      	cmp	r3, #7
 80011d4:	f200 8098 	bhi.w	8001308 <WriteText+0x17c>
 80011d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	f2c0 8093 	blt.w	8001308 <WriteText+0x17c>
	{
		/*page addressing mode*/
		SSD1309_WriteCommand(0xB0 + u8page);
 80011e2:	79bb      	ldrb	r3, [r7, #6]
 80011e4:	3b50      	subs	r3, #80	@ 0x50
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7ff ff19 	bl	8001020 <SSD1309_WriteCommand>
		SSD1309_WriteCommand(0x00 | (u8Colmn & 0x0F));
 80011ee:	79fb      	ldrb	r3, [r7, #7]
 80011f0:	f003 030f 	and.w	r3, r3, #15
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	4618      	mov	r0, r3
 80011f8:	f7ff ff12 	bl	8001020 <SSD1309_WriteCommand>
		SSD1309_WriteCommand(0x10 | (u8Colmn >> 4));
 80011fc:	79fb      	ldrb	r3, [r7, #7]
 80011fe:	091b      	lsrs	r3, r3, #4
 8001200:	b2db      	uxtb	r3, r3
 8001202:	f043 0310 	orr.w	r3, r3, #16
 8001206:	b2db      	uxtb	r3, r3
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff ff09 	bl	8001020 <SSD1309_WriteCommand>
		/*write char*/

		for(i=0; data[i] !='\0'; i++)
 800120e:	2300      	movs	r3, #0
 8001210:	73fb      	strb	r3, [r7, #15]
 8001212:	e071      	b.n	80012f8 <WriteText+0x16c>
		{
			if(( ((uint8_t)data[i]>=48u) &&((uint8_t)data[i]<=90u ))||((uint8_t)data[i] ==32u) ){
 8001214:	7bfb      	ldrb	r3, [r7, #15]
 8001216:	683a      	ldr	r2, [r7, #0]
 8001218:	4413      	add	r3, r2
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	2b2f      	cmp	r3, #47	@ 0x2f
 800121e:	d905      	bls.n	800122c <WriteText+0xa0>
 8001220:	7bfb      	ldrb	r3, [r7, #15]
 8001222:	683a      	ldr	r2, [r7, #0]
 8001224:	4413      	add	r3, r2
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	2b5a      	cmp	r3, #90	@ 0x5a
 800122a:	d905      	bls.n	8001238 <WriteText+0xac>
 800122c:	7bfb      	ldrb	r3, [r7, #15]
 800122e:	683a      	ldr	r2, [r7, #0]
 8001230:	4413      	add	r3, r2
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	2b20      	cmp	r3, #32
 8001236:	d15c      	bne.n	80012f2 <WriteText+0x166>
			if((u8Colmn >=128) || ((128-u8Colmn)<9))
 8001238:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123c:	2b00      	cmp	r3, #0
 800123e:	db04      	blt.n	800124a <WriteText+0xbe>
 8001240:	79fb      	ldrb	r3, [r7, #7]
 8001242:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8001246:	2b08      	cmp	r3, #8
 8001248:	dc37      	bgt.n	80012ba <WriteText+0x12e>
			{
				u8page++;
 800124a:	79bb      	ldrb	r3, [r7, #6]
 800124c:	3301      	adds	r3, #1
 800124e:	71bb      	strb	r3, [r7, #6]
				if(u8page <8)
 8001250:	79bb      	ldrb	r3, [r7, #6]
 8001252:	2b07      	cmp	r3, #7
 8001254:	d857      	bhi.n	8001306 <WriteText+0x17a>
				{
					u8Colmn=0;
 8001256:	2300      	movs	r3, #0
 8001258:	71fb      	strb	r3, [r7, #7]
					if(data[i] == 32u)
 800125a:	7bfb      	ldrb	r3, [r7, #15]
 800125c:	683a      	ldr	r2, [r7, #0]
 800125e:	4413      	add	r3, r2
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	2b20      	cmp	r3, #32
 8001264:	d102      	bne.n	800126c <WriteText+0xe0>
					{
						temp=15;
 8001266:	230f      	movs	r3, #15
 8001268:	73bb      	strb	r3, [r7, #14]
 800126a:	e005      	b.n	8001278 <WriteText+0xec>
					}else{
					temp=data[i]-48;
 800126c:	7bfb      	ldrb	r3, [r7, #15]
 800126e:	683a      	ldr	r2, [r7, #0]
 8001270:	4413      	add	r3, r2
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	3b30      	subs	r3, #48	@ 0x30
 8001276:	73bb      	strb	r3, [r7, #14]
					}
					SSD1309_WriteCommand(0xB0 + u8page);
 8001278:	79bb      	ldrb	r3, [r7, #6]
 800127a:	3b50      	subs	r3, #80	@ 0x50
 800127c:	b2db      	uxtb	r3, r3
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff fece 	bl	8001020 <SSD1309_WriteCommand>
					SSD1309_WriteCommand(0x00 | (u8Colmn & 0x0F));
 8001284:	79fb      	ldrb	r3, [r7, #7]
 8001286:	f003 030f 	and.w	r3, r3, #15
 800128a:	b2db      	uxtb	r3, r3
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff fec7 	bl	8001020 <SSD1309_WriteCommand>
					SSD1309_WriteCommand(0x10 | (u8Colmn >> 4));
 8001292:	79fb      	ldrb	r3, [r7, #7]
 8001294:	091b      	lsrs	r3, r3, #4
 8001296:	b2db      	uxtb	r3, r3
 8001298:	f043 0310 	orr.w	r3, r3, #16
 800129c:	b2db      	uxtb	r3, r3
 800129e:	4618      	mov	r0, r3
 80012a0:	f7ff febe 	bl	8001020 <SSD1309_WriteCommand>
					SSD1309_WriteData(&charset[temp][0], 9);
 80012a4:	7bba      	ldrb	r2, [r7, #14]
 80012a6:	4613      	mov	r3, r2
 80012a8:	00db      	lsls	r3, r3, #3
 80012aa:	4413      	add	r3, r2
 80012ac:	4a18      	ldr	r2, [pc, #96]	@ (8001310 <WriteText+0x184>)
 80012ae:	4413      	add	r3, r2
 80012b0:	2109      	movs	r1, #9
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff feda 	bl	800106c <SSD1309_WriteData>
				if(u8page <8)
 80012b8:	e01b      	b.n	80012f2 <WriteText+0x166>
					return;
				}

			}else
			{
				if(data[i] == 32u)
 80012ba:	7bfb      	ldrb	r3, [r7, #15]
 80012bc:	683a      	ldr	r2, [r7, #0]
 80012be:	4413      	add	r3, r2
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	2b20      	cmp	r3, #32
 80012c4:	d102      	bne.n	80012cc <WriteText+0x140>
				{
					temp=15;
 80012c6:	230f      	movs	r3, #15
 80012c8:	73bb      	strb	r3, [r7, #14]
 80012ca:	e005      	b.n	80012d8 <WriteText+0x14c>
				}else{
					temp=data[i]-48;
 80012cc:	7bfb      	ldrb	r3, [r7, #15]
 80012ce:	683a      	ldr	r2, [r7, #0]
 80012d0:	4413      	add	r3, r2
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	3b30      	subs	r3, #48	@ 0x30
 80012d6:	73bb      	strb	r3, [r7, #14]
				}
				SSD1309_WriteData(&charset[temp][0], 9);
 80012d8:	7bba      	ldrb	r2, [r7, #14]
 80012da:	4613      	mov	r3, r2
 80012dc:	00db      	lsls	r3, r3, #3
 80012de:	4413      	add	r3, r2
 80012e0:	4a0b      	ldr	r2, [pc, #44]	@ (8001310 <WriteText+0x184>)
 80012e2:	4413      	add	r3, r2
 80012e4:	2109      	movs	r1, #9
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7ff fec0 	bl	800106c <SSD1309_WriteData>
				u8Colmn +=9;
 80012ec:	79fb      	ldrb	r3, [r7, #7]
 80012ee:	3309      	adds	r3, #9
 80012f0:	71fb      	strb	r3, [r7, #7]
		for(i=0; data[i] !='\0'; i++)
 80012f2:	7bfb      	ldrb	r3, [r7, #15]
 80012f4:	3301      	adds	r3, #1
 80012f6:	73fb      	strb	r3, [r7, #15]
 80012f8:	7bfb      	ldrb	r3, [r7, #15]
 80012fa:	683a      	ldr	r2, [r7, #0]
 80012fc:	4413      	add	r3, r2
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d187      	bne.n	8001214 <WriteText+0x88>
 8001304:	e000      	b.n	8001308 <WriteText+0x17c>
					return;
 8001306:	bf00      	nop



	}

}
 8001308:	3710      	adds	r7, #16
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	20000000 	.word	0x20000000

08001314 <HAL_TIM_PeriodElapsedCallback>:
//    	}
//    }
//
//}
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2)  // Check if the interrupt comes from TIM2
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001324:	d16b      	bne.n	80013fe <HAL_TIM_PeriodElapsedCallback+0xea>
        static float Remain_Cap = BATTERY_CAPACITY_AH; // assume full at boot
        static uint8_t soc_rc_temp = 255;              // force first update
        static uint8_t soc_joky_temp = 255;

        // Read current from ADC
        HAL_ADC_Start(&hadc1);
 8001326:	4838      	ldr	r0, [pc, #224]	@ (8001408 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001328:	f001 faa4 	bl	8002874 <HAL_ADC_Start>
        HAL_ADC_PollForConversion(&hadc1, 10);
 800132c:	210a      	movs	r1, #10
 800132e:	4836      	ldr	r0, [pc, #216]	@ (8001408 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001330:	f001 fba5 	bl	8002a7e <HAL_ADC_PollForConversion>
        uint16_t adc_val = HAL_ADC_GetValue(&hadc1);
 8001334:	4834      	ldr	r0, [pc, #208]	@ (8001408 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001336:	f001 fc2d 	bl	8002b94 <HAL_ADC_GetValue>
 800133a:	4603      	mov	r3, r0
 800133c:	81fb      	strh	r3, [r7, #14]
        HAL_ADC_Stop(&hadc1);
 800133e:	4832      	ldr	r0, [pc, #200]	@ (8001408 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001340:	f001 fb6a 	bl	8002a18 <HAL_ADC_Stop>

        ACS712_Voltage = ((adc_val * ADC_VREF_VOLTAGE) / ADC_RESOLUTION);
 8001344:	89fb      	ldrh	r3, [r7, #14]
 8001346:	ee07 3a90 	vmov	s15, r3
 800134a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800134e:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800140c <HAL_TIM_PeriodElapsedCallback+0xf8>
 8001352:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001356:	eddf 6a2e 	vldr	s13, [pc, #184]	@ 8001410 <HAL_TIM_PeriodElapsedCallback+0xfc>
 800135a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800135e:	4b2d      	ldr	r3, [pc, #180]	@ (8001414 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001360:	edc3 7a00 	vstr	s15, [r3]
        ACS712_Current = (ACS712_Voltage - ACS712_OFFSET_VOLTAGE) / ACS712_SENSITIVITY;
 8001364:	4b2b      	ldr	r3, [pc, #172]	@ (8001414 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001366:	edd3 7a00 	vldr	s15, [r3]
 800136a:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8001418 <HAL_TIM_PeriodElapsedCallback+0x104>
 800136e:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001372:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800141c <HAL_TIM_PeriodElapsedCallback+0x108>
 8001376:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800137a:	4b29      	ldr	r3, [pc, #164]	@ (8001420 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 800137c:	edc3 7a00 	vstr	s15, [r3]

        // Integrate current to calculate remaining capacity (Ah)
        float delta_Ah = ACS712_Current * (TIM2_TICK_PERIOD_S / 3600.0f);
 8001380:	4b27      	ldr	r3, [pc, #156]	@ (8001420 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001382:	edd3 7a00 	vldr	s15, [r3]
 8001386:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8001424 <HAL_TIM_PeriodElapsedCallback+0x110>
 800138a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800138e:	edc7 7a02 	vstr	s15, [r7, #8]
        Remain_Cap += delta_Ah;
 8001392:	4b25      	ldr	r3, [pc, #148]	@ (8001428 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8001394:	ed93 7a00 	vldr	s14, [r3]
 8001398:	edd7 7a02 	vldr	s15, [r7, #8]
 800139c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013a0:	4b21      	ldr	r3, [pc, #132]	@ (8001428 <HAL_TIM_PeriodElapsedCallback+0x114>)
 80013a2:	edc3 7a00 	vstr	s15, [r3]

        // Clamp capacity
        if(Remain_Cap > BATTERY_CAPACITY_AH) Remain_Cap = BATTERY_CAPACITY_AH;
 80013a6:	4b20      	ldr	r3, [pc, #128]	@ (8001428 <HAL_TIM_PeriodElapsedCallback+0x114>)
 80013a8:	edd3 7a00 	vldr	s15, [r3]
 80013ac:	eeb0 7a04 	vmov.f32	s14, #4	@ 0x40200000  2.5
 80013b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013b8:	dd02      	ble.n	80013c0 <HAL_TIM_PeriodElapsedCallback+0xac>
 80013ba:	4b1b      	ldr	r3, [pc, #108]	@ (8001428 <HAL_TIM_PeriodElapsedCallback+0x114>)
 80013bc:	4a1b      	ldr	r2, [pc, #108]	@ (800142c <HAL_TIM_PeriodElapsedCallback+0x118>)
 80013be:	601a      	str	r2, [r3, #0]
        if(Remain_Cap < 0.0f) Remain_Cap = 0.0f;
 80013c0:	4b19      	ldr	r3, [pc, #100]	@ (8001428 <HAL_TIM_PeriodElapsedCallback+0x114>)
 80013c2:	edd3 7a00 	vldr	s15, [r3]
 80013c6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ce:	d503      	bpl.n	80013d8 <HAL_TIM_PeriodElapsedCallback+0xc4>
 80013d0:	4b15      	ldr	r3, [pc, #84]	@ (8001428 <HAL_TIM_PeriodElapsedCallback+0x114>)
 80013d2:	f04f 0200 	mov.w	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]

        soc_joky = (Remain_Cap / BATTERY_CAPACITY_AH) * 100.0f;
 80013d8:	4b13      	ldr	r3, [pc, #76]	@ (8001428 <HAL_TIM_PeriodElapsedCallback+0x114>)
 80013da:	ed93 7a00 	vldr	s14, [r3]
 80013de:	eef0 6a04 	vmov.f32	s13, #4	@ 0x40200000  2.5
 80013e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013e6:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8001430 <HAL_TIM_PeriodElapsedCallback+0x11c>
 80013ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013f2:	edc7 7a00 	vstr	s15, [r7]
 80013f6:	783b      	ldrb	r3, [r7, #0]
 80013f8:	b2da      	uxtb	r2, r3
 80013fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001434 <HAL_TIM_PeriodElapsedCallback+0x120>)
 80013fc:	701a      	strb	r2, [r3, #0]

    }
}
 80013fe:	bf00      	nop
 8001400:	3710      	adds	r7, #16
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	200003ac 	.word	0x200003ac
 800140c:	40533333 	.word	0x40533333
 8001410:	45800000 	.word	0x45800000
 8001414:	2000065c 	.word	0x2000065c
 8001418:	3fd33333 	.word	0x3fd33333
 800141c:	3dcccccd 	.word	0x3dcccccd
 8001420:	20000658 	.word	0x20000658
 8001424:	3991a2b4 	.word	0x3991a2b4
 8001428:	200001b8 	.word	0x200001b8
 800142c:	40200000 	.word	0x40200000
 8001430:	42c80000 	.word	0x42c80000
 8001434:	20000654 	.word	0x20000654

08001438 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800143e:	f001 f93f 	bl	80026c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001442:	f000 f8ab 	bl	800159c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001446:	f000 fb71 	bl	8001b2c <MX_GPIO_Init>
  MX_ADC1_Init();
 800144a:	f000 f911 	bl	8001670 <MX_ADC1_Init>
  MX_ADC2_Init();
 800144e:	f000 f961 	bl	8001714 <MX_ADC2_Init>
  MX_UART5_Init();
 8001452:	f000 fb17 	bl	8001a84 <MX_UART5_Init>
  MX_USART1_UART_Init();
 8001456:	f000 fb3f 	bl	8001ad8 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 800145a:	f000 fa6d 	bl	8001938 <MX_TIM2_Init>
  MX_SPI3_Init();
 800145e:	f000 fa35 	bl	80018cc <MX_SPI3_Init>
  MX_TIM4_Init();
 8001462:	f000 fab7 	bl	80019d4 <MX_TIM4_Init>
  MX_SPI1_Init();
 8001466:	f000 f9f9 	bl	800185c <MX_SPI1_Init>
  MX_ADC3_Init();
 800146a:	f000 f9a5 	bl	80017b8 <MX_ADC3_Init>

  /* USER CODE BEGIN 2 */
  TLE9201_Init();
 800146e:	f001 f8b9 	bl	80025e4 <TLE9201_Init>
  // SA818S_Init();
  lora_init();
 8001472:	f000 fbfd 	bl	8001c70 <lora_init>

  uint32_t adc_value;
  uint8_t cmd_received = 0;
 8001476:	2300      	movs	r3, #0
 8001478:	71fb      	strb	r3, [r7, #7]
//  uint8_t speed;

     // Start ADC
  HAL_ADC_Start(&hadc1);
 800147a:	483e      	ldr	r0, [pc, #248]	@ (8001574 <main+0x13c>)
 800147c:	f001 f9fa 	bl	8002874 <HAL_ADC_Start>
  HAL_ADC_Start(&hadc2);
 8001480:	483d      	ldr	r0, [pc, #244]	@ (8001578 <main+0x140>)
 8001482:	f001 f9f7 	bl	8002874 <HAL_ADC_Start>
  HAL_ADC_Start(&hadc3);
 8001486:	483d      	ldr	r0, [pc, #244]	@ (800157c <main+0x144>)
 8001488:	f001 f9f4 	bl	8002874 <HAL_ADC_Start>

  TLE9201_SetDirection(1);    // Forward
 800148c:	2001      	movs	r0, #1
 800148e:	f001 f8c3 	bl	8002618 <TLE9201_SetDirection>
  TLE9201_SetSpeed(255);
 8001492:	20ff      	movs	r0, #255	@ 0xff
 8001494:	f001 f8d8 	bl	8002648 <TLE9201_SetSpeed>
  HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8001498:	2201      	movs	r2, #1
 800149a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800149e:	4838      	ldr	r0, [pc, #224]	@ (8001580 <main+0x148>)
 80014a0:	f002 f852 	bl	8003548 <HAL_GPIO_WritePin>

  SSD1309_Reset();
 80014a4:	f7ff fe08 	bl	80010b8 <SSD1309_Reset>
  InitDisplay();
 80014a8:	f7ff fe1c 	bl	80010e4 <InitDisplay>
  ClearScreen();
 80014ac:	f7ff fe36 	bl	800111c <ClearScreen>

  WriteText(1, 1, devcode);
 80014b0:	4a34      	ldr	r2, [pc, #208]	@ (8001584 <main+0x14c>)
 80014b2:	2101      	movs	r1, #1
 80014b4:	2001      	movs	r0, #1
 80014b6:	f7ff fe69 	bl	800118c <WriteText>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80014ba:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80014be:	482d      	ldr	r0, [pc, #180]	@ (8001574 <main+0x13c>)
 80014c0:	f001 fadd 	bl	8002a7e <HAL_ADC_PollForConversion>
	          adc_value = HAL_ADC_GetValue(&hadc1);
 80014c4:	482b      	ldr	r0, [pc, #172]	@ (8001574 <main+0x13c>)
 80014c6:	f001 fb65 	bl	8002b94 <HAL_ADC_GetValue>
 80014ca:	6038      	str	r0, [r7, #0]

	          // Divide ADC range into 3 equal sections
	          if (adc_value <= 1365) { // 0–1365 (4095/3)
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	f240 5255 	movw	r2, #1365	@ 0x555
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d80b      	bhi.n	80014ee <main+0xb6>
	              WriteText(1, 2, speed1); // Speed 1
 80014d6:	4a2c      	ldr	r2, [pc, #176]	@ (8001588 <main+0x150>)
 80014d8:	2102      	movs	r1, #2
 80014da:	2001      	movs	r0, #1
 80014dc:	f7ff fe56 	bl	800118c <WriteText>
                TLE9201_SetSpeed(255); // Set speed to 255
 80014e0:	20ff      	movs	r0, #255	@ 0xff
 80014e2:	f001 f8b1 	bl	8002648 <TLE9201_SetSpeed>
              motor_pwm_speed = 255; // Set motor speed to maximum                          
 80014e6:	4b29      	ldr	r3, [pc, #164]	@ (800158c <main+0x154>)
 80014e8:	22ff      	movs	r2, #255	@ 0xff
 80014ea:	701a      	strb	r2, [r3, #0]
 80014ec:	e01b      	b.n	8001526 <main+0xee>
	          } else if (adc_value <= 2730) { // 1366–2730
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	f640 22aa 	movw	r2, #2730	@ 0xaaa
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d80b      	bhi.n	8001510 <main+0xd8>
	        	  WriteText(1, 2, speed2); // Speed 2
 80014f8:	4a25      	ldr	r2, [pc, #148]	@ (8001590 <main+0x158>)
 80014fa:	2102      	movs	r1, #2
 80014fc:	2001      	movs	r0, #1
 80014fe:	f7ff fe45 	bl	800118c <WriteText>
              TLE9201_SetSpeed(200); // Set speed to 200
 8001502:	20c8      	movs	r0, #200	@ 0xc8
 8001504:	f001 f8a0 	bl	8002648 <TLE9201_SetSpeed>
              motor_pwm_speed = 200; // Set motor speed to 200
 8001508:	4b20      	ldr	r3, [pc, #128]	@ (800158c <main+0x154>)
 800150a:	22c8      	movs	r2, #200	@ 0xc8
 800150c:	701a      	strb	r2, [r3, #0]
 800150e:	e00a      	b.n	8001526 <main+0xee>
	          } else { // 2731–4095
	        	  WriteText(1, 2, speed3); // Speed
 8001510:	4a20      	ldr	r2, [pc, #128]	@ (8001594 <main+0x15c>)
 8001512:	2102      	movs	r1, #2
 8001514:	2001      	movs	r0, #1
 8001516:	f7ff fe39 	bl	800118c <WriteText>
              TLE9201_SetSpeed(170); // Set speed to 170
 800151a:	20aa      	movs	r0, #170	@ 0xaa
 800151c:	f001 f894 	bl	8002648 <TLE9201_SetSpeed>
              motor_pwm_speed = 170; // Set motor speed to 170
 8001520:	4b1a      	ldr	r3, [pc, #104]	@ (800158c <main+0x154>)
 8001522:	22aa      	movs	r2, #170	@ 0xaa
 8001524:	701a      	strb	r2, [r3, #0]

	          }
   
//	  HAL_UART_Transmit(huart, pData, Size, Timeout)/
//      HAL_UART_Receive(&huart1, &uart_recive_buffer, 1, HAL_MAX_DELAY);  // Blocking receive
      cmd_received =lora_receive();
 8001526:	f000 fbc7 	bl	8001cb8 <lora_receive>
 800152a:	4603      	mov	r3, r0
 800152c:	71fb      	strb	r3, [r7, #7]
      lora_send_char(soc_joky);
 800152e:	4b1a      	ldr	r3, [pc, #104]	@ (8001598 <main+0x160>)
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	4618      	mov	r0, r3
 8001534:	f000 fc12 	bl	8001d5c <lora_send_char>

      if (cmd_received == 'c') {
 8001538:	79fb      	ldrb	r3, [r7, #7]
 800153a:	2b63      	cmp	r3, #99	@ 0x63
 800153c:	d105      	bne.n	800154a <main+0x112>
        TLE9201_SetSpeed(motor_pwm_speed); // Set motor speed to current PWM speed
 800153e:	4b13      	ldr	r3, [pc, #76]	@ (800158c <main+0x154>)
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	4618      	mov	r0, r3
 8001544:	f001 f880 	bl	8002648 <TLE9201_SetSpeed>
 8001548:	e7b7      	b.n	80014ba <main+0x82>

      }
      else if (cmd_received == 'd') {
 800154a:	79fb      	ldrb	r3, [r7, #7]
 800154c:	2b64      	cmp	r3, #100	@ 0x64
 800154e:	d10c      	bne.n	800156a <main+0x132>
          // HAL_GPIO_WritePin(MOTOR_GPIO_Port, MOTOR_Pin, GPIO_PIN_SET);
          TLE9201_SetSpeed(motor_pwm_speed); // Stop the motor
 8001550:	4b0e      	ldr	r3, [pc, #56]	@ (800158c <main+0x154>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	4618      	mov	r0, r3
 8001556:	f001 f877 	bl	8002648 <TLE9201_SetSpeed>
          HAL_Delay(4000);
 800155a:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 800155e:	f001 f921 	bl	80027a4 <HAL_Delay>
          TLE9201_SetSpeed(0); // Set speed to 0
 8001562:	2000      	movs	r0, #0
 8001564:	f001 f870 	bl	8002648 <TLE9201_SetSpeed>
 8001568:	e7a7      	b.n	80014ba <main+0x82>
      }
      else {
        TLE9201_SetSpeed(0); // Set speed to 0
 800156a:	2000      	movs	r0, #0
 800156c:	f001 f86c 	bl	8002648 <TLE9201_SetSpeed>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001570:	e7a3      	b.n	80014ba <main+0x82>
 8001572:	bf00      	nop
 8001574:	200003ac 	.word	0x200003ac
 8001578:	200003f4 	.word	0x200003f4
 800157c:	2000043c 	.word	0x2000043c
 8001580:	40020800 	.word	0x40020800
 8001584:	20000184 	.word	0x20000184
 8001588:	20000194 	.word	0x20000194
 800158c:	200001b7 	.word	0x200001b7
 8001590:	200001a0 	.word	0x200001a0
 8001594:	200001ac 	.word	0x200001ac
 8001598:	20000654 	.word	0x20000654

0800159c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b094      	sub	sp, #80	@ 0x50
 80015a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015a2:	f107 0320 	add.w	r3, r7, #32
 80015a6:	2230      	movs	r2, #48	@ 0x30
 80015a8:	2100      	movs	r1, #0
 80015aa:	4618      	mov	r0, r3
 80015ac:	f005 fb15 	bl	8006bda <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015b0:	f107 030c 	add.w	r3, r7, #12
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	605a      	str	r2, [r3, #4]
 80015ba:	609a      	str	r2, [r3, #8]
 80015bc:	60da      	str	r2, [r3, #12]
 80015be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015c0:	2300      	movs	r3, #0
 80015c2:	60bb      	str	r3, [r7, #8]
 80015c4:	4b28      	ldr	r3, [pc, #160]	@ (8001668 <SystemClock_Config+0xcc>)
 80015c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015c8:	4a27      	ldr	r2, [pc, #156]	@ (8001668 <SystemClock_Config+0xcc>)
 80015ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80015d0:	4b25      	ldr	r3, [pc, #148]	@ (8001668 <SystemClock_Config+0xcc>)
 80015d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015d8:	60bb      	str	r3, [r7, #8]
 80015da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015dc:	2300      	movs	r3, #0
 80015de:	607b      	str	r3, [r7, #4]
 80015e0:	4b22      	ldr	r3, [pc, #136]	@ (800166c <SystemClock_Config+0xd0>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a21      	ldr	r2, [pc, #132]	@ (800166c <SystemClock_Config+0xd0>)
 80015e6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015ea:	6013      	str	r3, [r2, #0]
 80015ec:	4b1f      	ldr	r3, [pc, #124]	@ (800166c <SystemClock_Config+0xd0>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015f4:	607b      	str	r3, [r7, #4]
 80015f6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015f8:	2302      	movs	r3, #2
 80015fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015fc:	2301      	movs	r3, #1
 80015fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001600:	2310      	movs	r3, #16
 8001602:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001604:	2302      	movs	r3, #2
 8001606:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001608:	2300      	movs	r3, #0
 800160a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800160c:	2308      	movs	r3, #8
 800160e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001610:	23a8      	movs	r3, #168	@ 0xa8
 8001612:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001614:	2302      	movs	r3, #2
 8001616:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001618:	2304      	movs	r3, #4
 800161a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800161c:	f107 0320 	add.w	r3, r7, #32
 8001620:	4618      	mov	r0, r3
 8001622:	f001 ffcf 	bl	80035c4 <HAL_RCC_OscConfig>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800162c:	f000 fb1a 	bl	8001c64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001630:	230f      	movs	r3, #15
 8001632:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001634:	2302      	movs	r3, #2
 8001636:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001638:	2300      	movs	r3, #0
 800163a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800163c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001640:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001642:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001646:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001648:	f107 030c 	add.w	r3, r7, #12
 800164c:	2105      	movs	r1, #5
 800164e:	4618      	mov	r0, r3
 8001650:	f002 fa30 	bl	8003ab4 <HAL_RCC_ClockConfig>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800165a:	f000 fb03 	bl	8001c64 <Error_Handler>
  }
}
 800165e:	bf00      	nop
 8001660:	3750      	adds	r7, #80	@ 0x50
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	40023800 	.word	0x40023800
 800166c:	40007000 	.word	0x40007000

08001670 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001676:	463b      	mov	r3, r7
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	605a      	str	r2, [r3, #4]
 800167e:	609a      	str	r2, [r3, #8]
 8001680:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001682:	4b21      	ldr	r3, [pc, #132]	@ (8001708 <MX_ADC1_Init+0x98>)
 8001684:	4a21      	ldr	r2, [pc, #132]	@ (800170c <MX_ADC1_Init+0x9c>)
 8001686:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001688:	4b1f      	ldr	r3, [pc, #124]	@ (8001708 <MX_ADC1_Init+0x98>)
 800168a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800168e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001690:	4b1d      	ldr	r3, [pc, #116]	@ (8001708 <MX_ADC1_Init+0x98>)
 8001692:	2200      	movs	r2, #0
 8001694:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001696:	4b1c      	ldr	r3, [pc, #112]	@ (8001708 <MX_ADC1_Init+0x98>)
 8001698:	2200      	movs	r2, #0
 800169a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800169c:	4b1a      	ldr	r3, [pc, #104]	@ (8001708 <MX_ADC1_Init+0x98>)
 800169e:	2200      	movs	r2, #0
 80016a0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80016a2:	4b19      	ldr	r3, [pc, #100]	@ (8001708 <MX_ADC1_Init+0x98>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80016aa:	4b17      	ldr	r3, [pc, #92]	@ (8001708 <MX_ADC1_Init+0x98>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80016b0:	4b15      	ldr	r3, [pc, #84]	@ (8001708 <MX_ADC1_Init+0x98>)
 80016b2:	4a17      	ldr	r2, [pc, #92]	@ (8001710 <MX_ADC1_Init+0xa0>)
 80016b4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80016b6:	4b14      	ldr	r3, [pc, #80]	@ (8001708 <MX_ADC1_Init+0x98>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80016bc:	4b12      	ldr	r3, [pc, #72]	@ (8001708 <MX_ADC1_Init+0x98>)
 80016be:	2201      	movs	r2, #1
 80016c0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80016c2:	4b11      	ldr	r3, [pc, #68]	@ (8001708 <MX_ADC1_Init+0x98>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80016ca:	4b0f      	ldr	r3, [pc, #60]	@ (8001708 <MX_ADC1_Init+0x98>)
 80016cc:	2201      	movs	r2, #1
 80016ce:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80016d0:	480d      	ldr	r0, [pc, #52]	@ (8001708 <MX_ADC1_Init+0x98>)
 80016d2:	f001 f88b 	bl	80027ec <HAL_ADC_Init>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80016dc:	f000 fac2 	bl	8001c64 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80016e0:	2308      	movs	r3, #8
 80016e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80016e4:	2301      	movs	r3, #1
 80016e6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80016e8:	2300      	movs	r3, #0
 80016ea:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016ec:	463b      	mov	r3, r7
 80016ee:	4619      	mov	r1, r3
 80016f0:	4805      	ldr	r0, [pc, #20]	@ (8001708 <MX_ADC1_Init+0x98>)
 80016f2:	f001 fa5d 	bl	8002bb0 <HAL_ADC_ConfigChannel>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d001      	beq.n	8001700 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80016fc:	f000 fab2 	bl	8001c64 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001700:	bf00      	nop
 8001702:	3710      	adds	r7, #16
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	200003ac 	.word	0x200003ac
 800170c:	40012000 	.word	0x40012000
 8001710:	0f000001 	.word	0x0f000001

08001714 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800171a:	463b      	mov	r3, r7
 800171c:	2200      	movs	r2, #0
 800171e:	601a      	str	r2, [r3, #0]
 8001720:	605a      	str	r2, [r3, #4]
 8001722:	609a      	str	r2, [r3, #8]
 8001724:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001726:	4b21      	ldr	r3, [pc, #132]	@ (80017ac <MX_ADC2_Init+0x98>)
 8001728:	4a21      	ldr	r2, [pc, #132]	@ (80017b0 <MX_ADC2_Init+0x9c>)
 800172a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800172c:	4b1f      	ldr	r3, [pc, #124]	@ (80017ac <MX_ADC2_Init+0x98>)
 800172e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001732:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001734:	4b1d      	ldr	r3, [pc, #116]	@ (80017ac <MX_ADC2_Init+0x98>)
 8001736:	2200      	movs	r2, #0
 8001738:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 800173a:	4b1c      	ldr	r3, [pc, #112]	@ (80017ac <MX_ADC2_Init+0x98>)
 800173c:	2200      	movs	r2, #0
 800173e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001740:	4b1a      	ldr	r3, [pc, #104]	@ (80017ac <MX_ADC2_Init+0x98>)
 8001742:	2200      	movs	r2, #0
 8001744:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001746:	4b19      	ldr	r3, [pc, #100]	@ (80017ac <MX_ADC2_Init+0x98>)
 8001748:	2200      	movs	r2, #0
 800174a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800174e:	4b17      	ldr	r3, [pc, #92]	@ (80017ac <MX_ADC2_Init+0x98>)
 8001750:	2200      	movs	r2, #0
 8001752:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001754:	4b15      	ldr	r3, [pc, #84]	@ (80017ac <MX_ADC2_Init+0x98>)
 8001756:	4a17      	ldr	r2, [pc, #92]	@ (80017b4 <MX_ADC2_Init+0xa0>)
 8001758:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800175a:	4b14      	ldr	r3, [pc, #80]	@ (80017ac <MX_ADC2_Init+0x98>)
 800175c:	2200      	movs	r2, #0
 800175e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001760:	4b12      	ldr	r3, [pc, #72]	@ (80017ac <MX_ADC2_Init+0x98>)
 8001762:	2201      	movs	r2, #1
 8001764:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001766:	4b11      	ldr	r3, [pc, #68]	@ (80017ac <MX_ADC2_Init+0x98>)
 8001768:	2200      	movs	r2, #0
 800176a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800176e:	4b0f      	ldr	r3, [pc, #60]	@ (80017ac <MX_ADC2_Init+0x98>)
 8001770:	2201      	movs	r2, #1
 8001772:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001774:	480d      	ldr	r0, [pc, #52]	@ (80017ac <MX_ADC2_Init+0x98>)
 8001776:	f001 f839 	bl	80027ec <HAL_ADC_Init>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8001780:	f000 fa70 	bl	8001c64 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001784:	2309      	movs	r3, #9
 8001786:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001788:	2301      	movs	r3, #1
 800178a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800178c:	2300      	movs	r3, #0
 800178e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001790:	463b      	mov	r3, r7
 8001792:	4619      	mov	r1, r3
 8001794:	4805      	ldr	r0, [pc, #20]	@ (80017ac <MX_ADC2_Init+0x98>)
 8001796:	f001 fa0b 	bl	8002bb0 <HAL_ADC_ConfigChannel>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 80017a0:	f000 fa60 	bl	8001c64 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80017a4:	bf00      	nop
 80017a6:	3710      	adds	r7, #16
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	200003f4 	.word	0x200003f4
 80017b0:	40012100 	.word	0x40012100
 80017b4:	0f000001 	.word	0x0f000001

080017b8 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b084      	sub	sp, #16
 80017bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80017be:	463b      	mov	r3, r7
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]
 80017c4:	605a      	str	r2, [r3, #4]
 80017c6:	609a      	str	r2, [r3, #8]
 80017c8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80017ca:	4b21      	ldr	r3, [pc, #132]	@ (8001850 <MX_ADC3_Init+0x98>)
 80017cc:	4a21      	ldr	r2, [pc, #132]	@ (8001854 <MX_ADC3_Init+0x9c>)
 80017ce:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80017d0:	4b1f      	ldr	r3, [pc, #124]	@ (8001850 <MX_ADC3_Init+0x98>)
 80017d2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80017d6:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80017d8:	4b1d      	ldr	r3, [pc, #116]	@ (8001850 <MX_ADC3_Init+0x98>)
 80017da:	2200      	movs	r2, #0
 80017dc:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 80017de:	4b1c      	ldr	r3, [pc, #112]	@ (8001850 <MX_ADC3_Init+0x98>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80017e4:	4b1a      	ldr	r3, [pc, #104]	@ (8001850 <MX_ADC3_Init+0x98>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80017ea:	4b19      	ldr	r3, [pc, #100]	@ (8001850 <MX_ADC3_Init+0x98>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80017f2:	4b17      	ldr	r3, [pc, #92]	@ (8001850 <MX_ADC3_Init+0x98>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80017f8:	4b15      	ldr	r3, [pc, #84]	@ (8001850 <MX_ADC3_Init+0x98>)
 80017fa:	4a17      	ldr	r2, [pc, #92]	@ (8001858 <MX_ADC3_Init+0xa0>)
 80017fc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017fe:	4b14      	ldr	r3, [pc, #80]	@ (8001850 <MX_ADC3_Init+0x98>)
 8001800:	2200      	movs	r2, #0
 8001802:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001804:	4b12      	ldr	r3, [pc, #72]	@ (8001850 <MX_ADC3_Init+0x98>)
 8001806:	2201      	movs	r2, #1
 8001808:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800180a:	4b11      	ldr	r3, [pc, #68]	@ (8001850 <MX_ADC3_Init+0x98>)
 800180c:	2200      	movs	r2, #0
 800180e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001812:	4b0f      	ldr	r3, [pc, #60]	@ (8001850 <MX_ADC3_Init+0x98>)
 8001814:	2201      	movs	r2, #1
 8001816:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001818:	480d      	ldr	r0, [pc, #52]	@ (8001850 <MX_ADC3_Init+0x98>)
 800181a:	f000 ffe7 	bl	80027ec <HAL_ADC_Init>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8001824:	f000 fa1e 	bl	8001c64 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001828:	230a      	movs	r3, #10
 800182a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800182c:	2301      	movs	r3, #1
 800182e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001830:	2300      	movs	r3, #0
 8001832:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001834:	463b      	mov	r3, r7
 8001836:	4619      	mov	r1, r3
 8001838:	4805      	ldr	r0, [pc, #20]	@ (8001850 <MX_ADC3_Init+0x98>)
 800183a:	f001 f9b9 	bl	8002bb0 <HAL_ADC_ConfigChannel>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8001844:	f000 fa0e 	bl	8001c64 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001848:	bf00      	nop
 800184a:	3710      	adds	r7, #16
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	2000043c 	.word	0x2000043c
 8001854:	40012200 	.word	0x40012200
 8001858:	0f000001 	.word	0x0f000001

0800185c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001860:	4b18      	ldr	r3, [pc, #96]	@ (80018c4 <MX_SPI1_Init+0x68>)
 8001862:	4a19      	ldr	r2, [pc, #100]	@ (80018c8 <MX_SPI1_Init+0x6c>)
 8001864:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001866:	4b17      	ldr	r3, [pc, #92]	@ (80018c4 <MX_SPI1_Init+0x68>)
 8001868:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800186c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 800186e:	4b15      	ldr	r3, [pc, #84]	@ (80018c4 <MX_SPI1_Init+0x68>)
 8001870:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001874:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001876:	4b13      	ldr	r3, [pc, #76]	@ (80018c4 <MX_SPI1_Init+0x68>)
 8001878:	2200      	movs	r2, #0
 800187a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800187c:	4b11      	ldr	r3, [pc, #68]	@ (80018c4 <MX_SPI1_Init+0x68>)
 800187e:	2200      	movs	r2, #0
 8001880:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001882:	4b10      	ldr	r3, [pc, #64]	@ (80018c4 <MX_SPI1_Init+0x68>)
 8001884:	2200      	movs	r2, #0
 8001886:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001888:	4b0e      	ldr	r3, [pc, #56]	@ (80018c4 <MX_SPI1_Init+0x68>)
 800188a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800188e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001890:	4b0c      	ldr	r3, [pc, #48]	@ (80018c4 <MX_SPI1_Init+0x68>)
 8001892:	2200      	movs	r2, #0
 8001894:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001896:	4b0b      	ldr	r3, [pc, #44]	@ (80018c4 <MX_SPI1_Init+0x68>)
 8001898:	2200      	movs	r2, #0
 800189a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800189c:	4b09      	ldr	r3, [pc, #36]	@ (80018c4 <MX_SPI1_Init+0x68>)
 800189e:	2200      	movs	r2, #0
 80018a0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018a2:	4b08      	ldr	r3, [pc, #32]	@ (80018c4 <MX_SPI1_Init+0x68>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80018a8:	4b06      	ldr	r3, [pc, #24]	@ (80018c4 <MX_SPI1_Init+0x68>)
 80018aa:	220a      	movs	r2, #10
 80018ac:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80018ae:	4805      	ldr	r0, [pc, #20]	@ (80018c4 <MX_SPI1_Init+0x68>)
 80018b0:	f002 fae0 	bl	8003e74 <HAL_SPI_Init>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 80018ba:	f000 f9d3 	bl	8001c64 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80018be:	bf00      	nop
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	20000484 	.word	0x20000484
 80018c8:	40013000 	.word	0x40013000

080018cc <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80018d0:	4b17      	ldr	r3, [pc, #92]	@ (8001930 <MX_SPI3_Init+0x64>)
 80018d2:	4a18      	ldr	r2, [pc, #96]	@ (8001934 <MX_SPI3_Init+0x68>)
 80018d4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80018d6:	4b16      	ldr	r3, [pc, #88]	@ (8001930 <MX_SPI3_Init+0x64>)
 80018d8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80018dc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80018de:	4b14      	ldr	r3, [pc, #80]	@ (8001930 <MX_SPI3_Init+0x64>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80018e4:	4b12      	ldr	r3, [pc, #72]	@ (8001930 <MX_SPI3_Init+0x64>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018ea:	4b11      	ldr	r3, [pc, #68]	@ (8001930 <MX_SPI3_Init+0x64>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001930 <MX_SPI3_Init+0x64>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80018f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001930 <MX_SPI3_Init+0x64>)
 80018f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80018fc:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80018fe:	4b0c      	ldr	r3, [pc, #48]	@ (8001930 <MX_SPI3_Init+0x64>)
 8001900:	2200      	movs	r2, #0
 8001902:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001904:	4b0a      	ldr	r3, [pc, #40]	@ (8001930 <MX_SPI3_Init+0x64>)
 8001906:	2200      	movs	r2, #0
 8001908:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800190a:	4b09      	ldr	r3, [pc, #36]	@ (8001930 <MX_SPI3_Init+0x64>)
 800190c:	2200      	movs	r2, #0
 800190e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001910:	4b07      	ldr	r3, [pc, #28]	@ (8001930 <MX_SPI3_Init+0x64>)
 8001912:	2200      	movs	r2, #0
 8001914:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001916:	4b06      	ldr	r3, [pc, #24]	@ (8001930 <MX_SPI3_Init+0x64>)
 8001918:	220a      	movs	r2, #10
 800191a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800191c:	4804      	ldr	r0, [pc, #16]	@ (8001930 <MX_SPI3_Init+0x64>)
 800191e:	f002 faa9 	bl	8003e74 <HAL_SPI_Init>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d001      	beq.n	800192c <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001928:	f000 f99c 	bl	8001c64 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800192c:	bf00      	nop
 800192e:	bd80      	pop	{r7, pc}
 8001930:	200004dc 	.word	0x200004dc
 8001934:	40003c00 	.word	0x40003c00

08001938 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b086      	sub	sp, #24
 800193c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800193e:	f107 0308 	add.w	r3, r7, #8
 8001942:	2200      	movs	r2, #0
 8001944:	601a      	str	r2, [r3, #0]
 8001946:	605a      	str	r2, [r3, #4]
 8001948:	609a      	str	r2, [r3, #8]
 800194a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800194c:	463b      	mov	r3, r7
 800194e:	2200      	movs	r2, #0
 8001950:	601a      	str	r2, [r3, #0]
 8001952:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001954:	4b1e      	ldr	r3, [pc, #120]	@ (80019d0 <MX_TIM2_Init+0x98>)
 8001956:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800195a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 18600;
 800195c:	4b1c      	ldr	r3, [pc, #112]	@ (80019d0 <MX_TIM2_Init+0x98>)
 800195e:	f644 02a8 	movw	r2, #18600	@ 0x48a8
 8001962:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001964:	4b1a      	ldr	r3, [pc, #104]	@ (80019d0 <MX_TIM2_Init+0x98>)
 8001966:	2200      	movs	r2, #0
 8001968:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 800196a:	4b19      	ldr	r3, [pc, #100]	@ (80019d0 <MX_TIM2_Init+0x98>)
 800196c:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001970:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001972:	4b17      	ldr	r3, [pc, #92]	@ (80019d0 <MX_TIM2_Init+0x98>)
 8001974:	2200      	movs	r2, #0
 8001976:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001978:	4b15      	ldr	r3, [pc, #84]	@ (80019d0 <MX_TIM2_Init+0x98>)
 800197a:	2200      	movs	r2, #0
 800197c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800197e:	4814      	ldr	r0, [pc, #80]	@ (80019d0 <MX_TIM2_Init+0x98>)
 8001980:	f002 fd22 	bl	80043c8 <HAL_TIM_Base_Init>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800198a:	f000 f96b 	bl	8001c64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800198e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001992:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001994:	f107 0308 	add.w	r3, r7, #8
 8001998:	4619      	mov	r1, r3
 800199a:	480d      	ldr	r0, [pc, #52]	@ (80019d0 <MX_TIM2_Init+0x98>)
 800199c:	f003 f82c 	bl	80049f8 <HAL_TIM_ConfigClockSource>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80019a6:	f000 f95d 	bl	8001c64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019aa:	2300      	movs	r3, #0
 80019ac:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019ae:	2300      	movs	r3, #0
 80019b0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019b2:	463b      	mov	r3, r7
 80019b4:	4619      	mov	r1, r3
 80019b6:	4806      	ldr	r0, [pc, #24]	@ (80019d0 <MX_TIM2_Init+0x98>)
 80019b8:	f003 fc24 	bl	8005204 <HAL_TIMEx_MasterConfigSynchronization>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80019c2:	f000 f94f 	bl	8001c64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80019c6:	bf00      	nop
 80019c8:	3718      	adds	r7, #24
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	20000534 	.word	0x20000534

080019d4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b08a      	sub	sp, #40	@ 0x28
 80019d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019da:	f107 0320 	add.w	r3, r7, #32
 80019de:	2200      	movs	r2, #0
 80019e0:	601a      	str	r2, [r3, #0]
 80019e2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019e4:	1d3b      	adds	r3, r7, #4
 80019e6:	2200      	movs	r2, #0
 80019e8:	601a      	str	r2, [r3, #0]
 80019ea:	605a      	str	r2, [r3, #4]
 80019ec:	609a      	str	r2, [r3, #8]
 80019ee:	60da      	str	r2, [r3, #12]
 80019f0:	611a      	str	r2, [r3, #16]
 80019f2:	615a      	str	r2, [r3, #20]
 80019f4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80019f6:	4b21      	ldr	r3, [pc, #132]	@ (8001a7c <MX_TIM4_Init+0xa8>)
 80019f8:	4a21      	ldr	r2, [pc, #132]	@ (8001a80 <MX_TIM4_Init+0xac>)
 80019fa:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 33-1;
 80019fc:	4b1f      	ldr	r3, [pc, #124]	@ (8001a7c <MX_TIM4_Init+0xa8>)
 80019fe:	2220      	movs	r2, #32
 8001a00:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a02:	4b1e      	ldr	r3, [pc, #120]	@ (8001a7c <MX_TIM4_Init+0xa8>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 255;
 8001a08:	4b1c      	ldr	r3, [pc, #112]	@ (8001a7c <MX_TIM4_Init+0xa8>)
 8001a0a:	22ff      	movs	r2, #255	@ 0xff
 8001a0c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a0e:	4b1b      	ldr	r3, [pc, #108]	@ (8001a7c <MX_TIM4_Init+0xa8>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a14:	4b19      	ldr	r3, [pc, #100]	@ (8001a7c <MX_TIM4_Init+0xa8>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001a1a:	4818      	ldr	r0, [pc, #96]	@ (8001a7c <MX_TIM4_Init+0xa8>)
 8001a1c:	f002 fd23 	bl	8004466 <HAL_TIM_PWM_Init>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8001a26:	f000 f91d 	bl	8001c64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001a32:	f107 0320 	add.w	r3, r7, #32
 8001a36:	4619      	mov	r1, r3
 8001a38:	4810      	ldr	r0, [pc, #64]	@ (8001a7c <MX_TIM4_Init+0xa8>)
 8001a3a:	f003 fbe3 	bl	8005204 <HAL_TIMEx_MasterConfigSynchronization>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d001      	beq.n	8001a48 <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 8001a44:	f000 f90e 	bl	8001c64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a48:	2360      	movs	r3, #96	@ 0x60
 8001a4a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a50:	2300      	movs	r3, #0
 8001a52:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a54:	2300      	movs	r3, #0
 8001a56:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a58:	1d3b      	adds	r3, r7, #4
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	4807      	ldr	r0, [pc, #28]	@ (8001a7c <MX_TIM4_Init+0xa8>)
 8001a60:	f002 ff08 	bl	8004874 <HAL_TIM_PWM_ConfigChannel>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001a6a:	f000 f8fb 	bl	8001c64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001a6e:	4803      	ldr	r0, [pc, #12]	@ (8001a7c <MX_TIM4_Init+0xa8>)
 8001a70:	f000 fbb8 	bl	80021e4 <HAL_TIM_MspPostInit>

}
 8001a74:	bf00      	nop
 8001a76:	3728      	adds	r7, #40	@ 0x28
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	2000057c 	.word	0x2000057c
 8001a80:	40000800 	.word	0x40000800

08001a84 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001a88:	4b11      	ldr	r3, [pc, #68]	@ (8001ad0 <MX_UART5_Init+0x4c>)
 8001a8a:	4a12      	ldr	r2, [pc, #72]	@ (8001ad4 <MX_UART5_Init+0x50>)
 8001a8c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001a8e:	4b10      	ldr	r3, [pc, #64]	@ (8001ad0 <MX_UART5_Init+0x4c>)
 8001a90:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001a94:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001a96:	4b0e      	ldr	r3, [pc, #56]	@ (8001ad0 <MX_UART5_Init+0x4c>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001a9c:	4b0c      	ldr	r3, [pc, #48]	@ (8001ad0 <MX_UART5_Init+0x4c>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001aa2:	4b0b      	ldr	r3, [pc, #44]	@ (8001ad0 <MX_UART5_Init+0x4c>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001aa8:	4b09      	ldr	r3, [pc, #36]	@ (8001ad0 <MX_UART5_Init+0x4c>)
 8001aaa:	220c      	movs	r2, #12
 8001aac:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001aae:	4b08      	ldr	r3, [pc, #32]	@ (8001ad0 <MX_UART5_Init+0x4c>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ab4:	4b06      	ldr	r3, [pc, #24]	@ (8001ad0 <MX_UART5_Init+0x4c>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001aba:	4805      	ldr	r0, [pc, #20]	@ (8001ad0 <MX_UART5_Init+0x4c>)
 8001abc:	f003 fc32 	bl	8005324 <HAL_UART_Init>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8001ac6:	f000 f8cd 	bl	8001c64 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001aca:	bf00      	nop
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	200005c4 	.word	0x200005c4
 8001ad4:	40005000 	.word	0x40005000

08001ad8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001adc:	4b11      	ldr	r3, [pc, #68]	@ (8001b24 <MX_USART1_UART_Init+0x4c>)
 8001ade:	4a12      	ldr	r2, [pc, #72]	@ (8001b28 <MX_USART1_UART_Init+0x50>)
 8001ae0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001ae2:	4b10      	ldr	r3, [pc, #64]	@ (8001b24 <MX_USART1_UART_Init+0x4c>)
 8001ae4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001ae8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001aea:	4b0e      	ldr	r3, [pc, #56]	@ (8001b24 <MX_USART1_UART_Init+0x4c>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001af0:	4b0c      	ldr	r3, [pc, #48]	@ (8001b24 <MX_USART1_UART_Init+0x4c>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001af6:	4b0b      	ldr	r3, [pc, #44]	@ (8001b24 <MX_USART1_UART_Init+0x4c>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001afc:	4b09      	ldr	r3, [pc, #36]	@ (8001b24 <MX_USART1_UART_Init+0x4c>)
 8001afe:	220c      	movs	r2, #12
 8001b00:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b02:	4b08      	ldr	r3, [pc, #32]	@ (8001b24 <MX_USART1_UART_Init+0x4c>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b08:	4b06      	ldr	r3, [pc, #24]	@ (8001b24 <MX_USART1_UART_Init+0x4c>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b0e:	4805      	ldr	r0, [pc, #20]	@ (8001b24 <MX_USART1_UART_Init+0x4c>)
 8001b10:	f003 fc08 	bl	8005324 <HAL_UART_Init>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d001      	beq.n	8001b1e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001b1a:	f000 f8a3 	bl	8001c64 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001b1e:	bf00      	nop
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	2000060c 	.word	0x2000060c
 8001b28:	40011000 	.word	0x40011000

08001b2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b08a      	sub	sp, #40	@ 0x28
 8001b30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b32:	f107 0314 	add.w	r3, r7, #20
 8001b36:	2200      	movs	r2, #0
 8001b38:	601a      	str	r2, [r3, #0]
 8001b3a:	605a      	str	r2, [r3, #4]
 8001b3c:	609a      	str	r2, [r3, #8]
 8001b3e:	60da      	str	r2, [r3, #12]
 8001b40:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b42:	2300      	movs	r3, #0
 8001b44:	613b      	str	r3, [r7, #16]
 8001b46:	4b44      	ldr	r3, [pc, #272]	@ (8001c58 <MX_GPIO_Init+0x12c>)
 8001b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b4a:	4a43      	ldr	r2, [pc, #268]	@ (8001c58 <MX_GPIO_Init+0x12c>)
 8001b4c:	f043 0304 	orr.w	r3, r3, #4
 8001b50:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b52:	4b41      	ldr	r3, [pc, #260]	@ (8001c58 <MX_GPIO_Init+0x12c>)
 8001b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b56:	f003 0304 	and.w	r3, r3, #4
 8001b5a:	613b      	str	r3, [r7, #16]
 8001b5c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b5e:	2300      	movs	r3, #0
 8001b60:	60fb      	str	r3, [r7, #12]
 8001b62:	4b3d      	ldr	r3, [pc, #244]	@ (8001c58 <MX_GPIO_Init+0x12c>)
 8001b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b66:	4a3c      	ldr	r2, [pc, #240]	@ (8001c58 <MX_GPIO_Init+0x12c>)
 8001b68:	f043 0301 	orr.w	r3, r3, #1
 8001b6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b6e:	4b3a      	ldr	r3, [pc, #232]	@ (8001c58 <MX_GPIO_Init+0x12c>)
 8001b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b72:	f003 0301 	and.w	r3, r3, #1
 8001b76:	60fb      	str	r3, [r7, #12]
 8001b78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	60bb      	str	r3, [r7, #8]
 8001b7e:	4b36      	ldr	r3, [pc, #216]	@ (8001c58 <MX_GPIO_Init+0x12c>)
 8001b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b82:	4a35      	ldr	r2, [pc, #212]	@ (8001c58 <MX_GPIO_Init+0x12c>)
 8001b84:	f043 0302 	orr.w	r3, r3, #2
 8001b88:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b8a:	4b33      	ldr	r3, [pc, #204]	@ (8001c58 <MX_GPIO_Init+0x12c>)
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b8e:	f003 0302 	and.w	r3, r3, #2
 8001b92:	60bb      	str	r3, [r7, #8]
 8001b94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b96:	2300      	movs	r3, #0
 8001b98:	607b      	str	r3, [r7, #4]
 8001b9a:	4b2f      	ldr	r3, [pc, #188]	@ (8001c58 <MX_GPIO_Init+0x12c>)
 8001b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b9e:	4a2e      	ldr	r2, [pc, #184]	@ (8001c58 <MX_GPIO_Init+0x12c>)
 8001ba0:	f043 0308 	orr.w	r3, r3, #8
 8001ba4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ba6:	4b2c      	ldr	r3, [pc, #176]	@ (8001c58 <MX_GPIO_Init+0x12c>)
 8001ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001baa:	f003 0308 	and.w	r3, r3, #8
 8001bae:	607b      	str	r3, [r7, #4]
 8001bb0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_PIN__Pin|RES_PIN__Pin|DATA_CMD_PIN__Pin, GPIO_PIN_RESET);
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	f248 0130 	movw	r1, #32816	@ 0x8030
 8001bb8:	4828      	ldr	r0, [pc, #160]	@ (8001c5c <MX_GPIO_Init+0x130>)
 8001bba:	f001 fcc5 	bl	8003548 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DIS_Pin|DIR_Pin|SA818PD_Pin, GPIO_PIN_RESET);
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	f44f 5198 	mov.w	r1, #4864	@ 0x1300
 8001bc4:	4826      	ldr	r0, [pc, #152]	@ (8001c60 <MX_GPIO_Init+0x134>)
 8001bc6:	f001 fcbf 	bl	8003548 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : V_HIGH_Pin V_LOW_Pin */
  GPIO_InitStruct.Pin = V_HIGH_Pin|V_LOW_Pin;
 8001bca:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001bce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001bd0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001bd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bda:	f107 0314 	add.w	r3, r7, #20
 8001bde:	4619      	mov	r1, r3
 8001be0:	481e      	ldr	r0, [pc, #120]	@ (8001c5c <MX_GPIO_Init+0x130>)
 8001be2:	f001 fb15 	bl	8003210 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_PIN__Pin RES_PIN__Pin DATA_CMD_PIN__Pin */
  GPIO_InitStruct.Pin = CS_PIN__Pin|RES_PIN__Pin|DATA_CMD_PIN__Pin;
 8001be6:	f248 0330 	movw	r3, #32816	@ 0x8030
 8001bea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bec:	2301      	movs	r3, #1
 8001bee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bf8:	f107 0314 	add.w	r3, r7, #20
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	4817      	ldr	r0, [pc, #92]	@ (8001c5c <MX_GPIO_Init+0x130>)
 8001c00:	f001 fb06 	bl	8003210 <HAL_GPIO_Init>

  /*Configure GPIO pins : S_LOW_Pin S_HIGH_Pin */
  GPIO_InitStruct.Pin = S_LOW_Pin|S_HIGH_Pin;
 8001c04:	f44f 4304 	mov.w	r3, #33792	@ 0x8400
 8001c08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c0a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001c0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c10:	2300      	movs	r3, #0
 8001c12:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c14:	f107 0314 	add.w	r3, r7, #20
 8001c18:	4619      	mov	r1, r3
 8001c1a:	4811      	ldr	r0, [pc, #68]	@ (8001c60 <MX_GPIO_Init+0x134>)
 8001c1c:	f001 faf8 	bl	8003210 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIS_Pin DIR_Pin SA818PD_Pin */
  GPIO_InitStruct.Pin = DIS_Pin|DIR_Pin|SA818PD_Pin;
 8001c20:	f44f 5398 	mov.w	r3, #4864	@ 0x1300
 8001c24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c26:	2301      	movs	r3, #1
 8001c28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c32:	f107 0314 	add.w	r3, r7, #20
 8001c36:	4619      	mov	r1, r3
 8001c38:	4809      	ldr	r0, [pc, #36]	@ (8001c60 <MX_GPIO_Init+0x134>)
 8001c3a:	f001 fae9 	bl	8003210 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001c3e:	2200      	movs	r2, #0
 8001c40:	2100      	movs	r1, #0
 8001c42:	2028      	movs	r0, #40	@ 0x28
 8001c44:	f001 faad 	bl	80031a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001c48:	2028      	movs	r0, #40	@ 0x28
 8001c4a:	f001 fac6 	bl	80031da <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001c4e:	bf00      	nop
 8001c50:	3728      	adds	r7, #40	@ 0x28
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	40023800 	.word	0x40023800
 8001c5c:	40020800 	.word	0x40020800
 8001c60:	40020400 	.word	0x40020400

08001c64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c68:	b672      	cpsid	i
}
 8001c6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c6c:	bf00      	nop
 8001c6e:	e7fd      	b.n	8001c6c <Error_Handler+0x8>

08001c70 <lora_init>:
uint8_t uart_rx_buffer[100];
uint8_t uart6passwotd[14];

LoRaConfig_t lora_config;

void lora_init() {
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
    lora_config.receiver_id = get_id();
 8001c74:	f000 f89e 	bl	8001db4 <get_id>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	4b0a      	ldr	r3, [pc, #40]	@ (8001ca8 <lora_init+0x38>)
 8001c7e:	809a      	strh	r2, [r3, #4]
    lora_config.receiver_addr = get_address();
 8001c80:	f000 f8ca 	bl	8001e18 <get_address>
 8001c84:	4603      	mov	r3, r0
 8001c86:	461a      	mov	r2, r3
 8001c88:	4b07      	ldr	r3, [pc, #28]	@ (8001ca8 <lora_init+0x38>)
 8001c8a:	80da      	strh	r2, [r3, #6]

    HAL_UART_Transmit(&LORA_UART_HANDLE, LORA_AT_BAND, sizeof(LORA_AT_BAND)-1, 100);
 8001c8c:	2364      	movs	r3, #100	@ 0x64
 8001c8e:	2213      	movs	r2, #19
 8001c90:	4906      	ldr	r1, [pc, #24]	@ (8001cac <lora_init+0x3c>)
 8001c92:	4807      	ldr	r0, [pc, #28]	@ (8001cb0 <lora_init+0x40>)
 8001c94:	f003 fb96 	bl	80053c4 <HAL_UART_Transmit>
    HAL_UART_Transmit(&LORA_UART_HANDLE, LORA_AT_PWD, sizeof(LORA_AT_PWD)-1, 100);
 8001c98:	2364      	movs	r3, #100	@ 0x64
 8001c9a:	2218      	movs	r2, #24
 8001c9c:	4905      	ldr	r1, [pc, #20]	@ (8001cb4 <lora_init+0x44>)
 8001c9e:	4804      	ldr	r0, [pc, #16]	@ (8001cb0 <lora_init+0x40>)
 8001ca0:	f003 fb90 	bl	80053c4 <HAL_UART_Transmit>
}
 8001ca4:	bf00      	nop
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	200006c4 	.word	0x200006c4
 8001cac:	0800acb0 	.word	0x0800acb0
 8001cb0:	200005c4 	.word	0x200005c4
 8001cb4:	0800acc4 	.word	0x0800acc4

08001cb8 <lora_receive>:

uint8_t lora_receive() {
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
    return receive_message();
 8001cbc:	f000 f804 	bl	8001cc8 <receive_message>
 8001cc0:	4603      	mov	r3, r0
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	bd80      	pop	{r7, pc}
	...

08001cc8 <receive_message>:

uint8_t receive_message() {
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
    memset(uart_rx_buffer, 0, sizeof(uart_rx_buffer));
 8001cce:	2264      	movs	r2, #100	@ 0x64
 8001cd0:	2100      	movs	r1, #0
 8001cd2:	480e      	ldr	r0, [pc, #56]	@ (8001d0c <receive_message+0x44>)
 8001cd4:	f004 ff81 	bl	8006bda <memset>
    uint8_t cmd = 0;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	71fb      	strb	r3, [r7, #7]
    HAL_UART_Receive(&LORA_UART_HANDLE, uart_rx_buffer, sizeof(uart_rx_buffer), 100);
 8001cdc:	2364      	movs	r3, #100	@ 0x64
 8001cde:	2264      	movs	r2, #100	@ 0x64
 8001ce0:	490a      	ldr	r1, [pc, #40]	@ (8001d0c <receive_message+0x44>)
 8001ce2:	480b      	ldr	r0, [pc, #44]	@ (8001d10 <receive_message+0x48>)
 8001ce4:	f003 fbf9 	bl	80054da <HAL_UART_Receive>

    if (strstr((char*)uart_rx_buffer, "+RCV=")) {
 8001ce8:	490a      	ldr	r1, [pc, #40]	@ (8001d14 <receive_message+0x4c>)
 8001cea:	4808      	ldr	r0, [pc, #32]	@ (8001d0c <receive_message+0x44>)
 8001cec:	f004 ff7d 	bl	8006bea <strstr>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d004      	beq.n	8001d00 <receive_message+0x38>
        cmd = process_message((char*)uart_rx_buffer);
 8001cf6:	4805      	ldr	r0, [pc, #20]	@ (8001d0c <receive_message+0x44>)
 8001cf8:	f000 f80e 	bl	8001d18 <process_message>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	71fb      	strb	r3, [r7, #7]
    }
    return cmd;
 8001d00:	79fb      	ldrb	r3, [r7, #7]
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3708      	adds	r7, #8
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	20000660 	.word	0x20000660
 8001d10:	200005c4 	.word	0x200005c4
 8001d14:	0800abe0 	.word	0x0800abe0

08001d18 <process_message>:

uint8_t process_message(const char *message) {
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b088      	sub	sp, #32
 8001d1c:	af02      	add	r7, sp, #8
 8001d1e:	6078      	str	r0, [r7, #4]
    int address = 0, rssi = 0, length = 0;
 8001d20:	2300      	movs	r3, #0
 8001d22:	617b      	str	r3, [r7, #20]
 8001d24:	2300      	movs	r3, #0
 8001d26:	613b      	str	r3, [r7, #16]
 8001d28:	2300      	movs	r3, #0
 8001d2a:	60fb      	str	r3, [r7, #12]
    char data = 0;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	72fb      	strb	r3, [r7, #11]
    sscanf(message, "+RCV=%d,%d,%c,%d,%*d", &address, &length, &data, &rssi);
 8001d30:	f107 010c 	add.w	r1, r7, #12
 8001d34:	f107 0214 	add.w	r2, r7, #20
 8001d38:	f107 0310 	add.w	r3, r7, #16
 8001d3c:	9301      	str	r3, [sp, #4]
 8001d3e:	f107 030b 	add.w	r3, r7, #11
 8001d42:	9300      	str	r3, [sp, #0]
 8001d44:	460b      	mov	r3, r1
 8001d46:	4904      	ldr	r1, [pc, #16]	@ (8001d58 <process_message+0x40>)
 8001d48:	6878      	ldr	r0, [r7, #4]
 8001d4a:	f004 fed5 	bl	8006af8 <siscanf>
    return (uint8_t)data;
 8001d4e:	7afb      	ldrb	r3, [r7, #11]
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3718      	adds	r7, #24
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	0800abe8 	.word	0x0800abe8

08001d5c <lora_send_char>:

void lora_send_char(uint8_t data) {
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b090      	sub	sp, #64	@ 0x40
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	4603      	mov	r3, r0
 8001d64:	71fb      	strb	r3, [r7, #7]
    char buffer[50] = {0};
 8001d66:	f107 030c 	add.w	r3, r7, #12
 8001d6a:	2232      	movs	r2, #50	@ 0x32
 8001d6c:	2100      	movs	r1, #0
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f004 ff33 	bl	8006bda <memset>
    sprintf(buffer, "AT+SEND=%d,1,%c\r\n", lora_config.receiver_addr, data);
 8001d74:	4b0c      	ldr	r3, [pc, #48]	@ (8001da8 <lora_send_char+0x4c>)
 8001d76:	88db      	ldrh	r3, [r3, #6]
 8001d78:	461a      	mov	r2, r3
 8001d7a:	79fb      	ldrb	r3, [r7, #7]
 8001d7c:	f107 000c 	add.w	r0, r7, #12
 8001d80:	490a      	ldr	r1, [pc, #40]	@ (8001dac <lora_send_char+0x50>)
 8001d82:	f004 fe97 	bl	8006ab4 <siprintf>
    HAL_UART_Transmit(&LORA_UART_HANDLE, (uint8_t*)buffer, strlen(buffer), 100);
 8001d86:	f107 030c 	add.w	r3, r7, #12
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7fe fa70 	bl	8000270 <strlen>
 8001d90:	4603      	mov	r3, r0
 8001d92:	b29a      	uxth	r2, r3
 8001d94:	f107 010c 	add.w	r1, r7, #12
 8001d98:	2364      	movs	r3, #100	@ 0x64
 8001d9a:	4805      	ldr	r0, [pc, #20]	@ (8001db0 <lora_send_char+0x54>)
 8001d9c:	f003 fb12 	bl	80053c4 <HAL_UART_Transmit>
}
 8001da0:	bf00      	nop
 8001da2:	3740      	adds	r7, #64	@ 0x40
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	200006c4 	.word	0x200006c4
 8001dac:	0800ac00 	.word	0x0800ac00
 8001db0:	200005c4 	.word	0x200005c4

08001db4 <get_id>:
    char buffer[250] = {0};
    sprintf(buffer, "AT+SEND=%d,%d,%s\r\n", lora_config.receiver_addr, len, pdata);
    HAL_UART_Transmit(&LORA_UART_HANDLE, (uint8_t*)buffer, strlen(buffer), 100);
}

uint16_t get_id() {
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b088      	sub	sp, #32
 8001db8:	af00      	add	r7, sp, #0
    char buffer[25] = {0};
 8001dba:	1d3b      	adds	r3, r7, #4
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	601a      	str	r2, [r3, #0]
 8001dc0:	605a      	str	r2, [r3, #4]
 8001dc2:	609a      	str	r2, [r3, #8]
 8001dc4:	60da      	str	r2, [r3, #12]
 8001dc6:	611a      	str	r2, [r3, #16]
 8001dc8:	615a      	str	r2, [r3, #20]
 8001dca:	761a      	strb	r2, [r3, #24]
    uint16_t id = 0;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	807b      	strh	r3, [r7, #2]

    HAL_UART_Transmit(&LORA_UART_HANDLE, LORA_AT_GETID, sizeof(LORA_AT_GETID)-1, 100);
 8001dd0:	2364      	movs	r3, #100	@ 0x64
 8001dd2:	220e      	movs	r2, #14
 8001dd4:	490c      	ldr	r1, [pc, #48]	@ (8001e08 <get_id+0x54>)
 8001dd6:	480d      	ldr	r0, [pc, #52]	@ (8001e0c <get_id+0x58>)
 8001dd8:	f003 faf4 	bl	80053c4 <HAL_UART_Transmit>
    HAL_UART_Receive(&LORA_UART_HANDLE, (uint8_t*)buffer, sizeof(buffer), 100);
 8001ddc:	1d39      	adds	r1, r7, #4
 8001dde:	2364      	movs	r3, #100	@ 0x64
 8001de0:	2219      	movs	r2, #25
 8001de2:	480a      	ldr	r0, [pc, #40]	@ (8001e0c <get_id+0x58>)
 8001de4:	f003 fb79 	bl	80054da <HAL_UART_Receive>

    sscanf(buffer, "+NETWORKID=%hu", &id);
 8001de8:	1cba      	adds	r2, r7, #2
 8001dea:	1d3b      	adds	r3, r7, #4
 8001dec:	4908      	ldr	r1, [pc, #32]	@ (8001e10 <get_id+0x5c>)
 8001dee:	4618      	mov	r0, r3
 8001df0:	f004 fe82 	bl	8006af8 <siscanf>
    lora_config.id = id;
 8001df4:	887a      	ldrh	r2, [r7, #2]
 8001df6:	4b07      	ldr	r3, [pc, #28]	@ (8001e14 <get_id+0x60>)
 8001df8:	801a      	strh	r2, [r3, #0]

    return (IAM == LORA_ROLE_TRANSMITTER) ? id + 1 : id - 1;
 8001dfa:	887b      	ldrh	r3, [r7, #2]
 8001dfc:	3b01      	subs	r3, #1
 8001dfe:	b29b      	uxth	r3, r3
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3720      	adds	r7, #32
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	0800ace0 	.word	0x0800ace0
 8001e0c:	200005c4 	.word	0x200005c4
 8001e10:	0800ac28 	.word	0x0800ac28
 8001e14:	200006c4 	.word	0x200006c4

08001e18 <get_address>:

uint16_t get_address() {
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b088      	sub	sp, #32
 8001e1c:	af00      	add	r7, sp, #0
    char buffer[25] = {0};
 8001e1e:	1d3b      	adds	r3, r7, #4
 8001e20:	2200      	movs	r2, #0
 8001e22:	601a      	str	r2, [r3, #0]
 8001e24:	605a      	str	r2, [r3, #4]
 8001e26:	609a      	str	r2, [r3, #8]
 8001e28:	60da      	str	r2, [r3, #12]
 8001e2a:	611a      	str	r2, [r3, #16]
 8001e2c:	615a      	str	r2, [r3, #20]
 8001e2e:	761a      	strb	r2, [r3, #24]
    uint16_t addr = 0;
 8001e30:	2300      	movs	r3, #0
 8001e32:	807b      	strh	r3, [r7, #2]

    HAL_UART_Transmit(&LORA_UART_HANDLE, LORA_AT_GETADDR, sizeof(LORA_AT_GETADDR)-1, 100);
 8001e34:	2364      	movs	r3, #100	@ 0x64
 8001e36:	220c      	movs	r2, #12
 8001e38:	490c      	ldr	r1, [pc, #48]	@ (8001e6c <get_address+0x54>)
 8001e3a:	480d      	ldr	r0, [pc, #52]	@ (8001e70 <get_address+0x58>)
 8001e3c:	f003 fac2 	bl	80053c4 <HAL_UART_Transmit>
    HAL_UART_Receive(&LORA_UART_HANDLE, (uint8_t*)buffer, sizeof(buffer), 100);
 8001e40:	1d39      	adds	r1, r7, #4
 8001e42:	2364      	movs	r3, #100	@ 0x64
 8001e44:	2219      	movs	r2, #25
 8001e46:	480a      	ldr	r0, [pc, #40]	@ (8001e70 <get_address+0x58>)
 8001e48:	f003 fb47 	bl	80054da <HAL_UART_Receive>

    sscanf(buffer, "+ADDRESS=%hu", &addr);
 8001e4c:	1cba      	adds	r2, r7, #2
 8001e4e:	1d3b      	adds	r3, r7, #4
 8001e50:	4908      	ldr	r1, [pc, #32]	@ (8001e74 <get_address+0x5c>)
 8001e52:	4618      	mov	r0, r3
 8001e54:	f004 fe50 	bl	8006af8 <siscanf>
    lora_config.addr = addr;
 8001e58:	887a      	ldrh	r2, [r7, #2]
 8001e5a:	4b07      	ldr	r3, [pc, #28]	@ (8001e78 <get_address+0x60>)
 8001e5c:	805a      	strh	r2, [r3, #2]

    return (IAM == LORA_ROLE_TRANSMITTER) ? addr + 1 : addr - 1;
 8001e5e:	887b      	ldrh	r3, [r7, #2]
 8001e60:	3b01      	subs	r3, #1
 8001e62:	b29b      	uxth	r3, r3
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	3720      	adds	r7, #32
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	0800acf0 	.word	0x0800acf0
 8001e70:	200005c4 	.word	0x200005c4
 8001e74:	0800ac38 	.word	0x0800ac38
 8001e78:	200006c4 	.word	0x200006c4

08001e7c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e82:	2300      	movs	r3, #0
 8001e84:	607b      	str	r3, [r7, #4]
 8001e86:	4b10      	ldr	r3, [pc, #64]	@ (8001ec8 <HAL_MspInit+0x4c>)
 8001e88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e8a:	4a0f      	ldr	r2, [pc, #60]	@ (8001ec8 <HAL_MspInit+0x4c>)
 8001e8c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e90:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e92:	4b0d      	ldr	r3, [pc, #52]	@ (8001ec8 <HAL_MspInit+0x4c>)
 8001e94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e96:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e9a:	607b      	str	r3, [r7, #4]
 8001e9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	603b      	str	r3, [r7, #0]
 8001ea2:	4b09      	ldr	r3, [pc, #36]	@ (8001ec8 <HAL_MspInit+0x4c>)
 8001ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ea6:	4a08      	ldr	r2, [pc, #32]	@ (8001ec8 <HAL_MspInit+0x4c>)
 8001ea8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001eac:	6413      	str	r3, [r2, #64]	@ 0x40
 8001eae:	4b06      	ldr	r3, [pc, #24]	@ (8001ec8 <HAL_MspInit+0x4c>)
 8001eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001eb6:	603b      	str	r3, [r7, #0]
 8001eb8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001eba:	bf00      	nop
 8001ebc:	370c      	adds	r7, #12
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	40023800 	.word	0x40023800

08001ecc <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b08e      	sub	sp, #56	@ 0x38
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ed4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ed8:	2200      	movs	r2, #0
 8001eda:	601a      	str	r2, [r3, #0]
 8001edc:	605a      	str	r2, [r3, #4]
 8001ede:	609a      	str	r2, [r3, #8]
 8001ee0:	60da      	str	r2, [r3, #12]
 8001ee2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a45      	ldr	r2, [pc, #276]	@ (8002000 <HAL_ADC_MspInit+0x134>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d128      	bne.n	8001f40 <HAL_ADC_MspInit+0x74>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001eee:	2300      	movs	r3, #0
 8001ef0:	623b      	str	r3, [r7, #32]
 8001ef2:	4b44      	ldr	r3, [pc, #272]	@ (8002004 <HAL_ADC_MspInit+0x138>)
 8001ef4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ef6:	4a43      	ldr	r2, [pc, #268]	@ (8002004 <HAL_ADC_MspInit+0x138>)
 8001ef8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001efc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001efe:	4b41      	ldr	r3, [pc, #260]	@ (8002004 <HAL_ADC_MspInit+0x138>)
 8001f00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f06:	623b      	str	r3, [r7, #32]
 8001f08:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	61fb      	str	r3, [r7, #28]
 8001f0e:	4b3d      	ldr	r3, [pc, #244]	@ (8002004 <HAL_ADC_MspInit+0x138>)
 8001f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f12:	4a3c      	ldr	r2, [pc, #240]	@ (8002004 <HAL_ADC_MspInit+0x138>)
 8001f14:	f043 0302 	orr.w	r3, r3, #2
 8001f18:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f1a:	4b3a      	ldr	r3, [pc, #232]	@ (8002004 <HAL_ADC_MspInit+0x138>)
 8001f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f1e:	f003 0302 	and.w	r3, r3, #2
 8001f22:	61fb      	str	r3, [r7, #28]
 8001f24:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = I_OUT_Pin;
 8001f26:	2301      	movs	r3, #1
 8001f28:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(I_OUT_GPIO_Port, &GPIO_InitStruct);
 8001f32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f36:	4619      	mov	r1, r3
 8001f38:	4833      	ldr	r0, [pc, #204]	@ (8002008 <HAL_ADC_MspInit+0x13c>)
 8001f3a:	f001 f969 	bl	8003210 <HAL_GPIO_Init>
    /* USER CODE BEGIN ADC3_MspInit 1 */

    /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001f3e:	e05a      	b.n	8001ff6 <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC2)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a31      	ldr	r2, [pc, #196]	@ (800200c <HAL_ADC_MspInit+0x140>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d128      	bne.n	8001f9c <HAL_ADC_MspInit+0xd0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	61bb      	str	r3, [r7, #24]
 8001f4e:	4b2d      	ldr	r3, [pc, #180]	@ (8002004 <HAL_ADC_MspInit+0x138>)
 8001f50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f52:	4a2c      	ldr	r2, [pc, #176]	@ (8002004 <HAL_ADC_MspInit+0x138>)
 8001f54:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f58:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f5a:	4b2a      	ldr	r3, [pc, #168]	@ (8002004 <HAL_ADC_MspInit+0x138>)
 8001f5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f5e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f62:	61bb      	str	r3, [r7, #24]
 8001f64:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f66:	2300      	movs	r3, #0
 8001f68:	617b      	str	r3, [r7, #20]
 8001f6a:	4b26      	ldr	r3, [pc, #152]	@ (8002004 <HAL_ADC_MspInit+0x138>)
 8001f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f6e:	4a25      	ldr	r2, [pc, #148]	@ (8002004 <HAL_ADC_MspInit+0x138>)
 8001f70:	f043 0302 	orr.w	r3, r3, #2
 8001f74:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f76:	4b23      	ldr	r3, [pc, #140]	@ (8002004 <HAL_ADC_MspInit+0x138>)
 8001f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f7a:	f003 0302 	and.w	r3, r3, #2
 8001f7e:	617b      	str	r3, [r7, #20]
 8001f80:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = V_OUT_Pin;
 8001f82:	2302      	movs	r3, #2
 8001f84:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f86:	2303      	movs	r3, #3
 8001f88:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(V_OUT_GPIO_Port, &GPIO_InitStruct);
 8001f8e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f92:	4619      	mov	r1, r3
 8001f94:	481c      	ldr	r0, [pc, #112]	@ (8002008 <HAL_ADC_MspInit+0x13c>)
 8001f96:	f001 f93b 	bl	8003210 <HAL_GPIO_Init>
}
 8001f9a:	e02c      	b.n	8001ff6 <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC3)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a1b      	ldr	r2, [pc, #108]	@ (8002010 <HAL_ADC_MspInit+0x144>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d127      	bne.n	8001ff6 <HAL_ADC_MspInit+0x12a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	613b      	str	r3, [r7, #16]
 8001faa:	4b16      	ldr	r3, [pc, #88]	@ (8002004 <HAL_ADC_MspInit+0x138>)
 8001fac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fae:	4a15      	ldr	r2, [pc, #84]	@ (8002004 <HAL_ADC_MspInit+0x138>)
 8001fb0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001fb4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fb6:	4b13      	ldr	r3, [pc, #76]	@ (8002004 <HAL_ADC_MspInit+0x138>)
 8001fb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fbe:	613b      	str	r3, [r7, #16]
 8001fc0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	60fb      	str	r3, [r7, #12]
 8001fc6:	4b0f      	ldr	r3, [pc, #60]	@ (8002004 <HAL_ADC_MspInit+0x138>)
 8001fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fca:	4a0e      	ldr	r2, [pc, #56]	@ (8002004 <HAL_ADC_MspInit+0x138>)
 8001fcc:	f043 0304 	orr.w	r3, r3, #4
 8001fd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fd2:	4b0c      	ldr	r3, [pc, #48]	@ (8002004 <HAL_ADC_MspInit+0x138>)
 8001fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fd6:	f003 0304 	and.w	r3, r3, #4
 8001fda:	60fb      	str	r3, [r7, #12]
 8001fdc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001fee:	4619      	mov	r1, r3
 8001ff0:	4808      	ldr	r0, [pc, #32]	@ (8002014 <HAL_ADC_MspInit+0x148>)
 8001ff2:	f001 f90d 	bl	8003210 <HAL_GPIO_Init>
}
 8001ff6:	bf00      	nop
 8001ff8:	3738      	adds	r7, #56	@ 0x38
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	40012000 	.word	0x40012000
 8002004:	40023800 	.word	0x40023800
 8002008:	40020400 	.word	0x40020400
 800200c:	40012100 	.word	0x40012100
 8002010:	40012200 	.word	0x40012200
 8002014:	40020800 	.word	0x40020800

08002018 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b08c      	sub	sp, #48	@ 0x30
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002020:	f107 031c 	add.w	r3, r7, #28
 8002024:	2200      	movs	r2, #0
 8002026:	601a      	str	r2, [r3, #0]
 8002028:	605a      	str	r2, [r3, #4]
 800202a:	609a      	str	r2, [r3, #8]
 800202c:	60da      	str	r2, [r3, #12]
 800202e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a41      	ldr	r2, [pc, #260]	@ (800213c <HAL_SPI_MspInit+0x124>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d12c      	bne.n	8002094 <HAL_SPI_MspInit+0x7c>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800203a:	2300      	movs	r3, #0
 800203c:	61bb      	str	r3, [r7, #24]
 800203e:	4b40      	ldr	r3, [pc, #256]	@ (8002140 <HAL_SPI_MspInit+0x128>)
 8002040:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002042:	4a3f      	ldr	r2, [pc, #252]	@ (8002140 <HAL_SPI_MspInit+0x128>)
 8002044:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002048:	6453      	str	r3, [r2, #68]	@ 0x44
 800204a:	4b3d      	ldr	r3, [pc, #244]	@ (8002140 <HAL_SPI_MspInit+0x128>)
 800204c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800204e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002052:	61bb      	str	r3, [r7, #24]
 8002054:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002056:	2300      	movs	r3, #0
 8002058:	617b      	str	r3, [r7, #20]
 800205a:	4b39      	ldr	r3, [pc, #228]	@ (8002140 <HAL_SPI_MspInit+0x128>)
 800205c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800205e:	4a38      	ldr	r2, [pc, #224]	@ (8002140 <HAL_SPI_MspInit+0x128>)
 8002060:	f043 0301 	orr.w	r3, r3, #1
 8002064:	6313      	str	r3, [r2, #48]	@ 0x30
 8002066:	4b36      	ldr	r3, [pc, #216]	@ (8002140 <HAL_SPI_MspInit+0x128>)
 8002068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800206a:	f003 0301 	and.w	r3, r3, #1
 800206e:	617b      	str	r3, [r7, #20]
 8002070:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002072:	23a0      	movs	r3, #160	@ 0xa0
 8002074:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002076:	2302      	movs	r3, #2
 8002078:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207a:	2300      	movs	r3, #0
 800207c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800207e:	2303      	movs	r3, #3
 8002080:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002082:	2305      	movs	r3, #5
 8002084:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002086:	f107 031c 	add.w	r3, r7, #28
 800208a:	4619      	mov	r1, r3
 800208c:	482d      	ldr	r0, [pc, #180]	@ (8002144 <HAL_SPI_MspInit+0x12c>)
 800208e:	f001 f8bf 	bl	8003210 <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI3_MspInit 1 */

    /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002092:	e04f      	b.n	8002134 <HAL_SPI_MspInit+0x11c>
  else if(hspi->Instance==SPI3)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a2b      	ldr	r2, [pc, #172]	@ (8002148 <HAL_SPI_MspInit+0x130>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d14a      	bne.n	8002134 <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800209e:	2300      	movs	r3, #0
 80020a0:	613b      	str	r3, [r7, #16]
 80020a2:	4b27      	ldr	r3, [pc, #156]	@ (8002140 <HAL_SPI_MspInit+0x128>)
 80020a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020a6:	4a26      	ldr	r2, [pc, #152]	@ (8002140 <HAL_SPI_MspInit+0x128>)
 80020a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80020ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80020ae:	4b24      	ldr	r3, [pc, #144]	@ (8002140 <HAL_SPI_MspInit+0x128>)
 80020b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020b2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80020b6:	613b      	str	r3, [r7, #16]
 80020b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020ba:	2300      	movs	r3, #0
 80020bc:	60fb      	str	r3, [r7, #12]
 80020be:	4b20      	ldr	r3, [pc, #128]	@ (8002140 <HAL_SPI_MspInit+0x128>)
 80020c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020c2:	4a1f      	ldr	r2, [pc, #124]	@ (8002140 <HAL_SPI_MspInit+0x128>)
 80020c4:	f043 0304 	orr.w	r3, r3, #4
 80020c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80020ca:	4b1d      	ldr	r3, [pc, #116]	@ (8002140 <HAL_SPI_MspInit+0x128>)
 80020cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ce:	f003 0304 	and.w	r3, r3, #4
 80020d2:	60fb      	str	r3, [r7, #12]
 80020d4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020d6:	2300      	movs	r3, #0
 80020d8:	60bb      	str	r3, [r7, #8]
 80020da:	4b19      	ldr	r3, [pc, #100]	@ (8002140 <HAL_SPI_MspInit+0x128>)
 80020dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020de:	4a18      	ldr	r2, [pc, #96]	@ (8002140 <HAL_SPI_MspInit+0x128>)
 80020e0:	f043 0302 	orr.w	r3, r3, #2
 80020e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80020e6:	4b16      	ldr	r3, [pc, #88]	@ (8002140 <HAL_SPI_MspInit+0x128>)
 80020e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ea:	f003 0302 	and.w	r3, r3, #2
 80020ee:	60bb      	str	r3, [r7, #8]
 80020f0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80020f2:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80020f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020f8:	2302      	movs	r3, #2
 80020fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fc:	2300      	movs	r3, #0
 80020fe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002100:	2303      	movs	r3, #3
 8002102:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002104:	2306      	movs	r3, #6
 8002106:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002108:	f107 031c 	add.w	r3, r7, #28
 800210c:	4619      	mov	r1, r3
 800210e:	480f      	ldr	r0, [pc, #60]	@ (800214c <HAL_SPI_MspInit+0x134>)
 8002110:	f001 f87e 	bl	8003210 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002114:	2320      	movs	r3, #32
 8002116:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002118:	2302      	movs	r3, #2
 800211a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800211c:	2300      	movs	r3, #0
 800211e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002120:	2303      	movs	r3, #3
 8002122:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002124:	2306      	movs	r3, #6
 8002126:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002128:	f107 031c 	add.w	r3, r7, #28
 800212c:	4619      	mov	r1, r3
 800212e:	4808      	ldr	r0, [pc, #32]	@ (8002150 <HAL_SPI_MspInit+0x138>)
 8002130:	f001 f86e 	bl	8003210 <HAL_GPIO_Init>
}
 8002134:	bf00      	nop
 8002136:	3730      	adds	r7, #48	@ 0x30
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}
 800213c:	40013000 	.word	0x40013000
 8002140:	40023800 	.word	0x40023800
 8002144:	40020000 	.word	0x40020000
 8002148:	40003c00 	.word	0x40003c00
 800214c:	40020800 	.word	0x40020800
 8002150:	40020400 	.word	0x40020400

08002154 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b084      	sub	sp, #16
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002164:	d115      	bne.n	8002192 <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002166:	2300      	movs	r3, #0
 8002168:	60fb      	str	r3, [r7, #12]
 800216a:	4b0c      	ldr	r3, [pc, #48]	@ (800219c <HAL_TIM_Base_MspInit+0x48>)
 800216c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800216e:	4a0b      	ldr	r2, [pc, #44]	@ (800219c <HAL_TIM_Base_MspInit+0x48>)
 8002170:	f043 0301 	orr.w	r3, r3, #1
 8002174:	6413      	str	r3, [r2, #64]	@ 0x40
 8002176:	4b09      	ldr	r3, [pc, #36]	@ (800219c <HAL_TIM_Base_MspInit+0x48>)
 8002178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800217a:	f003 0301 	and.w	r3, r3, #1
 800217e:	60fb      	str	r3, [r7, #12]
 8002180:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002182:	2200      	movs	r2, #0
 8002184:	2100      	movs	r1, #0
 8002186:	201c      	movs	r0, #28
 8002188:	f001 f80b 	bl	80031a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800218c:	201c      	movs	r0, #28
 800218e:	f001 f824 	bl	80031da <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8002192:	bf00      	nop
 8002194:	3710      	adds	r7, #16
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	40023800 	.word	0x40023800

080021a0 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b085      	sub	sp, #20
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a0b      	ldr	r2, [pc, #44]	@ (80021dc <HAL_TIM_PWM_MspInit+0x3c>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d10d      	bne.n	80021ce <HAL_TIM_PWM_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM4_MspInit 0 */

    /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80021b2:	2300      	movs	r3, #0
 80021b4:	60fb      	str	r3, [r7, #12]
 80021b6:	4b0a      	ldr	r3, [pc, #40]	@ (80021e0 <HAL_TIM_PWM_MspInit+0x40>)
 80021b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ba:	4a09      	ldr	r2, [pc, #36]	@ (80021e0 <HAL_TIM_PWM_MspInit+0x40>)
 80021bc:	f043 0304 	orr.w	r3, r3, #4
 80021c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80021c2:	4b07      	ldr	r3, [pc, #28]	@ (80021e0 <HAL_TIM_PWM_MspInit+0x40>)
 80021c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021c6:	f003 0304 	and.w	r3, r3, #4
 80021ca:	60fb      	str	r3, [r7, #12]
 80021cc:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM4_MspInit 1 */

  }

}
 80021ce:	bf00      	nop
 80021d0:	3714      	adds	r7, #20
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	40000800 	.word	0x40000800
 80021e0:	40023800 	.word	0x40023800

080021e4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b088      	sub	sp, #32
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021ec:	f107 030c 	add.w	r3, r7, #12
 80021f0:	2200      	movs	r2, #0
 80021f2:	601a      	str	r2, [r3, #0]
 80021f4:	605a      	str	r2, [r3, #4]
 80021f6:	609a      	str	r2, [r3, #8]
 80021f8:	60da      	str	r2, [r3, #12]
 80021fa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a12      	ldr	r2, [pc, #72]	@ (800224c <HAL_TIM_MspPostInit+0x68>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d11d      	bne.n	8002242 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM4_MspPostInit 0 */

    /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002206:	2300      	movs	r3, #0
 8002208:	60bb      	str	r3, [r7, #8]
 800220a:	4b11      	ldr	r3, [pc, #68]	@ (8002250 <HAL_TIM_MspPostInit+0x6c>)
 800220c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800220e:	4a10      	ldr	r2, [pc, #64]	@ (8002250 <HAL_TIM_MspPostInit+0x6c>)
 8002210:	f043 0302 	orr.w	r3, r3, #2
 8002214:	6313      	str	r3, [r2, #48]	@ 0x30
 8002216:	4b0e      	ldr	r3, [pc, #56]	@ (8002250 <HAL_TIM_MspPostInit+0x6c>)
 8002218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800221a:	f003 0302 	and.w	r3, r3, #2
 800221e:	60bb      	str	r3, [r7, #8]
 8002220:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002222:	2340      	movs	r3, #64	@ 0x40
 8002224:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002226:	2302      	movs	r3, #2
 8002228:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800222a:	2300      	movs	r3, #0
 800222c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800222e:	2300      	movs	r3, #0
 8002230:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002232:	2302      	movs	r3, #2
 8002234:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002236:	f107 030c 	add.w	r3, r7, #12
 800223a:	4619      	mov	r1, r3
 800223c:	4805      	ldr	r0, [pc, #20]	@ (8002254 <HAL_TIM_MspPostInit+0x70>)
 800223e:	f000 ffe7 	bl	8003210 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspPostInit 1 */

    /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002242:	bf00      	nop
 8002244:	3720      	adds	r7, #32
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	40000800 	.word	0x40000800
 8002250:	40023800 	.word	0x40023800
 8002254:	40020400 	.word	0x40020400

08002258 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b08c      	sub	sp, #48	@ 0x30
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002260:	f107 031c 	add.w	r3, r7, #28
 8002264:	2200      	movs	r2, #0
 8002266:	601a      	str	r2, [r3, #0]
 8002268:	605a      	str	r2, [r3, #4]
 800226a:	609a      	str	r2, [r3, #8]
 800226c:	60da      	str	r2, [r3, #12]
 800226e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a42      	ldr	r2, [pc, #264]	@ (8002380 <HAL_UART_MspInit+0x128>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d14b      	bne.n	8002312 <HAL_UART_MspInit+0xba>
  {
    /* USER CODE BEGIN UART5_MspInit 0 */

    /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 800227a:	2300      	movs	r3, #0
 800227c:	61bb      	str	r3, [r7, #24]
 800227e:	4b41      	ldr	r3, [pc, #260]	@ (8002384 <HAL_UART_MspInit+0x12c>)
 8002280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002282:	4a40      	ldr	r2, [pc, #256]	@ (8002384 <HAL_UART_MspInit+0x12c>)
 8002284:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002288:	6413      	str	r3, [r2, #64]	@ 0x40
 800228a:	4b3e      	ldr	r3, [pc, #248]	@ (8002384 <HAL_UART_MspInit+0x12c>)
 800228c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800228e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002292:	61bb      	str	r3, [r7, #24]
 8002294:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002296:	2300      	movs	r3, #0
 8002298:	617b      	str	r3, [r7, #20]
 800229a:	4b3a      	ldr	r3, [pc, #232]	@ (8002384 <HAL_UART_MspInit+0x12c>)
 800229c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800229e:	4a39      	ldr	r2, [pc, #228]	@ (8002384 <HAL_UART_MspInit+0x12c>)
 80022a0:	f043 0304 	orr.w	r3, r3, #4
 80022a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80022a6:	4b37      	ldr	r3, [pc, #220]	@ (8002384 <HAL_UART_MspInit+0x12c>)
 80022a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022aa:	f003 0304 	and.w	r3, r3, #4
 80022ae:	617b      	str	r3, [r7, #20]
 80022b0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80022b2:	2300      	movs	r3, #0
 80022b4:	613b      	str	r3, [r7, #16]
 80022b6:	4b33      	ldr	r3, [pc, #204]	@ (8002384 <HAL_UART_MspInit+0x12c>)
 80022b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ba:	4a32      	ldr	r2, [pc, #200]	@ (8002384 <HAL_UART_MspInit+0x12c>)
 80022bc:	f043 0308 	orr.w	r3, r3, #8
 80022c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80022c2:	4b30      	ldr	r3, [pc, #192]	@ (8002384 <HAL_UART_MspInit+0x12c>)
 80022c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022c6:	f003 0308 	and.w	r3, r3, #8
 80022ca:	613b      	str	r3, [r7, #16]
 80022cc:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80022ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80022d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d4:	2302      	movs	r3, #2
 80022d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d8:	2300      	movs	r3, #0
 80022da:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022dc:	2303      	movs	r3, #3
 80022de:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80022e0:	2308      	movs	r3, #8
 80022e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022e4:	f107 031c 	add.w	r3, r7, #28
 80022e8:	4619      	mov	r1, r3
 80022ea:	4827      	ldr	r0, [pc, #156]	@ (8002388 <HAL_UART_MspInit+0x130>)
 80022ec:	f000 ff90 	bl	8003210 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80022f0:	2304      	movs	r3, #4
 80022f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022f4:	2302      	movs	r3, #2
 80022f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f8:	2300      	movs	r3, #0
 80022fa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022fc:	2303      	movs	r3, #3
 80022fe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002300:	2308      	movs	r3, #8
 8002302:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002304:	f107 031c 	add.w	r3, r7, #28
 8002308:	4619      	mov	r1, r3
 800230a:	4820      	ldr	r0, [pc, #128]	@ (800238c <HAL_UART_MspInit+0x134>)
 800230c:	f000 ff80 	bl	8003210 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART1_MspInit 1 */

    /* USER CODE END USART1_MspInit 1 */
  }

}
 8002310:	e031      	b.n	8002376 <HAL_UART_MspInit+0x11e>
  else if(huart->Instance==USART1)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a1e      	ldr	r2, [pc, #120]	@ (8002390 <HAL_UART_MspInit+0x138>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d12c      	bne.n	8002376 <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART1_CLK_ENABLE();
 800231c:	2300      	movs	r3, #0
 800231e:	60fb      	str	r3, [r7, #12]
 8002320:	4b18      	ldr	r3, [pc, #96]	@ (8002384 <HAL_UART_MspInit+0x12c>)
 8002322:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002324:	4a17      	ldr	r2, [pc, #92]	@ (8002384 <HAL_UART_MspInit+0x12c>)
 8002326:	f043 0310 	orr.w	r3, r3, #16
 800232a:	6453      	str	r3, [r2, #68]	@ 0x44
 800232c:	4b15      	ldr	r3, [pc, #84]	@ (8002384 <HAL_UART_MspInit+0x12c>)
 800232e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002330:	f003 0310 	and.w	r3, r3, #16
 8002334:	60fb      	str	r3, [r7, #12]
 8002336:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002338:	2300      	movs	r3, #0
 800233a:	60bb      	str	r3, [r7, #8]
 800233c:	4b11      	ldr	r3, [pc, #68]	@ (8002384 <HAL_UART_MspInit+0x12c>)
 800233e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002340:	4a10      	ldr	r2, [pc, #64]	@ (8002384 <HAL_UART_MspInit+0x12c>)
 8002342:	f043 0301 	orr.w	r3, r3, #1
 8002346:	6313      	str	r3, [r2, #48]	@ 0x30
 8002348:	4b0e      	ldr	r3, [pc, #56]	@ (8002384 <HAL_UART_MspInit+0x12c>)
 800234a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800234c:	f003 0301 	and.w	r3, r3, #1
 8002350:	60bb      	str	r3, [r7, #8]
 8002352:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002354:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002358:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800235a:	2302      	movs	r3, #2
 800235c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800235e:	2300      	movs	r3, #0
 8002360:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002362:	2303      	movs	r3, #3
 8002364:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002366:	2307      	movs	r3, #7
 8002368:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800236a:	f107 031c 	add.w	r3, r7, #28
 800236e:	4619      	mov	r1, r3
 8002370:	4808      	ldr	r0, [pc, #32]	@ (8002394 <HAL_UART_MspInit+0x13c>)
 8002372:	f000 ff4d 	bl	8003210 <HAL_GPIO_Init>
}
 8002376:	bf00      	nop
 8002378:	3730      	adds	r7, #48	@ 0x30
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	40005000 	.word	0x40005000
 8002384:	40023800 	.word	0x40023800
 8002388:	40020800 	.word	0x40020800
 800238c:	40020c00 	.word	0x40020c00
 8002390:	40011000 	.word	0x40011000
 8002394:	40020000 	.word	0x40020000

08002398 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800239c:	bf00      	nop
 800239e:	e7fd      	b.n	800239c <NMI_Handler+0x4>

080023a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023a0:	b480      	push	{r7}
 80023a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023a4:	bf00      	nop
 80023a6:	e7fd      	b.n	80023a4 <HardFault_Handler+0x4>

080023a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023a8:	b480      	push	{r7}
 80023aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023ac:	bf00      	nop
 80023ae:	e7fd      	b.n	80023ac <MemManage_Handler+0x4>

080023b0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023b4:	bf00      	nop
 80023b6:	e7fd      	b.n	80023b4 <BusFault_Handler+0x4>

080023b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023bc:	bf00      	nop
 80023be:	e7fd      	b.n	80023bc <UsageFault_Handler+0x4>

080023c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023c4:	bf00      	nop
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr

080023ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023ce:	b480      	push	{r7}
 80023d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023d2:	bf00      	nop
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr

080023dc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023dc:	b480      	push	{r7}
 80023de:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023e0:	bf00      	nop
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr

080023ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023ea:	b580      	push	{r7, lr}
 80023ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023ee:	f000 f9b9 	bl	8002764 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023f2:	bf00      	nop
 80023f4:	bd80      	pop	{r7, pc}
	...

080023f8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80023fc:	4802      	ldr	r0, [pc, #8]	@ (8002408 <TIM2_IRQHandler+0x10>)
 80023fe:	f002 f949 	bl	8004694 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002402:	bf00      	nop
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	20000534 	.word	0x20000534

0800240c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(S_LOW_Pin);
 8002410:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8002414:	f001 f8b2 	bl	800357c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(V_HIGH_Pin);
 8002418:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800241c:	f001 f8ae 	bl	800357c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(V_LOW_Pin);
 8002420:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002424:	f001 f8aa 	bl	800357c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(S_HIGH_Pin);
 8002428:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800242c:	f001 f8a6 	bl	800357c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002430:	bf00      	nop
 8002432:	bd80      	pop	{r7, pc}

08002434 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0
  return 1;
 8002438:	2301      	movs	r3, #1
}
 800243a:	4618      	mov	r0, r3
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr

08002444 <_kill>:

int _kill(int pid, int sig)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b082      	sub	sp, #8
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800244e:	f004 fc2d 	bl	8006cac <__errno>
 8002452:	4603      	mov	r3, r0
 8002454:	2216      	movs	r2, #22
 8002456:	601a      	str	r2, [r3, #0]
  return -1;
 8002458:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800245c:	4618      	mov	r0, r3
 800245e:	3708      	adds	r7, #8
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}

08002464 <_exit>:

void _exit (int status)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800246c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	f7ff ffe7 	bl	8002444 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002476:	bf00      	nop
 8002478:	e7fd      	b.n	8002476 <_exit+0x12>

0800247a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800247a:	b580      	push	{r7, lr}
 800247c:	b086      	sub	sp, #24
 800247e:	af00      	add	r7, sp, #0
 8002480:	60f8      	str	r0, [r7, #12]
 8002482:	60b9      	str	r1, [r7, #8]
 8002484:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002486:	2300      	movs	r3, #0
 8002488:	617b      	str	r3, [r7, #20]
 800248a:	e00a      	b.n	80024a2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800248c:	f3af 8000 	nop.w
 8002490:	4601      	mov	r1, r0
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	1c5a      	adds	r2, r3, #1
 8002496:	60ba      	str	r2, [r7, #8]
 8002498:	b2ca      	uxtb	r2, r1
 800249a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	3301      	adds	r3, #1
 80024a0:	617b      	str	r3, [r7, #20]
 80024a2:	697a      	ldr	r2, [r7, #20]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	429a      	cmp	r2, r3
 80024a8:	dbf0      	blt.n	800248c <_read+0x12>
  }

  return len;
 80024aa:	687b      	ldr	r3, [r7, #4]
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3718      	adds	r7, #24
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}

080024b4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b086      	sub	sp, #24
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	60f8      	str	r0, [r7, #12]
 80024bc:	60b9      	str	r1, [r7, #8]
 80024be:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024c0:	2300      	movs	r3, #0
 80024c2:	617b      	str	r3, [r7, #20]
 80024c4:	e009      	b.n	80024da <_write+0x26>
  {
    __io_putchar(*ptr++);
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	1c5a      	adds	r2, r3, #1
 80024ca:	60ba      	str	r2, [r7, #8]
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	4618      	mov	r0, r3
 80024d0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	3301      	adds	r3, #1
 80024d8:	617b      	str	r3, [r7, #20]
 80024da:	697a      	ldr	r2, [r7, #20]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	429a      	cmp	r2, r3
 80024e0:	dbf1      	blt.n	80024c6 <_write+0x12>
  }
  return len;
 80024e2:	687b      	ldr	r3, [r7, #4]
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3718      	adds	r7, #24
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}

080024ec <_close>:

int _close(int file)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80024f4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	370c      	adds	r7, #12
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr

08002504 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002514:	605a      	str	r2, [r3, #4]
  return 0;
 8002516:	2300      	movs	r3, #0
}
 8002518:	4618      	mov	r0, r3
 800251a:	370c      	adds	r7, #12
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr

08002524 <_isatty>:

int _isatty(int file)
{
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800252c:	2301      	movs	r3, #1
}
 800252e:	4618      	mov	r0, r3
 8002530:	370c      	adds	r7, #12
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr

0800253a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800253a:	b480      	push	{r7}
 800253c:	b085      	sub	sp, #20
 800253e:	af00      	add	r7, sp, #0
 8002540:	60f8      	str	r0, [r7, #12]
 8002542:	60b9      	str	r1, [r7, #8]
 8002544:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002546:	2300      	movs	r3, #0
}
 8002548:	4618      	mov	r0, r3
 800254a:	3714      	adds	r7, #20
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr

08002554 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b086      	sub	sp, #24
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800255c:	4a14      	ldr	r2, [pc, #80]	@ (80025b0 <_sbrk+0x5c>)
 800255e:	4b15      	ldr	r3, [pc, #84]	@ (80025b4 <_sbrk+0x60>)
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002568:	4b13      	ldr	r3, [pc, #76]	@ (80025b8 <_sbrk+0x64>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d102      	bne.n	8002576 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002570:	4b11      	ldr	r3, [pc, #68]	@ (80025b8 <_sbrk+0x64>)
 8002572:	4a12      	ldr	r2, [pc, #72]	@ (80025bc <_sbrk+0x68>)
 8002574:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002576:	4b10      	ldr	r3, [pc, #64]	@ (80025b8 <_sbrk+0x64>)
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4413      	add	r3, r2
 800257e:	693a      	ldr	r2, [r7, #16]
 8002580:	429a      	cmp	r2, r3
 8002582:	d207      	bcs.n	8002594 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002584:	f004 fb92 	bl	8006cac <__errno>
 8002588:	4603      	mov	r3, r0
 800258a:	220c      	movs	r2, #12
 800258c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800258e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002592:	e009      	b.n	80025a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002594:	4b08      	ldr	r3, [pc, #32]	@ (80025b8 <_sbrk+0x64>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800259a:	4b07      	ldr	r3, [pc, #28]	@ (80025b8 <_sbrk+0x64>)
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4413      	add	r3, r2
 80025a2:	4a05      	ldr	r2, [pc, #20]	@ (80025b8 <_sbrk+0x64>)
 80025a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025a6:	68fb      	ldr	r3, [r7, #12]
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3718      	adds	r7, #24
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	20020000 	.word	0x20020000
 80025b4:	00000400 	.word	0x00000400
 80025b8:	200006e8 	.word	0x200006e8
 80025bc:	20000840 	.word	0x20000840

080025c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025c0:	b480      	push	{r7}
 80025c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025c4:	4b06      	ldr	r3, [pc, #24]	@ (80025e0 <SystemInit+0x20>)
 80025c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025ca:	4a05      	ldr	r2, [pc, #20]	@ (80025e0 <SystemInit+0x20>)
 80025cc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80025d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025d4:	bf00      	nop
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr
 80025de:	bf00      	nop
 80025e0:	e000ed00 	.word	0xe000ed00

080025e4 <TLE9201_Init>:
#include "main.h"  // Make sure this has your TIM and SPI handles

extern TIM_HandleTypeDef TLE9201_PWM_TIM;

void TLE9201_Init(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	af00      	add	r7, sp, #0
    // Start PWM Timer
    HAL_TIM_PWM_Start(&TLE9201_PWM_TIM, TLE9201_PWM_CHANNEL);
 80025e8:	2100      	movs	r1, #0
 80025ea:	4808      	ldr	r0, [pc, #32]	@ (800260c <TLE9201_Init+0x28>)
 80025ec:	f001 ff8a 	bl	8004504 <HAL_TIM_PWM_Start>

    // Set DIS low to enable output
    HAL_GPIO_WritePin(TLE9201_DIS_GPIO_Port, TLE9201_DIS_Pin, GPIO_PIN_RESET);
 80025f0:	2200      	movs	r2, #0
 80025f2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80025f6:	4806      	ldr	r0, [pc, #24]	@ (8002610 <TLE9201_Init+0x2c>)
 80025f8:	f000 ffa6 	bl	8003548 <HAL_GPIO_WritePin>

    // Default direction
    HAL_GPIO_WritePin(TLE9201_DIR_GPIO_Port, TLE9201_DIR_Pin, GPIO_PIN_RESET);
 80025fc:	2200      	movs	r2, #0
 80025fe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002602:	4804      	ldr	r0, [pc, #16]	@ (8002614 <TLE9201_Init+0x30>)
 8002604:	f000 ffa0 	bl	8003548 <HAL_GPIO_WritePin>
}
 8002608:	bf00      	nop
 800260a:	bd80      	pop	{r7, pc}
 800260c:	2000057c 	.word	0x2000057c
 8002610:	40020800 	.word	0x40020800
 8002614:	40020400 	.word	0x40020400

08002618 <TLE9201_SetDirection>:
{
    HAL_GPIO_WritePin(TLE9201_DIS_GPIO_Port, TLE9201_DIS_Pin, GPIO_PIN_SET);
}

void TLE9201_SetDirection(uint8_t dir)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
 800261e:	4603      	mov	r3, r0
 8002620:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(TLE9201_DIR_GPIO_Port, TLE9201_DIR_Pin, dir ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8002622:	79fb      	ldrb	r3, [r7, #7]
 8002624:	2b00      	cmp	r3, #0
 8002626:	bf14      	ite	ne
 8002628:	2301      	movne	r3, #1
 800262a:	2300      	moveq	r3, #0
 800262c:	b2db      	uxtb	r3, r3
 800262e:	461a      	mov	r2, r3
 8002630:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002634:	4803      	ldr	r0, [pc, #12]	@ (8002644 <TLE9201_SetDirection+0x2c>)
 8002636:	f000 ff87 	bl	8003548 <HAL_GPIO_WritePin>
}
 800263a:	bf00      	nop
 800263c:	3708      	adds	r7, #8
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	40020400 	.word	0x40020400

08002648 <TLE9201_SetSpeed>:

void TLE9201_SetSpeed(uint8_t duty)
{
 8002648:	b480      	push	{r7}
 800264a:	b083      	sub	sp, #12
 800264c:	af00      	add	r7, sp, #0
 800264e:	4603      	mov	r3, r0
 8002650:	71fb      	strb	r3, [r7, #7]
    // Clamp to 0–255
    if (duty > 255) duty = 255;
    __HAL_TIM_SET_COMPARE(&TLE9201_PWM_TIM, TLE9201_PWM_CHANNEL, duty);
 8002652:	4b05      	ldr	r3, [pc, #20]	@ (8002668 <TLE9201_SetSpeed+0x20>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	79fa      	ldrb	r2, [r7, #7]
 8002658:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800265a:	bf00      	nop
 800265c:	370c      	adds	r7, #12
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr
 8002666:	bf00      	nop
 8002668:	2000057c 	.word	0x2000057c

0800266c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800266c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80026a4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002670:	f7ff ffa6 	bl	80025c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002674:	480c      	ldr	r0, [pc, #48]	@ (80026a8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002676:	490d      	ldr	r1, [pc, #52]	@ (80026ac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002678:	4a0d      	ldr	r2, [pc, #52]	@ (80026b0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800267a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800267c:	e002      	b.n	8002684 <LoopCopyDataInit>

0800267e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800267e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002680:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002682:	3304      	adds	r3, #4

08002684 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002684:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002686:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002688:	d3f9      	bcc.n	800267e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800268a:	4a0a      	ldr	r2, [pc, #40]	@ (80026b4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800268c:	4c0a      	ldr	r4, [pc, #40]	@ (80026b8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800268e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002690:	e001      	b.n	8002696 <LoopFillZerobss>

08002692 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002692:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002694:	3204      	adds	r2, #4

08002696 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002696:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002698:	d3fb      	bcc.n	8002692 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800269a:	f004 fb0d 	bl	8006cb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800269e:	f7fe fecb 	bl	8001438 <main>
  bx  lr    
 80026a2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80026a4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80026a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026ac:	20000390 	.word	0x20000390
  ldr r2, =_sidata
 80026b0:	0800b16c 	.word	0x0800b16c
  ldr r2, =_sbss
 80026b4:	20000390 	.word	0x20000390
  ldr r4, =_ebss
 80026b8:	2000083c 	.word	0x2000083c

080026bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026bc:	e7fe      	b.n	80026bc <ADC_IRQHandler>
	...

080026c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80026c4:	4b0e      	ldr	r3, [pc, #56]	@ (8002700 <HAL_Init+0x40>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a0d      	ldr	r2, [pc, #52]	@ (8002700 <HAL_Init+0x40>)
 80026ca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80026ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80026d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002700 <HAL_Init+0x40>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a0a      	ldr	r2, [pc, #40]	@ (8002700 <HAL_Init+0x40>)
 80026d6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80026da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026dc:	4b08      	ldr	r3, [pc, #32]	@ (8002700 <HAL_Init+0x40>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a07      	ldr	r2, [pc, #28]	@ (8002700 <HAL_Init+0x40>)
 80026e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026e8:	2003      	movs	r0, #3
 80026ea:	f000 fd4f 	bl	800318c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026ee:	200f      	movs	r0, #15
 80026f0:	f000 f808 	bl	8002704 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026f4:	f7ff fbc2 	bl	8001e7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026f8:	2300      	movs	r3, #0
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	40023c00 	.word	0x40023c00

08002704 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800270c:	4b12      	ldr	r3, [pc, #72]	@ (8002758 <HAL_InitTick+0x54>)
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	4b12      	ldr	r3, [pc, #72]	@ (800275c <HAL_InitTick+0x58>)
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	4619      	mov	r1, r3
 8002716:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800271a:	fbb3 f3f1 	udiv	r3, r3, r1
 800271e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002722:	4618      	mov	r0, r3
 8002724:	f000 fd67 	bl	80031f6 <HAL_SYSTICK_Config>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d001      	beq.n	8002732 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e00e      	b.n	8002750 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2b0f      	cmp	r3, #15
 8002736:	d80a      	bhi.n	800274e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002738:	2200      	movs	r2, #0
 800273a:	6879      	ldr	r1, [r7, #4]
 800273c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002740:	f000 fd2f 	bl	80031a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002744:	4a06      	ldr	r2, [pc, #24]	@ (8002760 <HAL_InitTick+0x5c>)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800274a:	2300      	movs	r3, #0
 800274c:	e000      	b.n	8002750 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
}
 8002750:	4618      	mov	r0, r3
 8002752:	3708      	adds	r7, #8
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}
 8002758:	200001bc 	.word	0x200001bc
 800275c:	200001c4 	.word	0x200001c4
 8002760:	200001c0 	.word	0x200001c0

08002764 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002764:	b480      	push	{r7}
 8002766:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002768:	4b06      	ldr	r3, [pc, #24]	@ (8002784 <HAL_IncTick+0x20>)
 800276a:	781b      	ldrb	r3, [r3, #0]
 800276c:	461a      	mov	r2, r3
 800276e:	4b06      	ldr	r3, [pc, #24]	@ (8002788 <HAL_IncTick+0x24>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4413      	add	r3, r2
 8002774:	4a04      	ldr	r2, [pc, #16]	@ (8002788 <HAL_IncTick+0x24>)
 8002776:	6013      	str	r3, [r2, #0]
}
 8002778:	bf00      	nop
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr
 8002782:	bf00      	nop
 8002784:	200001c4 	.word	0x200001c4
 8002788:	200006ec 	.word	0x200006ec

0800278c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800278c:	b480      	push	{r7}
 800278e:	af00      	add	r7, sp, #0
  return uwTick;
 8002790:	4b03      	ldr	r3, [pc, #12]	@ (80027a0 <HAL_GetTick+0x14>)
 8002792:	681b      	ldr	r3, [r3, #0]
}
 8002794:	4618      	mov	r0, r3
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr
 800279e:	bf00      	nop
 80027a0:	200006ec 	.word	0x200006ec

080027a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b084      	sub	sp, #16
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027ac:	f7ff ffee 	bl	800278c <HAL_GetTick>
 80027b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80027bc:	d005      	beq.n	80027ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027be:	4b0a      	ldr	r3, [pc, #40]	@ (80027e8 <HAL_Delay+0x44>)
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	461a      	mov	r2, r3
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	4413      	add	r3, r2
 80027c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80027ca:	bf00      	nop
 80027cc:	f7ff ffde 	bl	800278c <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	68fa      	ldr	r2, [r7, #12]
 80027d8:	429a      	cmp	r2, r3
 80027da:	d8f7      	bhi.n	80027cc <HAL_Delay+0x28>
  {
  }
}
 80027dc:	bf00      	nop
 80027de:	bf00      	nop
 80027e0:	3710      	adds	r7, #16
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	200001c4 	.word	0x200001c4

080027ec <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b084      	sub	sp, #16
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027f4:	2300      	movs	r3, #0
 80027f6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d101      	bne.n	8002802 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e033      	b.n	800286a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002806:	2b00      	cmp	r3, #0
 8002808:	d109      	bne.n	800281e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f7ff fb5e 	bl	8001ecc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2200      	movs	r2, #0
 800281a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002822:	f003 0310 	and.w	r3, r3, #16
 8002826:	2b00      	cmp	r3, #0
 8002828:	d118      	bne.n	800285c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800282e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002832:	f023 0302 	bic.w	r3, r3, #2
 8002836:	f043 0202 	orr.w	r2, r3, #2
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f000 fad8 	bl	8002df4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2200      	movs	r2, #0
 8002848:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800284e:	f023 0303 	bic.w	r3, r3, #3
 8002852:	f043 0201 	orr.w	r2, r3, #1
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	641a      	str	r2, [r3, #64]	@ 0x40
 800285a:	e001      	b.n	8002860 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2200      	movs	r2, #0
 8002864:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002868:	7bfb      	ldrb	r3, [r7, #15]
}
 800286a:	4618      	mov	r0, r3
 800286c:	3710      	adds	r7, #16
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
	...

08002874 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002874:	b480      	push	{r7}
 8002876:	b085      	sub	sp, #20
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800287c:	2300      	movs	r3, #0
 800287e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002886:	2b01      	cmp	r3, #1
 8002888:	d101      	bne.n	800288e <HAL_ADC_Start+0x1a>
 800288a:	2302      	movs	r3, #2
 800288c:	e0b2      	b.n	80029f4 <HAL_ADC_Start+0x180>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2201      	movs	r2, #1
 8002892:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	f003 0301 	and.w	r3, r3, #1
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d018      	beq.n	80028d6 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	689a      	ldr	r2, [r3, #8]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f042 0201 	orr.w	r2, r2, #1
 80028b2:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80028b4:	4b52      	ldr	r3, [pc, #328]	@ (8002a00 <HAL_ADC_Start+0x18c>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a52      	ldr	r2, [pc, #328]	@ (8002a04 <HAL_ADC_Start+0x190>)
 80028ba:	fba2 2303 	umull	r2, r3, r2, r3
 80028be:	0c9a      	lsrs	r2, r3, #18
 80028c0:	4613      	mov	r3, r2
 80028c2:	005b      	lsls	r3, r3, #1
 80028c4:	4413      	add	r3, r2
 80028c6:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80028c8:	e002      	b.n	80028d0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	3b01      	subs	r3, #1
 80028ce:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d1f9      	bne.n	80028ca <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	f003 0301 	and.w	r3, r3, #1
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d17a      	bne.n	80029da <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028e8:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80028ec:	f023 0301 	bic.w	r3, r3, #1
 80028f0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002902:	2b00      	cmp	r3, #0
 8002904:	d007      	beq.n	8002916 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800290a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800290e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800291a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800291e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002922:	d106      	bne.n	8002932 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002928:	f023 0206 	bic.w	r2, r3, #6
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	645a      	str	r2, [r3, #68]	@ 0x44
 8002930:	e002      	b.n	8002938 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2200      	movs	r2, #0
 8002936:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002940:	4b31      	ldr	r3, [pc, #196]	@ (8002a08 <HAL_ADC_Start+0x194>)
 8002942:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800294c:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	f003 031f 	and.w	r3, r3, #31
 8002956:	2b00      	cmp	r3, #0
 8002958:	d12a      	bne.n	80029b0 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a2b      	ldr	r2, [pc, #172]	@ (8002a0c <HAL_ADC_Start+0x198>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d015      	beq.n	8002990 <HAL_ADC_Start+0x11c>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a29      	ldr	r2, [pc, #164]	@ (8002a10 <HAL_ADC_Start+0x19c>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d105      	bne.n	800297a <HAL_ADC_Start+0x106>
 800296e:	4b26      	ldr	r3, [pc, #152]	@ (8002a08 <HAL_ADC_Start+0x194>)
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	f003 031f 	and.w	r3, r3, #31
 8002976:	2b00      	cmp	r3, #0
 8002978:	d00a      	beq.n	8002990 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a25      	ldr	r2, [pc, #148]	@ (8002a14 <HAL_ADC_Start+0x1a0>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d136      	bne.n	80029f2 <HAL_ADC_Start+0x17e>
 8002984:	4b20      	ldr	r3, [pc, #128]	@ (8002a08 <HAL_ADC_Start+0x194>)
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	f003 0310 	and.w	r3, r3, #16
 800298c:	2b00      	cmp	r3, #0
 800298e:	d130      	bne.n	80029f2 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d129      	bne.n	80029f2 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	689a      	ldr	r2, [r3, #8]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80029ac:	609a      	str	r2, [r3, #8]
 80029ae:	e020      	b.n	80029f2 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a15      	ldr	r2, [pc, #84]	@ (8002a0c <HAL_ADC_Start+0x198>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d11b      	bne.n	80029f2 <HAL_ADC_Start+0x17e>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d114      	bne.n	80029f2 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	689a      	ldr	r2, [r3, #8]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80029d6:	609a      	str	r2, [r3, #8]
 80029d8:	e00b      	b.n	80029f2 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029de:	f043 0210 	orr.w	r2, r3, #16
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029ea:	f043 0201 	orr.w	r2, r3, #1
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80029f2:	2300      	movs	r3, #0
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3714      	adds	r7, #20
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr
 8002a00:	200001bc 	.word	0x200001bc
 8002a04:	431bde83 	.word	0x431bde83
 8002a08:	40012300 	.word	0x40012300
 8002a0c:	40012000 	.word	0x40012000
 8002a10:	40012100 	.word	0x40012100
 8002a14:	40012200 	.word	0x40012200

08002a18 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d101      	bne.n	8002a2e <HAL_ADC_Stop+0x16>
 8002a2a:	2302      	movs	r3, #2
 8002a2c:	e021      	b.n	8002a72 <HAL_ADC_Stop+0x5a>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2201      	movs	r2, #1
 8002a32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	689a      	ldr	r2, [r3, #8]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f022 0201 	bic.w	r2, r2, #1
 8002a44:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	f003 0301 	and.w	r3, r3, #1
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d109      	bne.n	8002a68 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a58:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002a5c:	f023 0301 	bic.w	r3, r3, #1
 8002a60:	f043 0201 	orr.w	r2, r3, #1
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002a70:	2300      	movs	r3, #0
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	370c      	adds	r7, #12
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr

08002a7e <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002a7e:	b580      	push	{r7, lr}
 8002a80:	b084      	sub	sp, #16
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	6078      	str	r0, [r7, #4]
 8002a86:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a9a:	d113      	bne.n	8002ac4 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002aa6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002aaa:	d10b      	bne.n	8002ac4 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ab0:	f043 0220 	orr.w	r2, r3, #32
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2200      	movs	r2, #0
 8002abc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e063      	b.n	8002b8c <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ac4:	f7ff fe62 	bl	800278c <HAL_GetTick>
 8002ac8:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002aca:	e021      	b.n	8002b10 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002ad2:	d01d      	beq.n	8002b10 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d007      	beq.n	8002aea <HAL_ADC_PollForConversion+0x6c>
 8002ada:	f7ff fe57 	bl	800278c <HAL_GetTick>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	1ad3      	subs	r3, r2, r3
 8002ae4:	683a      	ldr	r2, [r7, #0]
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d212      	bcs.n	8002b10 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 0302 	and.w	r3, r3, #2
 8002af4:	2b02      	cmp	r3, #2
 8002af6:	d00b      	beq.n	8002b10 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002afc:	f043 0204 	orr.w	r2, r3, #4
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2200      	movs	r2, #0
 8002b08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8002b0c:	2303      	movs	r3, #3
 8002b0e:	e03d      	b.n	8002b8c <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0302 	and.w	r3, r3, #2
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d1d6      	bne.n	8002acc <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f06f 0212 	mvn.w	r2, #18
 8002b26:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b2c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d123      	bne.n	8002b8a <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d11f      	bne.n	8002b8a <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b50:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d006      	beq.n	8002b66 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d111      	bne.n	8002b8a <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b6a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b76:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d105      	bne.n	8002b8a <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b82:	f043 0201 	orr.w	r2, r3, #1
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8002b8a:	2300      	movs	r3, #0
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3710      	adds	r7, #16
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}

08002b94 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	370c      	adds	r7, #12
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr
	...

08002bb0 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b085      	sub	sp, #20
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d101      	bne.n	8002bcc <HAL_ADC_ConfigChannel+0x1c>
 8002bc8:	2302      	movs	r3, #2
 8002bca:	e105      	b.n	8002dd8 <HAL_ADC_ConfigChannel+0x228>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	2b09      	cmp	r3, #9
 8002bda:	d925      	bls.n	8002c28 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	68d9      	ldr	r1, [r3, #12]
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	b29b      	uxth	r3, r3
 8002be8:	461a      	mov	r2, r3
 8002bea:	4613      	mov	r3, r2
 8002bec:	005b      	lsls	r3, r3, #1
 8002bee:	4413      	add	r3, r2
 8002bf0:	3b1e      	subs	r3, #30
 8002bf2:	2207      	movs	r2, #7
 8002bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf8:	43da      	mvns	r2, r3
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	400a      	ands	r2, r1
 8002c00:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	68d9      	ldr	r1, [r3, #12]
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	689a      	ldr	r2, [r3, #8]
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	4618      	mov	r0, r3
 8002c14:	4603      	mov	r3, r0
 8002c16:	005b      	lsls	r3, r3, #1
 8002c18:	4403      	add	r3, r0
 8002c1a:	3b1e      	subs	r3, #30
 8002c1c:	409a      	lsls	r2, r3
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	430a      	orrs	r2, r1
 8002c24:	60da      	str	r2, [r3, #12]
 8002c26:	e022      	b.n	8002c6e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	6919      	ldr	r1, [r3, #16]
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	b29b      	uxth	r3, r3
 8002c34:	461a      	mov	r2, r3
 8002c36:	4613      	mov	r3, r2
 8002c38:	005b      	lsls	r3, r3, #1
 8002c3a:	4413      	add	r3, r2
 8002c3c:	2207      	movs	r2, #7
 8002c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c42:	43da      	mvns	r2, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	400a      	ands	r2, r1
 8002c4a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	6919      	ldr	r1, [r3, #16]
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	689a      	ldr	r2, [r3, #8]
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	b29b      	uxth	r3, r3
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	4603      	mov	r3, r0
 8002c60:	005b      	lsls	r3, r3, #1
 8002c62:	4403      	add	r3, r0
 8002c64:	409a      	lsls	r2, r3
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	430a      	orrs	r2, r1
 8002c6c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	2b06      	cmp	r3, #6
 8002c74:	d824      	bhi.n	8002cc0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	685a      	ldr	r2, [r3, #4]
 8002c80:	4613      	mov	r3, r2
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	4413      	add	r3, r2
 8002c86:	3b05      	subs	r3, #5
 8002c88:	221f      	movs	r2, #31
 8002c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8e:	43da      	mvns	r2, r3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	400a      	ands	r2, r1
 8002c96:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	b29b      	uxth	r3, r3
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	685a      	ldr	r2, [r3, #4]
 8002caa:	4613      	mov	r3, r2
 8002cac:	009b      	lsls	r3, r3, #2
 8002cae:	4413      	add	r3, r2
 8002cb0:	3b05      	subs	r3, #5
 8002cb2:	fa00 f203 	lsl.w	r2, r0, r3
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	430a      	orrs	r2, r1
 8002cbc:	635a      	str	r2, [r3, #52]	@ 0x34
 8002cbe:	e04c      	b.n	8002d5a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	2b0c      	cmp	r3, #12
 8002cc6:	d824      	bhi.n	8002d12 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	685a      	ldr	r2, [r3, #4]
 8002cd2:	4613      	mov	r3, r2
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	4413      	add	r3, r2
 8002cd8:	3b23      	subs	r3, #35	@ 0x23
 8002cda:	221f      	movs	r2, #31
 8002cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce0:	43da      	mvns	r2, r3
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	400a      	ands	r2, r1
 8002ce8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	b29b      	uxth	r3, r3
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	685a      	ldr	r2, [r3, #4]
 8002cfc:	4613      	mov	r3, r2
 8002cfe:	009b      	lsls	r3, r3, #2
 8002d00:	4413      	add	r3, r2
 8002d02:	3b23      	subs	r3, #35	@ 0x23
 8002d04:	fa00 f203 	lsl.w	r2, r0, r3
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	430a      	orrs	r2, r1
 8002d0e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002d10:	e023      	b.n	8002d5a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	685a      	ldr	r2, [r3, #4]
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	4413      	add	r3, r2
 8002d22:	3b41      	subs	r3, #65	@ 0x41
 8002d24:	221f      	movs	r2, #31
 8002d26:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2a:	43da      	mvns	r2, r3
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	400a      	ands	r2, r1
 8002d32:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	4618      	mov	r0, r3
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	685a      	ldr	r2, [r3, #4]
 8002d46:	4613      	mov	r3, r2
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	4413      	add	r3, r2
 8002d4c:	3b41      	subs	r3, #65	@ 0x41
 8002d4e:	fa00 f203 	lsl.w	r2, r0, r3
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	430a      	orrs	r2, r1
 8002d58:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d5a:	4b22      	ldr	r3, [pc, #136]	@ (8002de4 <HAL_ADC_ConfigChannel+0x234>)
 8002d5c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a21      	ldr	r2, [pc, #132]	@ (8002de8 <HAL_ADC_ConfigChannel+0x238>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d109      	bne.n	8002d7c <HAL_ADC_ConfigChannel+0x1cc>
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	2b12      	cmp	r3, #18
 8002d6e:	d105      	bne.n	8002d7c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a19      	ldr	r2, [pc, #100]	@ (8002de8 <HAL_ADC_ConfigChannel+0x238>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d123      	bne.n	8002dce <HAL_ADC_ConfigChannel+0x21e>
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	2b10      	cmp	r3, #16
 8002d8c:	d003      	beq.n	8002d96 <HAL_ADC_ConfigChannel+0x1e6>
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	2b11      	cmp	r3, #17
 8002d94:	d11b      	bne.n	8002dce <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	2b10      	cmp	r3, #16
 8002da8:	d111      	bne.n	8002dce <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002daa:	4b10      	ldr	r3, [pc, #64]	@ (8002dec <HAL_ADC_ConfigChannel+0x23c>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a10      	ldr	r2, [pc, #64]	@ (8002df0 <HAL_ADC_ConfigChannel+0x240>)
 8002db0:	fba2 2303 	umull	r2, r3, r2, r3
 8002db4:	0c9a      	lsrs	r2, r3, #18
 8002db6:	4613      	mov	r3, r2
 8002db8:	009b      	lsls	r3, r3, #2
 8002dba:	4413      	add	r3, r2
 8002dbc:	005b      	lsls	r3, r3, #1
 8002dbe:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002dc0:	e002      	b.n	8002dc8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	3b01      	subs	r3, #1
 8002dc6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d1f9      	bne.n	8002dc2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002dd6:	2300      	movs	r3, #0
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3714      	adds	r7, #20
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr
 8002de4:	40012300 	.word	0x40012300
 8002de8:	40012000 	.word	0x40012000
 8002dec:	200001bc 	.word	0x200001bc
 8002df0:	431bde83 	.word	0x431bde83

08002df4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b085      	sub	sp, #20
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002dfc:	4b79      	ldr	r3, [pc, #484]	@ (8002fe4 <ADC_Init+0x1f0>)
 8002dfe:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	685a      	ldr	r2, [r3, #4]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	431a      	orrs	r2, r3
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	685a      	ldr	r2, [r3, #4]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002e28:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	6859      	ldr	r1, [r3, #4]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	691b      	ldr	r3, [r3, #16]
 8002e34:	021a      	lsls	r2, r3, #8
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	430a      	orrs	r2, r1
 8002e3c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	685a      	ldr	r2, [r3, #4]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002e4c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	6859      	ldr	r1, [r3, #4]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	689a      	ldr	r2, [r3, #8]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	430a      	orrs	r2, r1
 8002e5e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	689a      	ldr	r2, [r3, #8]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e6e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	6899      	ldr	r1, [r3, #8]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	68da      	ldr	r2, [r3, #12]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	430a      	orrs	r2, r1
 8002e80:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e86:	4a58      	ldr	r2, [pc, #352]	@ (8002fe8 <ADC_Init+0x1f4>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d022      	beq.n	8002ed2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	689a      	ldr	r2, [r3, #8]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002e9a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	6899      	ldr	r1, [r3, #8]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	430a      	orrs	r2, r1
 8002eac:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	689a      	ldr	r2, [r3, #8]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002ebc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	6899      	ldr	r1, [r3, #8]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	430a      	orrs	r2, r1
 8002ece:	609a      	str	r2, [r3, #8]
 8002ed0:	e00f      	b.n	8002ef2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	689a      	ldr	r2, [r3, #8]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002ee0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	689a      	ldr	r2, [r3, #8]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002ef0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	689a      	ldr	r2, [r3, #8]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f022 0202 	bic.w	r2, r2, #2
 8002f00:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	6899      	ldr	r1, [r3, #8]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	7e1b      	ldrb	r3, [r3, #24]
 8002f0c:	005a      	lsls	r2, r3, #1
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	430a      	orrs	r2, r1
 8002f14:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d01b      	beq.n	8002f58 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	685a      	ldr	r2, [r3, #4]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002f2e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	685a      	ldr	r2, [r3, #4]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002f3e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	6859      	ldr	r1, [r3, #4]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f4a:	3b01      	subs	r3, #1
 8002f4c:	035a      	lsls	r2, r3, #13
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	430a      	orrs	r2, r1
 8002f54:	605a      	str	r2, [r3, #4]
 8002f56:	e007      	b.n	8002f68 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	685a      	ldr	r2, [r3, #4]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f66:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002f76:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	69db      	ldr	r3, [r3, #28]
 8002f82:	3b01      	subs	r3, #1
 8002f84:	051a      	lsls	r2, r3, #20
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	430a      	orrs	r2, r1
 8002f8c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	689a      	ldr	r2, [r3, #8]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002f9c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	6899      	ldr	r1, [r3, #8]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002faa:	025a      	lsls	r2, r3, #9
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	430a      	orrs	r2, r1
 8002fb2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	689a      	ldr	r2, [r3, #8]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002fc2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	6899      	ldr	r1, [r3, #8]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	695b      	ldr	r3, [r3, #20]
 8002fce:	029a      	lsls	r2, r3, #10
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	430a      	orrs	r2, r1
 8002fd6:	609a      	str	r2, [r3, #8]
}
 8002fd8:	bf00      	nop
 8002fda:	3714      	adds	r7, #20
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr
 8002fe4:	40012300 	.word	0x40012300
 8002fe8:	0f000001 	.word	0x0f000001

08002fec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b085      	sub	sp, #20
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	f003 0307 	and.w	r3, r3, #7
 8002ffa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ffc:	4b0c      	ldr	r3, [pc, #48]	@ (8003030 <__NVIC_SetPriorityGrouping+0x44>)
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003002:	68ba      	ldr	r2, [r7, #8]
 8003004:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003008:	4013      	ands	r3, r2
 800300a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003014:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003018:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800301c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800301e:	4a04      	ldr	r2, [pc, #16]	@ (8003030 <__NVIC_SetPriorityGrouping+0x44>)
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	60d3      	str	r3, [r2, #12]
}
 8003024:	bf00      	nop
 8003026:	3714      	adds	r7, #20
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr
 8003030:	e000ed00 	.word	0xe000ed00

08003034 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003034:	b480      	push	{r7}
 8003036:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003038:	4b04      	ldr	r3, [pc, #16]	@ (800304c <__NVIC_GetPriorityGrouping+0x18>)
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	0a1b      	lsrs	r3, r3, #8
 800303e:	f003 0307 	and.w	r3, r3, #7
}
 8003042:	4618      	mov	r0, r3
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr
 800304c:	e000ed00 	.word	0xe000ed00

08003050 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003050:	b480      	push	{r7}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
 8003056:	4603      	mov	r3, r0
 8003058:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800305a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800305e:	2b00      	cmp	r3, #0
 8003060:	db0b      	blt.n	800307a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003062:	79fb      	ldrb	r3, [r7, #7]
 8003064:	f003 021f 	and.w	r2, r3, #31
 8003068:	4907      	ldr	r1, [pc, #28]	@ (8003088 <__NVIC_EnableIRQ+0x38>)
 800306a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800306e:	095b      	lsrs	r3, r3, #5
 8003070:	2001      	movs	r0, #1
 8003072:	fa00 f202 	lsl.w	r2, r0, r2
 8003076:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800307a:	bf00      	nop
 800307c:	370c      	adds	r7, #12
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr
 8003086:	bf00      	nop
 8003088:	e000e100 	.word	0xe000e100

0800308c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800308c:	b480      	push	{r7}
 800308e:	b083      	sub	sp, #12
 8003090:	af00      	add	r7, sp, #0
 8003092:	4603      	mov	r3, r0
 8003094:	6039      	str	r1, [r7, #0]
 8003096:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003098:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800309c:	2b00      	cmp	r3, #0
 800309e:	db0a      	blt.n	80030b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	b2da      	uxtb	r2, r3
 80030a4:	490c      	ldr	r1, [pc, #48]	@ (80030d8 <__NVIC_SetPriority+0x4c>)
 80030a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030aa:	0112      	lsls	r2, r2, #4
 80030ac:	b2d2      	uxtb	r2, r2
 80030ae:	440b      	add	r3, r1
 80030b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030b4:	e00a      	b.n	80030cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	b2da      	uxtb	r2, r3
 80030ba:	4908      	ldr	r1, [pc, #32]	@ (80030dc <__NVIC_SetPriority+0x50>)
 80030bc:	79fb      	ldrb	r3, [r7, #7]
 80030be:	f003 030f 	and.w	r3, r3, #15
 80030c2:	3b04      	subs	r3, #4
 80030c4:	0112      	lsls	r2, r2, #4
 80030c6:	b2d2      	uxtb	r2, r2
 80030c8:	440b      	add	r3, r1
 80030ca:	761a      	strb	r2, [r3, #24]
}
 80030cc:	bf00      	nop
 80030ce:	370c      	adds	r7, #12
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr
 80030d8:	e000e100 	.word	0xe000e100
 80030dc:	e000ed00 	.word	0xe000ed00

080030e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b089      	sub	sp, #36	@ 0x24
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	60f8      	str	r0, [r7, #12]
 80030e8:	60b9      	str	r1, [r7, #8]
 80030ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	f003 0307 	and.w	r3, r3, #7
 80030f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030f4:	69fb      	ldr	r3, [r7, #28]
 80030f6:	f1c3 0307 	rsb	r3, r3, #7
 80030fa:	2b04      	cmp	r3, #4
 80030fc:	bf28      	it	cs
 80030fe:	2304      	movcs	r3, #4
 8003100:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	3304      	adds	r3, #4
 8003106:	2b06      	cmp	r3, #6
 8003108:	d902      	bls.n	8003110 <NVIC_EncodePriority+0x30>
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	3b03      	subs	r3, #3
 800310e:	e000      	b.n	8003112 <NVIC_EncodePriority+0x32>
 8003110:	2300      	movs	r3, #0
 8003112:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003114:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003118:	69bb      	ldr	r3, [r7, #24]
 800311a:	fa02 f303 	lsl.w	r3, r2, r3
 800311e:	43da      	mvns	r2, r3
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	401a      	ands	r2, r3
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003128:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	fa01 f303 	lsl.w	r3, r1, r3
 8003132:	43d9      	mvns	r1, r3
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003138:	4313      	orrs	r3, r2
         );
}
 800313a:	4618      	mov	r0, r3
 800313c:	3724      	adds	r7, #36	@ 0x24
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr
	...

08003148 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b082      	sub	sp, #8
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	3b01      	subs	r3, #1
 8003154:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003158:	d301      	bcc.n	800315e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800315a:	2301      	movs	r3, #1
 800315c:	e00f      	b.n	800317e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800315e:	4a0a      	ldr	r2, [pc, #40]	@ (8003188 <SysTick_Config+0x40>)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	3b01      	subs	r3, #1
 8003164:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003166:	210f      	movs	r1, #15
 8003168:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800316c:	f7ff ff8e 	bl	800308c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003170:	4b05      	ldr	r3, [pc, #20]	@ (8003188 <SysTick_Config+0x40>)
 8003172:	2200      	movs	r2, #0
 8003174:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003176:	4b04      	ldr	r3, [pc, #16]	@ (8003188 <SysTick_Config+0x40>)
 8003178:	2207      	movs	r2, #7
 800317a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800317c:	2300      	movs	r3, #0
}
 800317e:	4618      	mov	r0, r3
 8003180:	3708      	adds	r7, #8
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}
 8003186:	bf00      	nop
 8003188:	e000e010 	.word	0xe000e010

0800318c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b082      	sub	sp, #8
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f7ff ff29 	bl	8002fec <__NVIC_SetPriorityGrouping>
}
 800319a:	bf00      	nop
 800319c:	3708      	adds	r7, #8
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}

080031a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80031a2:	b580      	push	{r7, lr}
 80031a4:	b086      	sub	sp, #24
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	4603      	mov	r3, r0
 80031aa:	60b9      	str	r1, [r7, #8]
 80031ac:	607a      	str	r2, [r7, #4]
 80031ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80031b0:	2300      	movs	r3, #0
 80031b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031b4:	f7ff ff3e 	bl	8003034 <__NVIC_GetPriorityGrouping>
 80031b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	68b9      	ldr	r1, [r7, #8]
 80031be:	6978      	ldr	r0, [r7, #20]
 80031c0:	f7ff ff8e 	bl	80030e0 <NVIC_EncodePriority>
 80031c4:	4602      	mov	r2, r0
 80031c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031ca:	4611      	mov	r1, r2
 80031cc:	4618      	mov	r0, r3
 80031ce:	f7ff ff5d 	bl	800308c <__NVIC_SetPriority>
}
 80031d2:	bf00      	nop
 80031d4:	3718      	adds	r7, #24
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}

080031da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031da:	b580      	push	{r7, lr}
 80031dc:	b082      	sub	sp, #8
 80031de:	af00      	add	r7, sp, #0
 80031e0:	4603      	mov	r3, r0
 80031e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031e8:	4618      	mov	r0, r3
 80031ea:	f7ff ff31 	bl	8003050 <__NVIC_EnableIRQ>
}
 80031ee:	bf00      	nop
 80031f0:	3708      	adds	r7, #8
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}

080031f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031f6:	b580      	push	{r7, lr}
 80031f8:	b082      	sub	sp, #8
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f7ff ffa2 	bl	8003148 <SysTick_Config>
 8003204:	4603      	mov	r3, r0
}
 8003206:	4618      	mov	r0, r3
 8003208:	3708      	adds	r7, #8
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
	...

08003210 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003210:	b480      	push	{r7}
 8003212:	b089      	sub	sp, #36	@ 0x24
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800321a:	2300      	movs	r3, #0
 800321c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800321e:	2300      	movs	r3, #0
 8003220:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003222:	2300      	movs	r3, #0
 8003224:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003226:	2300      	movs	r3, #0
 8003228:	61fb      	str	r3, [r7, #28]
 800322a:	e16b      	b.n	8003504 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800322c:	2201      	movs	r2, #1
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	fa02 f303 	lsl.w	r3, r2, r3
 8003234:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	697a      	ldr	r2, [r7, #20]
 800323c:	4013      	ands	r3, r2
 800323e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003240:	693a      	ldr	r2, [r7, #16]
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	429a      	cmp	r2, r3
 8003246:	f040 815a 	bne.w	80034fe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	f003 0303 	and.w	r3, r3, #3
 8003252:	2b01      	cmp	r3, #1
 8003254:	d005      	beq.n	8003262 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800325e:	2b02      	cmp	r3, #2
 8003260:	d130      	bne.n	80032c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003268:	69fb      	ldr	r3, [r7, #28]
 800326a:	005b      	lsls	r3, r3, #1
 800326c:	2203      	movs	r2, #3
 800326e:	fa02 f303 	lsl.w	r3, r2, r3
 8003272:	43db      	mvns	r3, r3
 8003274:	69ba      	ldr	r2, [r7, #24]
 8003276:	4013      	ands	r3, r2
 8003278:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	68da      	ldr	r2, [r3, #12]
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	005b      	lsls	r3, r3, #1
 8003282:	fa02 f303 	lsl.w	r3, r2, r3
 8003286:	69ba      	ldr	r2, [r7, #24]
 8003288:	4313      	orrs	r3, r2
 800328a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	69ba      	ldr	r2, [r7, #24]
 8003290:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003298:	2201      	movs	r2, #1
 800329a:	69fb      	ldr	r3, [r7, #28]
 800329c:	fa02 f303 	lsl.w	r3, r2, r3
 80032a0:	43db      	mvns	r3, r3
 80032a2:	69ba      	ldr	r2, [r7, #24]
 80032a4:	4013      	ands	r3, r2
 80032a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	091b      	lsrs	r3, r3, #4
 80032ae:	f003 0201 	and.w	r2, r3, #1
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	fa02 f303 	lsl.w	r3, r2, r3
 80032b8:	69ba      	ldr	r2, [r7, #24]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	69ba      	ldr	r2, [r7, #24]
 80032c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	f003 0303 	and.w	r3, r3, #3
 80032cc:	2b03      	cmp	r3, #3
 80032ce:	d017      	beq.n	8003300 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	005b      	lsls	r3, r3, #1
 80032da:	2203      	movs	r2, #3
 80032dc:	fa02 f303 	lsl.w	r3, r2, r3
 80032e0:	43db      	mvns	r3, r3
 80032e2:	69ba      	ldr	r2, [r7, #24]
 80032e4:	4013      	ands	r3, r2
 80032e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	689a      	ldr	r2, [r3, #8]
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	005b      	lsls	r3, r3, #1
 80032f0:	fa02 f303 	lsl.w	r3, r2, r3
 80032f4:	69ba      	ldr	r2, [r7, #24]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	69ba      	ldr	r2, [r7, #24]
 80032fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	f003 0303 	and.w	r3, r3, #3
 8003308:	2b02      	cmp	r3, #2
 800330a:	d123      	bne.n	8003354 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800330c:	69fb      	ldr	r3, [r7, #28]
 800330e:	08da      	lsrs	r2, r3, #3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	3208      	adds	r2, #8
 8003314:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003318:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	f003 0307 	and.w	r3, r3, #7
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	220f      	movs	r2, #15
 8003324:	fa02 f303 	lsl.w	r3, r2, r3
 8003328:	43db      	mvns	r3, r3
 800332a:	69ba      	ldr	r2, [r7, #24]
 800332c:	4013      	ands	r3, r2
 800332e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	691a      	ldr	r2, [r3, #16]
 8003334:	69fb      	ldr	r3, [r7, #28]
 8003336:	f003 0307 	and.w	r3, r3, #7
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	fa02 f303 	lsl.w	r3, r2, r3
 8003340:	69ba      	ldr	r2, [r7, #24]
 8003342:	4313      	orrs	r3, r2
 8003344:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003346:	69fb      	ldr	r3, [r7, #28]
 8003348:	08da      	lsrs	r2, r3, #3
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	3208      	adds	r2, #8
 800334e:	69b9      	ldr	r1, [r7, #24]
 8003350:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800335a:	69fb      	ldr	r3, [r7, #28]
 800335c:	005b      	lsls	r3, r3, #1
 800335e:	2203      	movs	r2, #3
 8003360:	fa02 f303 	lsl.w	r3, r2, r3
 8003364:	43db      	mvns	r3, r3
 8003366:	69ba      	ldr	r2, [r7, #24]
 8003368:	4013      	ands	r3, r2
 800336a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	f003 0203 	and.w	r2, r3, #3
 8003374:	69fb      	ldr	r3, [r7, #28]
 8003376:	005b      	lsls	r3, r3, #1
 8003378:	fa02 f303 	lsl.w	r3, r2, r3
 800337c:	69ba      	ldr	r2, [r7, #24]
 800337e:	4313      	orrs	r3, r2
 8003380:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	69ba      	ldr	r2, [r7, #24]
 8003386:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003390:	2b00      	cmp	r3, #0
 8003392:	f000 80b4 	beq.w	80034fe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003396:	2300      	movs	r3, #0
 8003398:	60fb      	str	r3, [r7, #12]
 800339a:	4b60      	ldr	r3, [pc, #384]	@ (800351c <HAL_GPIO_Init+0x30c>)
 800339c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800339e:	4a5f      	ldr	r2, [pc, #380]	@ (800351c <HAL_GPIO_Init+0x30c>)
 80033a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80033a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80033a6:	4b5d      	ldr	r3, [pc, #372]	@ (800351c <HAL_GPIO_Init+0x30c>)
 80033a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80033ae:	60fb      	str	r3, [r7, #12]
 80033b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80033b2:	4a5b      	ldr	r2, [pc, #364]	@ (8003520 <HAL_GPIO_Init+0x310>)
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	089b      	lsrs	r3, r3, #2
 80033b8:	3302      	adds	r3, #2
 80033ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80033c0:	69fb      	ldr	r3, [r7, #28]
 80033c2:	f003 0303 	and.w	r3, r3, #3
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	220f      	movs	r2, #15
 80033ca:	fa02 f303 	lsl.w	r3, r2, r3
 80033ce:	43db      	mvns	r3, r3
 80033d0:	69ba      	ldr	r2, [r7, #24]
 80033d2:	4013      	ands	r3, r2
 80033d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4a52      	ldr	r2, [pc, #328]	@ (8003524 <HAL_GPIO_Init+0x314>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d02b      	beq.n	8003436 <HAL_GPIO_Init+0x226>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4a51      	ldr	r2, [pc, #324]	@ (8003528 <HAL_GPIO_Init+0x318>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d025      	beq.n	8003432 <HAL_GPIO_Init+0x222>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4a50      	ldr	r2, [pc, #320]	@ (800352c <HAL_GPIO_Init+0x31c>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d01f      	beq.n	800342e <HAL_GPIO_Init+0x21e>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4a4f      	ldr	r2, [pc, #316]	@ (8003530 <HAL_GPIO_Init+0x320>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d019      	beq.n	800342a <HAL_GPIO_Init+0x21a>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4a4e      	ldr	r2, [pc, #312]	@ (8003534 <HAL_GPIO_Init+0x324>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d013      	beq.n	8003426 <HAL_GPIO_Init+0x216>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4a4d      	ldr	r2, [pc, #308]	@ (8003538 <HAL_GPIO_Init+0x328>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d00d      	beq.n	8003422 <HAL_GPIO_Init+0x212>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4a4c      	ldr	r2, [pc, #304]	@ (800353c <HAL_GPIO_Init+0x32c>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d007      	beq.n	800341e <HAL_GPIO_Init+0x20e>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	4a4b      	ldr	r2, [pc, #300]	@ (8003540 <HAL_GPIO_Init+0x330>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d101      	bne.n	800341a <HAL_GPIO_Init+0x20a>
 8003416:	2307      	movs	r3, #7
 8003418:	e00e      	b.n	8003438 <HAL_GPIO_Init+0x228>
 800341a:	2308      	movs	r3, #8
 800341c:	e00c      	b.n	8003438 <HAL_GPIO_Init+0x228>
 800341e:	2306      	movs	r3, #6
 8003420:	e00a      	b.n	8003438 <HAL_GPIO_Init+0x228>
 8003422:	2305      	movs	r3, #5
 8003424:	e008      	b.n	8003438 <HAL_GPIO_Init+0x228>
 8003426:	2304      	movs	r3, #4
 8003428:	e006      	b.n	8003438 <HAL_GPIO_Init+0x228>
 800342a:	2303      	movs	r3, #3
 800342c:	e004      	b.n	8003438 <HAL_GPIO_Init+0x228>
 800342e:	2302      	movs	r3, #2
 8003430:	e002      	b.n	8003438 <HAL_GPIO_Init+0x228>
 8003432:	2301      	movs	r3, #1
 8003434:	e000      	b.n	8003438 <HAL_GPIO_Init+0x228>
 8003436:	2300      	movs	r3, #0
 8003438:	69fa      	ldr	r2, [r7, #28]
 800343a:	f002 0203 	and.w	r2, r2, #3
 800343e:	0092      	lsls	r2, r2, #2
 8003440:	4093      	lsls	r3, r2
 8003442:	69ba      	ldr	r2, [r7, #24]
 8003444:	4313      	orrs	r3, r2
 8003446:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003448:	4935      	ldr	r1, [pc, #212]	@ (8003520 <HAL_GPIO_Init+0x310>)
 800344a:	69fb      	ldr	r3, [r7, #28]
 800344c:	089b      	lsrs	r3, r3, #2
 800344e:	3302      	adds	r3, #2
 8003450:	69ba      	ldr	r2, [r7, #24]
 8003452:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003456:	4b3b      	ldr	r3, [pc, #236]	@ (8003544 <HAL_GPIO_Init+0x334>)
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	43db      	mvns	r3, r3
 8003460:	69ba      	ldr	r2, [r7, #24]
 8003462:	4013      	ands	r3, r2
 8003464:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800346e:	2b00      	cmp	r3, #0
 8003470:	d003      	beq.n	800347a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003472:	69ba      	ldr	r2, [r7, #24]
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	4313      	orrs	r3, r2
 8003478:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800347a:	4a32      	ldr	r2, [pc, #200]	@ (8003544 <HAL_GPIO_Init+0x334>)
 800347c:	69bb      	ldr	r3, [r7, #24]
 800347e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003480:	4b30      	ldr	r3, [pc, #192]	@ (8003544 <HAL_GPIO_Init+0x334>)
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	43db      	mvns	r3, r3
 800348a:	69ba      	ldr	r2, [r7, #24]
 800348c:	4013      	ands	r3, r2
 800348e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003498:	2b00      	cmp	r3, #0
 800349a:	d003      	beq.n	80034a4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800349c:	69ba      	ldr	r2, [r7, #24]
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	4313      	orrs	r3, r2
 80034a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80034a4:	4a27      	ldr	r2, [pc, #156]	@ (8003544 <HAL_GPIO_Init+0x334>)
 80034a6:	69bb      	ldr	r3, [r7, #24]
 80034a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80034aa:	4b26      	ldr	r3, [pc, #152]	@ (8003544 <HAL_GPIO_Init+0x334>)
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	43db      	mvns	r3, r3
 80034b4:	69ba      	ldr	r2, [r7, #24]
 80034b6:	4013      	ands	r3, r2
 80034b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d003      	beq.n	80034ce <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80034c6:	69ba      	ldr	r2, [r7, #24]
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80034ce:	4a1d      	ldr	r2, [pc, #116]	@ (8003544 <HAL_GPIO_Init+0x334>)
 80034d0:	69bb      	ldr	r3, [r7, #24]
 80034d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80034d4:	4b1b      	ldr	r3, [pc, #108]	@ (8003544 <HAL_GPIO_Init+0x334>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	43db      	mvns	r3, r3
 80034de:	69ba      	ldr	r2, [r7, #24]
 80034e0:	4013      	ands	r3, r2
 80034e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d003      	beq.n	80034f8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80034f0:	69ba      	ldr	r2, [r7, #24]
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	4313      	orrs	r3, r2
 80034f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80034f8:	4a12      	ldr	r2, [pc, #72]	@ (8003544 <HAL_GPIO_Init+0x334>)
 80034fa:	69bb      	ldr	r3, [r7, #24]
 80034fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	3301      	adds	r3, #1
 8003502:	61fb      	str	r3, [r7, #28]
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	2b0f      	cmp	r3, #15
 8003508:	f67f ae90 	bls.w	800322c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800350c:	bf00      	nop
 800350e:	bf00      	nop
 8003510:	3724      	adds	r7, #36	@ 0x24
 8003512:	46bd      	mov	sp, r7
 8003514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003518:	4770      	bx	lr
 800351a:	bf00      	nop
 800351c:	40023800 	.word	0x40023800
 8003520:	40013800 	.word	0x40013800
 8003524:	40020000 	.word	0x40020000
 8003528:	40020400 	.word	0x40020400
 800352c:	40020800 	.word	0x40020800
 8003530:	40020c00 	.word	0x40020c00
 8003534:	40021000 	.word	0x40021000
 8003538:	40021400 	.word	0x40021400
 800353c:	40021800 	.word	0x40021800
 8003540:	40021c00 	.word	0x40021c00
 8003544:	40013c00 	.word	0x40013c00

08003548 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003548:	b480      	push	{r7}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	460b      	mov	r3, r1
 8003552:	807b      	strh	r3, [r7, #2]
 8003554:	4613      	mov	r3, r2
 8003556:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003558:	787b      	ldrb	r3, [r7, #1]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d003      	beq.n	8003566 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800355e:	887a      	ldrh	r2, [r7, #2]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003564:	e003      	b.n	800356e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003566:	887b      	ldrh	r3, [r7, #2]
 8003568:	041a      	lsls	r2, r3, #16
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	619a      	str	r2, [r3, #24]
}
 800356e:	bf00      	nop
 8003570:	370c      	adds	r7, #12
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr
	...

0800357c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b082      	sub	sp, #8
 8003580:	af00      	add	r7, sp, #0
 8003582:	4603      	mov	r3, r0
 8003584:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003586:	4b08      	ldr	r3, [pc, #32]	@ (80035a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003588:	695a      	ldr	r2, [r3, #20]
 800358a:	88fb      	ldrh	r3, [r7, #6]
 800358c:	4013      	ands	r3, r2
 800358e:	2b00      	cmp	r3, #0
 8003590:	d006      	beq.n	80035a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003592:	4a05      	ldr	r2, [pc, #20]	@ (80035a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003594:	88fb      	ldrh	r3, [r7, #6]
 8003596:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003598:	88fb      	ldrh	r3, [r7, #6]
 800359a:	4618      	mov	r0, r3
 800359c:	f000 f806 	bl	80035ac <HAL_GPIO_EXTI_Callback>
  }
}
 80035a0:	bf00      	nop
 80035a2:	3708      	adds	r7, #8
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	40013c00 	.word	0x40013c00

080035ac <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b083      	sub	sp, #12
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	4603      	mov	r3, r0
 80035b4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80035b6:	bf00      	nop
 80035b8:	370c      	adds	r7, #12
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr
	...

080035c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b086      	sub	sp, #24
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d101      	bne.n	80035d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e267      	b.n	8003aa6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0301 	and.w	r3, r3, #1
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d075      	beq.n	80036ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80035e2:	4b88      	ldr	r3, [pc, #544]	@ (8003804 <HAL_RCC_OscConfig+0x240>)
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	f003 030c 	and.w	r3, r3, #12
 80035ea:	2b04      	cmp	r3, #4
 80035ec:	d00c      	beq.n	8003608 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035ee:	4b85      	ldr	r3, [pc, #532]	@ (8003804 <HAL_RCC_OscConfig+0x240>)
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80035f6:	2b08      	cmp	r3, #8
 80035f8:	d112      	bne.n	8003620 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035fa:	4b82      	ldr	r3, [pc, #520]	@ (8003804 <HAL_RCC_OscConfig+0x240>)
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003602:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003606:	d10b      	bne.n	8003620 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003608:	4b7e      	ldr	r3, [pc, #504]	@ (8003804 <HAL_RCC_OscConfig+0x240>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003610:	2b00      	cmp	r3, #0
 8003612:	d05b      	beq.n	80036cc <HAL_RCC_OscConfig+0x108>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d157      	bne.n	80036cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e242      	b.n	8003aa6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003628:	d106      	bne.n	8003638 <HAL_RCC_OscConfig+0x74>
 800362a:	4b76      	ldr	r3, [pc, #472]	@ (8003804 <HAL_RCC_OscConfig+0x240>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a75      	ldr	r2, [pc, #468]	@ (8003804 <HAL_RCC_OscConfig+0x240>)
 8003630:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003634:	6013      	str	r3, [r2, #0]
 8003636:	e01d      	b.n	8003674 <HAL_RCC_OscConfig+0xb0>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003640:	d10c      	bne.n	800365c <HAL_RCC_OscConfig+0x98>
 8003642:	4b70      	ldr	r3, [pc, #448]	@ (8003804 <HAL_RCC_OscConfig+0x240>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a6f      	ldr	r2, [pc, #444]	@ (8003804 <HAL_RCC_OscConfig+0x240>)
 8003648:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800364c:	6013      	str	r3, [r2, #0]
 800364e:	4b6d      	ldr	r3, [pc, #436]	@ (8003804 <HAL_RCC_OscConfig+0x240>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a6c      	ldr	r2, [pc, #432]	@ (8003804 <HAL_RCC_OscConfig+0x240>)
 8003654:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003658:	6013      	str	r3, [r2, #0]
 800365a:	e00b      	b.n	8003674 <HAL_RCC_OscConfig+0xb0>
 800365c:	4b69      	ldr	r3, [pc, #420]	@ (8003804 <HAL_RCC_OscConfig+0x240>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a68      	ldr	r2, [pc, #416]	@ (8003804 <HAL_RCC_OscConfig+0x240>)
 8003662:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003666:	6013      	str	r3, [r2, #0]
 8003668:	4b66      	ldr	r3, [pc, #408]	@ (8003804 <HAL_RCC_OscConfig+0x240>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a65      	ldr	r2, [pc, #404]	@ (8003804 <HAL_RCC_OscConfig+0x240>)
 800366e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003672:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d013      	beq.n	80036a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800367c:	f7ff f886 	bl	800278c <HAL_GetTick>
 8003680:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003682:	e008      	b.n	8003696 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003684:	f7ff f882 	bl	800278c <HAL_GetTick>
 8003688:	4602      	mov	r2, r0
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	2b64      	cmp	r3, #100	@ 0x64
 8003690:	d901      	bls.n	8003696 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003692:	2303      	movs	r3, #3
 8003694:	e207      	b.n	8003aa6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003696:	4b5b      	ldr	r3, [pc, #364]	@ (8003804 <HAL_RCC_OscConfig+0x240>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d0f0      	beq.n	8003684 <HAL_RCC_OscConfig+0xc0>
 80036a2:	e014      	b.n	80036ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036a4:	f7ff f872 	bl	800278c <HAL_GetTick>
 80036a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036aa:	e008      	b.n	80036be <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036ac:	f7ff f86e 	bl	800278c <HAL_GetTick>
 80036b0:	4602      	mov	r2, r0
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	2b64      	cmp	r3, #100	@ 0x64
 80036b8:	d901      	bls.n	80036be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80036ba:	2303      	movs	r3, #3
 80036bc:	e1f3      	b.n	8003aa6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036be:	4b51      	ldr	r3, [pc, #324]	@ (8003804 <HAL_RCC_OscConfig+0x240>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d1f0      	bne.n	80036ac <HAL_RCC_OscConfig+0xe8>
 80036ca:	e000      	b.n	80036ce <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 0302 	and.w	r3, r3, #2
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d063      	beq.n	80037a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80036da:	4b4a      	ldr	r3, [pc, #296]	@ (8003804 <HAL_RCC_OscConfig+0x240>)
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	f003 030c 	and.w	r3, r3, #12
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d00b      	beq.n	80036fe <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036e6:	4b47      	ldr	r3, [pc, #284]	@ (8003804 <HAL_RCC_OscConfig+0x240>)
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80036ee:	2b08      	cmp	r3, #8
 80036f0:	d11c      	bne.n	800372c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036f2:	4b44      	ldr	r3, [pc, #272]	@ (8003804 <HAL_RCC_OscConfig+0x240>)
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d116      	bne.n	800372c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036fe:	4b41      	ldr	r3, [pc, #260]	@ (8003804 <HAL_RCC_OscConfig+0x240>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 0302 	and.w	r3, r3, #2
 8003706:	2b00      	cmp	r3, #0
 8003708:	d005      	beq.n	8003716 <HAL_RCC_OscConfig+0x152>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	68db      	ldr	r3, [r3, #12]
 800370e:	2b01      	cmp	r3, #1
 8003710:	d001      	beq.n	8003716 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e1c7      	b.n	8003aa6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003716:	4b3b      	ldr	r3, [pc, #236]	@ (8003804 <HAL_RCC_OscConfig+0x240>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	691b      	ldr	r3, [r3, #16]
 8003722:	00db      	lsls	r3, r3, #3
 8003724:	4937      	ldr	r1, [pc, #220]	@ (8003804 <HAL_RCC_OscConfig+0x240>)
 8003726:	4313      	orrs	r3, r2
 8003728:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800372a:	e03a      	b.n	80037a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d020      	beq.n	8003776 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003734:	4b34      	ldr	r3, [pc, #208]	@ (8003808 <HAL_RCC_OscConfig+0x244>)
 8003736:	2201      	movs	r2, #1
 8003738:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800373a:	f7ff f827 	bl	800278c <HAL_GetTick>
 800373e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003740:	e008      	b.n	8003754 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003742:	f7ff f823 	bl	800278c <HAL_GetTick>
 8003746:	4602      	mov	r2, r0
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	1ad3      	subs	r3, r2, r3
 800374c:	2b02      	cmp	r3, #2
 800374e:	d901      	bls.n	8003754 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003750:	2303      	movs	r3, #3
 8003752:	e1a8      	b.n	8003aa6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003754:	4b2b      	ldr	r3, [pc, #172]	@ (8003804 <HAL_RCC_OscConfig+0x240>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 0302 	and.w	r3, r3, #2
 800375c:	2b00      	cmp	r3, #0
 800375e:	d0f0      	beq.n	8003742 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003760:	4b28      	ldr	r3, [pc, #160]	@ (8003804 <HAL_RCC_OscConfig+0x240>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	691b      	ldr	r3, [r3, #16]
 800376c:	00db      	lsls	r3, r3, #3
 800376e:	4925      	ldr	r1, [pc, #148]	@ (8003804 <HAL_RCC_OscConfig+0x240>)
 8003770:	4313      	orrs	r3, r2
 8003772:	600b      	str	r3, [r1, #0]
 8003774:	e015      	b.n	80037a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003776:	4b24      	ldr	r3, [pc, #144]	@ (8003808 <HAL_RCC_OscConfig+0x244>)
 8003778:	2200      	movs	r2, #0
 800377a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800377c:	f7ff f806 	bl	800278c <HAL_GetTick>
 8003780:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003782:	e008      	b.n	8003796 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003784:	f7ff f802 	bl	800278c <HAL_GetTick>
 8003788:	4602      	mov	r2, r0
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	2b02      	cmp	r3, #2
 8003790:	d901      	bls.n	8003796 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003792:	2303      	movs	r3, #3
 8003794:	e187      	b.n	8003aa6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003796:	4b1b      	ldr	r3, [pc, #108]	@ (8003804 <HAL_RCC_OscConfig+0x240>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 0302 	and.w	r3, r3, #2
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d1f0      	bne.n	8003784 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 0308 	and.w	r3, r3, #8
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d036      	beq.n	800381c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	695b      	ldr	r3, [r3, #20]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d016      	beq.n	80037e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037b6:	4b15      	ldr	r3, [pc, #84]	@ (800380c <HAL_RCC_OscConfig+0x248>)
 80037b8:	2201      	movs	r2, #1
 80037ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037bc:	f7fe ffe6 	bl	800278c <HAL_GetTick>
 80037c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037c2:	e008      	b.n	80037d6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037c4:	f7fe ffe2 	bl	800278c <HAL_GetTick>
 80037c8:	4602      	mov	r2, r0
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	2b02      	cmp	r3, #2
 80037d0:	d901      	bls.n	80037d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80037d2:	2303      	movs	r3, #3
 80037d4:	e167      	b.n	8003aa6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037d6:	4b0b      	ldr	r3, [pc, #44]	@ (8003804 <HAL_RCC_OscConfig+0x240>)
 80037d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037da:	f003 0302 	and.w	r3, r3, #2
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d0f0      	beq.n	80037c4 <HAL_RCC_OscConfig+0x200>
 80037e2:	e01b      	b.n	800381c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037e4:	4b09      	ldr	r3, [pc, #36]	@ (800380c <HAL_RCC_OscConfig+0x248>)
 80037e6:	2200      	movs	r2, #0
 80037e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037ea:	f7fe ffcf 	bl	800278c <HAL_GetTick>
 80037ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037f0:	e00e      	b.n	8003810 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037f2:	f7fe ffcb 	bl	800278c <HAL_GetTick>
 80037f6:	4602      	mov	r2, r0
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	1ad3      	subs	r3, r2, r3
 80037fc:	2b02      	cmp	r3, #2
 80037fe:	d907      	bls.n	8003810 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003800:	2303      	movs	r3, #3
 8003802:	e150      	b.n	8003aa6 <HAL_RCC_OscConfig+0x4e2>
 8003804:	40023800 	.word	0x40023800
 8003808:	42470000 	.word	0x42470000
 800380c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003810:	4b88      	ldr	r3, [pc, #544]	@ (8003a34 <HAL_RCC_OscConfig+0x470>)
 8003812:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003814:	f003 0302 	and.w	r3, r3, #2
 8003818:	2b00      	cmp	r3, #0
 800381a:	d1ea      	bne.n	80037f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 0304 	and.w	r3, r3, #4
 8003824:	2b00      	cmp	r3, #0
 8003826:	f000 8097 	beq.w	8003958 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800382a:	2300      	movs	r3, #0
 800382c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800382e:	4b81      	ldr	r3, [pc, #516]	@ (8003a34 <HAL_RCC_OscConfig+0x470>)
 8003830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003832:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d10f      	bne.n	800385a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800383a:	2300      	movs	r3, #0
 800383c:	60bb      	str	r3, [r7, #8]
 800383e:	4b7d      	ldr	r3, [pc, #500]	@ (8003a34 <HAL_RCC_OscConfig+0x470>)
 8003840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003842:	4a7c      	ldr	r2, [pc, #496]	@ (8003a34 <HAL_RCC_OscConfig+0x470>)
 8003844:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003848:	6413      	str	r3, [r2, #64]	@ 0x40
 800384a:	4b7a      	ldr	r3, [pc, #488]	@ (8003a34 <HAL_RCC_OscConfig+0x470>)
 800384c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800384e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003852:	60bb      	str	r3, [r7, #8]
 8003854:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003856:	2301      	movs	r3, #1
 8003858:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800385a:	4b77      	ldr	r3, [pc, #476]	@ (8003a38 <HAL_RCC_OscConfig+0x474>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003862:	2b00      	cmp	r3, #0
 8003864:	d118      	bne.n	8003898 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003866:	4b74      	ldr	r3, [pc, #464]	@ (8003a38 <HAL_RCC_OscConfig+0x474>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a73      	ldr	r2, [pc, #460]	@ (8003a38 <HAL_RCC_OscConfig+0x474>)
 800386c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003870:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003872:	f7fe ff8b 	bl	800278c <HAL_GetTick>
 8003876:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003878:	e008      	b.n	800388c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800387a:	f7fe ff87 	bl	800278c <HAL_GetTick>
 800387e:	4602      	mov	r2, r0
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	1ad3      	subs	r3, r2, r3
 8003884:	2b02      	cmp	r3, #2
 8003886:	d901      	bls.n	800388c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003888:	2303      	movs	r3, #3
 800388a:	e10c      	b.n	8003aa6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800388c:	4b6a      	ldr	r3, [pc, #424]	@ (8003a38 <HAL_RCC_OscConfig+0x474>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003894:	2b00      	cmp	r3, #0
 8003896:	d0f0      	beq.n	800387a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	2b01      	cmp	r3, #1
 800389e:	d106      	bne.n	80038ae <HAL_RCC_OscConfig+0x2ea>
 80038a0:	4b64      	ldr	r3, [pc, #400]	@ (8003a34 <HAL_RCC_OscConfig+0x470>)
 80038a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038a4:	4a63      	ldr	r2, [pc, #396]	@ (8003a34 <HAL_RCC_OscConfig+0x470>)
 80038a6:	f043 0301 	orr.w	r3, r3, #1
 80038aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80038ac:	e01c      	b.n	80038e8 <HAL_RCC_OscConfig+0x324>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	2b05      	cmp	r3, #5
 80038b4:	d10c      	bne.n	80038d0 <HAL_RCC_OscConfig+0x30c>
 80038b6:	4b5f      	ldr	r3, [pc, #380]	@ (8003a34 <HAL_RCC_OscConfig+0x470>)
 80038b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038ba:	4a5e      	ldr	r2, [pc, #376]	@ (8003a34 <HAL_RCC_OscConfig+0x470>)
 80038bc:	f043 0304 	orr.w	r3, r3, #4
 80038c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80038c2:	4b5c      	ldr	r3, [pc, #368]	@ (8003a34 <HAL_RCC_OscConfig+0x470>)
 80038c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038c6:	4a5b      	ldr	r2, [pc, #364]	@ (8003a34 <HAL_RCC_OscConfig+0x470>)
 80038c8:	f043 0301 	orr.w	r3, r3, #1
 80038cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80038ce:	e00b      	b.n	80038e8 <HAL_RCC_OscConfig+0x324>
 80038d0:	4b58      	ldr	r3, [pc, #352]	@ (8003a34 <HAL_RCC_OscConfig+0x470>)
 80038d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038d4:	4a57      	ldr	r2, [pc, #348]	@ (8003a34 <HAL_RCC_OscConfig+0x470>)
 80038d6:	f023 0301 	bic.w	r3, r3, #1
 80038da:	6713      	str	r3, [r2, #112]	@ 0x70
 80038dc:	4b55      	ldr	r3, [pc, #340]	@ (8003a34 <HAL_RCC_OscConfig+0x470>)
 80038de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038e0:	4a54      	ldr	r2, [pc, #336]	@ (8003a34 <HAL_RCC_OscConfig+0x470>)
 80038e2:	f023 0304 	bic.w	r3, r3, #4
 80038e6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d015      	beq.n	800391c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038f0:	f7fe ff4c 	bl	800278c <HAL_GetTick>
 80038f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038f6:	e00a      	b.n	800390e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038f8:	f7fe ff48 	bl	800278c <HAL_GetTick>
 80038fc:	4602      	mov	r2, r0
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003906:	4293      	cmp	r3, r2
 8003908:	d901      	bls.n	800390e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800390a:	2303      	movs	r3, #3
 800390c:	e0cb      	b.n	8003aa6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800390e:	4b49      	ldr	r3, [pc, #292]	@ (8003a34 <HAL_RCC_OscConfig+0x470>)
 8003910:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003912:	f003 0302 	and.w	r3, r3, #2
 8003916:	2b00      	cmp	r3, #0
 8003918:	d0ee      	beq.n	80038f8 <HAL_RCC_OscConfig+0x334>
 800391a:	e014      	b.n	8003946 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800391c:	f7fe ff36 	bl	800278c <HAL_GetTick>
 8003920:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003922:	e00a      	b.n	800393a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003924:	f7fe ff32 	bl	800278c <HAL_GetTick>
 8003928:	4602      	mov	r2, r0
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	1ad3      	subs	r3, r2, r3
 800392e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003932:	4293      	cmp	r3, r2
 8003934:	d901      	bls.n	800393a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	e0b5      	b.n	8003aa6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800393a:	4b3e      	ldr	r3, [pc, #248]	@ (8003a34 <HAL_RCC_OscConfig+0x470>)
 800393c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800393e:	f003 0302 	and.w	r3, r3, #2
 8003942:	2b00      	cmp	r3, #0
 8003944:	d1ee      	bne.n	8003924 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003946:	7dfb      	ldrb	r3, [r7, #23]
 8003948:	2b01      	cmp	r3, #1
 800394a:	d105      	bne.n	8003958 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800394c:	4b39      	ldr	r3, [pc, #228]	@ (8003a34 <HAL_RCC_OscConfig+0x470>)
 800394e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003950:	4a38      	ldr	r2, [pc, #224]	@ (8003a34 <HAL_RCC_OscConfig+0x470>)
 8003952:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003956:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	699b      	ldr	r3, [r3, #24]
 800395c:	2b00      	cmp	r3, #0
 800395e:	f000 80a1 	beq.w	8003aa4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003962:	4b34      	ldr	r3, [pc, #208]	@ (8003a34 <HAL_RCC_OscConfig+0x470>)
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	f003 030c 	and.w	r3, r3, #12
 800396a:	2b08      	cmp	r3, #8
 800396c:	d05c      	beq.n	8003a28 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	699b      	ldr	r3, [r3, #24]
 8003972:	2b02      	cmp	r3, #2
 8003974:	d141      	bne.n	80039fa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003976:	4b31      	ldr	r3, [pc, #196]	@ (8003a3c <HAL_RCC_OscConfig+0x478>)
 8003978:	2200      	movs	r2, #0
 800397a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800397c:	f7fe ff06 	bl	800278c <HAL_GetTick>
 8003980:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003982:	e008      	b.n	8003996 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003984:	f7fe ff02 	bl	800278c <HAL_GetTick>
 8003988:	4602      	mov	r2, r0
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	2b02      	cmp	r3, #2
 8003990:	d901      	bls.n	8003996 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003992:	2303      	movs	r3, #3
 8003994:	e087      	b.n	8003aa6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003996:	4b27      	ldr	r3, [pc, #156]	@ (8003a34 <HAL_RCC_OscConfig+0x470>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d1f0      	bne.n	8003984 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	69da      	ldr	r2, [r3, #28]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6a1b      	ldr	r3, [r3, #32]
 80039aa:	431a      	orrs	r2, r3
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039b0:	019b      	lsls	r3, r3, #6
 80039b2:	431a      	orrs	r2, r3
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039b8:	085b      	lsrs	r3, r3, #1
 80039ba:	3b01      	subs	r3, #1
 80039bc:	041b      	lsls	r3, r3, #16
 80039be:	431a      	orrs	r2, r3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039c4:	061b      	lsls	r3, r3, #24
 80039c6:	491b      	ldr	r1, [pc, #108]	@ (8003a34 <HAL_RCC_OscConfig+0x470>)
 80039c8:	4313      	orrs	r3, r2
 80039ca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039cc:	4b1b      	ldr	r3, [pc, #108]	@ (8003a3c <HAL_RCC_OscConfig+0x478>)
 80039ce:	2201      	movs	r2, #1
 80039d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039d2:	f7fe fedb 	bl	800278c <HAL_GetTick>
 80039d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039d8:	e008      	b.n	80039ec <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039da:	f7fe fed7 	bl	800278c <HAL_GetTick>
 80039de:	4602      	mov	r2, r0
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	1ad3      	subs	r3, r2, r3
 80039e4:	2b02      	cmp	r3, #2
 80039e6:	d901      	bls.n	80039ec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80039e8:	2303      	movs	r3, #3
 80039ea:	e05c      	b.n	8003aa6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039ec:	4b11      	ldr	r3, [pc, #68]	@ (8003a34 <HAL_RCC_OscConfig+0x470>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d0f0      	beq.n	80039da <HAL_RCC_OscConfig+0x416>
 80039f8:	e054      	b.n	8003aa4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039fa:	4b10      	ldr	r3, [pc, #64]	@ (8003a3c <HAL_RCC_OscConfig+0x478>)
 80039fc:	2200      	movs	r2, #0
 80039fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a00:	f7fe fec4 	bl	800278c <HAL_GetTick>
 8003a04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a06:	e008      	b.n	8003a1a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a08:	f7fe fec0 	bl	800278c <HAL_GetTick>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	2b02      	cmp	r3, #2
 8003a14:	d901      	bls.n	8003a1a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	e045      	b.n	8003aa6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a1a:	4b06      	ldr	r3, [pc, #24]	@ (8003a34 <HAL_RCC_OscConfig+0x470>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d1f0      	bne.n	8003a08 <HAL_RCC_OscConfig+0x444>
 8003a26:	e03d      	b.n	8003aa4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	699b      	ldr	r3, [r3, #24]
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d107      	bne.n	8003a40 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	e038      	b.n	8003aa6 <HAL_RCC_OscConfig+0x4e2>
 8003a34:	40023800 	.word	0x40023800
 8003a38:	40007000 	.word	0x40007000
 8003a3c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003a40:	4b1b      	ldr	r3, [pc, #108]	@ (8003ab0 <HAL_RCC_OscConfig+0x4ec>)
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	699b      	ldr	r3, [r3, #24]
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d028      	beq.n	8003aa0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d121      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a66:	429a      	cmp	r2, r3
 8003a68:	d11a      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a6a:	68fa      	ldr	r2, [r7, #12]
 8003a6c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003a70:	4013      	ands	r3, r2
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003a76:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d111      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a86:	085b      	lsrs	r3, r3, #1
 8003a88:	3b01      	subs	r3, #1
 8003a8a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d107      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a9a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d001      	beq.n	8003aa4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	e000      	b.n	8003aa6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003aa4:	2300      	movs	r3, #0
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3718      	adds	r7, #24
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	bf00      	nop
 8003ab0:	40023800 	.word	0x40023800

08003ab4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b084      	sub	sp, #16
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
 8003abc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d101      	bne.n	8003ac8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e0cc      	b.n	8003c62 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ac8:	4b68      	ldr	r3, [pc, #416]	@ (8003c6c <HAL_RCC_ClockConfig+0x1b8>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 0307 	and.w	r3, r3, #7
 8003ad0:	683a      	ldr	r2, [r7, #0]
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d90c      	bls.n	8003af0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ad6:	4b65      	ldr	r3, [pc, #404]	@ (8003c6c <HAL_RCC_ClockConfig+0x1b8>)
 8003ad8:	683a      	ldr	r2, [r7, #0]
 8003ada:	b2d2      	uxtb	r2, r2
 8003adc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ade:	4b63      	ldr	r3, [pc, #396]	@ (8003c6c <HAL_RCC_ClockConfig+0x1b8>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 0307 	and.w	r3, r3, #7
 8003ae6:	683a      	ldr	r2, [r7, #0]
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d001      	beq.n	8003af0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	e0b8      	b.n	8003c62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 0302 	and.w	r3, r3, #2
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d020      	beq.n	8003b3e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 0304 	and.w	r3, r3, #4
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d005      	beq.n	8003b14 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b08:	4b59      	ldr	r3, [pc, #356]	@ (8003c70 <HAL_RCC_ClockConfig+0x1bc>)
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	4a58      	ldr	r2, [pc, #352]	@ (8003c70 <HAL_RCC_ClockConfig+0x1bc>)
 8003b0e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003b12:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 0308 	and.w	r3, r3, #8
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d005      	beq.n	8003b2c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b20:	4b53      	ldr	r3, [pc, #332]	@ (8003c70 <HAL_RCC_ClockConfig+0x1bc>)
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	4a52      	ldr	r2, [pc, #328]	@ (8003c70 <HAL_RCC_ClockConfig+0x1bc>)
 8003b26:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003b2a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b2c:	4b50      	ldr	r3, [pc, #320]	@ (8003c70 <HAL_RCC_ClockConfig+0x1bc>)
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	494d      	ldr	r1, [pc, #308]	@ (8003c70 <HAL_RCC_ClockConfig+0x1bc>)
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 0301 	and.w	r3, r3, #1
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d044      	beq.n	8003bd4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d107      	bne.n	8003b62 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b52:	4b47      	ldr	r3, [pc, #284]	@ (8003c70 <HAL_RCC_ClockConfig+0x1bc>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d119      	bne.n	8003b92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e07f      	b.n	8003c62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	2b02      	cmp	r3, #2
 8003b68:	d003      	beq.n	8003b72 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b6e:	2b03      	cmp	r3, #3
 8003b70:	d107      	bne.n	8003b82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b72:	4b3f      	ldr	r3, [pc, #252]	@ (8003c70 <HAL_RCC_ClockConfig+0x1bc>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d109      	bne.n	8003b92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e06f      	b.n	8003c62 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b82:	4b3b      	ldr	r3, [pc, #236]	@ (8003c70 <HAL_RCC_ClockConfig+0x1bc>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 0302 	and.w	r3, r3, #2
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d101      	bne.n	8003b92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e067      	b.n	8003c62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b92:	4b37      	ldr	r3, [pc, #220]	@ (8003c70 <HAL_RCC_ClockConfig+0x1bc>)
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	f023 0203 	bic.w	r2, r3, #3
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	4934      	ldr	r1, [pc, #208]	@ (8003c70 <HAL_RCC_ClockConfig+0x1bc>)
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ba4:	f7fe fdf2 	bl	800278c <HAL_GetTick>
 8003ba8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003baa:	e00a      	b.n	8003bc2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bac:	f7fe fdee 	bl	800278c <HAL_GetTick>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	1ad3      	subs	r3, r2, r3
 8003bb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d901      	bls.n	8003bc2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	e04f      	b.n	8003c62 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bc2:	4b2b      	ldr	r3, [pc, #172]	@ (8003c70 <HAL_RCC_ClockConfig+0x1bc>)
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	f003 020c 	and.w	r2, r3, #12
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d1eb      	bne.n	8003bac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003bd4:	4b25      	ldr	r3, [pc, #148]	@ (8003c6c <HAL_RCC_ClockConfig+0x1b8>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 0307 	and.w	r3, r3, #7
 8003bdc:	683a      	ldr	r2, [r7, #0]
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d20c      	bcs.n	8003bfc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003be2:	4b22      	ldr	r3, [pc, #136]	@ (8003c6c <HAL_RCC_ClockConfig+0x1b8>)
 8003be4:	683a      	ldr	r2, [r7, #0]
 8003be6:	b2d2      	uxtb	r2, r2
 8003be8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bea:	4b20      	ldr	r3, [pc, #128]	@ (8003c6c <HAL_RCC_ClockConfig+0x1b8>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 0307 	and.w	r3, r3, #7
 8003bf2:	683a      	ldr	r2, [r7, #0]
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d001      	beq.n	8003bfc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	e032      	b.n	8003c62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f003 0304 	and.w	r3, r3, #4
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d008      	beq.n	8003c1a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c08:	4b19      	ldr	r3, [pc, #100]	@ (8003c70 <HAL_RCC_ClockConfig+0x1bc>)
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	4916      	ldr	r1, [pc, #88]	@ (8003c70 <HAL_RCC_ClockConfig+0x1bc>)
 8003c16:	4313      	orrs	r3, r2
 8003c18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 0308 	and.w	r3, r3, #8
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d009      	beq.n	8003c3a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c26:	4b12      	ldr	r3, [pc, #72]	@ (8003c70 <HAL_RCC_ClockConfig+0x1bc>)
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	691b      	ldr	r3, [r3, #16]
 8003c32:	00db      	lsls	r3, r3, #3
 8003c34:	490e      	ldr	r1, [pc, #56]	@ (8003c70 <HAL_RCC_ClockConfig+0x1bc>)
 8003c36:	4313      	orrs	r3, r2
 8003c38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003c3a:	f000 f821 	bl	8003c80 <HAL_RCC_GetSysClockFreq>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	4b0b      	ldr	r3, [pc, #44]	@ (8003c70 <HAL_RCC_ClockConfig+0x1bc>)
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	091b      	lsrs	r3, r3, #4
 8003c46:	f003 030f 	and.w	r3, r3, #15
 8003c4a:	490a      	ldr	r1, [pc, #40]	@ (8003c74 <HAL_RCC_ClockConfig+0x1c0>)
 8003c4c:	5ccb      	ldrb	r3, [r1, r3]
 8003c4e:	fa22 f303 	lsr.w	r3, r2, r3
 8003c52:	4a09      	ldr	r2, [pc, #36]	@ (8003c78 <HAL_RCC_ClockConfig+0x1c4>)
 8003c54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003c56:	4b09      	ldr	r3, [pc, #36]	@ (8003c7c <HAL_RCC_ClockConfig+0x1c8>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f7fe fd52 	bl	8002704 <HAL_InitTick>

  return HAL_OK;
 8003c60:	2300      	movs	r3, #0
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3710      	adds	r7, #16
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	bf00      	nop
 8003c6c:	40023c00 	.word	0x40023c00
 8003c70:	40023800 	.word	0x40023800
 8003c74:	0800ad00 	.word	0x0800ad00
 8003c78:	200001bc 	.word	0x200001bc
 8003c7c:	200001c0 	.word	0x200001c0

08003c80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c84:	b090      	sub	sp, #64	@ 0x40
 8003c86:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003c90:	2300      	movs	r3, #0
 8003c92:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003c94:	2300      	movs	r3, #0
 8003c96:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c98:	4b59      	ldr	r3, [pc, #356]	@ (8003e00 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	f003 030c 	and.w	r3, r3, #12
 8003ca0:	2b08      	cmp	r3, #8
 8003ca2:	d00d      	beq.n	8003cc0 <HAL_RCC_GetSysClockFreq+0x40>
 8003ca4:	2b08      	cmp	r3, #8
 8003ca6:	f200 80a1 	bhi.w	8003dec <HAL_RCC_GetSysClockFreq+0x16c>
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d002      	beq.n	8003cb4 <HAL_RCC_GetSysClockFreq+0x34>
 8003cae:	2b04      	cmp	r3, #4
 8003cb0:	d003      	beq.n	8003cba <HAL_RCC_GetSysClockFreq+0x3a>
 8003cb2:	e09b      	b.n	8003dec <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003cb4:	4b53      	ldr	r3, [pc, #332]	@ (8003e04 <HAL_RCC_GetSysClockFreq+0x184>)
 8003cb6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003cb8:	e09b      	b.n	8003df2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003cba:	4b53      	ldr	r3, [pc, #332]	@ (8003e08 <HAL_RCC_GetSysClockFreq+0x188>)
 8003cbc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003cbe:	e098      	b.n	8003df2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003cc0:	4b4f      	ldr	r3, [pc, #316]	@ (8003e00 <HAL_RCC_GetSysClockFreq+0x180>)
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003cc8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003cca:	4b4d      	ldr	r3, [pc, #308]	@ (8003e00 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d028      	beq.n	8003d28 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cd6:	4b4a      	ldr	r3, [pc, #296]	@ (8003e00 <HAL_RCC_GetSysClockFreq+0x180>)
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	099b      	lsrs	r3, r3, #6
 8003cdc:	2200      	movs	r2, #0
 8003cde:	623b      	str	r3, [r7, #32]
 8003ce0:	627a      	str	r2, [r7, #36]	@ 0x24
 8003ce2:	6a3b      	ldr	r3, [r7, #32]
 8003ce4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003ce8:	2100      	movs	r1, #0
 8003cea:	4b47      	ldr	r3, [pc, #284]	@ (8003e08 <HAL_RCC_GetSysClockFreq+0x188>)
 8003cec:	fb03 f201 	mul.w	r2, r3, r1
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	fb00 f303 	mul.w	r3, r0, r3
 8003cf6:	4413      	add	r3, r2
 8003cf8:	4a43      	ldr	r2, [pc, #268]	@ (8003e08 <HAL_RCC_GetSysClockFreq+0x188>)
 8003cfa:	fba0 1202 	umull	r1, r2, r0, r2
 8003cfe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003d00:	460a      	mov	r2, r1
 8003d02:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003d04:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d06:	4413      	add	r3, r2
 8003d08:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	61bb      	str	r3, [r7, #24]
 8003d10:	61fa      	str	r2, [r7, #28]
 8003d12:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d16:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003d1a:	f7fc ffb5 	bl	8000c88 <__aeabi_uldivmod>
 8003d1e:	4602      	mov	r2, r0
 8003d20:	460b      	mov	r3, r1
 8003d22:	4613      	mov	r3, r2
 8003d24:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d26:	e053      	b.n	8003dd0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d28:	4b35      	ldr	r3, [pc, #212]	@ (8003e00 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	099b      	lsrs	r3, r3, #6
 8003d2e:	2200      	movs	r2, #0
 8003d30:	613b      	str	r3, [r7, #16]
 8003d32:	617a      	str	r2, [r7, #20]
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003d3a:	f04f 0b00 	mov.w	fp, #0
 8003d3e:	4652      	mov	r2, sl
 8003d40:	465b      	mov	r3, fp
 8003d42:	f04f 0000 	mov.w	r0, #0
 8003d46:	f04f 0100 	mov.w	r1, #0
 8003d4a:	0159      	lsls	r1, r3, #5
 8003d4c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d50:	0150      	lsls	r0, r2, #5
 8003d52:	4602      	mov	r2, r0
 8003d54:	460b      	mov	r3, r1
 8003d56:	ebb2 080a 	subs.w	r8, r2, sl
 8003d5a:	eb63 090b 	sbc.w	r9, r3, fp
 8003d5e:	f04f 0200 	mov.w	r2, #0
 8003d62:	f04f 0300 	mov.w	r3, #0
 8003d66:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003d6a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003d6e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003d72:	ebb2 0408 	subs.w	r4, r2, r8
 8003d76:	eb63 0509 	sbc.w	r5, r3, r9
 8003d7a:	f04f 0200 	mov.w	r2, #0
 8003d7e:	f04f 0300 	mov.w	r3, #0
 8003d82:	00eb      	lsls	r3, r5, #3
 8003d84:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d88:	00e2      	lsls	r2, r4, #3
 8003d8a:	4614      	mov	r4, r2
 8003d8c:	461d      	mov	r5, r3
 8003d8e:	eb14 030a 	adds.w	r3, r4, sl
 8003d92:	603b      	str	r3, [r7, #0]
 8003d94:	eb45 030b 	adc.w	r3, r5, fp
 8003d98:	607b      	str	r3, [r7, #4]
 8003d9a:	f04f 0200 	mov.w	r2, #0
 8003d9e:	f04f 0300 	mov.w	r3, #0
 8003da2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003da6:	4629      	mov	r1, r5
 8003da8:	028b      	lsls	r3, r1, #10
 8003daa:	4621      	mov	r1, r4
 8003dac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003db0:	4621      	mov	r1, r4
 8003db2:	028a      	lsls	r2, r1, #10
 8003db4:	4610      	mov	r0, r2
 8003db6:	4619      	mov	r1, r3
 8003db8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003dba:	2200      	movs	r2, #0
 8003dbc:	60bb      	str	r3, [r7, #8]
 8003dbe:	60fa      	str	r2, [r7, #12]
 8003dc0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003dc4:	f7fc ff60 	bl	8000c88 <__aeabi_uldivmod>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	460b      	mov	r3, r1
 8003dcc:	4613      	mov	r3, r2
 8003dce:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003dd0:	4b0b      	ldr	r3, [pc, #44]	@ (8003e00 <HAL_RCC_GetSysClockFreq+0x180>)
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	0c1b      	lsrs	r3, r3, #16
 8003dd6:	f003 0303 	and.w	r3, r3, #3
 8003dda:	3301      	adds	r3, #1
 8003ddc:	005b      	lsls	r3, r3, #1
 8003dde:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003de0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003de2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003de4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003de8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003dea:	e002      	b.n	8003df2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003dec:	4b05      	ldr	r3, [pc, #20]	@ (8003e04 <HAL_RCC_GetSysClockFreq+0x184>)
 8003dee:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003df0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003df2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3740      	adds	r7, #64	@ 0x40
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003dfe:	bf00      	nop
 8003e00:	40023800 	.word	0x40023800
 8003e04:	00f42400 	.word	0x00f42400
 8003e08:	017d7840 	.word	0x017d7840

08003e0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e10:	4b03      	ldr	r3, [pc, #12]	@ (8003e20 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e12:	681b      	ldr	r3, [r3, #0]
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr
 8003e1e:	bf00      	nop
 8003e20:	200001bc 	.word	0x200001bc

08003e24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003e28:	f7ff fff0 	bl	8003e0c <HAL_RCC_GetHCLKFreq>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	4b05      	ldr	r3, [pc, #20]	@ (8003e44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	0a9b      	lsrs	r3, r3, #10
 8003e34:	f003 0307 	and.w	r3, r3, #7
 8003e38:	4903      	ldr	r1, [pc, #12]	@ (8003e48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e3a:	5ccb      	ldrb	r3, [r1, r3]
 8003e3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	bd80      	pop	{r7, pc}
 8003e44:	40023800 	.word	0x40023800
 8003e48:	0800ad10 	.word	0x0800ad10

08003e4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003e50:	f7ff ffdc 	bl	8003e0c <HAL_RCC_GetHCLKFreq>
 8003e54:	4602      	mov	r2, r0
 8003e56:	4b05      	ldr	r3, [pc, #20]	@ (8003e6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	0b5b      	lsrs	r3, r3, #13
 8003e5c:	f003 0307 	and.w	r3, r3, #7
 8003e60:	4903      	ldr	r1, [pc, #12]	@ (8003e70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e62:	5ccb      	ldrb	r3, [r1, r3]
 8003e64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	bd80      	pop	{r7, pc}
 8003e6c:	40023800 	.word	0x40023800
 8003e70:	0800ad10 	.word	0x0800ad10

08003e74 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b082      	sub	sp, #8
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d101      	bne.n	8003e86 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e07b      	b.n	8003f7e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d108      	bne.n	8003ea0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003e96:	d009      	beq.n	8003eac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	61da      	str	r2, [r3, #28]
 8003e9e:	e005      	b.n	8003eac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d106      	bne.n	8003ecc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f7fe f8a6 	bl	8002018 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2202      	movs	r2, #2
 8003ed0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003ee2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003ef4:	431a      	orrs	r2, r3
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	68db      	ldr	r3, [r3, #12]
 8003efa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003efe:	431a      	orrs	r2, r3
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	691b      	ldr	r3, [r3, #16]
 8003f04:	f003 0302 	and.w	r3, r3, #2
 8003f08:	431a      	orrs	r2, r3
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	695b      	ldr	r3, [r3, #20]
 8003f0e:	f003 0301 	and.w	r3, r3, #1
 8003f12:	431a      	orrs	r2, r3
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	699b      	ldr	r3, [r3, #24]
 8003f18:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f1c:	431a      	orrs	r2, r3
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	69db      	ldr	r3, [r3, #28]
 8003f22:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003f26:	431a      	orrs	r2, r3
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6a1b      	ldr	r3, [r3, #32]
 8003f2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f30:	ea42 0103 	orr.w	r1, r2, r3
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f38:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	430a      	orrs	r2, r1
 8003f42:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	699b      	ldr	r3, [r3, #24]
 8003f48:	0c1b      	lsrs	r3, r3, #16
 8003f4a:	f003 0104 	and.w	r1, r3, #4
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f52:	f003 0210 	and.w	r2, r3, #16
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	430a      	orrs	r2, r1
 8003f5c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	69da      	ldr	r2, [r3, #28]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f6c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2200      	movs	r2, #0
 8003f72:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2201      	movs	r2, #1
 8003f78:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003f7c:	2300      	movs	r3, #0
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3708      	adds	r7, #8
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}

08003f86 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f86:	b580      	push	{r7, lr}
 8003f88:	b088      	sub	sp, #32
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	60f8      	str	r0, [r7, #12]
 8003f8e:	60b9      	str	r1, [r7, #8]
 8003f90:	603b      	str	r3, [r7, #0]
 8003f92:	4613      	mov	r3, r2
 8003f94:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f96:	f7fe fbf9 	bl	800278c <HAL_GetTick>
 8003f9a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003f9c:	88fb      	ldrh	r3, [r7, #6]
 8003f9e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003fa6:	b2db      	uxtb	r3, r3
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d001      	beq.n	8003fb0 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003fac:	2302      	movs	r3, #2
 8003fae:	e12a      	b.n	8004206 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d002      	beq.n	8003fbc <HAL_SPI_Transmit+0x36>
 8003fb6:	88fb      	ldrh	r3, [r7, #6]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d101      	bne.n	8003fc0 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e122      	b.n	8004206 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003fc6:	2b01      	cmp	r3, #1
 8003fc8:	d101      	bne.n	8003fce <HAL_SPI_Transmit+0x48>
 8003fca:	2302      	movs	r3, #2
 8003fcc:	e11b      	b.n	8004206 <HAL_SPI_Transmit+0x280>
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2203      	movs	r2, #3
 8003fda:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	68ba      	ldr	r2, [r7, #8]
 8003fe8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	88fa      	ldrh	r2, [r7, #6]
 8003fee:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	88fa      	ldrh	r2, [r7, #6]
 8003ff4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2200      	movs	r2, #0
 8004000:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2200      	movs	r2, #0
 8004006:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2200      	movs	r2, #0
 800400c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2200      	movs	r2, #0
 8004012:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800401c:	d10f      	bne.n	800403e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800402c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800403c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004048:	2b40      	cmp	r3, #64	@ 0x40
 800404a:	d007      	beq.n	800405c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800405a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	68db      	ldr	r3, [r3, #12]
 8004060:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004064:	d152      	bne.n	800410c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d002      	beq.n	8004074 <HAL_SPI_Transmit+0xee>
 800406e:	8b7b      	ldrh	r3, [r7, #26]
 8004070:	2b01      	cmp	r3, #1
 8004072:	d145      	bne.n	8004100 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004078:	881a      	ldrh	r2, [r3, #0]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004084:	1c9a      	adds	r2, r3, #2
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800408e:	b29b      	uxth	r3, r3
 8004090:	3b01      	subs	r3, #1
 8004092:	b29a      	uxth	r2, r3
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004098:	e032      	b.n	8004100 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	f003 0302 	and.w	r3, r3, #2
 80040a4:	2b02      	cmp	r3, #2
 80040a6:	d112      	bne.n	80040ce <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040ac:	881a      	ldrh	r2, [r3, #0]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040b8:	1c9a      	adds	r2, r3, #2
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	3b01      	subs	r3, #1
 80040c6:	b29a      	uxth	r2, r3
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	86da      	strh	r2, [r3, #54]	@ 0x36
 80040cc:	e018      	b.n	8004100 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80040ce:	f7fe fb5d 	bl	800278c <HAL_GetTick>
 80040d2:	4602      	mov	r2, r0
 80040d4:	69fb      	ldr	r3, [r7, #28]
 80040d6:	1ad3      	subs	r3, r2, r3
 80040d8:	683a      	ldr	r2, [r7, #0]
 80040da:	429a      	cmp	r2, r3
 80040dc:	d803      	bhi.n	80040e6 <HAL_SPI_Transmit+0x160>
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80040e4:	d102      	bne.n	80040ec <HAL_SPI_Transmit+0x166>
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d109      	bne.n	8004100 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2201      	movs	r2, #1
 80040f0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2200      	movs	r2, #0
 80040f8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80040fc:	2303      	movs	r3, #3
 80040fe:	e082      	b.n	8004206 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004104:	b29b      	uxth	r3, r3
 8004106:	2b00      	cmp	r3, #0
 8004108:	d1c7      	bne.n	800409a <HAL_SPI_Transmit+0x114>
 800410a:	e053      	b.n	80041b4 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d002      	beq.n	800411a <HAL_SPI_Transmit+0x194>
 8004114:	8b7b      	ldrh	r3, [r7, #26]
 8004116:	2b01      	cmp	r3, #1
 8004118:	d147      	bne.n	80041aa <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	330c      	adds	r3, #12
 8004124:	7812      	ldrb	r2, [r2, #0]
 8004126:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800412c:	1c5a      	adds	r2, r3, #1
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004136:	b29b      	uxth	r3, r3
 8004138:	3b01      	subs	r3, #1
 800413a:	b29a      	uxth	r2, r3
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004140:	e033      	b.n	80041aa <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	f003 0302 	and.w	r3, r3, #2
 800414c:	2b02      	cmp	r3, #2
 800414e:	d113      	bne.n	8004178 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	330c      	adds	r3, #12
 800415a:	7812      	ldrb	r2, [r2, #0]
 800415c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004162:	1c5a      	adds	r2, r3, #1
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800416c:	b29b      	uxth	r3, r3
 800416e:	3b01      	subs	r3, #1
 8004170:	b29a      	uxth	r2, r3
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004176:	e018      	b.n	80041aa <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004178:	f7fe fb08 	bl	800278c <HAL_GetTick>
 800417c:	4602      	mov	r2, r0
 800417e:	69fb      	ldr	r3, [r7, #28]
 8004180:	1ad3      	subs	r3, r2, r3
 8004182:	683a      	ldr	r2, [r7, #0]
 8004184:	429a      	cmp	r2, r3
 8004186:	d803      	bhi.n	8004190 <HAL_SPI_Transmit+0x20a>
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800418e:	d102      	bne.n	8004196 <HAL_SPI_Transmit+0x210>
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d109      	bne.n	80041aa <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2201      	movs	r2, #1
 800419a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2200      	movs	r2, #0
 80041a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80041a6:	2303      	movs	r3, #3
 80041a8:	e02d      	b.n	8004206 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80041ae:	b29b      	uxth	r3, r3
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d1c6      	bne.n	8004142 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80041b4:	69fa      	ldr	r2, [r7, #28]
 80041b6:	6839      	ldr	r1, [r7, #0]
 80041b8:	68f8      	ldr	r0, [r7, #12]
 80041ba:	f000 f8b1 	bl	8004320 <SPI_EndRxTxTransaction>
 80041be:	4603      	mov	r3, r0
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d002      	beq.n	80041ca <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2220      	movs	r2, #32
 80041c8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d10a      	bne.n	80041e8 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80041d2:	2300      	movs	r3, #0
 80041d4:	617b      	str	r3, [r7, #20]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	617b      	str	r3, [r7, #20]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	617b      	str	r3, [r7, #20]
 80041e6:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2201      	movs	r2, #1
 80041ec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2200      	movs	r2, #0
 80041f4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d001      	beq.n	8004204 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	e000      	b.n	8004206 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004204:	2300      	movs	r3, #0
  }
}
 8004206:	4618      	mov	r0, r3
 8004208:	3720      	adds	r7, #32
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}
	...

08004210 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b088      	sub	sp, #32
 8004214:	af00      	add	r7, sp, #0
 8004216:	60f8      	str	r0, [r7, #12]
 8004218:	60b9      	str	r1, [r7, #8]
 800421a:	603b      	str	r3, [r7, #0]
 800421c:	4613      	mov	r3, r2
 800421e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004220:	f7fe fab4 	bl	800278c <HAL_GetTick>
 8004224:	4602      	mov	r2, r0
 8004226:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004228:	1a9b      	subs	r3, r3, r2
 800422a:	683a      	ldr	r2, [r7, #0]
 800422c:	4413      	add	r3, r2
 800422e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004230:	f7fe faac 	bl	800278c <HAL_GetTick>
 8004234:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004236:	4b39      	ldr	r3, [pc, #228]	@ (800431c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	015b      	lsls	r3, r3, #5
 800423c:	0d1b      	lsrs	r3, r3, #20
 800423e:	69fa      	ldr	r2, [r7, #28]
 8004240:	fb02 f303 	mul.w	r3, r2, r3
 8004244:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004246:	e055      	b.n	80042f4 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800424e:	d051      	beq.n	80042f4 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004250:	f7fe fa9c 	bl	800278c <HAL_GetTick>
 8004254:	4602      	mov	r2, r0
 8004256:	69bb      	ldr	r3, [r7, #24]
 8004258:	1ad3      	subs	r3, r2, r3
 800425a:	69fa      	ldr	r2, [r7, #28]
 800425c:	429a      	cmp	r2, r3
 800425e:	d902      	bls.n	8004266 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004260:	69fb      	ldr	r3, [r7, #28]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d13d      	bne.n	80042e2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	685a      	ldr	r2, [r3, #4]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004274:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800427e:	d111      	bne.n	80042a4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004288:	d004      	beq.n	8004294 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004292:	d107      	bne.n	80042a4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80042a2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80042ac:	d10f      	bne.n	80042ce <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80042bc:	601a      	str	r2, [r3, #0]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80042cc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2201      	movs	r2, #1
 80042d2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2200      	movs	r2, #0
 80042da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80042de:	2303      	movs	r3, #3
 80042e0:	e018      	b.n	8004314 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d102      	bne.n	80042ee <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 80042e8:	2300      	movs	r3, #0
 80042ea:	61fb      	str	r3, [r7, #28]
 80042ec:	e002      	b.n	80042f4 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	3b01      	subs	r3, #1
 80042f2:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	689a      	ldr	r2, [r3, #8]
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	4013      	ands	r3, r2
 80042fe:	68ba      	ldr	r2, [r7, #8]
 8004300:	429a      	cmp	r2, r3
 8004302:	bf0c      	ite	eq
 8004304:	2301      	moveq	r3, #1
 8004306:	2300      	movne	r3, #0
 8004308:	b2db      	uxtb	r3, r3
 800430a:	461a      	mov	r2, r3
 800430c:	79fb      	ldrb	r3, [r7, #7]
 800430e:	429a      	cmp	r2, r3
 8004310:	d19a      	bne.n	8004248 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8004312:	2300      	movs	r3, #0
}
 8004314:	4618      	mov	r0, r3
 8004316:	3720      	adds	r7, #32
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}
 800431c:	200001bc 	.word	0x200001bc

08004320 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b088      	sub	sp, #32
 8004324:	af02      	add	r7, sp, #8
 8004326:	60f8      	str	r0, [r7, #12]
 8004328:	60b9      	str	r1, [r7, #8]
 800432a:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	9300      	str	r3, [sp, #0]
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	2201      	movs	r2, #1
 8004334:	2102      	movs	r1, #2
 8004336:	68f8      	ldr	r0, [r7, #12]
 8004338:	f7ff ff6a 	bl	8004210 <SPI_WaitFlagStateUntilTimeout>
 800433c:	4603      	mov	r3, r0
 800433e:	2b00      	cmp	r3, #0
 8004340:	d007      	beq.n	8004352 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004346:	f043 0220 	orr.w	r2, r3, #32
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800434e:	2303      	movs	r3, #3
 8004350:	e032      	b.n	80043b8 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004352:	4b1b      	ldr	r3, [pc, #108]	@ (80043c0 <SPI_EndRxTxTransaction+0xa0>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a1b      	ldr	r2, [pc, #108]	@ (80043c4 <SPI_EndRxTxTransaction+0xa4>)
 8004358:	fba2 2303 	umull	r2, r3, r2, r3
 800435c:	0d5b      	lsrs	r3, r3, #21
 800435e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004362:	fb02 f303 	mul.w	r3, r2, r3
 8004366:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004370:	d112      	bne.n	8004398 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	9300      	str	r3, [sp, #0]
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	2200      	movs	r2, #0
 800437a:	2180      	movs	r1, #128	@ 0x80
 800437c:	68f8      	ldr	r0, [r7, #12]
 800437e:	f7ff ff47 	bl	8004210 <SPI_WaitFlagStateUntilTimeout>
 8004382:	4603      	mov	r3, r0
 8004384:	2b00      	cmp	r3, #0
 8004386:	d016      	beq.n	80043b6 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800438c:	f043 0220 	orr.w	r2, r3, #32
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004394:	2303      	movs	r3, #3
 8004396:	e00f      	b.n	80043b8 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d00a      	beq.n	80043b4 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	3b01      	subs	r3, #1
 80043a2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043ae:	2b80      	cmp	r3, #128	@ 0x80
 80043b0:	d0f2      	beq.n	8004398 <SPI_EndRxTxTransaction+0x78>
 80043b2:	e000      	b.n	80043b6 <SPI_EndRxTxTransaction+0x96>
        break;
 80043b4:	bf00      	nop
  }

  return HAL_OK;
 80043b6:	2300      	movs	r3, #0
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	3718      	adds	r7, #24
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}
 80043c0:	200001bc 	.word	0x200001bc
 80043c4:	165e9f81 	.word	0x165e9f81

080043c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b082      	sub	sp, #8
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d101      	bne.n	80043da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e041      	b.n	800445e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043e0:	b2db      	uxtb	r3, r3
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d106      	bne.n	80043f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2200      	movs	r2, #0
 80043ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f7fd feb0 	bl	8002154 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2202      	movs	r2, #2
 80043f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	3304      	adds	r3, #4
 8004404:	4619      	mov	r1, r3
 8004406:	4610      	mov	r0, r2
 8004408:	f000 fbe6 	bl	8004bd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2201      	movs	r2, #1
 8004410:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2201      	movs	r2, #1
 8004418:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2201      	movs	r2, #1
 8004420:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2201      	movs	r2, #1
 8004430:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2201      	movs	r2, #1
 8004438:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2201      	movs	r2, #1
 8004440:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2201      	movs	r2, #1
 8004448:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2201      	movs	r2, #1
 8004450:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2201      	movs	r2, #1
 8004458:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800445c:	2300      	movs	r3, #0
}
 800445e:	4618      	mov	r0, r3
 8004460:	3708      	adds	r7, #8
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}

08004466 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004466:	b580      	push	{r7, lr}
 8004468:	b082      	sub	sp, #8
 800446a:	af00      	add	r7, sp, #0
 800446c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d101      	bne.n	8004478 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	e041      	b.n	80044fc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800447e:	b2db      	uxtb	r3, r3
 8004480:	2b00      	cmp	r3, #0
 8004482:	d106      	bne.n	8004492 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2200      	movs	r2, #0
 8004488:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800448c:	6878      	ldr	r0, [r7, #4]
 800448e:	f7fd fe87 	bl	80021a0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2202      	movs	r2, #2
 8004496:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	3304      	adds	r3, #4
 80044a2:	4619      	mov	r1, r3
 80044a4:	4610      	mov	r0, r2
 80044a6:	f000 fb97 	bl	8004bd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2201      	movs	r2, #1
 80044ae:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2201      	movs	r2, #1
 80044b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2201      	movs	r2, #1
 80044be:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2201      	movs	r2, #1
 80044c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2201      	movs	r2, #1
 80044ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2201      	movs	r2, #1
 80044d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2201      	movs	r2, #1
 80044de:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2201      	movs	r2, #1
 80044e6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2201      	movs	r2, #1
 80044ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2201      	movs	r2, #1
 80044f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80044fa:	2300      	movs	r3, #0
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3708      	adds	r7, #8
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}

08004504 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b084      	sub	sp, #16
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
 800450c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d109      	bne.n	8004528 <HAL_TIM_PWM_Start+0x24>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800451a:	b2db      	uxtb	r3, r3
 800451c:	2b01      	cmp	r3, #1
 800451e:	bf14      	ite	ne
 8004520:	2301      	movne	r3, #1
 8004522:	2300      	moveq	r3, #0
 8004524:	b2db      	uxtb	r3, r3
 8004526:	e022      	b.n	800456e <HAL_TIM_PWM_Start+0x6a>
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	2b04      	cmp	r3, #4
 800452c:	d109      	bne.n	8004542 <HAL_TIM_PWM_Start+0x3e>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004534:	b2db      	uxtb	r3, r3
 8004536:	2b01      	cmp	r3, #1
 8004538:	bf14      	ite	ne
 800453a:	2301      	movne	r3, #1
 800453c:	2300      	moveq	r3, #0
 800453e:	b2db      	uxtb	r3, r3
 8004540:	e015      	b.n	800456e <HAL_TIM_PWM_Start+0x6a>
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	2b08      	cmp	r3, #8
 8004546:	d109      	bne.n	800455c <HAL_TIM_PWM_Start+0x58>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800454e:	b2db      	uxtb	r3, r3
 8004550:	2b01      	cmp	r3, #1
 8004552:	bf14      	ite	ne
 8004554:	2301      	movne	r3, #1
 8004556:	2300      	moveq	r3, #0
 8004558:	b2db      	uxtb	r3, r3
 800455a:	e008      	b.n	800456e <HAL_TIM_PWM_Start+0x6a>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004562:	b2db      	uxtb	r3, r3
 8004564:	2b01      	cmp	r3, #1
 8004566:	bf14      	ite	ne
 8004568:	2301      	movne	r3, #1
 800456a:	2300      	moveq	r3, #0
 800456c:	b2db      	uxtb	r3, r3
 800456e:	2b00      	cmp	r3, #0
 8004570:	d001      	beq.n	8004576 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	e07c      	b.n	8004670 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d104      	bne.n	8004586 <HAL_TIM_PWM_Start+0x82>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2202      	movs	r2, #2
 8004580:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004584:	e013      	b.n	80045ae <HAL_TIM_PWM_Start+0xaa>
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	2b04      	cmp	r3, #4
 800458a:	d104      	bne.n	8004596 <HAL_TIM_PWM_Start+0x92>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2202      	movs	r2, #2
 8004590:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004594:	e00b      	b.n	80045ae <HAL_TIM_PWM_Start+0xaa>
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	2b08      	cmp	r3, #8
 800459a:	d104      	bne.n	80045a6 <HAL_TIM_PWM_Start+0xa2>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2202      	movs	r2, #2
 80045a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80045a4:	e003      	b.n	80045ae <HAL_TIM_PWM_Start+0xaa>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2202      	movs	r2, #2
 80045aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	2201      	movs	r2, #1
 80045b4:	6839      	ldr	r1, [r7, #0]
 80045b6:	4618      	mov	r0, r3
 80045b8:	f000 fdfe 	bl	80051b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a2d      	ldr	r2, [pc, #180]	@ (8004678 <HAL_TIM_PWM_Start+0x174>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d004      	beq.n	80045d0 <HAL_TIM_PWM_Start+0xcc>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a2c      	ldr	r2, [pc, #176]	@ (800467c <HAL_TIM_PWM_Start+0x178>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d101      	bne.n	80045d4 <HAL_TIM_PWM_Start+0xd0>
 80045d0:	2301      	movs	r3, #1
 80045d2:	e000      	b.n	80045d6 <HAL_TIM_PWM_Start+0xd2>
 80045d4:	2300      	movs	r3, #0
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d007      	beq.n	80045ea <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80045e8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a22      	ldr	r2, [pc, #136]	@ (8004678 <HAL_TIM_PWM_Start+0x174>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d022      	beq.n	800463a <HAL_TIM_PWM_Start+0x136>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045fc:	d01d      	beq.n	800463a <HAL_TIM_PWM_Start+0x136>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a1f      	ldr	r2, [pc, #124]	@ (8004680 <HAL_TIM_PWM_Start+0x17c>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d018      	beq.n	800463a <HAL_TIM_PWM_Start+0x136>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a1d      	ldr	r2, [pc, #116]	@ (8004684 <HAL_TIM_PWM_Start+0x180>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d013      	beq.n	800463a <HAL_TIM_PWM_Start+0x136>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a1c      	ldr	r2, [pc, #112]	@ (8004688 <HAL_TIM_PWM_Start+0x184>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d00e      	beq.n	800463a <HAL_TIM_PWM_Start+0x136>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a16      	ldr	r2, [pc, #88]	@ (800467c <HAL_TIM_PWM_Start+0x178>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d009      	beq.n	800463a <HAL_TIM_PWM_Start+0x136>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a18      	ldr	r2, [pc, #96]	@ (800468c <HAL_TIM_PWM_Start+0x188>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d004      	beq.n	800463a <HAL_TIM_PWM_Start+0x136>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a16      	ldr	r2, [pc, #88]	@ (8004690 <HAL_TIM_PWM_Start+0x18c>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d111      	bne.n	800465e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	f003 0307 	and.w	r3, r3, #7
 8004644:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2b06      	cmp	r3, #6
 800464a:	d010      	beq.n	800466e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	681a      	ldr	r2, [r3, #0]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f042 0201 	orr.w	r2, r2, #1
 800465a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800465c:	e007      	b.n	800466e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f042 0201 	orr.w	r2, r2, #1
 800466c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800466e:	2300      	movs	r3, #0
}
 8004670:	4618      	mov	r0, r3
 8004672:	3710      	adds	r7, #16
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}
 8004678:	40010000 	.word	0x40010000
 800467c:	40010400 	.word	0x40010400
 8004680:	40000400 	.word	0x40000400
 8004684:	40000800 	.word	0x40000800
 8004688:	40000c00 	.word	0x40000c00
 800468c:	40014000 	.word	0x40014000
 8004690:	40001800 	.word	0x40001800

08004694 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b084      	sub	sp, #16
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	68db      	ldr	r3, [r3, #12]
 80046a2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	691b      	ldr	r3, [r3, #16]
 80046aa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	f003 0302 	and.w	r3, r3, #2
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d020      	beq.n	80046f8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	f003 0302 	and.w	r3, r3, #2
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d01b      	beq.n	80046f8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f06f 0202 	mvn.w	r2, #2
 80046c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2201      	movs	r2, #1
 80046ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	699b      	ldr	r3, [r3, #24]
 80046d6:	f003 0303 	and.w	r3, r3, #3
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d003      	beq.n	80046e6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f000 fa5b 	bl	8004b9a <HAL_TIM_IC_CaptureCallback>
 80046e4:	e005      	b.n	80046f2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f000 fa4d 	bl	8004b86 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	f000 fa5e 	bl	8004bae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2200      	movs	r2, #0
 80046f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	f003 0304 	and.w	r3, r3, #4
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d020      	beq.n	8004744 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	f003 0304 	and.w	r3, r3, #4
 8004708:	2b00      	cmp	r3, #0
 800470a:	d01b      	beq.n	8004744 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f06f 0204 	mvn.w	r2, #4
 8004714:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2202      	movs	r2, #2
 800471a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	699b      	ldr	r3, [r3, #24]
 8004722:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004726:	2b00      	cmp	r3, #0
 8004728:	d003      	beq.n	8004732 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f000 fa35 	bl	8004b9a <HAL_TIM_IC_CaptureCallback>
 8004730:	e005      	b.n	800473e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f000 fa27 	bl	8004b86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004738:	6878      	ldr	r0, [r7, #4]
 800473a:	f000 fa38 	bl	8004bae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2200      	movs	r2, #0
 8004742:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	f003 0308 	and.w	r3, r3, #8
 800474a:	2b00      	cmp	r3, #0
 800474c:	d020      	beq.n	8004790 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	f003 0308 	and.w	r3, r3, #8
 8004754:	2b00      	cmp	r3, #0
 8004756:	d01b      	beq.n	8004790 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f06f 0208 	mvn.w	r2, #8
 8004760:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2204      	movs	r2, #4
 8004766:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	69db      	ldr	r3, [r3, #28]
 800476e:	f003 0303 	and.w	r3, r3, #3
 8004772:	2b00      	cmp	r3, #0
 8004774:	d003      	beq.n	800477e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	f000 fa0f 	bl	8004b9a <HAL_TIM_IC_CaptureCallback>
 800477c:	e005      	b.n	800478a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f000 fa01 	bl	8004b86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004784:	6878      	ldr	r0, [r7, #4]
 8004786:	f000 fa12 	bl	8004bae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2200      	movs	r2, #0
 800478e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	f003 0310 	and.w	r3, r3, #16
 8004796:	2b00      	cmp	r3, #0
 8004798:	d020      	beq.n	80047dc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	f003 0310 	and.w	r3, r3, #16
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d01b      	beq.n	80047dc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f06f 0210 	mvn.w	r2, #16
 80047ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2208      	movs	r2, #8
 80047b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	69db      	ldr	r3, [r3, #28]
 80047ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d003      	beq.n	80047ca <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f000 f9e9 	bl	8004b9a <HAL_TIM_IC_CaptureCallback>
 80047c8:	e005      	b.n	80047d6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f000 f9db 	bl	8004b86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047d0:	6878      	ldr	r0, [r7, #4]
 80047d2:	f000 f9ec 	bl	8004bae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2200      	movs	r2, #0
 80047da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	f003 0301 	and.w	r3, r3, #1
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d00c      	beq.n	8004800 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	f003 0301 	and.w	r3, r3, #1
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d007      	beq.n	8004800 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f06f 0201 	mvn.w	r2, #1
 80047f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f7fc fd8a 	bl	8001314 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004806:	2b00      	cmp	r3, #0
 8004808:	d00c      	beq.n	8004824 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004810:	2b00      	cmp	r3, #0
 8004812:	d007      	beq.n	8004824 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800481c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f000 fd76 	bl	8005310 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800482a:	2b00      	cmp	r3, #0
 800482c:	d00c      	beq.n	8004848 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004834:	2b00      	cmp	r3, #0
 8004836:	d007      	beq.n	8004848 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004840:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f000 f9bd 	bl	8004bc2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	f003 0320 	and.w	r3, r3, #32
 800484e:	2b00      	cmp	r3, #0
 8004850:	d00c      	beq.n	800486c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	f003 0320 	and.w	r3, r3, #32
 8004858:	2b00      	cmp	r3, #0
 800485a:	d007      	beq.n	800486c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f06f 0220 	mvn.w	r2, #32
 8004864:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f000 fd48 	bl	80052fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800486c:	bf00      	nop
 800486e:	3710      	adds	r7, #16
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}

08004874 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b086      	sub	sp, #24
 8004878:	af00      	add	r7, sp, #0
 800487a:	60f8      	str	r0, [r7, #12]
 800487c:	60b9      	str	r1, [r7, #8]
 800487e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004880:	2300      	movs	r3, #0
 8004882:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800488a:	2b01      	cmp	r3, #1
 800488c:	d101      	bne.n	8004892 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800488e:	2302      	movs	r3, #2
 8004890:	e0ae      	b.n	80049f0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2201      	movs	r2, #1
 8004896:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2b0c      	cmp	r3, #12
 800489e:	f200 809f 	bhi.w	80049e0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80048a2:	a201      	add	r2, pc, #4	@ (adr r2, 80048a8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80048a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048a8:	080048dd 	.word	0x080048dd
 80048ac:	080049e1 	.word	0x080049e1
 80048b0:	080049e1 	.word	0x080049e1
 80048b4:	080049e1 	.word	0x080049e1
 80048b8:	0800491d 	.word	0x0800491d
 80048bc:	080049e1 	.word	0x080049e1
 80048c0:	080049e1 	.word	0x080049e1
 80048c4:	080049e1 	.word	0x080049e1
 80048c8:	0800495f 	.word	0x0800495f
 80048cc:	080049e1 	.word	0x080049e1
 80048d0:	080049e1 	.word	0x080049e1
 80048d4:	080049e1 	.word	0x080049e1
 80048d8:	0800499f 	.word	0x0800499f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	68b9      	ldr	r1, [r7, #8]
 80048e2:	4618      	mov	r0, r3
 80048e4:	f000 fa1e 	bl	8004d24 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	699a      	ldr	r2, [r3, #24]
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f042 0208 	orr.w	r2, r2, #8
 80048f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	699a      	ldr	r2, [r3, #24]
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f022 0204 	bic.w	r2, r2, #4
 8004906:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	6999      	ldr	r1, [r3, #24]
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	691a      	ldr	r2, [r3, #16]
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	430a      	orrs	r2, r1
 8004918:	619a      	str	r2, [r3, #24]
      break;
 800491a:	e064      	b.n	80049e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	68b9      	ldr	r1, [r7, #8]
 8004922:	4618      	mov	r0, r3
 8004924:	f000 fa6e 	bl	8004e04 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	699a      	ldr	r2, [r3, #24]
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004936:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	699a      	ldr	r2, [r3, #24]
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004946:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	6999      	ldr	r1, [r3, #24]
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	691b      	ldr	r3, [r3, #16]
 8004952:	021a      	lsls	r2, r3, #8
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	430a      	orrs	r2, r1
 800495a:	619a      	str	r2, [r3, #24]
      break;
 800495c:	e043      	b.n	80049e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	68b9      	ldr	r1, [r7, #8]
 8004964:	4618      	mov	r0, r3
 8004966:	f000 fac3 	bl	8004ef0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	69da      	ldr	r2, [r3, #28]
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f042 0208 	orr.w	r2, r2, #8
 8004978:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	69da      	ldr	r2, [r3, #28]
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f022 0204 	bic.w	r2, r2, #4
 8004988:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	69d9      	ldr	r1, [r3, #28]
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	691a      	ldr	r2, [r3, #16]
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	430a      	orrs	r2, r1
 800499a:	61da      	str	r2, [r3, #28]
      break;
 800499c:	e023      	b.n	80049e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	68b9      	ldr	r1, [r7, #8]
 80049a4:	4618      	mov	r0, r3
 80049a6:	f000 fb17 	bl	8004fd8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	69da      	ldr	r2, [r3, #28]
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80049b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	69da      	ldr	r2, [r3, #28]
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80049c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	69d9      	ldr	r1, [r3, #28]
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	691b      	ldr	r3, [r3, #16]
 80049d4:	021a      	lsls	r2, r3, #8
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	430a      	orrs	r2, r1
 80049dc:	61da      	str	r2, [r3, #28]
      break;
 80049de:	e002      	b.n	80049e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80049e0:	2301      	movs	r3, #1
 80049e2:	75fb      	strb	r3, [r7, #23]
      break;
 80049e4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2200      	movs	r2, #0
 80049ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80049ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	3718      	adds	r7, #24
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}

080049f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b084      	sub	sp, #16
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
 8004a00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a02:	2300      	movs	r3, #0
 8004a04:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d101      	bne.n	8004a14 <HAL_TIM_ConfigClockSource+0x1c>
 8004a10:	2302      	movs	r3, #2
 8004a12:	e0b4      	b.n	8004b7e <HAL_TIM_ConfigClockSource+0x186>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2201      	movs	r2, #1
 8004a18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2202      	movs	r2, #2
 8004a20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004a32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004a3a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	68ba      	ldr	r2, [r7, #8]
 8004a42:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a4c:	d03e      	beq.n	8004acc <HAL_TIM_ConfigClockSource+0xd4>
 8004a4e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a52:	f200 8087 	bhi.w	8004b64 <HAL_TIM_ConfigClockSource+0x16c>
 8004a56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a5a:	f000 8086 	beq.w	8004b6a <HAL_TIM_ConfigClockSource+0x172>
 8004a5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a62:	d87f      	bhi.n	8004b64 <HAL_TIM_ConfigClockSource+0x16c>
 8004a64:	2b70      	cmp	r3, #112	@ 0x70
 8004a66:	d01a      	beq.n	8004a9e <HAL_TIM_ConfigClockSource+0xa6>
 8004a68:	2b70      	cmp	r3, #112	@ 0x70
 8004a6a:	d87b      	bhi.n	8004b64 <HAL_TIM_ConfigClockSource+0x16c>
 8004a6c:	2b60      	cmp	r3, #96	@ 0x60
 8004a6e:	d050      	beq.n	8004b12 <HAL_TIM_ConfigClockSource+0x11a>
 8004a70:	2b60      	cmp	r3, #96	@ 0x60
 8004a72:	d877      	bhi.n	8004b64 <HAL_TIM_ConfigClockSource+0x16c>
 8004a74:	2b50      	cmp	r3, #80	@ 0x50
 8004a76:	d03c      	beq.n	8004af2 <HAL_TIM_ConfigClockSource+0xfa>
 8004a78:	2b50      	cmp	r3, #80	@ 0x50
 8004a7a:	d873      	bhi.n	8004b64 <HAL_TIM_ConfigClockSource+0x16c>
 8004a7c:	2b40      	cmp	r3, #64	@ 0x40
 8004a7e:	d058      	beq.n	8004b32 <HAL_TIM_ConfigClockSource+0x13a>
 8004a80:	2b40      	cmp	r3, #64	@ 0x40
 8004a82:	d86f      	bhi.n	8004b64 <HAL_TIM_ConfigClockSource+0x16c>
 8004a84:	2b30      	cmp	r3, #48	@ 0x30
 8004a86:	d064      	beq.n	8004b52 <HAL_TIM_ConfigClockSource+0x15a>
 8004a88:	2b30      	cmp	r3, #48	@ 0x30
 8004a8a:	d86b      	bhi.n	8004b64 <HAL_TIM_ConfigClockSource+0x16c>
 8004a8c:	2b20      	cmp	r3, #32
 8004a8e:	d060      	beq.n	8004b52 <HAL_TIM_ConfigClockSource+0x15a>
 8004a90:	2b20      	cmp	r3, #32
 8004a92:	d867      	bhi.n	8004b64 <HAL_TIM_ConfigClockSource+0x16c>
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d05c      	beq.n	8004b52 <HAL_TIM_ConfigClockSource+0x15a>
 8004a98:	2b10      	cmp	r3, #16
 8004a9a:	d05a      	beq.n	8004b52 <HAL_TIM_ConfigClockSource+0x15a>
 8004a9c:	e062      	b.n	8004b64 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004aae:	f000 fb63 	bl	8005178 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004ac0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	68ba      	ldr	r2, [r7, #8]
 8004ac8:	609a      	str	r2, [r3, #8]
      break;
 8004aca:	e04f      	b.n	8004b6c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004adc:	f000 fb4c 	bl	8005178 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	689a      	ldr	r2, [r3, #8]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004aee:	609a      	str	r2, [r3, #8]
      break;
 8004af0:	e03c      	b.n	8004b6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004afe:	461a      	mov	r2, r3
 8004b00:	f000 fac0 	bl	8005084 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	2150      	movs	r1, #80	@ 0x50
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f000 fb19 	bl	8005142 <TIM_ITRx_SetConfig>
      break;
 8004b10:	e02c      	b.n	8004b6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b1e:	461a      	mov	r2, r3
 8004b20:	f000 fadf 	bl	80050e2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	2160      	movs	r1, #96	@ 0x60
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f000 fb09 	bl	8005142 <TIM_ITRx_SetConfig>
      break;
 8004b30:	e01c      	b.n	8004b6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b3e:	461a      	mov	r2, r3
 8004b40:	f000 faa0 	bl	8005084 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	2140      	movs	r1, #64	@ 0x40
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f000 faf9 	bl	8005142 <TIM_ITRx_SetConfig>
      break;
 8004b50:	e00c      	b.n	8004b6c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4619      	mov	r1, r3
 8004b5c:	4610      	mov	r0, r2
 8004b5e:	f000 faf0 	bl	8005142 <TIM_ITRx_SetConfig>
      break;
 8004b62:	e003      	b.n	8004b6c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004b64:	2301      	movs	r3, #1
 8004b66:	73fb      	strb	r3, [r7, #15]
      break;
 8004b68:	e000      	b.n	8004b6c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004b6a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2200      	movs	r2, #0
 8004b78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004b7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	3710      	adds	r7, #16
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}

08004b86 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b86:	b480      	push	{r7}
 8004b88:	b083      	sub	sp, #12
 8004b8a:	af00      	add	r7, sp, #0
 8004b8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b8e:	bf00      	nop
 8004b90:	370c      	adds	r7, #12
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr

08004b9a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b9a:	b480      	push	{r7}
 8004b9c:	b083      	sub	sp, #12
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ba2:	bf00      	nop
 8004ba4:	370c      	adds	r7, #12
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bac:	4770      	bx	lr

08004bae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004bae:	b480      	push	{r7}
 8004bb0:	b083      	sub	sp, #12
 8004bb2:	af00      	add	r7, sp, #0
 8004bb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004bb6:	bf00      	nop
 8004bb8:	370c      	adds	r7, #12
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr

08004bc2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004bc2:	b480      	push	{r7}
 8004bc4:	b083      	sub	sp, #12
 8004bc6:	af00      	add	r7, sp, #0
 8004bc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004bca:	bf00      	nop
 8004bcc:	370c      	adds	r7, #12
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd4:	4770      	bx	lr
	...

08004bd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b085      	sub	sp, #20
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
 8004be0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	4a43      	ldr	r2, [pc, #268]	@ (8004cf8 <TIM_Base_SetConfig+0x120>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d013      	beq.n	8004c18 <TIM_Base_SetConfig+0x40>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bf6:	d00f      	beq.n	8004c18 <TIM_Base_SetConfig+0x40>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	4a40      	ldr	r2, [pc, #256]	@ (8004cfc <TIM_Base_SetConfig+0x124>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d00b      	beq.n	8004c18 <TIM_Base_SetConfig+0x40>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	4a3f      	ldr	r2, [pc, #252]	@ (8004d00 <TIM_Base_SetConfig+0x128>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d007      	beq.n	8004c18 <TIM_Base_SetConfig+0x40>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	4a3e      	ldr	r2, [pc, #248]	@ (8004d04 <TIM_Base_SetConfig+0x12c>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d003      	beq.n	8004c18 <TIM_Base_SetConfig+0x40>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	4a3d      	ldr	r2, [pc, #244]	@ (8004d08 <TIM_Base_SetConfig+0x130>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d108      	bne.n	8004c2a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	68fa      	ldr	r2, [r7, #12]
 8004c26:	4313      	orrs	r3, r2
 8004c28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	4a32      	ldr	r2, [pc, #200]	@ (8004cf8 <TIM_Base_SetConfig+0x120>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d02b      	beq.n	8004c8a <TIM_Base_SetConfig+0xb2>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c38:	d027      	beq.n	8004c8a <TIM_Base_SetConfig+0xb2>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	4a2f      	ldr	r2, [pc, #188]	@ (8004cfc <TIM_Base_SetConfig+0x124>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d023      	beq.n	8004c8a <TIM_Base_SetConfig+0xb2>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	4a2e      	ldr	r2, [pc, #184]	@ (8004d00 <TIM_Base_SetConfig+0x128>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d01f      	beq.n	8004c8a <TIM_Base_SetConfig+0xb2>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	4a2d      	ldr	r2, [pc, #180]	@ (8004d04 <TIM_Base_SetConfig+0x12c>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d01b      	beq.n	8004c8a <TIM_Base_SetConfig+0xb2>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	4a2c      	ldr	r2, [pc, #176]	@ (8004d08 <TIM_Base_SetConfig+0x130>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d017      	beq.n	8004c8a <TIM_Base_SetConfig+0xb2>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	4a2b      	ldr	r2, [pc, #172]	@ (8004d0c <TIM_Base_SetConfig+0x134>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d013      	beq.n	8004c8a <TIM_Base_SetConfig+0xb2>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	4a2a      	ldr	r2, [pc, #168]	@ (8004d10 <TIM_Base_SetConfig+0x138>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d00f      	beq.n	8004c8a <TIM_Base_SetConfig+0xb2>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	4a29      	ldr	r2, [pc, #164]	@ (8004d14 <TIM_Base_SetConfig+0x13c>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d00b      	beq.n	8004c8a <TIM_Base_SetConfig+0xb2>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	4a28      	ldr	r2, [pc, #160]	@ (8004d18 <TIM_Base_SetConfig+0x140>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d007      	beq.n	8004c8a <TIM_Base_SetConfig+0xb2>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	4a27      	ldr	r2, [pc, #156]	@ (8004d1c <TIM_Base_SetConfig+0x144>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d003      	beq.n	8004c8a <TIM_Base_SetConfig+0xb2>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	4a26      	ldr	r2, [pc, #152]	@ (8004d20 <TIM_Base_SetConfig+0x148>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d108      	bne.n	8004c9c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	68db      	ldr	r3, [r3, #12]
 8004c96:	68fa      	ldr	r2, [r7, #12]
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	695b      	ldr	r3, [r3, #20]
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	689a      	ldr	r2, [r3, #8]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	681a      	ldr	r2, [r3, #0]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	4a0e      	ldr	r2, [pc, #56]	@ (8004cf8 <TIM_Base_SetConfig+0x120>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d003      	beq.n	8004cca <TIM_Base_SetConfig+0xf2>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	4a10      	ldr	r2, [pc, #64]	@ (8004d08 <TIM_Base_SetConfig+0x130>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d103      	bne.n	8004cd2 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	691a      	ldr	r2, [r3, #16]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f043 0204 	orr.w	r2, r3, #4
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	68fa      	ldr	r2, [r7, #12]
 8004ce8:	601a      	str	r2, [r3, #0]
}
 8004cea:	bf00      	nop
 8004cec:	3714      	adds	r7, #20
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf4:	4770      	bx	lr
 8004cf6:	bf00      	nop
 8004cf8:	40010000 	.word	0x40010000
 8004cfc:	40000400 	.word	0x40000400
 8004d00:	40000800 	.word	0x40000800
 8004d04:	40000c00 	.word	0x40000c00
 8004d08:	40010400 	.word	0x40010400
 8004d0c:	40014000 	.word	0x40014000
 8004d10:	40014400 	.word	0x40014400
 8004d14:	40014800 	.word	0x40014800
 8004d18:	40001800 	.word	0x40001800
 8004d1c:	40001c00 	.word	0x40001c00
 8004d20:	40002000 	.word	0x40002000

08004d24 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b087      	sub	sp, #28
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
 8004d2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6a1b      	ldr	r3, [r3, #32]
 8004d32:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6a1b      	ldr	r3, [r3, #32]
 8004d38:	f023 0201 	bic.w	r2, r3, #1
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	699b      	ldr	r3, [r3, #24]
 8004d4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f023 0303 	bic.w	r3, r3, #3
 8004d5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	68fa      	ldr	r2, [r7, #12]
 8004d62:	4313      	orrs	r3, r2
 8004d64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	f023 0302 	bic.w	r3, r3, #2
 8004d6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	697a      	ldr	r2, [r7, #20]
 8004d74:	4313      	orrs	r3, r2
 8004d76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	4a20      	ldr	r2, [pc, #128]	@ (8004dfc <TIM_OC1_SetConfig+0xd8>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d003      	beq.n	8004d88 <TIM_OC1_SetConfig+0x64>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	4a1f      	ldr	r2, [pc, #124]	@ (8004e00 <TIM_OC1_SetConfig+0xdc>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d10c      	bne.n	8004da2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	f023 0308 	bic.w	r3, r3, #8
 8004d8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	68db      	ldr	r3, [r3, #12]
 8004d94:	697a      	ldr	r2, [r7, #20]
 8004d96:	4313      	orrs	r3, r2
 8004d98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	f023 0304 	bic.w	r3, r3, #4
 8004da0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	4a15      	ldr	r2, [pc, #84]	@ (8004dfc <TIM_OC1_SetConfig+0xd8>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d003      	beq.n	8004db2 <TIM_OC1_SetConfig+0x8e>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	4a14      	ldr	r2, [pc, #80]	@ (8004e00 <TIM_OC1_SetConfig+0xdc>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d111      	bne.n	8004dd6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004db8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004dc0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	695b      	ldr	r3, [r3, #20]
 8004dc6:	693a      	ldr	r2, [r7, #16]
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	699b      	ldr	r3, [r3, #24]
 8004dd0:	693a      	ldr	r2, [r7, #16]
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	693a      	ldr	r2, [r7, #16]
 8004dda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	68fa      	ldr	r2, [r7, #12]
 8004de0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	685a      	ldr	r2, [r3, #4]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	697a      	ldr	r2, [r7, #20]
 8004dee:	621a      	str	r2, [r3, #32]
}
 8004df0:	bf00      	nop
 8004df2:	371c      	adds	r7, #28
 8004df4:	46bd      	mov	sp, r7
 8004df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfa:	4770      	bx	lr
 8004dfc:	40010000 	.word	0x40010000
 8004e00:	40010400 	.word	0x40010400

08004e04 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b087      	sub	sp, #28
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
 8004e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6a1b      	ldr	r3, [r3, #32]
 8004e12:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6a1b      	ldr	r3, [r3, #32]
 8004e18:	f023 0210 	bic.w	r2, r3, #16
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	699b      	ldr	r3, [r3, #24]
 8004e2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	021b      	lsls	r3, r3, #8
 8004e42:	68fa      	ldr	r2, [r7, #12]
 8004e44:	4313      	orrs	r3, r2
 8004e46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	f023 0320 	bic.w	r3, r3, #32
 8004e4e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	689b      	ldr	r3, [r3, #8]
 8004e54:	011b      	lsls	r3, r3, #4
 8004e56:	697a      	ldr	r2, [r7, #20]
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	4a22      	ldr	r2, [pc, #136]	@ (8004ee8 <TIM_OC2_SetConfig+0xe4>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d003      	beq.n	8004e6c <TIM_OC2_SetConfig+0x68>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	4a21      	ldr	r2, [pc, #132]	@ (8004eec <TIM_OC2_SetConfig+0xe8>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d10d      	bne.n	8004e88 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	68db      	ldr	r3, [r3, #12]
 8004e78:	011b      	lsls	r3, r3, #4
 8004e7a:	697a      	ldr	r2, [r7, #20]
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e86:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	4a17      	ldr	r2, [pc, #92]	@ (8004ee8 <TIM_OC2_SetConfig+0xe4>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d003      	beq.n	8004e98 <TIM_OC2_SetConfig+0x94>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	4a16      	ldr	r2, [pc, #88]	@ (8004eec <TIM_OC2_SetConfig+0xe8>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d113      	bne.n	8004ec0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004e9e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004ea6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	695b      	ldr	r3, [r3, #20]
 8004eac:	009b      	lsls	r3, r3, #2
 8004eae:	693a      	ldr	r2, [r7, #16]
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	699b      	ldr	r3, [r3, #24]
 8004eb8:	009b      	lsls	r3, r3, #2
 8004eba:	693a      	ldr	r2, [r7, #16]
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	693a      	ldr	r2, [r7, #16]
 8004ec4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	68fa      	ldr	r2, [r7, #12]
 8004eca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	685a      	ldr	r2, [r3, #4]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	697a      	ldr	r2, [r7, #20]
 8004ed8:	621a      	str	r2, [r3, #32]
}
 8004eda:	bf00      	nop
 8004edc:	371c      	adds	r7, #28
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee4:	4770      	bx	lr
 8004ee6:	bf00      	nop
 8004ee8:	40010000 	.word	0x40010000
 8004eec:	40010400 	.word	0x40010400

08004ef0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b087      	sub	sp, #28
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
 8004ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6a1b      	ldr	r3, [r3, #32]
 8004efe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6a1b      	ldr	r3, [r3, #32]
 8004f04:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	69db      	ldr	r3, [r3, #28]
 8004f16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	f023 0303 	bic.w	r3, r3, #3
 8004f26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	68fa      	ldr	r2, [r7, #12]
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004f38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	689b      	ldr	r3, [r3, #8]
 8004f3e:	021b      	lsls	r3, r3, #8
 8004f40:	697a      	ldr	r2, [r7, #20]
 8004f42:	4313      	orrs	r3, r2
 8004f44:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	4a21      	ldr	r2, [pc, #132]	@ (8004fd0 <TIM_OC3_SetConfig+0xe0>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d003      	beq.n	8004f56 <TIM_OC3_SetConfig+0x66>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	4a20      	ldr	r2, [pc, #128]	@ (8004fd4 <TIM_OC3_SetConfig+0xe4>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d10d      	bne.n	8004f72 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004f5c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	68db      	ldr	r3, [r3, #12]
 8004f62:	021b      	lsls	r3, r3, #8
 8004f64:	697a      	ldr	r2, [r7, #20]
 8004f66:	4313      	orrs	r3, r2
 8004f68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004f70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	4a16      	ldr	r2, [pc, #88]	@ (8004fd0 <TIM_OC3_SetConfig+0xe0>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d003      	beq.n	8004f82 <TIM_OC3_SetConfig+0x92>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	4a15      	ldr	r2, [pc, #84]	@ (8004fd4 <TIM_OC3_SetConfig+0xe4>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d113      	bne.n	8004faa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004f88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004f90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	695b      	ldr	r3, [r3, #20]
 8004f96:	011b      	lsls	r3, r3, #4
 8004f98:	693a      	ldr	r2, [r7, #16]
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	699b      	ldr	r3, [r3, #24]
 8004fa2:	011b      	lsls	r3, r3, #4
 8004fa4:	693a      	ldr	r2, [r7, #16]
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	693a      	ldr	r2, [r7, #16]
 8004fae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	68fa      	ldr	r2, [r7, #12]
 8004fb4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	685a      	ldr	r2, [r3, #4]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	697a      	ldr	r2, [r7, #20]
 8004fc2:	621a      	str	r2, [r3, #32]
}
 8004fc4:	bf00      	nop
 8004fc6:	371c      	adds	r7, #28
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fce:	4770      	bx	lr
 8004fd0:	40010000 	.word	0x40010000
 8004fd4:	40010400 	.word	0x40010400

08004fd8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b087      	sub	sp, #28
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
 8004fe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6a1b      	ldr	r3, [r3, #32]
 8004fe6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6a1b      	ldr	r3, [r3, #32]
 8004fec:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	69db      	ldr	r3, [r3, #28]
 8004ffe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005006:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800500e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	021b      	lsls	r3, r3, #8
 8005016:	68fa      	ldr	r2, [r7, #12]
 8005018:	4313      	orrs	r3, r2
 800501a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005022:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	031b      	lsls	r3, r3, #12
 800502a:	693a      	ldr	r2, [r7, #16]
 800502c:	4313      	orrs	r3, r2
 800502e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	4a12      	ldr	r2, [pc, #72]	@ (800507c <TIM_OC4_SetConfig+0xa4>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d003      	beq.n	8005040 <TIM_OC4_SetConfig+0x68>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	4a11      	ldr	r2, [pc, #68]	@ (8005080 <TIM_OC4_SetConfig+0xa8>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d109      	bne.n	8005054 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005046:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	695b      	ldr	r3, [r3, #20]
 800504c:	019b      	lsls	r3, r3, #6
 800504e:	697a      	ldr	r2, [r7, #20]
 8005050:	4313      	orrs	r3, r2
 8005052:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	697a      	ldr	r2, [r7, #20]
 8005058:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	68fa      	ldr	r2, [r7, #12]
 800505e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	685a      	ldr	r2, [r3, #4]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	693a      	ldr	r2, [r7, #16]
 800506c:	621a      	str	r2, [r3, #32]
}
 800506e:	bf00      	nop
 8005070:	371c      	adds	r7, #28
 8005072:	46bd      	mov	sp, r7
 8005074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005078:	4770      	bx	lr
 800507a:	bf00      	nop
 800507c:	40010000 	.word	0x40010000
 8005080:	40010400 	.word	0x40010400

08005084 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005084:	b480      	push	{r7}
 8005086:	b087      	sub	sp, #28
 8005088:	af00      	add	r7, sp, #0
 800508a:	60f8      	str	r0, [r7, #12]
 800508c:	60b9      	str	r1, [r7, #8]
 800508e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	6a1b      	ldr	r3, [r3, #32]
 8005094:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	6a1b      	ldr	r3, [r3, #32]
 800509a:	f023 0201 	bic.w	r2, r3, #1
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	699b      	ldr	r3, [r3, #24]
 80050a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80050ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	011b      	lsls	r3, r3, #4
 80050b4:	693a      	ldr	r2, [r7, #16]
 80050b6:	4313      	orrs	r3, r2
 80050b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	f023 030a 	bic.w	r3, r3, #10
 80050c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80050c2:	697a      	ldr	r2, [r7, #20]
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	4313      	orrs	r3, r2
 80050c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	693a      	ldr	r2, [r7, #16]
 80050ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	697a      	ldr	r2, [r7, #20]
 80050d4:	621a      	str	r2, [r3, #32]
}
 80050d6:	bf00      	nop
 80050d8:	371c      	adds	r7, #28
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr

080050e2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050e2:	b480      	push	{r7}
 80050e4:	b087      	sub	sp, #28
 80050e6:	af00      	add	r7, sp, #0
 80050e8:	60f8      	str	r0, [r7, #12]
 80050ea:	60b9      	str	r1, [r7, #8]
 80050ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	6a1b      	ldr	r3, [r3, #32]
 80050f2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	6a1b      	ldr	r3, [r3, #32]
 80050f8:	f023 0210 	bic.w	r2, r3, #16
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	699b      	ldr	r3, [r3, #24]
 8005104:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800510c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	031b      	lsls	r3, r3, #12
 8005112:	693a      	ldr	r2, [r7, #16]
 8005114:	4313      	orrs	r3, r2
 8005116:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800511e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	011b      	lsls	r3, r3, #4
 8005124:	697a      	ldr	r2, [r7, #20]
 8005126:	4313      	orrs	r3, r2
 8005128:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	693a      	ldr	r2, [r7, #16]
 800512e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	697a      	ldr	r2, [r7, #20]
 8005134:	621a      	str	r2, [r3, #32]
}
 8005136:	bf00      	nop
 8005138:	371c      	adds	r7, #28
 800513a:	46bd      	mov	sp, r7
 800513c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005140:	4770      	bx	lr

08005142 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005142:	b480      	push	{r7}
 8005144:	b085      	sub	sp, #20
 8005146:	af00      	add	r7, sp, #0
 8005148:	6078      	str	r0, [r7, #4]
 800514a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005158:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800515a:	683a      	ldr	r2, [r7, #0]
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	4313      	orrs	r3, r2
 8005160:	f043 0307 	orr.w	r3, r3, #7
 8005164:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	68fa      	ldr	r2, [r7, #12]
 800516a:	609a      	str	r2, [r3, #8]
}
 800516c:	bf00      	nop
 800516e:	3714      	adds	r7, #20
 8005170:	46bd      	mov	sp, r7
 8005172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005176:	4770      	bx	lr

08005178 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005178:	b480      	push	{r7}
 800517a:	b087      	sub	sp, #28
 800517c:	af00      	add	r7, sp, #0
 800517e:	60f8      	str	r0, [r7, #12]
 8005180:	60b9      	str	r1, [r7, #8]
 8005182:	607a      	str	r2, [r7, #4]
 8005184:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005192:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	021a      	lsls	r2, r3, #8
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	431a      	orrs	r2, r3
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	4313      	orrs	r3, r2
 80051a0:	697a      	ldr	r2, [r7, #20]
 80051a2:	4313      	orrs	r3, r2
 80051a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	697a      	ldr	r2, [r7, #20]
 80051aa:	609a      	str	r2, [r3, #8]
}
 80051ac:	bf00      	nop
 80051ae:	371c      	adds	r7, #28
 80051b0:	46bd      	mov	sp, r7
 80051b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b6:	4770      	bx	lr

080051b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b087      	sub	sp, #28
 80051bc:	af00      	add	r7, sp, #0
 80051be:	60f8      	str	r0, [r7, #12]
 80051c0:	60b9      	str	r1, [r7, #8]
 80051c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	f003 031f 	and.w	r3, r3, #31
 80051ca:	2201      	movs	r2, #1
 80051cc:	fa02 f303 	lsl.w	r3, r2, r3
 80051d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	6a1a      	ldr	r2, [r3, #32]
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	43db      	mvns	r3, r3
 80051da:	401a      	ands	r2, r3
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	6a1a      	ldr	r2, [r3, #32]
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	f003 031f 	and.w	r3, r3, #31
 80051ea:	6879      	ldr	r1, [r7, #4]
 80051ec:	fa01 f303 	lsl.w	r3, r1, r3
 80051f0:	431a      	orrs	r2, r3
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	621a      	str	r2, [r3, #32]
}
 80051f6:	bf00      	nop
 80051f8:	371c      	adds	r7, #28
 80051fa:	46bd      	mov	sp, r7
 80051fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005200:	4770      	bx	lr
	...

08005204 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005204:	b480      	push	{r7}
 8005206:	b085      	sub	sp, #20
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
 800520c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005214:	2b01      	cmp	r3, #1
 8005216:	d101      	bne.n	800521c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005218:	2302      	movs	r3, #2
 800521a:	e05a      	b.n	80052d2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2201      	movs	r2, #1
 8005220:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2202      	movs	r2, #2
 8005228:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005242:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	68fa      	ldr	r2, [r7, #12]
 800524a:	4313      	orrs	r3, r2
 800524c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	68fa      	ldr	r2, [r7, #12]
 8005254:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a21      	ldr	r2, [pc, #132]	@ (80052e0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d022      	beq.n	80052a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005268:	d01d      	beq.n	80052a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a1d      	ldr	r2, [pc, #116]	@ (80052e4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d018      	beq.n	80052a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a1b      	ldr	r2, [pc, #108]	@ (80052e8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d013      	beq.n	80052a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a1a      	ldr	r2, [pc, #104]	@ (80052ec <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d00e      	beq.n	80052a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a18      	ldr	r2, [pc, #96]	@ (80052f0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d009      	beq.n	80052a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a17      	ldr	r2, [pc, #92]	@ (80052f4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d004      	beq.n	80052a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a15      	ldr	r2, [pc, #84]	@ (80052f8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d10c      	bne.n	80052c0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80052ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	68ba      	ldr	r2, [r7, #8]
 80052b4:	4313      	orrs	r3, r2
 80052b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	68ba      	ldr	r2, [r7, #8]
 80052be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2201      	movs	r2, #1
 80052c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2200      	movs	r2, #0
 80052cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80052d0:	2300      	movs	r3, #0
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3714      	adds	r7, #20
 80052d6:	46bd      	mov	sp, r7
 80052d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052dc:	4770      	bx	lr
 80052de:	bf00      	nop
 80052e0:	40010000 	.word	0x40010000
 80052e4:	40000400 	.word	0x40000400
 80052e8:	40000800 	.word	0x40000800
 80052ec:	40000c00 	.word	0x40000c00
 80052f0:	40010400 	.word	0x40010400
 80052f4:	40014000 	.word	0x40014000
 80052f8:	40001800 	.word	0x40001800

080052fc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b083      	sub	sp, #12
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005304:	bf00      	nop
 8005306:	370c      	adds	r7, #12
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr

08005310 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005310:	b480      	push	{r7}
 8005312:	b083      	sub	sp, #12
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005318:	bf00      	nop
 800531a:	370c      	adds	r7, #12
 800531c:	46bd      	mov	sp, r7
 800531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005322:	4770      	bx	lr

08005324 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b082      	sub	sp, #8
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d101      	bne.n	8005336 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005332:	2301      	movs	r3, #1
 8005334:	e042      	b.n	80053bc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800533c:	b2db      	uxtb	r3, r3
 800533e:	2b00      	cmp	r3, #0
 8005340:	d106      	bne.n	8005350 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2200      	movs	r2, #0
 8005346:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f7fc ff84 	bl	8002258 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2224      	movs	r2, #36	@ 0x24
 8005354:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	68da      	ldr	r2, [r3, #12]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005366:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f000 fa09 	bl	8005780 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	691a      	ldr	r2, [r3, #16]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800537c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	695a      	ldr	r2, [r3, #20]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800538c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	68da      	ldr	r2, [r3, #12]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800539c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2200      	movs	r2, #0
 80053a2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2220      	movs	r2, #32
 80053a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2220      	movs	r2, #32
 80053b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2200      	movs	r2, #0
 80053b8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80053ba:	2300      	movs	r3, #0
}
 80053bc:	4618      	mov	r0, r3
 80053be:	3708      	adds	r7, #8
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bd80      	pop	{r7, pc}

080053c4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b08a      	sub	sp, #40	@ 0x28
 80053c8:	af02      	add	r7, sp, #8
 80053ca:	60f8      	str	r0, [r7, #12]
 80053cc:	60b9      	str	r1, [r7, #8]
 80053ce:	603b      	str	r3, [r7, #0]
 80053d0:	4613      	mov	r3, r2
 80053d2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80053d4:	2300      	movs	r3, #0
 80053d6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80053de:	b2db      	uxtb	r3, r3
 80053e0:	2b20      	cmp	r3, #32
 80053e2:	d175      	bne.n	80054d0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d002      	beq.n	80053f0 <HAL_UART_Transmit+0x2c>
 80053ea:	88fb      	ldrh	r3, [r7, #6]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d101      	bne.n	80053f4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80053f0:	2301      	movs	r3, #1
 80053f2:	e06e      	b.n	80054d2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2200      	movs	r2, #0
 80053f8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	2221      	movs	r2, #33	@ 0x21
 80053fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005402:	f7fd f9c3 	bl	800278c <HAL_GetTick>
 8005406:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	88fa      	ldrh	r2, [r7, #6]
 800540c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	88fa      	ldrh	r2, [r7, #6]
 8005412:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	689b      	ldr	r3, [r3, #8]
 8005418:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800541c:	d108      	bne.n	8005430 <HAL_UART_Transmit+0x6c>
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	691b      	ldr	r3, [r3, #16]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d104      	bne.n	8005430 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005426:	2300      	movs	r3, #0
 8005428:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	61bb      	str	r3, [r7, #24]
 800542e:	e003      	b.n	8005438 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005434:	2300      	movs	r3, #0
 8005436:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005438:	e02e      	b.n	8005498 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	9300      	str	r3, [sp, #0]
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	2200      	movs	r2, #0
 8005442:	2180      	movs	r1, #128	@ 0x80
 8005444:	68f8      	ldr	r0, [r7, #12]
 8005446:	f000 f8df 	bl	8005608 <UART_WaitOnFlagUntilTimeout>
 800544a:	4603      	mov	r3, r0
 800544c:	2b00      	cmp	r3, #0
 800544e:	d005      	beq.n	800545c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2220      	movs	r2, #32
 8005454:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005458:	2303      	movs	r3, #3
 800545a:	e03a      	b.n	80054d2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800545c:	69fb      	ldr	r3, [r7, #28]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d10b      	bne.n	800547a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005462:	69bb      	ldr	r3, [r7, #24]
 8005464:	881b      	ldrh	r3, [r3, #0]
 8005466:	461a      	mov	r2, r3
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005470:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005472:	69bb      	ldr	r3, [r7, #24]
 8005474:	3302      	adds	r3, #2
 8005476:	61bb      	str	r3, [r7, #24]
 8005478:	e007      	b.n	800548a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800547a:	69fb      	ldr	r3, [r7, #28]
 800547c:	781a      	ldrb	r2, [r3, #0]
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005484:	69fb      	ldr	r3, [r7, #28]
 8005486:	3301      	adds	r3, #1
 8005488:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800548e:	b29b      	uxth	r3, r3
 8005490:	3b01      	subs	r3, #1
 8005492:	b29a      	uxth	r2, r3
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800549c:	b29b      	uxth	r3, r3
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d1cb      	bne.n	800543a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	9300      	str	r3, [sp, #0]
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	2200      	movs	r2, #0
 80054aa:	2140      	movs	r1, #64	@ 0x40
 80054ac:	68f8      	ldr	r0, [r7, #12]
 80054ae:	f000 f8ab 	bl	8005608 <UART_WaitOnFlagUntilTimeout>
 80054b2:	4603      	mov	r3, r0
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d005      	beq.n	80054c4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2220      	movs	r2, #32
 80054bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80054c0:	2303      	movs	r3, #3
 80054c2:	e006      	b.n	80054d2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2220      	movs	r2, #32
 80054c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80054cc:	2300      	movs	r3, #0
 80054ce:	e000      	b.n	80054d2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80054d0:	2302      	movs	r3, #2
  }
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3720      	adds	r7, #32
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}

080054da <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054da:	b580      	push	{r7, lr}
 80054dc:	b08a      	sub	sp, #40	@ 0x28
 80054de:	af02      	add	r7, sp, #8
 80054e0:	60f8      	str	r0, [r7, #12]
 80054e2:	60b9      	str	r1, [r7, #8]
 80054e4:	603b      	str	r3, [r7, #0]
 80054e6:	4613      	mov	r3, r2
 80054e8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80054ea:	2300      	movs	r3, #0
 80054ec:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80054f4:	b2db      	uxtb	r3, r3
 80054f6:	2b20      	cmp	r3, #32
 80054f8:	f040 8081 	bne.w	80055fe <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d002      	beq.n	8005508 <HAL_UART_Receive+0x2e>
 8005502:	88fb      	ldrh	r3, [r7, #6]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d101      	bne.n	800550c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8005508:	2301      	movs	r3, #1
 800550a:	e079      	b.n	8005600 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2200      	movs	r2, #0
 8005510:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2222      	movs	r2, #34	@ 0x22
 8005516:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2200      	movs	r2, #0
 800551e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005520:	f7fd f934 	bl	800278c <HAL_GetTick>
 8005524:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	88fa      	ldrh	r2, [r7, #6]
 800552a:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	88fa      	ldrh	r2, [r7, #6]
 8005530:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	689b      	ldr	r3, [r3, #8]
 8005536:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800553a:	d108      	bne.n	800554e <HAL_UART_Receive+0x74>
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	691b      	ldr	r3, [r3, #16]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d104      	bne.n	800554e <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8005544:	2300      	movs	r3, #0
 8005546:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	61bb      	str	r3, [r7, #24]
 800554c:	e003      	b.n	8005556 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005552:	2300      	movs	r3, #0
 8005554:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8005556:	e047      	b.n	80055e8 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	9300      	str	r3, [sp, #0]
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	2200      	movs	r2, #0
 8005560:	2120      	movs	r1, #32
 8005562:	68f8      	ldr	r0, [r7, #12]
 8005564:	f000 f850 	bl	8005608 <UART_WaitOnFlagUntilTimeout>
 8005568:	4603      	mov	r3, r0
 800556a:	2b00      	cmp	r3, #0
 800556c:	d005      	beq.n	800557a <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2220      	movs	r2, #32
 8005572:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8005576:	2303      	movs	r3, #3
 8005578:	e042      	b.n	8005600 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 800557a:	69fb      	ldr	r3, [r7, #28]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d10c      	bne.n	800559a <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	b29b      	uxth	r3, r3
 8005588:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800558c:	b29a      	uxth	r2, r3
 800558e:	69bb      	ldr	r3, [r7, #24]
 8005590:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005592:	69bb      	ldr	r3, [r7, #24]
 8005594:	3302      	adds	r3, #2
 8005596:	61bb      	str	r3, [r7, #24]
 8005598:	e01f      	b.n	80055da <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	689b      	ldr	r3, [r3, #8]
 800559e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055a2:	d007      	beq.n	80055b4 <HAL_UART_Receive+0xda>
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	689b      	ldr	r3, [r3, #8]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d10a      	bne.n	80055c2 <HAL_UART_Receive+0xe8>
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	691b      	ldr	r3, [r3, #16]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d106      	bne.n	80055c2 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	b2da      	uxtb	r2, r3
 80055bc:	69fb      	ldr	r3, [r7, #28]
 80055be:	701a      	strb	r2, [r3, #0]
 80055c0:	e008      	b.n	80055d4 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	b2db      	uxtb	r3, r3
 80055ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80055ce:	b2da      	uxtb	r2, r3
 80055d0:	69fb      	ldr	r3, [r7, #28]
 80055d2:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80055d4:	69fb      	ldr	r3, [r7, #28]
 80055d6:	3301      	adds	r3, #1
 80055d8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80055de:	b29b      	uxth	r3, r3
 80055e0:	3b01      	subs	r3, #1
 80055e2:	b29a      	uxth	r2, r3
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80055ec:	b29b      	uxth	r3, r3
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d1b2      	bne.n	8005558 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2220      	movs	r2, #32
 80055f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 80055fa:	2300      	movs	r3, #0
 80055fc:	e000      	b.n	8005600 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 80055fe:	2302      	movs	r3, #2
  }
}
 8005600:	4618      	mov	r0, r3
 8005602:	3720      	adds	r7, #32
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}

08005608 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b086      	sub	sp, #24
 800560c:	af00      	add	r7, sp, #0
 800560e:	60f8      	str	r0, [r7, #12]
 8005610:	60b9      	str	r1, [r7, #8]
 8005612:	603b      	str	r3, [r7, #0]
 8005614:	4613      	mov	r3, r2
 8005616:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005618:	e03b      	b.n	8005692 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800561a:	6a3b      	ldr	r3, [r7, #32]
 800561c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005620:	d037      	beq.n	8005692 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005622:	f7fd f8b3 	bl	800278c <HAL_GetTick>
 8005626:	4602      	mov	r2, r0
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	1ad3      	subs	r3, r2, r3
 800562c:	6a3a      	ldr	r2, [r7, #32]
 800562e:	429a      	cmp	r2, r3
 8005630:	d302      	bcc.n	8005638 <UART_WaitOnFlagUntilTimeout+0x30>
 8005632:	6a3b      	ldr	r3, [r7, #32]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d101      	bne.n	800563c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005638:	2303      	movs	r3, #3
 800563a:	e03a      	b.n	80056b2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	68db      	ldr	r3, [r3, #12]
 8005642:	f003 0304 	and.w	r3, r3, #4
 8005646:	2b00      	cmp	r3, #0
 8005648:	d023      	beq.n	8005692 <UART_WaitOnFlagUntilTimeout+0x8a>
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	2b80      	cmp	r3, #128	@ 0x80
 800564e:	d020      	beq.n	8005692 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	2b40      	cmp	r3, #64	@ 0x40
 8005654:	d01d      	beq.n	8005692 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f003 0308 	and.w	r3, r3, #8
 8005660:	2b08      	cmp	r3, #8
 8005662:	d116      	bne.n	8005692 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005664:	2300      	movs	r3, #0
 8005666:	617b      	str	r3, [r7, #20]
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	617b      	str	r3, [r7, #20]
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	617b      	str	r3, [r7, #20]
 8005678:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800567a:	68f8      	ldr	r0, [r7, #12]
 800567c:	f000 f81d 	bl	80056ba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2208      	movs	r2, #8
 8005684:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2200      	movs	r2, #0
 800568a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	e00f      	b.n	80056b2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	681a      	ldr	r2, [r3, #0]
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	4013      	ands	r3, r2
 800569c:	68ba      	ldr	r2, [r7, #8]
 800569e:	429a      	cmp	r2, r3
 80056a0:	bf0c      	ite	eq
 80056a2:	2301      	moveq	r3, #1
 80056a4:	2300      	movne	r3, #0
 80056a6:	b2db      	uxtb	r3, r3
 80056a8:	461a      	mov	r2, r3
 80056aa:	79fb      	ldrb	r3, [r7, #7]
 80056ac:	429a      	cmp	r2, r3
 80056ae:	d0b4      	beq.n	800561a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80056b0:	2300      	movs	r3, #0
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	3718      	adds	r7, #24
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}

080056ba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80056ba:	b480      	push	{r7}
 80056bc:	b095      	sub	sp, #84	@ 0x54
 80056be:	af00      	add	r7, sp, #0
 80056c0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	330c      	adds	r3, #12
 80056c8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056cc:	e853 3f00 	ldrex	r3, [r3]
 80056d0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80056d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80056d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	330c      	adds	r3, #12
 80056e0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80056e2:	643a      	str	r2, [r7, #64]	@ 0x40
 80056e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056e6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80056e8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80056ea:	e841 2300 	strex	r3, r2, [r1]
 80056ee:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80056f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d1e5      	bne.n	80056c2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	3314      	adds	r3, #20
 80056fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056fe:	6a3b      	ldr	r3, [r7, #32]
 8005700:	e853 3f00 	ldrex	r3, [r3]
 8005704:	61fb      	str	r3, [r7, #28]
   return(result);
 8005706:	69fb      	ldr	r3, [r7, #28]
 8005708:	f023 0301 	bic.w	r3, r3, #1
 800570c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	3314      	adds	r3, #20
 8005714:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005716:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005718:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800571a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800571c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800571e:	e841 2300 	strex	r3, r2, [r1]
 8005722:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005726:	2b00      	cmp	r3, #0
 8005728:	d1e5      	bne.n	80056f6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800572e:	2b01      	cmp	r3, #1
 8005730:	d119      	bne.n	8005766 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	330c      	adds	r3, #12
 8005738:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	e853 3f00 	ldrex	r3, [r3]
 8005740:	60bb      	str	r3, [r7, #8]
   return(result);
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	f023 0310 	bic.w	r3, r3, #16
 8005748:	647b      	str	r3, [r7, #68]	@ 0x44
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	330c      	adds	r3, #12
 8005750:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005752:	61ba      	str	r2, [r7, #24]
 8005754:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005756:	6979      	ldr	r1, [r7, #20]
 8005758:	69ba      	ldr	r2, [r7, #24]
 800575a:	e841 2300 	strex	r3, r2, [r1]
 800575e:	613b      	str	r3, [r7, #16]
   return(result);
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d1e5      	bne.n	8005732 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2220      	movs	r2, #32
 800576a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2200      	movs	r2, #0
 8005772:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005774:	bf00      	nop
 8005776:	3754      	adds	r7, #84	@ 0x54
 8005778:	46bd      	mov	sp, r7
 800577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577e:	4770      	bx	lr

08005780 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005780:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005784:	b0c0      	sub	sp, #256	@ 0x100
 8005786:	af00      	add	r7, sp, #0
 8005788:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800578c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	691b      	ldr	r3, [r3, #16]
 8005794:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800579c:	68d9      	ldr	r1, [r3, #12]
 800579e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057a2:	681a      	ldr	r2, [r3, #0]
 80057a4:	ea40 0301 	orr.w	r3, r0, r1
 80057a8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80057aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057ae:	689a      	ldr	r2, [r3, #8]
 80057b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057b4:	691b      	ldr	r3, [r3, #16]
 80057b6:	431a      	orrs	r2, r3
 80057b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057bc:	695b      	ldr	r3, [r3, #20]
 80057be:	431a      	orrs	r2, r3
 80057c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057c4:	69db      	ldr	r3, [r3, #28]
 80057c6:	4313      	orrs	r3, r2
 80057c8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80057cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	68db      	ldr	r3, [r3, #12]
 80057d4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80057d8:	f021 010c 	bic.w	r1, r1, #12
 80057dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057e0:	681a      	ldr	r2, [r3, #0]
 80057e2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80057e6:	430b      	orrs	r3, r1
 80057e8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80057ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	695b      	ldr	r3, [r3, #20]
 80057f2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80057f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057fa:	6999      	ldr	r1, [r3, #24]
 80057fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005800:	681a      	ldr	r2, [r3, #0]
 8005802:	ea40 0301 	orr.w	r3, r0, r1
 8005806:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005808:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800580c:	681a      	ldr	r2, [r3, #0]
 800580e:	4b8f      	ldr	r3, [pc, #572]	@ (8005a4c <UART_SetConfig+0x2cc>)
 8005810:	429a      	cmp	r2, r3
 8005812:	d005      	beq.n	8005820 <UART_SetConfig+0xa0>
 8005814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005818:	681a      	ldr	r2, [r3, #0]
 800581a:	4b8d      	ldr	r3, [pc, #564]	@ (8005a50 <UART_SetConfig+0x2d0>)
 800581c:	429a      	cmp	r2, r3
 800581e:	d104      	bne.n	800582a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005820:	f7fe fb14 	bl	8003e4c <HAL_RCC_GetPCLK2Freq>
 8005824:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005828:	e003      	b.n	8005832 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800582a:	f7fe fafb 	bl	8003e24 <HAL_RCC_GetPCLK1Freq>
 800582e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005832:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005836:	69db      	ldr	r3, [r3, #28]
 8005838:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800583c:	f040 810c 	bne.w	8005a58 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005840:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005844:	2200      	movs	r2, #0
 8005846:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800584a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800584e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005852:	4622      	mov	r2, r4
 8005854:	462b      	mov	r3, r5
 8005856:	1891      	adds	r1, r2, r2
 8005858:	65b9      	str	r1, [r7, #88]	@ 0x58
 800585a:	415b      	adcs	r3, r3
 800585c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800585e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005862:	4621      	mov	r1, r4
 8005864:	eb12 0801 	adds.w	r8, r2, r1
 8005868:	4629      	mov	r1, r5
 800586a:	eb43 0901 	adc.w	r9, r3, r1
 800586e:	f04f 0200 	mov.w	r2, #0
 8005872:	f04f 0300 	mov.w	r3, #0
 8005876:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800587a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800587e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005882:	4690      	mov	r8, r2
 8005884:	4699      	mov	r9, r3
 8005886:	4623      	mov	r3, r4
 8005888:	eb18 0303 	adds.w	r3, r8, r3
 800588c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005890:	462b      	mov	r3, r5
 8005892:	eb49 0303 	adc.w	r3, r9, r3
 8005896:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800589a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	2200      	movs	r2, #0
 80058a2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80058a6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80058aa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80058ae:	460b      	mov	r3, r1
 80058b0:	18db      	adds	r3, r3, r3
 80058b2:	653b      	str	r3, [r7, #80]	@ 0x50
 80058b4:	4613      	mov	r3, r2
 80058b6:	eb42 0303 	adc.w	r3, r2, r3
 80058ba:	657b      	str	r3, [r7, #84]	@ 0x54
 80058bc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80058c0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80058c4:	f7fb f9e0 	bl	8000c88 <__aeabi_uldivmod>
 80058c8:	4602      	mov	r2, r0
 80058ca:	460b      	mov	r3, r1
 80058cc:	4b61      	ldr	r3, [pc, #388]	@ (8005a54 <UART_SetConfig+0x2d4>)
 80058ce:	fba3 2302 	umull	r2, r3, r3, r2
 80058d2:	095b      	lsrs	r3, r3, #5
 80058d4:	011c      	lsls	r4, r3, #4
 80058d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80058da:	2200      	movs	r2, #0
 80058dc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80058e0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80058e4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80058e8:	4642      	mov	r2, r8
 80058ea:	464b      	mov	r3, r9
 80058ec:	1891      	adds	r1, r2, r2
 80058ee:	64b9      	str	r1, [r7, #72]	@ 0x48
 80058f0:	415b      	adcs	r3, r3
 80058f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80058f4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80058f8:	4641      	mov	r1, r8
 80058fa:	eb12 0a01 	adds.w	sl, r2, r1
 80058fe:	4649      	mov	r1, r9
 8005900:	eb43 0b01 	adc.w	fp, r3, r1
 8005904:	f04f 0200 	mov.w	r2, #0
 8005908:	f04f 0300 	mov.w	r3, #0
 800590c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005910:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005914:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005918:	4692      	mov	sl, r2
 800591a:	469b      	mov	fp, r3
 800591c:	4643      	mov	r3, r8
 800591e:	eb1a 0303 	adds.w	r3, sl, r3
 8005922:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005926:	464b      	mov	r3, r9
 8005928:	eb4b 0303 	adc.w	r3, fp, r3
 800592c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	2200      	movs	r2, #0
 8005938:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800593c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005940:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005944:	460b      	mov	r3, r1
 8005946:	18db      	adds	r3, r3, r3
 8005948:	643b      	str	r3, [r7, #64]	@ 0x40
 800594a:	4613      	mov	r3, r2
 800594c:	eb42 0303 	adc.w	r3, r2, r3
 8005950:	647b      	str	r3, [r7, #68]	@ 0x44
 8005952:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005956:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800595a:	f7fb f995 	bl	8000c88 <__aeabi_uldivmod>
 800595e:	4602      	mov	r2, r0
 8005960:	460b      	mov	r3, r1
 8005962:	4611      	mov	r1, r2
 8005964:	4b3b      	ldr	r3, [pc, #236]	@ (8005a54 <UART_SetConfig+0x2d4>)
 8005966:	fba3 2301 	umull	r2, r3, r3, r1
 800596a:	095b      	lsrs	r3, r3, #5
 800596c:	2264      	movs	r2, #100	@ 0x64
 800596e:	fb02 f303 	mul.w	r3, r2, r3
 8005972:	1acb      	subs	r3, r1, r3
 8005974:	00db      	lsls	r3, r3, #3
 8005976:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800597a:	4b36      	ldr	r3, [pc, #216]	@ (8005a54 <UART_SetConfig+0x2d4>)
 800597c:	fba3 2302 	umull	r2, r3, r3, r2
 8005980:	095b      	lsrs	r3, r3, #5
 8005982:	005b      	lsls	r3, r3, #1
 8005984:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005988:	441c      	add	r4, r3
 800598a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800598e:	2200      	movs	r2, #0
 8005990:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005994:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005998:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800599c:	4642      	mov	r2, r8
 800599e:	464b      	mov	r3, r9
 80059a0:	1891      	adds	r1, r2, r2
 80059a2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80059a4:	415b      	adcs	r3, r3
 80059a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80059a8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80059ac:	4641      	mov	r1, r8
 80059ae:	1851      	adds	r1, r2, r1
 80059b0:	6339      	str	r1, [r7, #48]	@ 0x30
 80059b2:	4649      	mov	r1, r9
 80059b4:	414b      	adcs	r3, r1
 80059b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80059b8:	f04f 0200 	mov.w	r2, #0
 80059bc:	f04f 0300 	mov.w	r3, #0
 80059c0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80059c4:	4659      	mov	r1, fp
 80059c6:	00cb      	lsls	r3, r1, #3
 80059c8:	4651      	mov	r1, sl
 80059ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80059ce:	4651      	mov	r1, sl
 80059d0:	00ca      	lsls	r2, r1, #3
 80059d2:	4610      	mov	r0, r2
 80059d4:	4619      	mov	r1, r3
 80059d6:	4603      	mov	r3, r0
 80059d8:	4642      	mov	r2, r8
 80059da:	189b      	adds	r3, r3, r2
 80059dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80059e0:	464b      	mov	r3, r9
 80059e2:	460a      	mov	r2, r1
 80059e4:	eb42 0303 	adc.w	r3, r2, r3
 80059e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80059ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	2200      	movs	r2, #0
 80059f4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80059f8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80059fc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005a00:	460b      	mov	r3, r1
 8005a02:	18db      	adds	r3, r3, r3
 8005a04:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005a06:	4613      	mov	r3, r2
 8005a08:	eb42 0303 	adc.w	r3, r2, r3
 8005a0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005a0e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005a12:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005a16:	f7fb f937 	bl	8000c88 <__aeabi_uldivmod>
 8005a1a:	4602      	mov	r2, r0
 8005a1c:	460b      	mov	r3, r1
 8005a1e:	4b0d      	ldr	r3, [pc, #52]	@ (8005a54 <UART_SetConfig+0x2d4>)
 8005a20:	fba3 1302 	umull	r1, r3, r3, r2
 8005a24:	095b      	lsrs	r3, r3, #5
 8005a26:	2164      	movs	r1, #100	@ 0x64
 8005a28:	fb01 f303 	mul.w	r3, r1, r3
 8005a2c:	1ad3      	subs	r3, r2, r3
 8005a2e:	00db      	lsls	r3, r3, #3
 8005a30:	3332      	adds	r3, #50	@ 0x32
 8005a32:	4a08      	ldr	r2, [pc, #32]	@ (8005a54 <UART_SetConfig+0x2d4>)
 8005a34:	fba2 2303 	umull	r2, r3, r2, r3
 8005a38:	095b      	lsrs	r3, r3, #5
 8005a3a:	f003 0207 	and.w	r2, r3, #7
 8005a3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4422      	add	r2, r4
 8005a46:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005a48:	e106      	b.n	8005c58 <UART_SetConfig+0x4d8>
 8005a4a:	bf00      	nop
 8005a4c:	40011000 	.word	0x40011000
 8005a50:	40011400 	.word	0x40011400
 8005a54:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005a58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005a62:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005a66:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005a6a:	4642      	mov	r2, r8
 8005a6c:	464b      	mov	r3, r9
 8005a6e:	1891      	adds	r1, r2, r2
 8005a70:	6239      	str	r1, [r7, #32]
 8005a72:	415b      	adcs	r3, r3
 8005a74:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a76:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005a7a:	4641      	mov	r1, r8
 8005a7c:	1854      	adds	r4, r2, r1
 8005a7e:	4649      	mov	r1, r9
 8005a80:	eb43 0501 	adc.w	r5, r3, r1
 8005a84:	f04f 0200 	mov.w	r2, #0
 8005a88:	f04f 0300 	mov.w	r3, #0
 8005a8c:	00eb      	lsls	r3, r5, #3
 8005a8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005a92:	00e2      	lsls	r2, r4, #3
 8005a94:	4614      	mov	r4, r2
 8005a96:	461d      	mov	r5, r3
 8005a98:	4643      	mov	r3, r8
 8005a9a:	18e3      	adds	r3, r4, r3
 8005a9c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005aa0:	464b      	mov	r3, r9
 8005aa2:	eb45 0303 	adc.w	r3, r5, r3
 8005aa6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005aaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005ab6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005aba:	f04f 0200 	mov.w	r2, #0
 8005abe:	f04f 0300 	mov.w	r3, #0
 8005ac2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005ac6:	4629      	mov	r1, r5
 8005ac8:	008b      	lsls	r3, r1, #2
 8005aca:	4621      	mov	r1, r4
 8005acc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ad0:	4621      	mov	r1, r4
 8005ad2:	008a      	lsls	r2, r1, #2
 8005ad4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005ad8:	f7fb f8d6 	bl	8000c88 <__aeabi_uldivmod>
 8005adc:	4602      	mov	r2, r0
 8005ade:	460b      	mov	r3, r1
 8005ae0:	4b60      	ldr	r3, [pc, #384]	@ (8005c64 <UART_SetConfig+0x4e4>)
 8005ae2:	fba3 2302 	umull	r2, r3, r3, r2
 8005ae6:	095b      	lsrs	r3, r3, #5
 8005ae8:	011c      	lsls	r4, r3, #4
 8005aea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005aee:	2200      	movs	r2, #0
 8005af0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005af4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005af8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005afc:	4642      	mov	r2, r8
 8005afe:	464b      	mov	r3, r9
 8005b00:	1891      	adds	r1, r2, r2
 8005b02:	61b9      	str	r1, [r7, #24]
 8005b04:	415b      	adcs	r3, r3
 8005b06:	61fb      	str	r3, [r7, #28]
 8005b08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005b0c:	4641      	mov	r1, r8
 8005b0e:	1851      	adds	r1, r2, r1
 8005b10:	6139      	str	r1, [r7, #16]
 8005b12:	4649      	mov	r1, r9
 8005b14:	414b      	adcs	r3, r1
 8005b16:	617b      	str	r3, [r7, #20]
 8005b18:	f04f 0200 	mov.w	r2, #0
 8005b1c:	f04f 0300 	mov.w	r3, #0
 8005b20:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005b24:	4659      	mov	r1, fp
 8005b26:	00cb      	lsls	r3, r1, #3
 8005b28:	4651      	mov	r1, sl
 8005b2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b2e:	4651      	mov	r1, sl
 8005b30:	00ca      	lsls	r2, r1, #3
 8005b32:	4610      	mov	r0, r2
 8005b34:	4619      	mov	r1, r3
 8005b36:	4603      	mov	r3, r0
 8005b38:	4642      	mov	r2, r8
 8005b3a:	189b      	adds	r3, r3, r2
 8005b3c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005b40:	464b      	mov	r3, r9
 8005b42:	460a      	mov	r2, r1
 8005b44:	eb42 0303 	adc.w	r3, r2, r3
 8005b48:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	2200      	movs	r2, #0
 8005b54:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005b56:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005b58:	f04f 0200 	mov.w	r2, #0
 8005b5c:	f04f 0300 	mov.w	r3, #0
 8005b60:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005b64:	4649      	mov	r1, r9
 8005b66:	008b      	lsls	r3, r1, #2
 8005b68:	4641      	mov	r1, r8
 8005b6a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b6e:	4641      	mov	r1, r8
 8005b70:	008a      	lsls	r2, r1, #2
 8005b72:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005b76:	f7fb f887 	bl	8000c88 <__aeabi_uldivmod>
 8005b7a:	4602      	mov	r2, r0
 8005b7c:	460b      	mov	r3, r1
 8005b7e:	4611      	mov	r1, r2
 8005b80:	4b38      	ldr	r3, [pc, #224]	@ (8005c64 <UART_SetConfig+0x4e4>)
 8005b82:	fba3 2301 	umull	r2, r3, r3, r1
 8005b86:	095b      	lsrs	r3, r3, #5
 8005b88:	2264      	movs	r2, #100	@ 0x64
 8005b8a:	fb02 f303 	mul.w	r3, r2, r3
 8005b8e:	1acb      	subs	r3, r1, r3
 8005b90:	011b      	lsls	r3, r3, #4
 8005b92:	3332      	adds	r3, #50	@ 0x32
 8005b94:	4a33      	ldr	r2, [pc, #204]	@ (8005c64 <UART_SetConfig+0x4e4>)
 8005b96:	fba2 2303 	umull	r2, r3, r2, r3
 8005b9a:	095b      	lsrs	r3, r3, #5
 8005b9c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005ba0:	441c      	add	r4, r3
 8005ba2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	673b      	str	r3, [r7, #112]	@ 0x70
 8005baa:	677a      	str	r2, [r7, #116]	@ 0x74
 8005bac:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005bb0:	4642      	mov	r2, r8
 8005bb2:	464b      	mov	r3, r9
 8005bb4:	1891      	adds	r1, r2, r2
 8005bb6:	60b9      	str	r1, [r7, #8]
 8005bb8:	415b      	adcs	r3, r3
 8005bba:	60fb      	str	r3, [r7, #12]
 8005bbc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005bc0:	4641      	mov	r1, r8
 8005bc2:	1851      	adds	r1, r2, r1
 8005bc4:	6039      	str	r1, [r7, #0]
 8005bc6:	4649      	mov	r1, r9
 8005bc8:	414b      	adcs	r3, r1
 8005bca:	607b      	str	r3, [r7, #4]
 8005bcc:	f04f 0200 	mov.w	r2, #0
 8005bd0:	f04f 0300 	mov.w	r3, #0
 8005bd4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005bd8:	4659      	mov	r1, fp
 8005bda:	00cb      	lsls	r3, r1, #3
 8005bdc:	4651      	mov	r1, sl
 8005bde:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005be2:	4651      	mov	r1, sl
 8005be4:	00ca      	lsls	r2, r1, #3
 8005be6:	4610      	mov	r0, r2
 8005be8:	4619      	mov	r1, r3
 8005bea:	4603      	mov	r3, r0
 8005bec:	4642      	mov	r2, r8
 8005bee:	189b      	adds	r3, r3, r2
 8005bf0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005bf2:	464b      	mov	r3, r9
 8005bf4:	460a      	mov	r2, r1
 8005bf6:	eb42 0303 	adc.w	r3, r2, r3
 8005bfa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005bfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	2200      	movs	r2, #0
 8005c04:	663b      	str	r3, [r7, #96]	@ 0x60
 8005c06:	667a      	str	r2, [r7, #100]	@ 0x64
 8005c08:	f04f 0200 	mov.w	r2, #0
 8005c0c:	f04f 0300 	mov.w	r3, #0
 8005c10:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005c14:	4649      	mov	r1, r9
 8005c16:	008b      	lsls	r3, r1, #2
 8005c18:	4641      	mov	r1, r8
 8005c1a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c1e:	4641      	mov	r1, r8
 8005c20:	008a      	lsls	r2, r1, #2
 8005c22:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005c26:	f7fb f82f 	bl	8000c88 <__aeabi_uldivmod>
 8005c2a:	4602      	mov	r2, r0
 8005c2c:	460b      	mov	r3, r1
 8005c2e:	4b0d      	ldr	r3, [pc, #52]	@ (8005c64 <UART_SetConfig+0x4e4>)
 8005c30:	fba3 1302 	umull	r1, r3, r3, r2
 8005c34:	095b      	lsrs	r3, r3, #5
 8005c36:	2164      	movs	r1, #100	@ 0x64
 8005c38:	fb01 f303 	mul.w	r3, r1, r3
 8005c3c:	1ad3      	subs	r3, r2, r3
 8005c3e:	011b      	lsls	r3, r3, #4
 8005c40:	3332      	adds	r3, #50	@ 0x32
 8005c42:	4a08      	ldr	r2, [pc, #32]	@ (8005c64 <UART_SetConfig+0x4e4>)
 8005c44:	fba2 2303 	umull	r2, r3, r2, r3
 8005c48:	095b      	lsrs	r3, r3, #5
 8005c4a:	f003 020f 	and.w	r2, r3, #15
 8005c4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4422      	add	r2, r4
 8005c56:	609a      	str	r2, [r3, #8]
}
 8005c58:	bf00      	nop
 8005c5a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c64:	51eb851f 	.word	0x51eb851f

08005c68 <__cvt>:
 8005c68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c6c:	ec57 6b10 	vmov	r6, r7, d0
 8005c70:	2f00      	cmp	r7, #0
 8005c72:	460c      	mov	r4, r1
 8005c74:	4619      	mov	r1, r3
 8005c76:	463b      	mov	r3, r7
 8005c78:	bfbb      	ittet	lt
 8005c7a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005c7e:	461f      	movlt	r7, r3
 8005c80:	2300      	movge	r3, #0
 8005c82:	232d      	movlt	r3, #45	@ 0x2d
 8005c84:	700b      	strb	r3, [r1, #0]
 8005c86:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005c88:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005c8c:	4691      	mov	r9, r2
 8005c8e:	f023 0820 	bic.w	r8, r3, #32
 8005c92:	bfbc      	itt	lt
 8005c94:	4632      	movlt	r2, r6
 8005c96:	4616      	movlt	r6, r2
 8005c98:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005c9c:	d005      	beq.n	8005caa <__cvt+0x42>
 8005c9e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005ca2:	d100      	bne.n	8005ca6 <__cvt+0x3e>
 8005ca4:	3401      	adds	r4, #1
 8005ca6:	2102      	movs	r1, #2
 8005ca8:	e000      	b.n	8005cac <__cvt+0x44>
 8005caa:	2103      	movs	r1, #3
 8005cac:	ab03      	add	r3, sp, #12
 8005cae:	9301      	str	r3, [sp, #4]
 8005cb0:	ab02      	add	r3, sp, #8
 8005cb2:	9300      	str	r3, [sp, #0]
 8005cb4:	ec47 6b10 	vmov	d0, r6, r7
 8005cb8:	4653      	mov	r3, sl
 8005cba:	4622      	mov	r2, r4
 8005cbc:	f001 f8b4 	bl	8006e28 <_dtoa_r>
 8005cc0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005cc4:	4605      	mov	r5, r0
 8005cc6:	d119      	bne.n	8005cfc <__cvt+0x94>
 8005cc8:	f019 0f01 	tst.w	r9, #1
 8005ccc:	d00e      	beq.n	8005cec <__cvt+0x84>
 8005cce:	eb00 0904 	add.w	r9, r0, r4
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	4630      	mov	r0, r6
 8005cd8:	4639      	mov	r1, r7
 8005cda:	f7fa fef5 	bl	8000ac8 <__aeabi_dcmpeq>
 8005cde:	b108      	cbz	r0, 8005ce4 <__cvt+0x7c>
 8005ce0:	f8cd 900c 	str.w	r9, [sp, #12]
 8005ce4:	2230      	movs	r2, #48	@ 0x30
 8005ce6:	9b03      	ldr	r3, [sp, #12]
 8005ce8:	454b      	cmp	r3, r9
 8005cea:	d31e      	bcc.n	8005d2a <__cvt+0xc2>
 8005cec:	9b03      	ldr	r3, [sp, #12]
 8005cee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005cf0:	1b5b      	subs	r3, r3, r5
 8005cf2:	4628      	mov	r0, r5
 8005cf4:	6013      	str	r3, [r2, #0]
 8005cf6:	b004      	add	sp, #16
 8005cf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cfc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005d00:	eb00 0904 	add.w	r9, r0, r4
 8005d04:	d1e5      	bne.n	8005cd2 <__cvt+0x6a>
 8005d06:	7803      	ldrb	r3, [r0, #0]
 8005d08:	2b30      	cmp	r3, #48	@ 0x30
 8005d0a:	d10a      	bne.n	8005d22 <__cvt+0xba>
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	2300      	movs	r3, #0
 8005d10:	4630      	mov	r0, r6
 8005d12:	4639      	mov	r1, r7
 8005d14:	f7fa fed8 	bl	8000ac8 <__aeabi_dcmpeq>
 8005d18:	b918      	cbnz	r0, 8005d22 <__cvt+0xba>
 8005d1a:	f1c4 0401 	rsb	r4, r4, #1
 8005d1e:	f8ca 4000 	str.w	r4, [sl]
 8005d22:	f8da 3000 	ldr.w	r3, [sl]
 8005d26:	4499      	add	r9, r3
 8005d28:	e7d3      	b.n	8005cd2 <__cvt+0x6a>
 8005d2a:	1c59      	adds	r1, r3, #1
 8005d2c:	9103      	str	r1, [sp, #12]
 8005d2e:	701a      	strb	r2, [r3, #0]
 8005d30:	e7d9      	b.n	8005ce6 <__cvt+0x7e>

08005d32 <__exponent>:
 8005d32:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005d34:	2900      	cmp	r1, #0
 8005d36:	bfba      	itte	lt
 8005d38:	4249      	neglt	r1, r1
 8005d3a:	232d      	movlt	r3, #45	@ 0x2d
 8005d3c:	232b      	movge	r3, #43	@ 0x2b
 8005d3e:	2909      	cmp	r1, #9
 8005d40:	7002      	strb	r2, [r0, #0]
 8005d42:	7043      	strb	r3, [r0, #1]
 8005d44:	dd29      	ble.n	8005d9a <__exponent+0x68>
 8005d46:	f10d 0307 	add.w	r3, sp, #7
 8005d4a:	461d      	mov	r5, r3
 8005d4c:	270a      	movs	r7, #10
 8005d4e:	461a      	mov	r2, r3
 8005d50:	fbb1 f6f7 	udiv	r6, r1, r7
 8005d54:	fb07 1416 	mls	r4, r7, r6, r1
 8005d58:	3430      	adds	r4, #48	@ 0x30
 8005d5a:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005d5e:	460c      	mov	r4, r1
 8005d60:	2c63      	cmp	r4, #99	@ 0x63
 8005d62:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8005d66:	4631      	mov	r1, r6
 8005d68:	dcf1      	bgt.n	8005d4e <__exponent+0x1c>
 8005d6a:	3130      	adds	r1, #48	@ 0x30
 8005d6c:	1e94      	subs	r4, r2, #2
 8005d6e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005d72:	1c41      	adds	r1, r0, #1
 8005d74:	4623      	mov	r3, r4
 8005d76:	42ab      	cmp	r3, r5
 8005d78:	d30a      	bcc.n	8005d90 <__exponent+0x5e>
 8005d7a:	f10d 0309 	add.w	r3, sp, #9
 8005d7e:	1a9b      	subs	r3, r3, r2
 8005d80:	42ac      	cmp	r4, r5
 8005d82:	bf88      	it	hi
 8005d84:	2300      	movhi	r3, #0
 8005d86:	3302      	adds	r3, #2
 8005d88:	4403      	add	r3, r0
 8005d8a:	1a18      	subs	r0, r3, r0
 8005d8c:	b003      	add	sp, #12
 8005d8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d90:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005d94:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005d98:	e7ed      	b.n	8005d76 <__exponent+0x44>
 8005d9a:	2330      	movs	r3, #48	@ 0x30
 8005d9c:	3130      	adds	r1, #48	@ 0x30
 8005d9e:	7083      	strb	r3, [r0, #2]
 8005da0:	70c1      	strb	r1, [r0, #3]
 8005da2:	1d03      	adds	r3, r0, #4
 8005da4:	e7f1      	b.n	8005d8a <__exponent+0x58>
	...

08005da8 <_printf_float>:
 8005da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dac:	b08d      	sub	sp, #52	@ 0x34
 8005dae:	460c      	mov	r4, r1
 8005db0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005db4:	4616      	mov	r6, r2
 8005db6:	461f      	mov	r7, r3
 8005db8:	4605      	mov	r5, r0
 8005dba:	f000 ff2d 	bl	8006c18 <_localeconv_r>
 8005dbe:	6803      	ldr	r3, [r0, #0]
 8005dc0:	9304      	str	r3, [sp, #16]
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	f7fa fa54 	bl	8000270 <strlen>
 8005dc8:	2300      	movs	r3, #0
 8005dca:	930a      	str	r3, [sp, #40]	@ 0x28
 8005dcc:	f8d8 3000 	ldr.w	r3, [r8]
 8005dd0:	9005      	str	r0, [sp, #20]
 8005dd2:	3307      	adds	r3, #7
 8005dd4:	f023 0307 	bic.w	r3, r3, #7
 8005dd8:	f103 0208 	add.w	r2, r3, #8
 8005ddc:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005de0:	f8d4 b000 	ldr.w	fp, [r4]
 8005de4:	f8c8 2000 	str.w	r2, [r8]
 8005de8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005dec:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005df0:	9307      	str	r3, [sp, #28]
 8005df2:	f8cd 8018 	str.w	r8, [sp, #24]
 8005df6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005dfa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005dfe:	4b9c      	ldr	r3, [pc, #624]	@ (8006070 <_printf_float+0x2c8>)
 8005e00:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005e04:	f7fa fe92 	bl	8000b2c <__aeabi_dcmpun>
 8005e08:	bb70      	cbnz	r0, 8005e68 <_printf_float+0xc0>
 8005e0a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005e0e:	4b98      	ldr	r3, [pc, #608]	@ (8006070 <_printf_float+0x2c8>)
 8005e10:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005e14:	f7fa fe6c 	bl	8000af0 <__aeabi_dcmple>
 8005e18:	bb30      	cbnz	r0, 8005e68 <_printf_float+0xc0>
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	4640      	mov	r0, r8
 8005e20:	4649      	mov	r1, r9
 8005e22:	f7fa fe5b 	bl	8000adc <__aeabi_dcmplt>
 8005e26:	b110      	cbz	r0, 8005e2e <_printf_float+0x86>
 8005e28:	232d      	movs	r3, #45	@ 0x2d
 8005e2a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005e2e:	4a91      	ldr	r2, [pc, #580]	@ (8006074 <_printf_float+0x2cc>)
 8005e30:	4b91      	ldr	r3, [pc, #580]	@ (8006078 <_printf_float+0x2d0>)
 8005e32:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005e36:	bf8c      	ite	hi
 8005e38:	4690      	movhi	r8, r2
 8005e3a:	4698      	movls	r8, r3
 8005e3c:	2303      	movs	r3, #3
 8005e3e:	6123      	str	r3, [r4, #16]
 8005e40:	f02b 0304 	bic.w	r3, fp, #4
 8005e44:	6023      	str	r3, [r4, #0]
 8005e46:	f04f 0900 	mov.w	r9, #0
 8005e4a:	9700      	str	r7, [sp, #0]
 8005e4c:	4633      	mov	r3, r6
 8005e4e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005e50:	4621      	mov	r1, r4
 8005e52:	4628      	mov	r0, r5
 8005e54:	f000 f9d2 	bl	80061fc <_printf_common>
 8005e58:	3001      	adds	r0, #1
 8005e5a:	f040 808d 	bne.w	8005f78 <_printf_float+0x1d0>
 8005e5e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005e62:	b00d      	add	sp, #52	@ 0x34
 8005e64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e68:	4642      	mov	r2, r8
 8005e6a:	464b      	mov	r3, r9
 8005e6c:	4640      	mov	r0, r8
 8005e6e:	4649      	mov	r1, r9
 8005e70:	f7fa fe5c 	bl	8000b2c <__aeabi_dcmpun>
 8005e74:	b140      	cbz	r0, 8005e88 <_printf_float+0xe0>
 8005e76:	464b      	mov	r3, r9
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	bfbc      	itt	lt
 8005e7c:	232d      	movlt	r3, #45	@ 0x2d
 8005e7e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005e82:	4a7e      	ldr	r2, [pc, #504]	@ (800607c <_printf_float+0x2d4>)
 8005e84:	4b7e      	ldr	r3, [pc, #504]	@ (8006080 <_printf_float+0x2d8>)
 8005e86:	e7d4      	b.n	8005e32 <_printf_float+0x8a>
 8005e88:	6863      	ldr	r3, [r4, #4]
 8005e8a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005e8e:	9206      	str	r2, [sp, #24]
 8005e90:	1c5a      	adds	r2, r3, #1
 8005e92:	d13b      	bne.n	8005f0c <_printf_float+0x164>
 8005e94:	2306      	movs	r3, #6
 8005e96:	6063      	str	r3, [r4, #4]
 8005e98:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	6022      	str	r2, [r4, #0]
 8005ea0:	9303      	str	r3, [sp, #12]
 8005ea2:	ab0a      	add	r3, sp, #40	@ 0x28
 8005ea4:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005ea8:	ab09      	add	r3, sp, #36	@ 0x24
 8005eaa:	9300      	str	r3, [sp, #0]
 8005eac:	6861      	ldr	r1, [r4, #4]
 8005eae:	ec49 8b10 	vmov	d0, r8, r9
 8005eb2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005eb6:	4628      	mov	r0, r5
 8005eb8:	f7ff fed6 	bl	8005c68 <__cvt>
 8005ebc:	9b06      	ldr	r3, [sp, #24]
 8005ebe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005ec0:	2b47      	cmp	r3, #71	@ 0x47
 8005ec2:	4680      	mov	r8, r0
 8005ec4:	d129      	bne.n	8005f1a <_printf_float+0x172>
 8005ec6:	1cc8      	adds	r0, r1, #3
 8005ec8:	db02      	blt.n	8005ed0 <_printf_float+0x128>
 8005eca:	6863      	ldr	r3, [r4, #4]
 8005ecc:	4299      	cmp	r1, r3
 8005ece:	dd41      	ble.n	8005f54 <_printf_float+0x1ac>
 8005ed0:	f1aa 0a02 	sub.w	sl, sl, #2
 8005ed4:	fa5f fa8a 	uxtb.w	sl, sl
 8005ed8:	3901      	subs	r1, #1
 8005eda:	4652      	mov	r2, sl
 8005edc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005ee0:	9109      	str	r1, [sp, #36]	@ 0x24
 8005ee2:	f7ff ff26 	bl	8005d32 <__exponent>
 8005ee6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005ee8:	1813      	adds	r3, r2, r0
 8005eea:	2a01      	cmp	r2, #1
 8005eec:	4681      	mov	r9, r0
 8005eee:	6123      	str	r3, [r4, #16]
 8005ef0:	dc02      	bgt.n	8005ef8 <_printf_float+0x150>
 8005ef2:	6822      	ldr	r2, [r4, #0]
 8005ef4:	07d2      	lsls	r2, r2, #31
 8005ef6:	d501      	bpl.n	8005efc <_printf_float+0x154>
 8005ef8:	3301      	adds	r3, #1
 8005efa:	6123      	str	r3, [r4, #16]
 8005efc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d0a2      	beq.n	8005e4a <_printf_float+0xa2>
 8005f04:	232d      	movs	r3, #45	@ 0x2d
 8005f06:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005f0a:	e79e      	b.n	8005e4a <_printf_float+0xa2>
 8005f0c:	9a06      	ldr	r2, [sp, #24]
 8005f0e:	2a47      	cmp	r2, #71	@ 0x47
 8005f10:	d1c2      	bne.n	8005e98 <_printf_float+0xf0>
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d1c0      	bne.n	8005e98 <_printf_float+0xf0>
 8005f16:	2301      	movs	r3, #1
 8005f18:	e7bd      	b.n	8005e96 <_printf_float+0xee>
 8005f1a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005f1e:	d9db      	bls.n	8005ed8 <_printf_float+0x130>
 8005f20:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005f24:	d118      	bne.n	8005f58 <_printf_float+0x1b0>
 8005f26:	2900      	cmp	r1, #0
 8005f28:	6863      	ldr	r3, [r4, #4]
 8005f2a:	dd0b      	ble.n	8005f44 <_printf_float+0x19c>
 8005f2c:	6121      	str	r1, [r4, #16]
 8005f2e:	b913      	cbnz	r3, 8005f36 <_printf_float+0x18e>
 8005f30:	6822      	ldr	r2, [r4, #0]
 8005f32:	07d0      	lsls	r0, r2, #31
 8005f34:	d502      	bpl.n	8005f3c <_printf_float+0x194>
 8005f36:	3301      	adds	r3, #1
 8005f38:	440b      	add	r3, r1
 8005f3a:	6123      	str	r3, [r4, #16]
 8005f3c:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005f3e:	f04f 0900 	mov.w	r9, #0
 8005f42:	e7db      	b.n	8005efc <_printf_float+0x154>
 8005f44:	b913      	cbnz	r3, 8005f4c <_printf_float+0x1a4>
 8005f46:	6822      	ldr	r2, [r4, #0]
 8005f48:	07d2      	lsls	r2, r2, #31
 8005f4a:	d501      	bpl.n	8005f50 <_printf_float+0x1a8>
 8005f4c:	3302      	adds	r3, #2
 8005f4e:	e7f4      	b.n	8005f3a <_printf_float+0x192>
 8005f50:	2301      	movs	r3, #1
 8005f52:	e7f2      	b.n	8005f3a <_printf_float+0x192>
 8005f54:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005f58:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005f5a:	4299      	cmp	r1, r3
 8005f5c:	db05      	blt.n	8005f6a <_printf_float+0x1c2>
 8005f5e:	6823      	ldr	r3, [r4, #0]
 8005f60:	6121      	str	r1, [r4, #16]
 8005f62:	07d8      	lsls	r0, r3, #31
 8005f64:	d5ea      	bpl.n	8005f3c <_printf_float+0x194>
 8005f66:	1c4b      	adds	r3, r1, #1
 8005f68:	e7e7      	b.n	8005f3a <_printf_float+0x192>
 8005f6a:	2900      	cmp	r1, #0
 8005f6c:	bfd4      	ite	le
 8005f6e:	f1c1 0202 	rsble	r2, r1, #2
 8005f72:	2201      	movgt	r2, #1
 8005f74:	4413      	add	r3, r2
 8005f76:	e7e0      	b.n	8005f3a <_printf_float+0x192>
 8005f78:	6823      	ldr	r3, [r4, #0]
 8005f7a:	055a      	lsls	r2, r3, #21
 8005f7c:	d407      	bmi.n	8005f8e <_printf_float+0x1e6>
 8005f7e:	6923      	ldr	r3, [r4, #16]
 8005f80:	4642      	mov	r2, r8
 8005f82:	4631      	mov	r1, r6
 8005f84:	4628      	mov	r0, r5
 8005f86:	47b8      	blx	r7
 8005f88:	3001      	adds	r0, #1
 8005f8a:	d12b      	bne.n	8005fe4 <_printf_float+0x23c>
 8005f8c:	e767      	b.n	8005e5e <_printf_float+0xb6>
 8005f8e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005f92:	f240 80dd 	bls.w	8006150 <_printf_float+0x3a8>
 8005f96:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	f7fa fd93 	bl	8000ac8 <__aeabi_dcmpeq>
 8005fa2:	2800      	cmp	r0, #0
 8005fa4:	d033      	beq.n	800600e <_printf_float+0x266>
 8005fa6:	4a37      	ldr	r2, [pc, #220]	@ (8006084 <_printf_float+0x2dc>)
 8005fa8:	2301      	movs	r3, #1
 8005faa:	4631      	mov	r1, r6
 8005fac:	4628      	mov	r0, r5
 8005fae:	47b8      	blx	r7
 8005fb0:	3001      	adds	r0, #1
 8005fb2:	f43f af54 	beq.w	8005e5e <_printf_float+0xb6>
 8005fb6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005fba:	4543      	cmp	r3, r8
 8005fbc:	db02      	blt.n	8005fc4 <_printf_float+0x21c>
 8005fbe:	6823      	ldr	r3, [r4, #0]
 8005fc0:	07d8      	lsls	r0, r3, #31
 8005fc2:	d50f      	bpl.n	8005fe4 <_printf_float+0x23c>
 8005fc4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005fc8:	4631      	mov	r1, r6
 8005fca:	4628      	mov	r0, r5
 8005fcc:	47b8      	blx	r7
 8005fce:	3001      	adds	r0, #1
 8005fd0:	f43f af45 	beq.w	8005e5e <_printf_float+0xb6>
 8005fd4:	f04f 0900 	mov.w	r9, #0
 8005fd8:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8005fdc:	f104 0a1a 	add.w	sl, r4, #26
 8005fe0:	45c8      	cmp	r8, r9
 8005fe2:	dc09      	bgt.n	8005ff8 <_printf_float+0x250>
 8005fe4:	6823      	ldr	r3, [r4, #0]
 8005fe6:	079b      	lsls	r3, r3, #30
 8005fe8:	f100 8103 	bmi.w	80061f2 <_printf_float+0x44a>
 8005fec:	68e0      	ldr	r0, [r4, #12]
 8005fee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005ff0:	4298      	cmp	r0, r3
 8005ff2:	bfb8      	it	lt
 8005ff4:	4618      	movlt	r0, r3
 8005ff6:	e734      	b.n	8005e62 <_printf_float+0xba>
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	4652      	mov	r2, sl
 8005ffc:	4631      	mov	r1, r6
 8005ffe:	4628      	mov	r0, r5
 8006000:	47b8      	blx	r7
 8006002:	3001      	adds	r0, #1
 8006004:	f43f af2b 	beq.w	8005e5e <_printf_float+0xb6>
 8006008:	f109 0901 	add.w	r9, r9, #1
 800600c:	e7e8      	b.n	8005fe0 <_printf_float+0x238>
 800600e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006010:	2b00      	cmp	r3, #0
 8006012:	dc39      	bgt.n	8006088 <_printf_float+0x2e0>
 8006014:	4a1b      	ldr	r2, [pc, #108]	@ (8006084 <_printf_float+0x2dc>)
 8006016:	2301      	movs	r3, #1
 8006018:	4631      	mov	r1, r6
 800601a:	4628      	mov	r0, r5
 800601c:	47b8      	blx	r7
 800601e:	3001      	adds	r0, #1
 8006020:	f43f af1d 	beq.w	8005e5e <_printf_float+0xb6>
 8006024:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006028:	ea59 0303 	orrs.w	r3, r9, r3
 800602c:	d102      	bne.n	8006034 <_printf_float+0x28c>
 800602e:	6823      	ldr	r3, [r4, #0]
 8006030:	07d9      	lsls	r1, r3, #31
 8006032:	d5d7      	bpl.n	8005fe4 <_printf_float+0x23c>
 8006034:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006038:	4631      	mov	r1, r6
 800603a:	4628      	mov	r0, r5
 800603c:	47b8      	blx	r7
 800603e:	3001      	adds	r0, #1
 8006040:	f43f af0d 	beq.w	8005e5e <_printf_float+0xb6>
 8006044:	f04f 0a00 	mov.w	sl, #0
 8006048:	f104 0b1a 	add.w	fp, r4, #26
 800604c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800604e:	425b      	negs	r3, r3
 8006050:	4553      	cmp	r3, sl
 8006052:	dc01      	bgt.n	8006058 <_printf_float+0x2b0>
 8006054:	464b      	mov	r3, r9
 8006056:	e793      	b.n	8005f80 <_printf_float+0x1d8>
 8006058:	2301      	movs	r3, #1
 800605a:	465a      	mov	r2, fp
 800605c:	4631      	mov	r1, r6
 800605e:	4628      	mov	r0, r5
 8006060:	47b8      	blx	r7
 8006062:	3001      	adds	r0, #1
 8006064:	f43f aefb 	beq.w	8005e5e <_printf_float+0xb6>
 8006068:	f10a 0a01 	add.w	sl, sl, #1
 800606c:	e7ee      	b.n	800604c <_printf_float+0x2a4>
 800606e:	bf00      	nop
 8006070:	7fefffff 	.word	0x7fefffff
 8006074:	0800ad1c 	.word	0x0800ad1c
 8006078:	0800ad18 	.word	0x0800ad18
 800607c:	0800ad24 	.word	0x0800ad24
 8006080:	0800ad20 	.word	0x0800ad20
 8006084:	0800ae5e 	.word	0x0800ae5e
 8006088:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800608a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800608e:	4553      	cmp	r3, sl
 8006090:	bfa8      	it	ge
 8006092:	4653      	movge	r3, sl
 8006094:	2b00      	cmp	r3, #0
 8006096:	4699      	mov	r9, r3
 8006098:	dc36      	bgt.n	8006108 <_printf_float+0x360>
 800609a:	f04f 0b00 	mov.w	fp, #0
 800609e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80060a2:	f104 021a 	add.w	r2, r4, #26
 80060a6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80060a8:	9306      	str	r3, [sp, #24]
 80060aa:	eba3 0309 	sub.w	r3, r3, r9
 80060ae:	455b      	cmp	r3, fp
 80060b0:	dc31      	bgt.n	8006116 <_printf_float+0x36e>
 80060b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80060b4:	459a      	cmp	sl, r3
 80060b6:	dc3a      	bgt.n	800612e <_printf_float+0x386>
 80060b8:	6823      	ldr	r3, [r4, #0]
 80060ba:	07da      	lsls	r2, r3, #31
 80060bc:	d437      	bmi.n	800612e <_printf_float+0x386>
 80060be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80060c0:	ebaa 0903 	sub.w	r9, sl, r3
 80060c4:	9b06      	ldr	r3, [sp, #24]
 80060c6:	ebaa 0303 	sub.w	r3, sl, r3
 80060ca:	4599      	cmp	r9, r3
 80060cc:	bfa8      	it	ge
 80060ce:	4699      	movge	r9, r3
 80060d0:	f1b9 0f00 	cmp.w	r9, #0
 80060d4:	dc33      	bgt.n	800613e <_printf_float+0x396>
 80060d6:	f04f 0800 	mov.w	r8, #0
 80060da:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80060de:	f104 0b1a 	add.w	fp, r4, #26
 80060e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80060e4:	ebaa 0303 	sub.w	r3, sl, r3
 80060e8:	eba3 0309 	sub.w	r3, r3, r9
 80060ec:	4543      	cmp	r3, r8
 80060ee:	f77f af79 	ble.w	8005fe4 <_printf_float+0x23c>
 80060f2:	2301      	movs	r3, #1
 80060f4:	465a      	mov	r2, fp
 80060f6:	4631      	mov	r1, r6
 80060f8:	4628      	mov	r0, r5
 80060fa:	47b8      	blx	r7
 80060fc:	3001      	adds	r0, #1
 80060fe:	f43f aeae 	beq.w	8005e5e <_printf_float+0xb6>
 8006102:	f108 0801 	add.w	r8, r8, #1
 8006106:	e7ec      	b.n	80060e2 <_printf_float+0x33a>
 8006108:	4642      	mov	r2, r8
 800610a:	4631      	mov	r1, r6
 800610c:	4628      	mov	r0, r5
 800610e:	47b8      	blx	r7
 8006110:	3001      	adds	r0, #1
 8006112:	d1c2      	bne.n	800609a <_printf_float+0x2f2>
 8006114:	e6a3      	b.n	8005e5e <_printf_float+0xb6>
 8006116:	2301      	movs	r3, #1
 8006118:	4631      	mov	r1, r6
 800611a:	4628      	mov	r0, r5
 800611c:	9206      	str	r2, [sp, #24]
 800611e:	47b8      	blx	r7
 8006120:	3001      	adds	r0, #1
 8006122:	f43f ae9c 	beq.w	8005e5e <_printf_float+0xb6>
 8006126:	9a06      	ldr	r2, [sp, #24]
 8006128:	f10b 0b01 	add.w	fp, fp, #1
 800612c:	e7bb      	b.n	80060a6 <_printf_float+0x2fe>
 800612e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006132:	4631      	mov	r1, r6
 8006134:	4628      	mov	r0, r5
 8006136:	47b8      	blx	r7
 8006138:	3001      	adds	r0, #1
 800613a:	d1c0      	bne.n	80060be <_printf_float+0x316>
 800613c:	e68f      	b.n	8005e5e <_printf_float+0xb6>
 800613e:	9a06      	ldr	r2, [sp, #24]
 8006140:	464b      	mov	r3, r9
 8006142:	4442      	add	r2, r8
 8006144:	4631      	mov	r1, r6
 8006146:	4628      	mov	r0, r5
 8006148:	47b8      	blx	r7
 800614a:	3001      	adds	r0, #1
 800614c:	d1c3      	bne.n	80060d6 <_printf_float+0x32e>
 800614e:	e686      	b.n	8005e5e <_printf_float+0xb6>
 8006150:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006154:	f1ba 0f01 	cmp.w	sl, #1
 8006158:	dc01      	bgt.n	800615e <_printf_float+0x3b6>
 800615a:	07db      	lsls	r3, r3, #31
 800615c:	d536      	bpl.n	80061cc <_printf_float+0x424>
 800615e:	2301      	movs	r3, #1
 8006160:	4642      	mov	r2, r8
 8006162:	4631      	mov	r1, r6
 8006164:	4628      	mov	r0, r5
 8006166:	47b8      	blx	r7
 8006168:	3001      	adds	r0, #1
 800616a:	f43f ae78 	beq.w	8005e5e <_printf_float+0xb6>
 800616e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006172:	4631      	mov	r1, r6
 8006174:	4628      	mov	r0, r5
 8006176:	47b8      	blx	r7
 8006178:	3001      	adds	r0, #1
 800617a:	f43f ae70 	beq.w	8005e5e <_printf_float+0xb6>
 800617e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006182:	2200      	movs	r2, #0
 8006184:	2300      	movs	r3, #0
 8006186:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800618a:	f7fa fc9d 	bl	8000ac8 <__aeabi_dcmpeq>
 800618e:	b9c0      	cbnz	r0, 80061c2 <_printf_float+0x41a>
 8006190:	4653      	mov	r3, sl
 8006192:	f108 0201 	add.w	r2, r8, #1
 8006196:	4631      	mov	r1, r6
 8006198:	4628      	mov	r0, r5
 800619a:	47b8      	blx	r7
 800619c:	3001      	adds	r0, #1
 800619e:	d10c      	bne.n	80061ba <_printf_float+0x412>
 80061a0:	e65d      	b.n	8005e5e <_printf_float+0xb6>
 80061a2:	2301      	movs	r3, #1
 80061a4:	465a      	mov	r2, fp
 80061a6:	4631      	mov	r1, r6
 80061a8:	4628      	mov	r0, r5
 80061aa:	47b8      	blx	r7
 80061ac:	3001      	adds	r0, #1
 80061ae:	f43f ae56 	beq.w	8005e5e <_printf_float+0xb6>
 80061b2:	f108 0801 	add.w	r8, r8, #1
 80061b6:	45d0      	cmp	r8, sl
 80061b8:	dbf3      	blt.n	80061a2 <_printf_float+0x3fa>
 80061ba:	464b      	mov	r3, r9
 80061bc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80061c0:	e6df      	b.n	8005f82 <_printf_float+0x1da>
 80061c2:	f04f 0800 	mov.w	r8, #0
 80061c6:	f104 0b1a 	add.w	fp, r4, #26
 80061ca:	e7f4      	b.n	80061b6 <_printf_float+0x40e>
 80061cc:	2301      	movs	r3, #1
 80061ce:	4642      	mov	r2, r8
 80061d0:	e7e1      	b.n	8006196 <_printf_float+0x3ee>
 80061d2:	2301      	movs	r3, #1
 80061d4:	464a      	mov	r2, r9
 80061d6:	4631      	mov	r1, r6
 80061d8:	4628      	mov	r0, r5
 80061da:	47b8      	blx	r7
 80061dc:	3001      	adds	r0, #1
 80061de:	f43f ae3e 	beq.w	8005e5e <_printf_float+0xb6>
 80061e2:	f108 0801 	add.w	r8, r8, #1
 80061e6:	68e3      	ldr	r3, [r4, #12]
 80061e8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80061ea:	1a5b      	subs	r3, r3, r1
 80061ec:	4543      	cmp	r3, r8
 80061ee:	dcf0      	bgt.n	80061d2 <_printf_float+0x42a>
 80061f0:	e6fc      	b.n	8005fec <_printf_float+0x244>
 80061f2:	f04f 0800 	mov.w	r8, #0
 80061f6:	f104 0919 	add.w	r9, r4, #25
 80061fa:	e7f4      	b.n	80061e6 <_printf_float+0x43e>

080061fc <_printf_common>:
 80061fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006200:	4616      	mov	r6, r2
 8006202:	4698      	mov	r8, r3
 8006204:	688a      	ldr	r2, [r1, #8]
 8006206:	690b      	ldr	r3, [r1, #16]
 8006208:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800620c:	4293      	cmp	r3, r2
 800620e:	bfb8      	it	lt
 8006210:	4613      	movlt	r3, r2
 8006212:	6033      	str	r3, [r6, #0]
 8006214:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006218:	4607      	mov	r7, r0
 800621a:	460c      	mov	r4, r1
 800621c:	b10a      	cbz	r2, 8006222 <_printf_common+0x26>
 800621e:	3301      	adds	r3, #1
 8006220:	6033      	str	r3, [r6, #0]
 8006222:	6823      	ldr	r3, [r4, #0]
 8006224:	0699      	lsls	r1, r3, #26
 8006226:	bf42      	ittt	mi
 8006228:	6833      	ldrmi	r3, [r6, #0]
 800622a:	3302      	addmi	r3, #2
 800622c:	6033      	strmi	r3, [r6, #0]
 800622e:	6825      	ldr	r5, [r4, #0]
 8006230:	f015 0506 	ands.w	r5, r5, #6
 8006234:	d106      	bne.n	8006244 <_printf_common+0x48>
 8006236:	f104 0a19 	add.w	sl, r4, #25
 800623a:	68e3      	ldr	r3, [r4, #12]
 800623c:	6832      	ldr	r2, [r6, #0]
 800623e:	1a9b      	subs	r3, r3, r2
 8006240:	42ab      	cmp	r3, r5
 8006242:	dc26      	bgt.n	8006292 <_printf_common+0x96>
 8006244:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006248:	6822      	ldr	r2, [r4, #0]
 800624a:	3b00      	subs	r3, #0
 800624c:	bf18      	it	ne
 800624e:	2301      	movne	r3, #1
 8006250:	0692      	lsls	r2, r2, #26
 8006252:	d42b      	bmi.n	80062ac <_printf_common+0xb0>
 8006254:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006258:	4641      	mov	r1, r8
 800625a:	4638      	mov	r0, r7
 800625c:	47c8      	blx	r9
 800625e:	3001      	adds	r0, #1
 8006260:	d01e      	beq.n	80062a0 <_printf_common+0xa4>
 8006262:	6823      	ldr	r3, [r4, #0]
 8006264:	6922      	ldr	r2, [r4, #16]
 8006266:	f003 0306 	and.w	r3, r3, #6
 800626a:	2b04      	cmp	r3, #4
 800626c:	bf02      	ittt	eq
 800626e:	68e5      	ldreq	r5, [r4, #12]
 8006270:	6833      	ldreq	r3, [r6, #0]
 8006272:	1aed      	subeq	r5, r5, r3
 8006274:	68a3      	ldr	r3, [r4, #8]
 8006276:	bf0c      	ite	eq
 8006278:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800627c:	2500      	movne	r5, #0
 800627e:	4293      	cmp	r3, r2
 8006280:	bfc4      	itt	gt
 8006282:	1a9b      	subgt	r3, r3, r2
 8006284:	18ed      	addgt	r5, r5, r3
 8006286:	2600      	movs	r6, #0
 8006288:	341a      	adds	r4, #26
 800628a:	42b5      	cmp	r5, r6
 800628c:	d11a      	bne.n	80062c4 <_printf_common+0xc8>
 800628e:	2000      	movs	r0, #0
 8006290:	e008      	b.n	80062a4 <_printf_common+0xa8>
 8006292:	2301      	movs	r3, #1
 8006294:	4652      	mov	r2, sl
 8006296:	4641      	mov	r1, r8
 8006298:	4638      	mov	r0, r7
 800629a:	47c8      	blx	r9
 800629c:	3001      	adds	r0, #1
 800629e:	d103      	bne.n	80062a8 <_printf_common+0xac>
 80062a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80062a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062a8:	3501      	adds	r5, #1
 80062aa:	e7c6      	b.n	800623a <_printf_common+0x3e>
 80062ac:	18e1      	adds	r1, r4, r3
 80062ae:	1c5a      	adds	r2, r3, #1
 80062b0:	2030      	movs	r0, #48	@ 0x30
 80062b2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80062b6:	4422      	add	r2, r4
 80062b8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80062bc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80062c0:	3302      	adds	r3, #2
 80062c2:	e7c7      	b.n	8006254 <_printf_common+0x58>
 80062c4:	2301      	movs	r3, #1
 80062c6:	4622      	mov	r2, r4
 80062c8:	4641      	mov	r1, r8
 80062ca:	4638      	mov	r0, r7
 80062cc:	47c8      	blx	r9
 80062ce:	3001      	adds	r0, #1
 80062d0:	d0e6      	beq.n	80062a0 <_printf_common+0xa4>
 80062d2:	3601      	adds	r6, #1
 80062d4:	e7d9      	b.n	800628a <_printf_common+0x8e>
	...

080062d8 <_printf_i>:
 80062d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80062dc:	7e0f      	ldrb	r7, [r1, #24]
 80062de:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80062e0:	2f78      	cmp	r7, #120	@ 0x78
 80062e2:	4691      	mov	r9, r2
 80062e4:	4680      	mov	r8, r0
 80062e6:	460c      	mov	r4, r1
 80062e8:	469a      	mov	sl, r3
 80062ea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80062ee:	d807      	bhi.n	8006300 <_printf_i+0x28>
 80062f0:	2f62      	cmp	r7, #98	@ 0x62
 80062f2:	d80a      	bhi.n	800630a <_printf_i+0x32>
 80062f4:	2f00      	cmp	r7, #0
 80062f6:	f000 80d1 	beq.w	800649c <_printf_i+0x1c4>
 80062fa:	2f58      	cmp	r7, #88	@ 0x58
 80062fc:	f000 80b8 	beq.w	8006470 <_printf_i+0x198>
 8006300:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006304:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006308:	e03a      	b.n	8006380 <_printf_i+0xa8>
 800630a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800630e:	2b15      	cmp	r3, #21
 8006310:	d8f6      	bhi.n	8006300 <_printf_i+0x28>
 8006312:	a101      	add	r1, pc, #4	@ (adr r1, 8006318 <_printf_i+0x40>)
 8006314:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006318:	08006371 	.word	0x08006371
 800631c:	08006385 	.word	0x08006385
 8006320:	08006301 	.word	0x08006301
 8006324:	08006301 	.word	0x08006301
 8006328:	08006301 	.word	0x08006301
 800632c:	08006301 	.word	0x08006301
 8006330:	08006385 	.word	0x08006385
 8006334:	08006301 	.word	0x08006301
 8006338:	08006301 	.word	0x08006301
 800633c:	08006301 	.word	0x08006301
 8006340:	08006301 	.word	0x08006301
 8006344:	08006483 	.word	0x08006483
 8006348:	080063af 	.word	0x080063af
 800634c:	0800643d 	.word	0x0800643d
 8006350:	08006301 	.word	0x08006301
 8006354:	08006301 	.word	0x08006301
 8006358:	080064a5 	.word	0x080064a5
 800635c:	08006301 	.word	0x08006301
 8006360:	080063af 	.word	0x080063af
 8006364:	08006301 	.word	0x08006301
 8006368:	08006301 	.word	0x08006301
 800636c:	08006445 	.word	0x08006445
 8006370:	6833      	ldr	r3, [r6, #0]
 8006372:	1d1a      	adds	r2, r3, #4
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	6032      	str	r2, [r6, #0]
 8006378:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800637c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006380:	2301      	movs	r3, #1
 8006382:	e09c      	b.n	80064be <_printf_i+0x1e6>
 8006384:	6833      	ldr	r3, [r6, #0]
 8006386:	6820      	ldr	r0, [r4, #0]
 8006388:	1d19      	adds	r1, r3, #4
 800638a:	6031      	str	r1, [r6, #0]
 800638c:	0606      	lsls	r6, r0, #24
 800638e:	d501      	bpl.n	8006394 <_printf_i+0xbc>
 8006390:	681d      	ldr	r5, [r3, #0]
 8006392:	e003      	b.n	800639c <_printf_i+0xc4>
 8006394:	0645      	lsls	r5, r0, #25
 8006396:	d5fb      	bpl.n	8006390 <_printf_i+0xb8>
 8006398:	f9b3 5000 	ldrsh.w	r5, [r3]
 800639c:	2d00      	cmp	r5, #0
 800639e:	da03      	bge.n	80063a8 <_printf_i+0xd0>
 80063a0:	232d      	movs	r3, #45	@ 0x2d
 80063a2:	426d      	negs	r5, r5
 80063a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80063a8:	4858      	ldr	r0, [pc, #352]	@ (800650c <_printf_i+0x234>)
 80063aa:	230a      	movs	r3, #10
 80063ac:	e011      	b.n	80063d2 <_printf_i+0xfa>
 80063ae:	6821      	ldr	r1, [r4, #0]
 80063b0:	6833      	ldr	r3, [r6, #0]
 80063b2:	0608      	lsls	r0, r1, #24
 80063b4:	f853 5b04 	ldr.w	r5, [r3], #4
 80063b8:	d402      	bmi.n	80063c0 <_printf_i+0xe8>
 80063ba:	0649      	lsls	r1, r1, #25
 80063bc:	bf48      	it	mi
 80063be:	b2ad      	uxthmi	r5, r5
 80063c0:	2f6f      	cmp	r7, #111	@ 0x6f
 80063c2:	4852      	ldr	r0, [pc, #328]	@ (800650c <_printf_i+0x234>)
 80063c4:	6033      	str	r3, [r6, #0]
 80063c6:	bf14      	ite	ne
 80063c8:	230a      	movne	r3, #10
 80063ca:	2308      	moveq	r3, #8
 80063cc:	2100      	movs	r1, #0
 80063ce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80063d2:	6866      	ldr	r6, [r4, #4]
 80063d4:	60a6      	str	r6, [r4, #8]
 80063d6:	2e00      	cmp	r6, #0
 80063d8:	db05      	blt.n	80063e6 <_printf_i+0x10e>
 80063da:	6821      	ldr	r1, [r4, #0]
 80063dc:	432e      	orrs	r6, r5
 80063de:	f021 0104 	bic.w	r1, r1, #4
 80063e2:	6021      	str	r1, [r4, #0]
 80063e4:	d04b      	beq.n	800647e <_printf_i+0x1a6>
 80063e6:	4616      	mov	r6, r2
 80063e8:	fbb5 f1f3 	udiv	r1, r5, r3
 80063ec:	fb03 5711 	mls	r7, r3, r1, r5
 80063f0:	5dc7      	ldrb	r7, [r0, r7]
 80063f2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80063f6:	462f      	mov	r7, r5
 80063f8:	42bb      	cmp	r3, r7
 80063fa:	460d      	mov	r5, r1
 80063fc:	d9f4      	bls.n	80063e8 <_printf_i+0x110>
 80063fe:	2b08      	cmp	r3, #8
 8006400:	d10b      	bne.n	800641a <_printf_i+0x142>
 8006402:	6823      	ldr	r3, [r4, #0]
 8006404:	07df      	lsls	r7, r3, #31
 8006406:	d508      	bpl.n	800641a <_printf_i+0x142>
 8006408:	6923      	ldr	r3, [r4, #16]
 800640a:	6861      	ldr	r1, [r4, #4]
 800640c:	4299      	cmp	r1, r3
 800640e:	bfde      	ittt	le
 8006410:	2330      	movle	r3, #48	@ 0x30
 8006412:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006416:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800641a:	1b92      	subs	r2, r2, r6
 800641c:	6122      	str	r2, [r4, #16]
 800641e:	f8cd a000 	str.w	sl, [sp]
 8006422:	464b      	mov	r3, r9
 8006424:	aa03      	add	r2, sp, #12
 8006426:	4621      	mov	r1, r4
 8006428:	4640      	mov	r0, r8
 800642a:	f7ff fee7 	bl	80061fc <_printf_common>
 800642e:	3001      	adds	r0, #1
 8006430:	d14a      	bne.n	80064c8 <_printf_i+0x1f0>
 8006432:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006436:	b004      	add	sp, #16
 8006438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800643c:	6823      	ldr	r3, [r4, #0]
 800643e:	f043 0320 	orr.w	r3, r3, #32
 8006442:	6023      	str	r3, [r4, #0]
 8006444:	4832      	ldr	r0, [pc, #200]	@ (8006510 <_printf_i+0x238>)
 8006446:	2778      	movs	r7, #120	@ 0x78
 8006448:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800644c:	6823      	ldr	r3, [r4, #0]
 800644e:	6831      	ldr	r1, [r6, #0]
 8006450:	061f      	lsls	r7, r3, #24
 8006452:	f851 5b04 	ldr.w	r5, [r1], #4
 8006456:	d402      	bmi.n	800645e <_printf_i+0x186>
 8006458:	065f      	lsls	r7, r3, #25
 800645a:	bf48      	it	mi
 800645c:	b2ad      	uxthmi	r5, r5
 800645e:	6031      	str	r1, [r6, #0]
 8006460:	07d9      	lsls	r1, r3, #31
 8006462:	bf44      	itt	mi
 8006464:	f043 0320 	orrmi.w	r3, r3, #32
 8006468:	6023      	strmi	r3, [r4, #0]
 800646a:	b11d      	cbz	r5, 8006474 <_printf_i+0x19c>
 800646c:	2310      	movs	r3, #16
 800646e:	e7ad      	b.n	80063cc <_printf_i+0xf4>
 8006470:	4826      	ldr	r0, [pc, #152]	@ (800650c <_printf_i+0x234>)
 8006472:	e7e9      	b.n	8006448 <_printf_i+0x170>
 8006474:	6823      	ldr	r3, [r4, #0]
 8006476:	f023 0320 	bic.w	r3, r3, #32
 800647a:	6023      	str	r3, [r4, #0]
 800647c:	e7f6      	b.n	800646c <_printf_i+0x194>
 800647e:	4616      	mov	r6, r2
 8006480:	e7bd      	b.n	80063fe <_printf_i+0x126>
 8006482:	6833      	ldr	r3, [r6, #0]
 8006484:	6825      	ldr	r5, [r4, #0]
 8006486:	6961      	ldr	r1, [r4, #20]
 8006488:	1d18      	adds	r0, r3, #4
 800648a:	6030      	str	r0, [r6, #0]
 800648c:	062e      	lsls	r6, r5, #24
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	d501      	bpl.n	8006496 <_printf_i+0x1be>
 8006492:	6019      	str	r1, [r3, #0]
 8006494:	e002      	b.n	800649c <_printf_i+0x1c4>
 8006496:	0668      	lsls	r0, r5, #25
 8006498:	d5fb      	bpl.n	8006492 <_printf_i+0x1ba>
 800649a:	8019      	strh	r1, [r3, #0]
 800649c:	2300      	movs	r3, #0
 800649e:	6123      	str	r3, [r4, #16]
 80064a0:	4616      	mov	r6, r2
 80064a2:	e7bc      	b.n	800641e <_printf_i+0x146>
 80064a4:	6833      	ldr	r3, [r6, #0]
 80064a6:	1d1a      	adds	r2, r3, #4
 80064a8:	6032      	str	r2, [r6, #0]
 80064aa:	681e      	ldr	r6, [r3, #0]
 80064ac:	6862      	ldr	r2, [r4, #4]
 80064ae:	2100      	movs	r1, #0
 80064b0:	4630      	mov	r0, r6
 80064b2:	f7f9 fe8d 	bl	80001d0 <memchr>
 80064b6:	b108      	cbz	r0, 80064bc <_printf_i+0x1e4>
 80064b8:	1b80      	subs	r0, r0, r6
 80064ba:	6060      	str	r0, [r4, #4]
 80064bc:	6863      	ldr	r3, [r4, #4]
 80064be:	6123      	str	r3, [r4, #16]
 80064c0:	2300      	movs	r3, #0
 80064c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80064c6:	e7aa      	b.n	800641e <_printf_i+0x146>
 80064c8:	6923      	ldr	r3, [r4, #16]
 80064ca:	4632      	mov	r2, r6
 80064cc:	4649      	mov	r1, r9
 80064ce:	4640      	mov	r0, r8
 80064d0:	47d0      	blx	sl
 80064d2:	3001      	adds	r0, #1
 80064d4:	d0ad      	beq.n	8006432 <_printf_i+0x15a>
 80064d6:	6823      	ldr	r3, [r4, #0]
 80064d8:	079b      	lsls	r3, r3, #30
 80064da:	d413      	bmi.n	8006504 <_printf_i+0x22c>
 80064dc:	68e0      	ldr	r0, [r4, #12]
 80064de:	9b03      	ldr	r3, [sp, #12]
 80064e0:	4298      	cmp	r0, r3
 80064e2:	bfb8      	it	lt
 80064e4:	4618      	movlt	r0, r3
 80064e6:	e7a6      	b.n	8006436 <_printf_i+0x15e>
 80064e8:	2301      	movs	r3, #1
 80064ea:	4632      	mov	r2, r6
 80064ec:	4649      	mov	r1, r9
 80064ee:	4640      	mov	r0, r8
 80064f0:	47d0      	blx	sl
 80064f2:	3001      	adds	r0, #1
 80064f4:	d09d      	beq.n	8006432 <_printf_i+0x15a>
 80064f6:	3501      	adds	r5, #1
 80064f8:	68e3      	ldr	r3, [r4, #12]
 80064fa:	9903      	ldr	r1, [sp, #12]
 80064fc:	1a5b      	subs	r3, r3, r1
 80064fe:	42ab      	cmp	r3, r5
 8006500:	dcf2      	bgt.n	80064e8 <_printf_i+0x210>
 8006502:	e7eb      	b.n	80064dc <_printf_i+0x204>
 8006504:	2500      	movs	r5, #0
 8006506:	f104 0619 	add.w	r6, r4, #25
 800650a:	e7f5      	b.n	80064f8 <_printf_i+0x220>
 800650c:	0800ad28 	.word	0x0800ad28
 8006510:	0800ad39 	.word	0x0800ad39

08006514 <_scanf_float>:
 8006514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006518:	b087      	sub	sp, #28
 800651a:	4691      	mov	r9, r2
 800651c:	9303      	str	r3, [sp, #12]
 800651e:	688b      	ldr	r3, [r1, #8]
 8006520:	1e5a      	subs	r2, r3, #1
 8006522:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8006526:	bf81      	itttt	hi
 8006528:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800652c:	eb03 0b05 	addhi.w	fp, r3, r5
 8006530:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8006534:	608b      	strhi	r3, [r1, #8]
 8006536:	680b      	ldr	r3, [r1, #0]
 8006538:	460a      	mov	r2, r1
 800653a:	f04f 0500 	mov.w	r5, #0
 800653e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8006542:	f842 3b1c 	str.w	r3, [r2], #28
 8006546:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800654a:	4680      	mov	r8, r0
 800654c:	460c      	mov	r4, r1
 800654e:	bf98      	it	ls
 8006550:	f04f 0b00 	movls.w	fp, #0
 8006554:	9201      	str	r2, [sp, #4]
 8006556:	4616      	mov	r6, r2
 8006558:	46aa      	mov	sl, r5
 800655a:	462f      	mov	r7, r5
 800655c:	9502      	str	r5, [sp, #8]
 800655e:	68a2      	ldr	r2, [r4, #8]
 8006560:	b15a      	cbz	r2, 800657a <_scanf_float+0x66>
 8006562:	f8d9 3000 	ldr.w	r3, [r9]
 8006566:	781b      	ldrb	r3, [r3, #0]
 8006568:	2b4e      	cmp	r3, #78	@ 0x4e
 800656a:	d863      	bhi.n	8006634 <_scanf_float+0x120>
 800656c:	2b40      	cmp	r3, #64	@ 0x40
 800656e:	d83b      	bhi.n	80065e8 <_scanf_float+0xd4>
 8006570:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8006574:	b2c8      	uxtb	r0, r1
 8006576:	280e      	cmp	r0, #14
 8006578:	d939      	bls.n	80065ee <_scanf_float+0xda>
 800657a:	b11f      	cbz	r7, 8006584 <_scanf_float+0x70>
 800657c:	6823      	ldr	r3, [r4, #0]
 800657e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006582:	6023      	str	r3, [r4, #0]
 8006584:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8006588:	f1ba 0f01 	cmp.w	sl, #1
 800658c:	f200 8114 	bhi.w	80067b8 <_scanf_float+0x2a4>
 8006590:	9b01      	ldr	r3, [sp, #4]
 8006592:	429e      	cmp	r6, r3
 8006594:	f200 8105 	bhi.w	80067a2 <_scanf_float+0x28e>
 8006598:	2001      	movs	r0, #1
 800659a:	b007      	add	sp, #28
 800659c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065a0:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80065a4:	2a0d      	cmp	r2, #13
 80065a6:	d8e8      	bhi.n	800657a <_scanf_float+0x66>
 80065a8:	a101      	add	r1, pc, #4	@ (adr r1, 80065b0 <_scanf_float+0x9c>)
 80065aa:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80065ae:	bf00      	nop
 80065b0:	080066f9 	.word	0x080066f9
 80065b4:	0800657b 	.word	0x0800657b
 80065b8:	0800657b 	.word	0x0800657b
 80065bc:	0800657b 	.word	0x0800657b
 80065c0:	08006755 	.word	0x08006755
 80065c4:	0800672f 	.word	0x0800672f
 80065c8:	0800657b 	.word	0x0800657b
 80065cc:	0800657b 	.word	0x0800657b
 80065d0:	08006707 	.word	0x08006707
 80065d4:	0800657b 	.word	0x0800657b
 80065d8:	0800657b 	.word	0x0800657b
 80065dc:	0800657b 	.word	0x0800657b
 80065e0:	0800657b 	.word	0x0800657b
 80065e4:	080066c3 	.word	0x080066c3
 80065e8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80065ec:	e7da      	b.n	80065a4 <_scanf_float+0x90>
 80065ee:	290e      	cmp	r1, #14
 80065f0:	d8c3      	bhi.n	800657a <_scanf_float+0x66>
 80065f2:	a001      	add	r0, pc, #4	@ (adr r0, 80065f8 <_scanf_float+0xe4>)
 80065f4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80065f8:	080066b3 	.word	0x080066b3
 80065fc:	0800657b 	.word	0x0800657b
 8006600:	080066b3 	.word	0x080066b3
 8006604:	08006743 	.word	0x08006743
 8006608:	0800657b 	.word	0x0800657b
 800660c:	08006655 	.word	0x08006655
 8006610:	08006699 	.word	0x08006699
 8006614:	08006699 	.word	0x08006699
 8006618:	08006699 	.word	0x08006699
 800661c:	08006699 	.word	0x08006699
 8006620:	08006699 	.word	0x08006699
 8006624:	08006699 	.word	0x08006699
 8006628:	08006699 	.word	0x08006699
 800662c:	08006699 	.word	0x08006699
 8006630:	08006699 	.word	0x08006699
 8006634:	2b6e      	cmp	r3, #110	@ 0x6e
 8006636:	d809      	bhi.n	800664c <_scanf_float+0x138>
 8006638:	2b60      	cmp	r3, #96	@ 0x60
 800663a:	d8b1      	bhi.n	80065a0 <_scanf_float+0x8c>
 800663c:	2b54      	cmp	r3, #84	@ 0x54
 800663e:	d07b      	beq.n	8006738 <_scanf_float+0x224>
 8006640:	2b59      	cmp	r3, #89	@ 0x59
 8006642:	d19a      	bne.n	800657a <_scanf_float+0x66>
 8006644:	2d07      	cmp	r5, #7
 8006646:	d198      	bne.n	800657a <_scanf_float+0x66>
 8006648:	2508      	movs	r5, #8
 800664a:	e02f      	b.n	80066ac <_scanf_float+0x198>
 800664c:	2b74      	cmp	r3, #116	@ 0x74
 800664e:	d073      	beq.n	8006738 <_scanf_float+0x224>
 8006650:	2b79      	cmp	r3, #121	@ 0x79
 8006652:	e7f6      	b.n	8006642 <_scanf_float+0x12e>
 8006654:	6821      	ldr	r1, [r4, #0]
 8006656:	05c8      	lsls	r0, r1, #23
 8006658:	d51e      	bpl.n	8006698 <_scanf_float+0x184>
 800665a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800665e:	6021      	str	r1, [r4, #0]
 8006660:	3701      	adds	r7, #1
 8006662:	f1bb 0f00 	cmp.w	fp, #0
 8006666:	d003      	beq.n	8006670 <_scanf_float+0x15c>
 8006668:	3201      	adds	r2, #1
 800666a:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 800666e:	60a2      	str	r2, [r4, #8]
 8006670:	68a3      	ldr	r3, [r4, #8]
 8006672:	3b01      	subs	r3, #1
 8006674:	60a3      	str	r3, [r4, #8]
 8006676:	6923      	ldr	r3, [r4, #16]
 8006678:	3301      	adds	r3, #1
 800667a:	6123      	str	r3, [r4, #16]
 800667c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8006680:	3b01      	subs	r3, #1
 8006682:	2b00      	cmp	r3, #0
 8006684:	f8c9 3004 	str.w	r3, [r9, #4]
 8006688:	f340 8082 	ble.w	8006790 <_scanf_float+0x27c>
 800668c:	f8d9 3000 	ldr.w	r3, [r9]
 8006690:	3301      	adds	r3, #1
 8006692:	f8c9 3000 	str.w	r3, [r9]
 8006696:	e762      	b.n	800655e <_scanf_float+0x4a>
 8006698:	eb1a 0105 	adds.w	r1, sl, r5
 800669c:	f47f af6d 	bne.w	800657a <_scanf_float+0x66>
 80066a0:	6822      	ldr	r2, [r4, #0]
 80066a2:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80066a6:	6022      	str	r2, [r4, #0]
 80066a8:	460d      	mov	r5, r1
 80066aa:	468a      	mov	sl, r1
 80066ac:	f806 3b01 	strb.w	r3, [r6], #1
 80066b0:	e7de      	b.n	8006670 <_scanf_float+0x15c>
 80066b2:	6822      	ldr	r2, [r4, #0]
 80066b4:	0610      	lsls	r0, r2, #24
 80066b6:	f57f af60 	bpl.w	800657a <_scanf_float+0x66>
 80066ba:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80066be:	6022      	str	r2, [r4, #0]
 80066c0:	e7f4      	b.n	80066ac <_scanf_float+0x198>
 80066c2:	f1ba 0f00 	cmp.w	sl, #0
 80066c6:	d10c      	bne.n	80066e2 <_scanf_float+0x1ce>
 80066c8:	b977      	cbnz	r7, 80066e8 <_scanf_float+0x1d4>
 80066ca:	6822      	ldr	r2, [r4, #0]
 80066cc:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80066d0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80066d4:	d108      	bne.n	80066e8 <_scanf_float+0x1d4>
 80066d6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80066da:	6022      	str	r2, [r4, #0]
 80066dc:	f04f 0a01 	mov.w	sl, #1
 80066e0:	e7e4      	b.n	80066ac <_scanf_float+0x198>
 80066e2:	f1ba 0f02 	cmp.w	sl, #2
 80066e6:	d050      	beq.n	800678a <_scanf_float+0x276>
 80066e8:	2d01      	cmp	r5, #1
 80066ea:	d002      	beq.n	80066f2 <_scanf_float+0x1de>
 80066ec:	2d04      	cmp	r5, #4
 80066ee:	f47f af44 	bne.w	800657a <_scanf_float+0x66>
 80066f2:	3501      	adds	r5, #1
 80066f4:	b2ed      	uxtb	r5, r5
 80066f6:	e7d9      	b.n	80066ac <_scanf_float+0x198>
 80066f8:	f1ba 0f01 	cmp.w	sl, #1
 80066fc:	f47f af3d 	bne.w	800657a <_scanf_float+0x66>
 8006700:	f04f 0a02 	mov.w	sl, #2
 8006704:	e7d2      	b.n	80066ac <_scanf_float+0x198>
 8006706:	b975      	cbnz	r5, 8006726 <_scanf_float+0x212>
 8006708:	2f00      	cmp	r7, #0
 800670a:	f47f af37 	bne.w	800657c <_scanf_float+0x68>
 800670e:	6822      	ldr	r2, [r4, #0]
 8006710:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006714:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006718:	f040 8103 	bne.w	8006922 <_scanf_float+0x40e>
 800671c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006720:	6022      	str	r2, [r4, #0]
 8006722:	2501      	movs	r5, #1
 8006724:	e7c2      	b.n	80066ac <_scanf_float+0x198>
 8006726:	2d03      	cmp	r5, #3
 8006728:	d0e3      	beq.n	80066f2 <_scanf_float+0x1de>
 800672a:	2d05      	cmp	r5, #5
 800672c:	e7df      	b.n	80066ee <_scanf_float+0x1da>
 800672e:	2d02      	cmp	r5, #2
 8006730:	f47f af23 	bne.w	800657a <_scanf_float+0x66>
 8006734:	2503      	movs	r5, #3
 8006736:	e7b9      	b.n	80066ac <_scanf_float+0x198>
 8006738:	2d06      	cmp	r5, #6
 800673a:	f47f af1e 	bne.w	800657a <_scanf_float+0x66>
 800673e:	2507      	movs	r5, #7
 8006740:	e7b4      	b.n	80066ac <_scanf_float+0x198>
 8006742:	6822      	ldr	r2, [r4, #0]
 8006744:	0591      	lsls	r1, r2, #22
 8006746:	f57f af18 	bpl.w	800657a <_scanf_float+0x66>
 800674a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800674e:	6022      	str	r2, [r4, #0]
 8006750:	9702      	str	r7, [sp, #8]
 8006752:	e7ab      	b.n	80066ac <_scanf_float+0x198>
 8006754:	6822      	ldr	r2, [r4, #0]
 8006756:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800675a:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800675e:	d005      	beq.n	800676c <_scanf_float+0x258>
 8006760:	0550      	lsls	r0, r2, #21
 8006762:	f57f af0a 	bpl.w	800657a <_scanf_float+0x66>
 8006766:	2f00      	cmp	r7, #0
 8006768:	f000 80db 	beq.w	8006922 <_scanf_float+0x40e>
 800676c:	0591      	lsls	r1, r2, #22
 800676e:	bf58      	it	pl
 8006770:	9902      	ldrpl	r1, [sp, #8]
 8006772:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006776:	bf58      	it	pl
 8006778:	1a79      	subpl	r1, r7, r1
 800677a:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800677e:	bf58      	it	pl
 8006780:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006784:	6022      	str	r2, [r4, #0]
 8006786:	2700      	movs	r7, #0
 8006788:	e790      	b.n	80066ac <_scanf_float+0x198>
 800678a:	f04f 0a03 	mov.w	sl, #3
 800678e:	e78d      	b.n	80066ac <_scanf_float+0x198>
 8006790:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006794:	4649      	mov	r1, r9
 8006796:	4640      	mov	r0, r8
 8006798:	4798      	blx	r3
 800679a:	2800      	cmp	r0, #0
 800679c:	f43f aedf 	beq.w	800655e <_scanf_float+0x4a>
 80067a0:	e6eb      	b.n	800657a <_scanf_float+0x66>
 80067a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80067a6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80067aa:	464a      	mov	r2, r9
 80067ac:	4640      	mov	r0, r8
 80067ae:	4798      	blx	r3
 80067b0:	6923      	ldr	r3, [r4, #16]
 80067b2:	3b01      	subs	r3, #1
 80067b4:	6123      	str	r3, [r4, #16]
 80067b6:	e6eb      	b.n	8006590 <_scanf_float+0x7c>
 80067b8:	1e6b      	subs	r3, r5, #1
 80067ba:	2b06      	cmp	r3, #6
 80067bc:	d824      	bhi.n	8006808 <_scanf_float+0x2f4>
 80067be:	2d02      	cmp	r5, #2
 80067c0:	d836      	bhi.n	8006830 <_scanf_float+0x31c>
 80067c2:	9b01      	ldr	r3, [sp, #4]
 80067c4:	429e      	cmp	r6, r3
 80067c6:	f67f aee7 	bls.w	8006598 <_scanf_float+0x84>
 80067ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80067ce:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80067d2:	464a      	mov	r2, r9
 80067d4:	4640      	mov	r0, r8
 80067d6:	4798      	blx	r3
 80067d8:	6923      	ldr	r3, [r4, #16]
 80067da:	3b01      	subs	r3, #1
 80067dc:	6123      	str	r3, [r4, #16]
 80067de:	e7f0      	b.n	80067c2 <_scanf_float+0x2ae>
 80067e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80067e4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80067e8:	464a      	mov	r2, r9
 80067ea:	4640      	mov	r0, r8
 80067ec:	4798      	blx	r3
 80067ee:	6923      	ldr	r3, [r4, #16]
 80067f0:	3b01      	subs	r3, #1
 80067f2:	6123      	str	r3, [r4, #16]
 80067f4:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80067f8:	fa5f fa8a 	uxtb.w	sl, sl
 80067fc:	f1ba 0f02 	cmp.w	sl, #2
 8006800:	d1ee      	bne.n	80067e0 <_scanf_float+0x2cc>
 8006802:	3d03      	subs	r5, #3
 8006804:	b2ed      	uxtb	r5, r5
 8006806:	1b76      	subs	r6, r6, r5
 8006808:	6823      	ldr	r3, [r4, #0]
 800680a:	05da      	lsls	r2, r3, #23
 800680c:	d530      	bpl.n	8006870 <_scanf_float+0x35c>
 800680e:	055b      	lsls	r3, r3, #21
 8006810:	d511      	bpl.n	8006836 <_scanf_float+0x322>
 8006812:	9b01      	ldr	r3, [sp, #4]
 8006814:	429e      	cmp	r6, r3
 8006816:	f67f aebf 	bls.w	8006598 <_scanf_float+0x84>
 800681a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800681e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006822:	464a      	mov	r2, r9
 8006824:	4640      	mov	r0, r8
 8006826:	4798      	blx	r3
 8006828:	6923      	ldr	r3, [r4, #16]
 800682a:	3b01      	subs	r3, #1
 800682c:	6123      	str	r3, [r4, #16]
 800682e:	e7f0      	b.n	8006812 <_scanf_float+0x2fe>
 8006830:	46aa      	mov	sl, r5
 8006832:	46b3      	mov	fp, r6
 8006834:	e7de      	b.n	80067f4 <_scanf_float+0x2e0>
 8006836:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800683a:	6923      	ldr	r3, [r4, #16]
 800683c:	2965      	cmp	r1, #101	@ 0x65
 800683e:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8006842:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 8006846:	6123      	str	r3, [r4, #16]
 8006848:	d00c      	beq.n	8006864 <_scanf_float+0x350>
 800684a:	2945      	cmp	r1, #69	@ 0x45
 800684c:	d00a      	beq.n	8006864 <_scanf_float+0x350>
 800684e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006852:	464a      	mov	r2, r9
 8006854:	4640      	mov	r0, r8
 8006856:	4798      	blx	r3
 8006858:	6923      	ldr	r3, [r4, #16]
 800685a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800685e:	3b01      	subs	r3, #1
 8006860:	1eb5      	subs	r5, r6, #2
 8006862:	6123      	str	r3, [r4, #16]
 8006864:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006868:	464a      	mov	r2, r9
 800686a:	4640      	mov	r0, r8
 800686c:	4798      	blx	r3
 800686e:	462e      	mov	r6, r5
 8006870:	6822      	ldr	r2, [r4, #0]
 8006872:	f012 0210 	ands.w	r2, r2, #16
 8006876:	d001      	beq.n	800687c <_scanf_float+0x368>
 8006878:	2000      	movs	r0, #0
 800687a:	e68e      	b.n	800659a <_scanf_float+0x86>
 800687c:	7032      	strb	r2, [r6, #0]
 800687e:	6823      	ldr	r3, [r4, #0]
 8006880:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006884:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006888:	d125      	bne.n	80068d6 <_scanf_float+0x3c2>
 800688a:	9b02      	ldr	r3, [sp, #8]
 800688c:	429f      	cmp	r7, r3
 800688e:	d00a      	beq.n	80068a6 <_scanf_float+0x392>
 8006890:	1bda      	subs	r2, r3, r7
 8006892:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8006896:	429e      	cmp	r6, r3
 8006898:	bf28      	it	cs
 800689a:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800689e:	4922      	ldr	r1, [pc, #136]	@ (8006928 <_scanf_float+0x414>)
 80068a0:	4630      	mov	r0, r6
 80068a2:	f000 f907 	bl	8006ab4 <siprintf>
 80068a6:	9901      	ldr	r1, [sp, #4]
 80068a8:	2200      	movs	r2, #0
 80068aa:	4640      	mov	r0, r8
 80068ac:	f002 fc38 	bl	8009120 <_strtod_r>
 80068b0:	9b03      	ldr	r3, [sp, #12]
 80068b2:	6821      	ldr	r1, [r4, #0]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f011 0f02 	tst.w	r1, #2
 80068ba:	ec57 6b10 	vmov	r6, r7, d0
 80068be:	f103 0204 	add.w	r2, r3, #4
 80068c2:	d015      	beq.n	80068f0 <_scanf_float+0x3dc>
 80068c4:	9903      	ldr	r1, [sp, #12]
 80068c6:	600a      	str	r2, [r1, #0]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	e9c3 6700 	strd	r6, r7, [r3]
 80068ce:	68e3      	ldr	r3, [r4, #12]
 80068d0:	3301      	adds	r3, #1
 80068d2:	60e3      	str	r3, [r4, #12]
 80068d4:	e7d0      	b.n	8006878 <_scanf_float+0x364>
 80068d6:	9b04      	ldr	r3, [sp, #16]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d0e4      	beq.n	80068a6 <_scanf_float+0x392>
 80068dc:	9905      	ldr	r1, [sp, #20]
 80068de:	230a      	movs	r3, #10
 80068e0:	3101      	adds	r1, #1
 80068e2:	4640      	mov	r0, r8
 80068e4:	f002 fc9c 	bl	8009220 <_strtol_r>
 80068e8:	9b04      	ldr	r3, [sp, #16]
 80068ea:	9e05      	ldr	r6, [sp, #20]
 80068ec:	1ac2      	subs	r2, r0, r3
 80068ee:	e7d0      	b.n	8006892 <_scanf_float+0x37e>
 80068f0:	f011 0f04 	tst.w	r1, #4
 80068f4:	9903      	ldr	r1, [sp, #12]
 80068f6:	600a      	str	r2, [r1, #0]
 80068f8:	d1e6      	bne.n	80068c8 <_scanf_float+0x3b4>
 80068fa:	681d      	ldr	r5, [r3, #0]
 80068fc:	4632      	mov	r2, r6
 80068fe:	463b      	mov	r3, r7
 8006900:	4630      	mov	r0, r6
 8006902:	4639      	mov	r1, r7
 8006904:	f7fa f912 	bl	8000b2c <__aeabi_dcmpun>
 8006908:	b128      	cbz	r0, 8006916 <_scanf_float+0x402>
 800690a:	4808      	ldr	r0, [pc, #32]	@ (800692c <_scanf_float+0x418>)
 800690c:	f000 f9fc 	bl	8006d08 <nanf>
 8006910:	ed85 0a00 	vstr	s0, [r5]
 8006914:	e7db      	b.n	80068ce <_scanf_float+0x3ba>
 8006916:	4630      	mov	r0, r6
 8006918:	4639      	mov	r1, r7
 800691a:	f7fa f965 	bl	8000be8 <__aeabi_d2f>
 800691e:	6028      	str	r0, [r5, #0]
 8006920:	e7d5      	b.n	80068ce <_scanf_float+0x3ba>
 8006922:	2700      	movs	r7, #0
 8006924:	e62e      	b.n	8006584 <_scanf_float+0x70>
 8006926:	bf00      	nop
 8006928:	0800ad4a 	.word	0x0800ad4a
 800692c:	0800aea6 	.word	0x0800aea6

08006930 <std>:
 8006930:	2300      	movs	r3, #0
 8006932:	b510      	push	{r4, lr}
 8006934:	4604      	mov	r4, r0
 8006936:	e9c0 3300 	strd	r3, r3, [r0]
 800693a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800693e:	6083      	str	r3, [r0, #8]
 8006940:	8181      	strh	r1, [r0, #12]
 8006942:	6643      	str	r3, [r0, #100]	@ 0x64
 8006944:	81c2      	strh	r2, [r0, #14]
 8006946:	6183      	str	r3, [r0, #24]
 8006948:	4619      	mov	r1, r3
 800694a:	2208      	movs	r2, #8
 800694c:	305c      	adds	r0, #92	@ 0x5c
 800694e:	f000 f944 	bl	8006bda <memset>
 8006952:	4b0d      	ldr	r3, [pc, #52]	@ (8006988 <std+0x58>)
 8006954:	6263      	str	r3, [r4, #36]	@ 0x24
 8006956:	4b0d      	ldr	r3, [pc, #52]	@ (800698c <std+0x5c>)
 8006958:	62a3      	str	r3, [r4, #40]	@ 0x28
 800695a:	4b0d      	ldr	r3, [pc, #52]	@ (8006990 <std+0x60>)
 800695c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800695e:	4b0d      	ldr	r3, [pc, #52]	@ (8006994 <std+0x64>)
 8006960:	6323      	str	r3, [r4, #48]	@ 0x30
 8006962:	4b0d      	ldr	r3, [pc, #52]	@ (8006998 <std+0x68>)
 8006964:	6224      	str	r4, [r4, #32]
 8006966:	429c      	cmp	r4, r3
 8006968:	d006      	beq.n	8006978 <std+0x48>
 800696a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800696e:	4294      	cmp	r4, r2
 8006970:	d002      	beq.n	8006978 <std+0x48>
 8006972:	33d0      	adds	r3, #208	@ 0xd0
 8006974:	429c      	cmp	r4, r3
 8006976:	d105      	bne.n	8006984 <std+0x54>
 8006978:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800697c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006980:	f000 b9be 	b.w	8006d00 <__retarget_lock_init_recursive>
 8006984:	bd10      	pop	{r4, pc}
 8006986:	bf00      	nop
 8006988:	08006b51 	.word	0x08006b51
 800698c:	08006b77 	.word	0x08006b77
 8006990:	08006baf 	.word	0x08006baf
 8006994:	08006bd3 	.word	0x08006bd3
 8006998:	200006f0 	.word	0x200006f0

0800699c <stdio_exit_handler>:
 800699c:	4a02      	ldr	r2, [pc, #8]	@ (80069a8 <stdio_exit_handler+0xc>)
 800699e:	4903      	ldr	r1, [pc, #12]	@ (80069ac <stdio_exit_handler+0x10>)
 80069a0:	4803      	ldr	r0, [pc, #12]	@ (80069b0 <stdio_exit_handler+0x14>)
 80069a2:	f000 b869 	b.w	8006a78 <_fwalk_sglue>
 80069a6:	bf00      	nop
 80069a8:	200001c8 	.word	0x200001c8
 80069ac:	08009c19 	.word	0x08009c19
 80069b0:	200001d8 	.word	0x200001d8

080069b4 <cleanup_stdio>:
 80069b4:	6841      	ldr	r1, [r0, #4]
 80069b6:	4b0c      	ldr	r3, [pc, #48]	@ (80069e8 <cleanup_stdio+0x34>)
 80069b8:	4299      	cmp	r1, r3
 80069ba:	b510      	push	{r4, lr}
 80069bc:	4604      	mov	r4, r0
 80069be:	d001      	beq.n	80069c4 <cleanup_stdio+0x10>
 80069c0:	f003 f92a 	bl	8009c18 <_fflush_r>
 80069c4:	68a1      	ldr	r1, [r4, #8]
 80069c6:	4b09      	ldr	r3, [pc, #36]	@ (80069ec <cleanup_stdio+0x38>)
 80069c8:	4299      	cmp	r1, r3
 80069ca:	d002      	beq.n	80069d2 <cleanup_stdio+0x1e>
 80069cc:	4620      	mov	r0, r4
 80069ce:	f003 f923 	bl	8009c18 <_fflush_r>
 80069d2:	68e1      	ldr	r1, [r4, #12]
 80069d4:	4b06      	ldr	r3, [pc, #24]	@ (80069f0 <cleanup_stdio+0x3c>)
 80069d6:	4299      	cmp	r1, r3
 80069d8:	d004      	beq.n	80069e4 <cleanup_stdio+0x30>
 80069da:	4620      	mov	r0, r4
 80069dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80069e0:	f003 b91a 	b.w	8009c18 <_fflush_r>
 80069e4:	bd10      	pop	{r4, pc}
 80069e6:	bf00      	nop
 80069e8:	200006f0 	.word	0x200006f0
 80069ec:	20000758 	.word	0x20000758
 80069f0:	200007c0 	.word	0x200007c0

080069f4 <global_stdio_init.part.0>:
 80069f4:	b510      	push	{r4, lr}
 80069f6:	4b0b      	ldr	r3, [pc, #44]	@ (8006a24 <global_stdio_init.part.0+0x30>)
 80069f8:	4c0b      	ldr	r4, [pc, #44]	@ (8006a28 <global_stdio_init.part.0+0x34>)
 80069fa:	4a0c      	ldr	r2, [pc, #48]	@ (8006a2c <global_stdio_init.part.0+0x38>)
 80069fc:	601a      	str	r2, [r3, #0]
 80069fe:	4620      	mov	r0, r4
 8006a00:	2200      	movs	r2, #0
 8006a02:	2104      	movs	r1, #4
 8006a04:	f7ff ff94 	bl	8006930 <std>
 8006a08:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006a0c:	2201      	movs	r2, #1
 8006a0e:	2109      	movs	r1, #9
 8006a10:	f7ff ff8e 	bl	8006930 <std>
 8006a14:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006a18:	2202      	movs	r2, #2
 8006a1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a1e:	2112      	movs	r1, #18
 8006a20:	f7ff bf86 	b.w	8006930 <std>
 8006a24:	20000828 	.word	0x20000828
 8006a28:	200006f0 	.word	0x200006f0
 8006a2c:	0800699d 	.word	0x0800699d

08006a30 <__sfp_lock_acquire>:
 8006a30:	4801      	ldr	r0, [pc, #4]	@ (8006a38 <__sfp_lock_acquire+0x8>)
 8006a32:	f000 b966 	b.w	8006d02 <__retarget_lock_acquire_recursive>
 8006a36:	bf00      	nop
 8006a38:	20000831 	.word	0x20000831

08006a3c <__sfp_lock_release>:
 8006a3c:	4801      	ldr	r0, [pc, #4]	@ (8006a44 <__sfp_lock_release+0x8>)
 8006a3e:	f000 b961 	b.w	8006d04 <__retarget_lock_release_recursive>
 8006a42:	bf00      	nop
 8006a44:	20000831 	.word	0x20000831

08006a48 <__sinit>:
 8006a48:	b510      	push	{r4, lr}
 8006a4a:	4604      	mov	r4, r0
 8006a4c:	f7ff fff0 	bl	8006a30 <__sfp_lock_acquire>
 8006a50:	6a23      	ldr	r3, [r4, #32]
 8006a52:	b11b      	cbz	r3, 8006a5c <__sinit+0x14>
 8006a54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a58:	f7ff bff0 	b.w	8006a3c <__sfp_lock_release>
 8006a5c:	4b04      	ldr	r3, [pc, #16]	@ (8006a70 <__sinit+0x28>)
 8006a5e:	6223      	str	r3, [r4, #32]
 8006a60:	4b04      	ldr	r3, [pc, #16]	@ (8006a74 <__sinit+0x2c>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d1f5      	bne.n	8006a54 <__sinit+0xc>
 8006a68:	f7ff ffc4 	bl	80069f4 <global_stdio_init.part.0>
 8006a6c:	e7f2      	b.n	8006a54 <__sinit+0xc>
 8006a6e:	bf00      	nop
 8006a70:	080069b5 	.word	0x080069b5
 8006a74:	20000828 	.word	0x20000828

08006a78 <_fwalk_sglue>:
 8006a78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a7c:	4607      	mov	r7, r0
 8006a7e:	4688      	mov	r8, r1
 8006a80:	4614      	mov	r4, r2
 8006a82:	2600      	movs	r6, #0
 8006a84:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006a88:	f1b9 0901 	subs.w	r9, r9, #1
 8006a8c:	d505      	bpl.n	8006a9a <_fwalk_sglue+0x22>
 8006a8e:	6824      	ldr	r4, [r4, #0]
 8006a90:	2c00      	cmp	r4, #0
 8006a92:	d1f7      	bne.n	8006a84 <_fwalk_sglue+0xc>
 8006a94:	4630      	mov	r0, r6
 8006a96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a9a:	89ab      	ldrh	r3, [r5, #12]
 8006a9c:	2b01      	cmp	r3, #1
 8006a9e:	d907      	bls.n	8006ab0 <_fwalk_sglue+0x38>
 8006aa0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006aa4:	3301      	adds	r3, #1
 8006aa6:	d003      	beq.n	8006ab0 <_fwalk_sglue+0x38>
 8006aa8:	4629      	mov	r1, r5
 8006aaa:	4638      	mov	r0, r7
 8006aac:	47c0      	blx	r8
 8006aae:	4306      	orrs	r6, r0
 8006ab0:	3568      	adds	r5, #104	@ 0x68
 8006ab2:	e7e9      	b.n	8006a88 <_fwalk_sglue+0x10>

08006ab4 <siprintf>:
 8006ab4:	b40e      	push	{r1, r2, r3}
 8006ab6:	b510      	push	{r4, lr}
 8006ab8:	b09d      	sub	sp, #116	@ 0x74
 8006aba:	ab1f      	add	r3, sp, #124	@ 0x7c
 8006abc:	9002      	str	r0, [sp, #8]
 8006abe:	9006      	str	r0, [sp, #24]
 8006ac0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006ac4:	480a      	ldr	r0, [pc, #40]	@ (8006af0 <siprintf+0x3c>)
 8006ac6:	9107      	str	r1, [sp, #28]
 8006ac8:	9104      	str	r1, [sp, #16]
 8006aca:	490a      	ldr	r1, [pc, #40]	@ (8006af4 <siprintf+0x40>)
 8006acc:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ad0:	9105      	str	r1, [sp, #20]
 8006ad2:	2400      	movs	r4, #0
 8006ad4:	a902      	add	r1, sp, #8
 8006ad6:	6800      	ldr	r0, [r0, #0]
 8006ad8:	9301      	str	r3, [sp, #4]
 8006ada:	941b      	str	r4, [sp, #108]	@ 0x6c
 8006adc:	f002 fbfe 	bl	80092dc <_svfiprintf_r>
 8006ae0:	9b02      	ldr	r3, [sp, #8]
 8006ae2:	701c      	strb	r4, [r3, #0]
 8006ae4:	b01d      	add	sp, #116	@ 0x74
 8006ae6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006aea:	b003      	add	sp, #12
 8006aec:	4770      	bx	lr
 8006aee:	bf00      	nop
 8006af0:	200001d4 	.word	0x200001d4
 8006af4:	ffff0208 	.word	0xffff0208

08006af8 <siscanf>:
 8006af8:	b40e      	push	{r1, r2, r3}
 8006afa:	b570      	push	{r4, r5, r6, lr}
 8006afc:	b09d      	sub	sp, #116	@ 0x74
 8006afe:	ac21      	add	r4, sp, #132	@ 0x84
 8006b00:	2500      	movs	r5, #0
 8006b02:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8006b06:	f854 6b04 	ldr.w	r6, [r4], #4
 8006b0a:	f8ad 2014 	strh.w	r2, [sp, #20]
 8006b0e:	951b      	str	r5, [sp, #108]	@ 0x6c
 8006b10:	9002      	str	r0, [sp, #8]
 8006b12:	9006      	str	r0, [sp, #24]
 8006b14:	f7f9 fbac 	bl	8000270 <strlen>
 8006b18:	4b0b      	ldr	r3, [pc, #44]	@ (8006b48 <siscanf+0x50>)
 8006b1a:	9003      	str	r0, [sp, #12]
 8006b1c:	9007      	str	r0, [sp, #28]
 8006b1e:	480b      	ldr	r0, [pc, #44]	@ (8006b4c <siscanf+0x54>)
 8006b20:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006b22:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006b26:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006b2a:	4632      	mov	r2, r6
 8006b2c:	4623      	mov	r3, r4
 8006b2e:	a902      	add	r1, sp, #8
 8006b30:	6800      	ldr	r0, [r0, #0]
 8006b32:	950f      	str	r5, [sp, #60]	@ 0x3c
 8006b34:	9514      	str	r5, [sp, #80]	@ 0x50
 8006b36:	9401      	str	r4, [sp, #4]
 8006b38:	f002 fd26 	bl	8009588 <__ssvfiscanf_r>
 8006b3c:	b01d      	add	sp, #116	@ 0x74
 8006b3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006b42:	b003      	add	sp, #12
 8006b44:	4770      	bx	lr
 8006b46:	bf00      	nop
 8006b48:	08006b73 	.word	0x08006b73
 8006b4c:	200001d4 	.word	0x200001d4

08006b50 <__sread>:
 8006b50:	b510      	push	{r4, lr}
 8006b52:	460c      	mov	r4, r1
 8006b54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b58:	f000 f884 	bl	8006c64 <_read_r>
 8006b5c:	2800      	cmp	r0, #0
 8006b5e:	bfab      	itete	ge
 8006b60:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006b62:	89a3      	ldrhlt	r3, [r4, #12]
 8006b64:	181b      	addge	r3, r3, r0
 8006b66:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006b6a:	bfac      	ite	ge
 8006b6c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006b6e:	81a3      	strhlt	r3, [r4, #12]
 8006b70:	bd10      	pop	{r4, pc}

08006b72 <__seofread>:
 8006b72:	2000      	movs	r0, #0
 8006b74:	4770      	bx	lr

08006b76 <__swrite>:
 8006b76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b7a:	461f      	mov	r7, r3
 8006b7c:	898b      	ldrh	r3, [r1, #12]
 8006b7e:	05db      	lsls	r3, r3, #23
 8006b80:	4605      	mov	r5, r0
 8006b82:	460c      	mov	r4, r1
 8006b84:	4616      	mov	r6, r2
 8006b86:	d505      	bpl.n	8006b94 <__swrite+0x1e>
 8006b88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b8c:	2302      	movs	r3, #2
 8006b8e:	2200      	movs	r2, #0
 8006b90:	f000 f856 	bl	8006c40 <_lseek_r>
 8006b94:	89a3      	ldrh	r3, [r4, #12]
 8006b96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006b9a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006b9e:	81a3      	strh	r3, [r4, #12]
 8006ba0:	4632      	mov	r2, r6
 8006ba2:	463b      	mov	r3, r7
 8006ba4:	4628      	mov	r0, r5
 8006ba6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006baa:	f000 b86d 	b.w	8006c88 <_write_r>

08006bae <__sseek>:
 8006bae:	b510      	push	{r4, lr}
 8006bb0:	460c      	mov	r4, r1
 8006bb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bb6:	f000 f843 	bl	8006c40 <_lseek_r>
 8006bba:	1c43      	adds	r3, r0, #1
 8006bbc:	89a3      	ldrh	r3, [r4, #12]
 8006bbe:	bf15      	itete	ne
 8006bc0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006bc2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006bc6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006bca:	81a3      	strheq	r3, [r4, #12]
 8006bcc:	bf18      	it	ne
 8006bce:	81a3      	strhne	r3, [r4, #12]
 8006bd0:	bd10      	pop	{r4, pc}

08006bd2 <__sclose>:
 8006bd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bd6:	f000 b823 	b.w	8006c20 <_close_r>

08006bda <memset>:
 8006bda:	4402      	add	r2, r0
 8006bdc:	4603      	mov	r3, r0
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d100      	bne.n	8006be4 <memset+0xa>
 8006be2:	4770      	bx	lr
 8006be4:	f803 1b01 	strb.w	r1, [r3], #1
 8006be8:	e7f9      	b.n	8006bde <memset+0x4>

08006bea <strstr>:
 8006bea:	780a      	ldrb	r2, [r1, #0]
 8006bec:	b570      	push	{r4, r5, r6, lr}
 8006bee:	b96a      	cbnz	r2, 8006c0c <strstr+0x22>
 8006bf0:	bd70      	pop	{r4, r5, r6, pc}
 8006bf2:	429a      	cmp	r2, r3
 8006bf4:	d109      	bne.n	8006c0a <strstr+0x20>
 8006bf6:	460c      	mov	r4, r1
 8006bf8:	4605      	mov	r5, r0
 8006bfa:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d0f6      	beq.n	8006bf0 <strstr+0x6>
 8006c02:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8006c06:	429e      	cmp	r6, r3
 8006c08:	d0f7      	beq.n	8006bfa <strstr+0x10>
 8006c0a:	3001      	adds	r0, #1
 8006c0c:	7803      	ldrb	r3, [r0, #0]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d1ef      	bne.n	8006bf2 <strstr+0x8>
 8006c12:	4618      	mov	r0, r3
 8006c14:	e7ec      	b.n	8006bf0 <strstr+0x6>
	...

08006c18 <_localeconv_r>:
 8006c18:	4800      	ldr	r0, [pc, #0]	@ (8006c1c <_localeconv_r+0x4>)
 8006c1a:	4770      	bx	lr
 8006c1c:	20000314 	.word	0x20000314

08006c20 <_close_r>:
 8006c20:	b538      	push	{r3, r4, r5, lr}
 8006c22:	4d06      	ldr	r5, [pc, #24]	@ (8006c3c <_close_r+0x1c>)
 8006c24:	2300      	movs	r3, #0
 8006c26:	4604      	mov	r4, r0
 8006c28:	4608      	mov	r0, r1
 8006c2a:	602b      	str	r3, [r5, #0]
 8006c2c:	f7fb fc5e 	bl	80024ec <_close>
 8006c30:	1c43      	adds	r3, r0, #1
 8006c32:	d102      	bne.n	8006c3a <_close_r+0x1a>
 8006c34:	682b      	ldr	r3, [r5, #0]
 8006c36:	b103      	cbz	r3, 8006c3a <_close_r+0x1a>
 8006c38:	6023      	str	r3, [r4, #0]
 8006c3a:	bd38      	pop	{r3, r4, r5, pc}
 8006c3c:	2000082c 	.word	0x2000082c

08006c40 <_lseek_r>:
 8006c40:	b538      	push	{r3, r4, r5, lr}
 8006c42:	4d07      	ldr	r5, [pc, #28]	@ (8006c60 <_lseek_r+0x20>)
 8006c44:	4604      	mov	r4, r0
 8006c46:	4608      	mov	r0, r1
 8006c48:	4611      	mov	r1, r2
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	602a      	str	r2, [r5, #0]
 8006c4e:	461a      	mov	r2, r3
 8006c50:	f7fb fc73 	bl	800253a <_lseek>
 8006c54:	1c43      	adds	r3, r0, #1
 8006c56:	d102      	bne.n	8006c5e <_lseek_r+0x1e>
 8006c58:	682b      	ldr	r3, [r5, #0]
 8006c5a:	b103      	cbz	r3, 8006c5e <_lseek_r+0x1e>
 8006c5c:	6023      	str	r3, [r4, #0]
 8006c5e:	bd38      	pop	{r3, r4, r5, pc}
 8006c60:	2000082c 	.word	0x2000082c

08006c64 <_read_r>:
 8006c64:	b538      	push	{r3, r4, r5, lr}
 8006c66:	4d07      	ldr	r5, [pc, #28]	@ (8006c84 <_read_r+0x20>)
 8006c68:	4604      	mov	r4, r0
 8006c6a:	4608      	mov	r0, r1
 8006c6c:	4611      	mov	r1, r2
 8006c6e:	2200      	movs	r2, #0
 8006c70:	602a      	str	r2, [r5, #0]
 8006c72:	461a      	mov	r2, r3
 8006c74:	f7fb fc01 	bl	800247a <_read>
 8006c78:	1c43      	adds	r3, r0, #1
 8006c7a:	d102      	bne.n	8006c82 <_read_r+0x1e>
 8006c7c:	682b      	ldr	r3, [r5, #0]
 8006c7e:	b103      	cbz	r3, 8006c82 <_read_r+0x1e>
 8006c80:	6023      	str	r3, [r4, #0]
 8006c82:	bd38      	pop	{r3, r4, r5, pc}
 8006c84:	2000082c 	.word	0x2000082c

08006c88 <_write_r>:
 8006c88:	b538      	push	{r3, r4, r5, lr}
 8006c8a:	4d07      	ldr	r5, [pc, #28]	@ (8006ca8 <_write_r+0x20>)
 8006c8c:	4604      	mov	r4, r0
 8006c8e:	4608      	mov	r0, r1
 8006c90:	4611      	mov	r1, r2
 8006c92:	2200      	movs	r2, #0
 8006c94:	602a      	str	r2, [r5, #0]
 8006c96:	461a      	mov	r2, r3
 8006c98:	f7fb fc0c 	bl	80024b4 <_write>
 8006c9c:	1c43      	adds	r3, r0, #1
 8006c9e:	d102      	bne.n	8006ca6 <_write_r+0x1e>
 8006ca0:	682b      	ldr	r3, [r5, #0]
 8006ca2:	b103      	cbz	r3, 8006ca6 <_write_r+0x1e>
 8006ca4:	6023      	str	r3, [r4, #0]
 8006ca6:	bd38      	pop	{r3, r4, r5, pc}
 8006ca8:	2000082c 	.word	0x2000082c

08006cac <__errno>:
 8006cac:	4b01      	ldr	r3, [pc, #4]	@ (8006cb4 <__errno+0x8>)
 8006cae:	6818      	ldr	r0, [r3, #0]
 8006cb0:	4770      	bx	lr
 8006cb2:	bf00      	nop
 8006cb4:	200001d4 	.word	0x200001d4

08006cb8 <__libc_init_array>:
 8006cb8:	b570      	push	{r4, r5, r6, lr}
 8006cba:	4d0d      	ldr	r5, [pc, #52]	@ (8006cf0 <__libc_init_array+0x38>)
 8006cbc:	4c0d      	ldr	r4, [pc, #52]	@ (8006cf4 <__libc_init_array+0x3c>)
 8006cbe:	1b64      	subs	r4, r4, r5
 8006cc0:	10a4      	asrs	r4, r4, #2
 8006cc2:	2600      	movs	r6, #0
 8006cc4:	42a6      	cmp	r6, r4
 8006cc6:	d109      	bne.n	8006cdc <__libc_init_array+0x24>
 8006cc8:	4d0b      	ldr	r5, [pc, #44]	@ (8006cf8 <__libc_init_array+0x40>)
 8006cca:	4c0c      	ldr	r4, [pc, #48]	@ (8006cfc <__libc_init_array+0x44>)
 8006ccc:	f003 ff7c 	bl	800abc8 <_init>
 8006cd0:	1b64      	subs	r4, r4, r5
 8006cd2:	10a4      	asrs	r4, r4, #2
 8006cd4:	2600      	movs	r6, #0
 8006cd6:	42a6      	cmp	r6, r4
 8006cd8:	d105      	bne.n	8006ce6 <__libc_init_array+0x2e>
 8006cda:	bd70      	pop	{r4, r5, r6, pc}
 8006cdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ce0:	4798      	blx	r3
 8006ce2:	3601      	adds	r6, #1
 8006ce4:	e7ee      	b.n	8006cc4 <__libc_init_array+0xc>
 8006ce6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cea:	4798      	blx	r3
 8006cec:	3601      	adds	r6, #1
 8006cee:	e7f2      	b.n	8006cd6 <__libc_init_array+0x1e>
 8006cf0:	0800b164 	.word	0x0800b164
 8006cf4:	0800b164 	.word	0x0800b164
 8006cf8:	0800b164 	.word	0x0800b164
 8006cfc:	0800b168 	.word	0x0800b168

08006d00 <__retarget_lock_init_recursive>:
 8006d00:	4770      	bx	lr

08006d02 <__retarget_lock_acquire_recursive>:
 8006d02:	4770      	bx	lr

08006d04 <__retarget_lock_release_recursive>:
 8006d04:	4770      	bx	lr
	...

08006d08 <nanf>:
 8006d08:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8006d10 <nanf+0x8>
 8006d0c:	4770      	bx	lr
 8006d0e:	bf00      	nop
 8006d10:	7fc00000 	.word	0x7fc00000

08006d14 <quorem>:
 8006d14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d18:	6903      	ldr	r3, [r0, #16]
 8006d1a:	690c      	ldr	r4, [r1, #16]
 8006d1c:	42a3      	cmp	r3, r4
 8006d1e:	4607      	mov	r7, r0
 8006d20:	db7e      	blt.n	8006e20 <quorem+0x10c>
 8006d22:	3c01      	subs	r4, #1
 8006d24:	f101 0814 	add.w	r8, r1, #20
 8006d28:	00a3      	lsls	r3, r4, #2
 8006d2a:	f100 0514 	add.w	r5, r0, #20
 8006d2e:	9300      	str	r3, [sp, #0]
 8006d30:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006d34:	9301      	str	r3, [sp, #4]
 8006d36:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006d3a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006d3e:	3301      	adds	r3, #1
 8006d40:	429a      	cmp	r2, r3
 8006d42:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006d46:	fbb2 f6f3 	udiv	r6, r2, r3
 8006d4a:	d32e      	bcc.n	8006daa <quorem+0x96>
 8006d4c:	f04f 0a00 	mov.w	sl, #0
 8006d50:	46c4      	mov	ip, r8
 8006d52:	46ae      	mov	lr, r5
 8006d54:	46d3      	mov	fp, sl
 8006d56:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006d5a:	b298      	uxth	r0, r3
 8006d5c:	fb06 a000 	mla	r0, r6, r0, sl
 8006d60:	0c02      	lsrs	r2, r0, #16
 8006d62:	0c1b      	lsrs	r3, r3, #16
 8006d64:	fb06 2303 	mla	r3, r6, r3, r2
 8006d68:	f8de 2000 	ldr.w	r2, [lr]
 8006d6c:	b280      	uxth	r0, r0
 8006d6e:	b292      	uxth	r2, r2
 8006d70:	1a12      	subs	r2, r2, r0
 8006d72:	445a      	add	r2, fp
 8006d74:	f8de 0000 	ldr.w	r0, [lr]
 8006d78:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006d7c:	b29b      	uxth	r3, r3
 8006d7e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006d82:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006d86:	b292      	uxth	r2, r2
 8006d88:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006d8c:	45e1      	cmp	r9, ip
 8006d8e:	f84e 2b04 	str.w	r2, [lr], #4
 8006d92:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006d96:	d2de      	bcs.n	8006d56 <quorem+0x42>
 8006d98:	9b00      	ldr	r3, [sp, #0]
 8006d9a:	58eb      	ldr	r3, [r5, r3]
 8006d9c:	b92b      	cbnz	r3, 8006daa <quorem+0x96>
 8006d9e:	9b01      	ldr	r3, [sp, #4]
 8006da0:	3b04      	subs	r3, #4
 8006da2:	429d      	cmp	r5, r3
 8006da4:	461a      	mov	r2, r3
 8006da6:	d32f      	bcc.n	8006e08 <quorem+0xf4>
 8006da8:	613c      	str	r4, [r7, #16]
 8006daa:	4638      	mov	r0, r7
 8006dac:	f001 f9c8 	bl	8008140 <__mcmp>
 8006db0:	2800      	cmp	r0, #0
 8006db2:	db25      	blt.n	8006e00 <quorem+0xec>
 8006db4:	4629      	mov	r1, r5
 8006db6:	2000      	movs	r0, #0
 8006db8:	f858 2b04 	ldr.w	r2, [r8], #4
 8006dbc:	f8d1 c000 	ldr.w	ip, [r1]
 8006dc0:	fa1f fe82 	uxth.w	lr, r2
 8006dc4:	fa1f f38c 	uxth.w	r3, ip
 8006dc8:	eba3 030e 	sub.w	r3, r3, lr
 8006dcc:	4403      	add	r3, r0
 8006dce:	0c12      	lsrs	r2, r2, #16
 8006dd0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006dd4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006dd8:	b29b      	uxth	r3, r3
 8006dda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006dde:	45c1      	cmp	r9, r8
 8006de0:	f841 3b04 	str.w	r3, [r1], #4
 8006de4:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006de8:	d2e6      	bcs.n	8006db8 <quorem+0xa4>
 8006dea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006dee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006df2:	b922      	cbnz	r2, 8006dfe <quorem+0xea>
 8006df4:	3b04      	subs	r3, #4
 8006df6:	429d      	cmp	r5, r3
 8006df8:	461a      	mov	r2, r3
 8006dfa:	d30b      	bcc.n	8006e14 <quorem+0x100>
 8006dfc:	613c      	str	r4, [r7, #16]
 8006dfe:	3601      	adds	r6, #1
 8006e00:	4630      	mov	r0, r6
 8006e02:	b003      	add	sp, #12
 8006e04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e08:	6812      	ldr	r2, [r2, #0]
 8006e0a:	3b04      	subs	r3, #4
 8006e0c:	2a00      	cmp	r2, #0
 8006e0e:	d1cb      	bne.n	8006da8 <quorem+0x94>
 8006e10:	3c01      	subs	r4, #1
 8006e12:	e7c6      	b.n	8006da2 <quorem+0x8e>
 8006e14:	6812      	ldr	r2, [r2, #0]
 8006e16:	3b04      	subs	r3, #4
 8006e18:	2a00      	cmp	r2, #0
 8006e1a:	d1ef      	bne.n	8006dfc <quorem+0xe8>
 8006e1c:	3c01      	subs	r4, #1
 8006e1e:	e7ea      	b.n	8006df6 <quorem+0xe2>
 8006e20:	2000      	movs	r0, #0
 8006e22:	e7ee      	b.n	8006e02 <quorem+0xee>
 8006e24:	0000      	movs	r0, r0
	...

08006e28 <_dtoa_r>:
 8006e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e2c:	69c7      	ldr	r7, [r0, #28]
 8006e2e:	b097      	sub	sp, #92	@ 0x5c
 8006e30:	ed8d 0b04 	vstr	d0, [sp, #16]
 8006e34:	ec55 4b10 	vmov	r4, r5, d0
 8006e38:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8006e3a:	9107      	str	r1, [sp, #28]
 8006e3c:	4681      	mov	r9, r0
 8006e3e:	920c      	str	r2, [sp, #48]	@ 0x30
 8006e40:	9311      	str	r3, [sp, #68]	@ 0x44
 8006e42:	b97f      	cbnz	r7, 8006e64 <_dtoa_r+0x3c>
 8006e44:	2010      	movs	r0, #16
 8006e46:	f000 fe09 	bl	8007a5c <malloc>
 8006e4a:	4602      	mov	r2, r0
 8006e4c:	f8c9 001c 	str.w	r0, [r9, #28]
 8006e50:	b920      	cbnz	r0, 8006e5c <_dtoa_r+0x34>
 8006e52:	4ba9      	ldr	r3, [pc, #676]	@ (80070f8 <_dtoa_r+0x2d0>)
 8006e54:	21ef      	movs	r1, #239	@ 0xef
 8006e56:	48a9      	ldr	r0, [pc, #676]	@ (80070fc <_dtoa_r+0x2d4>)
 8006e58:	f002 ffce 	bl	8009df8 <__assert_func>
 8006e5c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006e60:	6007      	str	r7, [r0, #0]
 8006e62:	60c7      	str	r7, [r0, #12]
 8006e64:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006e68:	6819      	ldr	r1, [r3, #0]
 8006e6a:	b159      	cbz	r1, 8006e84 <_dtoa_r+0x5c>
 8006e6c:	685a      	ldr	r2, [r3, #4]
 8006e6e:	604a      	str	r2, [r1, #4]
 8006e70:	2301      	movs	r3, #1
 8006e72:	4093      	lsls	r3, r2
 8006e74:	608b      	str	r3, [r1, #8]
 8006e76:	4648      	mov	r0, r9
 8006e78:	f000 fee6 	bl	8007c48 <_Bfree>
 8006e7c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006e80:	2200      	movs	r2, #0
 8006e82:	601a      	str	r2, [r3, #0]
 8006e84:	1e2b      	subs	r3, r5, #0
 8006e86:	bfb9      	ittee	lt
 8006e88:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006e8c:	9305      	strlt	r3, [sp, #20]
 8006e8e:	2300      	movge	r3, #0
 8006e90:	6033      	strge	r3, [r6, #0]
 8006e92:	9f05      	ldr	r7, [sp, #20]
 8006e94:	4b9a      	ldr	r3, [pc, #616]	@ (8007100 <_dtoa_r+0x2d8>)
 8006e96:	bfbc      	itt	lt
 8006e98:	2201      	movlt	r2, #1
 8006e9a:	6032      	strlt	r2, [r6, #0]
 8006e9c:	43bb      	bics	r3, r7
 8006e9e:	d112      	bne.n	8006ec6 <_dtoa_r+0x9e>
 8006ea0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006ea2:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006ea6:	6013      	str	r3, [r2, #0]
 8006ea8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006eac:	4323      	orrs	r3, r4
 8006eae:	f000 855a 	beq.w	8007966 <_dtoa_r+0xb3e>
 8006eb2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006eb4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8007114 <_dtoa_r+0x2ec>
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	f000 855c 	beq.w	8007976 <_dtoa_r+0xb4e>
 8006ebe:	f10a 0303 	add.w	r3, sl, #3
 8006ec2:	f000 bd56 	b.w	8007972 <_dtoa_r+0xb4a>
 8006ec6:	ed9d 7b04 	vldr	d7, [sp, #16]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	ec51 0b17 	vmov	r0, r1, d7
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8006ed6:	f7f9 fdf7 	bl	8000ac8 <__aeabi_dcmpeq>
 8006eda:	4680      	mov	r8, r0
 8006edc:	b158      	cbz	r0, 8006ef6 <_dtoa_r+0xce>
 8006ede:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	6013      	str	r3, [r2, #0]
 8006ee4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006ee6:	b113      	cbz	r3, 8006eee <_dtoa_r+0xc6>
 8006ee8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8006eea:	4b86      	ldr	r3, [pc, #536]	@ (8007104 <_dtoa_r+0x2dc>)
 8006eec:	6013      	str	r3, [r2, #0]
 8006eee:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8007118 <_dtoa_r+0x2f0>
 8006ef2:	f000 bd40 	b.w	8007976 <_dtoa_r+0xb4e>
 8006ef6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8006efa:	aa14      	add	r2, sp, #80	@ 0x50
 8006efc:	a915      	add	r1, sp, #84	@ 0x54
 8006efe:	4648      	mov	r0, r9
 8006f00:	f001 fa3e 	bl	8008380 <__d2b>
 8006f04:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006f08:	9002      	str	r0, [sp, #8]
 8006f0a:	2e00      	cmp	r6, #0
 8006f0c:	d078      	beq.n	8007000 <_dtoa_r+0x1d8>
 8006f0e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006f10:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8006f14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006f18:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006f1c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006f20:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006f24:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006f28:	4619      	mov	r1, r3
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	4b76      	ldr	r3, [pc, #472]	@ (8007108 <_dtoa_r+0x2e0>)
 8006f2e:	f7f9 f9ab 	bl	8000288 <__aeabi_dsub>
 8006f32:	a36b      	add	r3, pc, #428	@ (adr r3, 80070e0 <_dtoa_r+0x2b8>)
 8006f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f38:	f7f9 fb5e 	bl	80005f8 <__aeabi_dmul>
 8006f3c:	a36a      	add	r3, pc, #424	@ (adr r3, 80070e8 <_dtoa_r+0x2c0>)
 8006f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f42:	f7f9 f9a3 	bl	800028c <__adddf3>
 8006f46:	4604      	mov	r4, r0
 8006f48:	4630      	mov	r0, r6
 8006f4a:	460d      	mov	r5, r1
 8006f4c:	f7f9 faea 	bl	8000524 <__aeabi_i2d>
 8006f50:	a367      	add	r3, pc, #412	@ (adr r3, 80070f0 <_dtoa_r+0x2c8>)
 8006f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f56:	f7f9 fb4f 	bl	80005f8 <__aeabi_dmul>
 8006f5a:	4602      	mov	r2, r0
 8006f5c:	460b      	mov	r3, r1
 8006f5e:	4620      	mov	r0, r4
 8006f60:	4629      	mov	r1, r5
 8006f62:	f7f9 f993 	bl	800028c <__adddf3>
 8006f66:	4604      	mov	r4, r0
 8006f68:	460d      	mov	r5, r1
 8006f6a:	f7f9 fdf5 	bl	8000b58 <__aeabi_d2iz>
 8006f6e:	2200      	movs	r2, #0
 8006f70:	4607      	mov	r7, r0
 8006f72:	2300      	movs	r3, #0
 8006f74:	4620      	mov	r0, r4
 8006f76:	4629      	mov	r1, r5
 8006f78:	f7f9 fdb0 	bl	8000adc <__aeabi_dcmplt>
 8006f7c:	b140      	cbz	r0, 8006f90 <_dtoa_r+0x168>
 8006f7e:	4638      	mov	r0, r7
 8006f80:	f7f9 fad0 	bl	8000524 <__aeabi_i2d>
 8006f84:	4622      	mov	r2, r4
 8006f86:	462b      	mov	r3, r5
 8006f88:	f7f9 fd9e 	bl	8000ac8 <__aeabi_dcmpeq>
 8006f8c:	b900      	cbnz	r0, 8006f90 <_dtoa_r+0x168>
 8006f8e:	3f01      	subs	r7, #1
 8006f90:	2f16      	cmp	r7, #22
 8006f92:	d852      	bhi.n	800703a <_dtoa_r+0x212>
 8006f94:	4b5d      	ldr	r3, [pc, #372]	@ (800710c <_dtoa_r+0x2e4>)
 8006f96:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f9e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006fa2:	f7f9 fd9b 	bl	8000adc <__aeabi_dcmplt>
 8006fa6:	2800      	cmp	r0, #0
 8006fa8:	d049      	beq.n	800703e <_dtoa_r+0x216>
 8006faa:	3f01      	subs	r7, #1
 8006fac:	2300      	movs	r3, #0
 8006fae:	9310      	str	r3, [sp, #64]	@ 0x40
 8006fb0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006fb2:	1b9b      	subs	r3, r3, r6
 8006fb4:	1e5a      	subs	r2, r3, #1
 8006fb6:	bf45      	ittet	mi
 8006fb8:	f1c3 0301 	rsbmi	r3, r3, #1
 8006fbc:	9300      	strmi	r3, [sp, #0]
 8006fbe:	2300      	movpl	r3, #0
 8006fc0:	2300      	movmi	r3, #0
 8006fc2:	9206      	str	r2, [sp, #24]
 8006fc4:	bf54      	ite	pl
 8006fc6:	9300      	strpl	r3, [sp, #0]
 8006fc8:	9306      	strmi	r3, [sp, #24]
 8006fca:	2f00      	cmp	r7, #0
 8006fcc:	db39      	blt.n	8007042 <_dtoa_r+0x21a>
 8006fce:	9b06      	ldr	r3, [sp, #24]
 8006fd0:	970d      	str	r7, [sp, #52]	@ 0x34
 8006fd2:	443b      	add	r3, r7
 8006fd4:	9306      	str	r3, [sp, #24]
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	9308      	str	r3, [sp, #32]
 8006fda:	9b07      	ldr	r3, [sp, #28]
 8006fdc:	2b09      	cmp	r3, #9
 8006fde:	d863      	bhi.n	80070a8 <_dtoa_r+0x280>
 8006fe0:	2b05      	cmp	r3, #5
 8006fe2:	bfc4      	itt	gt
 8006fe4:	3b04      	subgt	r3, #4
 8006fe6:	9307      	strgt	r3, [sp, #28]
 8006fe8:	9b07      	ldr	r3, [sp, #28]
 8006fea:	f1a3 0302 	sub.w	r3, r3, #2
 8006fee:	bfcc      	ite	gt
 8006ff0:	2400      	movgt	r4, #0
 8006ff2:	2401      	movle	r4, #1
 8006ff4:	2b03      	cmp	r3, #3
 8006ff6:	d863      	bhi.n	80070c0 <_dtoa_r+0x298>
 8006ff8:	e8df f003 	tbb	[pc, r3]
 8006ffc:	2b375452 	.word	0x2b375452
 8007000:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8007004:	441e      	add	r6, r3
 8007006:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800700a:	2b20      	cmp	r3, #32
 800700c:	bfc1      	itttt	gt
 800700e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007012:	409f      	lslgt	r7, r3
 8007014:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007018:	fa24 f303 	lsrgt.w	r3, r4, r3
 800701c:	bfd6      	itet	le
 800701e:	f1c3 0320 	rsble	r3, r3, #32
 8007022:	ea47 0003 	orrgt.w	r0, r7, r3
 8007026:	fa04 f003 	lslle.w	r0, r4, r3
 800702a:	f7f9 fa6b 	bl	8000504 <__aeabi_ui2d>
 800702e:	2201      	movs	r2, #1
 8007030:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007034:	3e01      	subs	r6, #1
 8007036:	9212      	str	r2, [sp, #72]	@ 0x48
 8007038:	e776      	b.n	8006f28 <_dtoa_r+0x100>
 800703a:	2301      	movs	r3, #1
 800703c:	e7b7      	b.n	8006fae <_dtoa_r+0x186>
 800703e:	9010      	str	r0, [sp, #64]	@ 0x40
 8007040:	e7b6      	b.n	8006fb0 <_dtoa_r+0x188>
 8007042:	9b00      	ldr	r3, [sp, #0]
 8007044:	1bdb      	subs	r3, r3, r7
 8007046:	9300      	str	r3, [sp, #0]
 8007048:	427b      	negs	r3, r7
 800704a:	9308      	str	r3, [sp, #32]
 800704c:	2300      	movs	r3, #0
 800704e:	930d      	str	r3, [sp, #52]	@ 0x34
 8007050:	e7c3      	b.n	8006fda <_dtoa_r+0x1b2>
 8007052:	2301      	movs	r3, #1
 8007054:	9309      	str	r3, [sp, #36]	@ 0x24
 8007056:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007058:	eb07 0b03 	add.w	fp, r7, r3
 800705c:	f10b 0301 	add.w	r3, fp, #1
 8007060:	2b01      	cmp	r3, #1
 8007062:	9303      	str	r3, [sp, #12]
 8007064:	bfb8      	it	lt
 8007066:	2301      	movlt	r3, #1
 8007068:	e006      	b.n	8007078 <_dtoa_r+0x250>
 800706a:	2301      	movs	r3, #1
 800706c:	9309      	str	r3, [sp, #36]	@ 0x24
 800706e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007070:	2b00      	cmp	r3, #0
 8007072:	dd28      	ble.n	80070c6 <_dtoa_r+0x29e>
 8007074:	469b      	mov	fp, r3
 8007076:	9303      	str	r3, [sp, #12]
 8007078:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800707c:	2100      	movs	r1, #0
 800707e:	2204      	movs	r2, #4
 8007080:	f102 0514 	add.w	r5, r2, #20
 8007084:	429d      	cmp	r5, r3
 8007086:	d926      	bls.n	80070d6 <_dtoa_r+0x2ae>
 8007088:	6041      	str	r1, [r0, #4]
 800708a:	4648      	mov	r0, r9
 800708c:	f000 fd9c 	bl	8007bc8 <_Balloc>
 8007090:	4682      	mov	sl, r0
 8007092:	2800      	cmp	r0, #0
 8007094:	d142      	bne.n	800711c <_dtoa_r+0x2f4>
 8007096:	4b1e      	ldr	r3, [pc, #120]	@ (8007110 <_dtoa_r+0x2e8>)
 8007098:	4602      	mov	r2, r0
 800709a:	f240 11af 	movw	r1, #431	@ 0x1af
 800709e:	e6da      	b.n	8006e56 <_dtoa_r+0x2e>
 80070a0:	2300      	movs	r3, #0
 80070a2:	e7e3      	b.n	800706c <_dtoa_r+0x244>
 80070a4:	2300      	movs	r3, #0
 80070a6:	e7d5      	b.n	8007054 <_dtoa_r+0x22c>
 80070a8:	2401      	movs	r4, #1
 80070aa:	2300      	movs	r3, #0
 80070ac:	9307      	str	r3, [sp, #28]
 80070ae:	9409      	str	r4, [sp, #36]	@ 0x24
 80070b0:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 80070b4:	2200      	movs	r2, #0
 80070b6:	f8cd b00c 	str.w	fp, [sp, #12]
 80070ba:	2312      	movs	r3, #18
 80070bc:	920c      	str	r2, [sp, #48]	@ 0x30
 80070be:	e7db      	b.n	8007078 <_dtoa_r+0x250>
 80070c0:	2301      	movs	r3, #1
 80070c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80070c4:	e7f4      	b.n	80070b0 <_dtoa_r+0x288>
 80070c6:	f04f 0b01 	mov.w	fp, #1
 80070ca:	f8cd b00c 	str.w	fp, [sp, #12]
 80070ce:	465b      	mov	r3, fp
 80070d0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80070d4:	e7d0      	b.n	8007078 <_dtoa_r+0x250>
 80070d6:	3101      	adds	r1, #1
 80070d8:	0052      	lsls	r2, r2, #1
 80070da:	e7d1      	b.n	8007080 <_dtoa_r+0x258>
 80070dc:	f3af 8000 	nop.w
 80070e0:	636f4361 	.word	0x636f4361
 80070e4:	3fd287a7 	.word	0x3fd287a7
 80070e8:	8b60c8b3 	.word	0x8b60c8b3
 80070ec:	3fc68a28 	.word	0x3fc68a28
 80070f0:	509f79fb 	.word	0x509f79fb
 80070f4:	3fd34413 	.word	0x3fd34413
 80070f8:	0800ad5c 	.word	0x0800ad5c
 80070fc:	0800ad73 	.word	0x0800ad73
 8007100:	7ff00000 	.word	0x7ff00000
 8007104:	0800ae5f 	.word	0x0800ae5f
 8007108:	3ff80000 	.word	0x3ff80000
 800710c:	0800af40 	.word	0x0800af40
 8007110:	0800adcb 	.word	0x0800adcb
 8007114:	0800ad58 	.word	0x0800ad58
 8007118:	0800ae5e 	.word	0x0800ae5e
 800711c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007120:	6018      	str	r0, [r3, #0]
 8007122:	9b03      	ldr	r3, [sp, #12]
 8007124:	2b0e      	cmp	r3, #14
 8007126:	f200 80a1 	bhi.w	800726c <_dtoa_r+0x444>
 800712a:	2c00      	cmp	r4, #0
 800712c:	f000 809e 	beq.w	800726c <_dtoa_r+0x444>
 8007130:	2f00      	cmp	r7, #0
 8007132:	dd33      	ble.n	800719c <_dtoa_r+0x374>
 8007134:	4b9c      	ldr	r3, [pc, #624]	@ (80073a8 <_dtoa_r+0x580>)
 8007136:	f007 020f 	and.w	r2, r7, #15
 800713a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800713e:	ed93 7b00 	vldr	d7, [r3]
 8007142:	05f8      	lsls	r0, r7, #23
 8007144:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8007148:	ea4f 1427 	mov.w	r4, r7, asr #4
 800714c:	d516      	bpl.n	800717c <_dtoa_r+0x354>
 800714e:	4b97      	ldr	r3, [pc, #604]	@ (80073ac <_dtoa_r+0x584>)
 8007150:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007154:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007158:	f7f9 fb78 	bl	800084c <__aeabi_ddiv>
 800715c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007160:	f004 040f 	and.w	r4, r4, #15
 8007164:	2603      	movs	r6, #3
 8007166:	4d91      	ldr	r5, [pc, #580]	@ (80073ac <_dtoa_r+0x584>)
 8007168:	b954      	cbnz	r4, 8007180 <_dtoa_r+0x358>
 800716a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800716e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007172:	f7f9 fb6b 	bl	800084c <__aeabi_ddiv>
 8007176:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800717a:	e028      	b.n	80071ce <_dtoa_r+0x3a6>
 800717c:	2602      	movs	r6, #2
 800717e:	e7f2      	b.n	8007166 <_dtoa_r+0x33e>
 8007180:	07e1      	lsls	r1, r4, #31
 8007182:	d508      	bpl.n	8007196 <_dtoa_r+0x36e>
 8007184:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007188:	e9d5 2300 	ldrd	r2, r3, [r5]
 800718c:	f7f9 fa34 	bl	80005f8 <__aeabi_dmul>
 8007190:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007194:	3601      	adds	r6, #1
 8007196:	1064      	asrs	r4, r4, #1
 8007198:	3508      	adds	r5, #8
 800719a:	e7e5      	b.n	8007168 <_dtoa_r+0x340>
 800719c:	f000 80af 	beq.w	80072fe <_dtoa_r+0x4d6>
 80071a0:	427c      	negs	r4, r7
 80071a2:	4b81      	ldr	r3, [pc, #516]	@ (80073a8 <_dtoa_r+0x580>)
 80071a4:	4d81      	ldr	r5, [pc, #516]	@ (80073ac <_dtoa_r+0x584>)
 80071a6:	f004 020f 	and.w	r2, r4, #15
 80071aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80071ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071b2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80071b6:	f7f9 fa1f 	bl	80005f8 <__aeabi_dmul>
 80071ba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80071be:	1124      	asrs	r4, r4, #4
 80071c0:	2300      	movs	r3, #0
 80071c2:	2602      	movs	r6, #2
 80071c4:	2c00      	cmp	r4, #0
 80071c6:	f040 808f 	bne.w	80072e8 <_dtoa_r+0x4c0>
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d1d3      	bne.n	8007176 <_dtoa_r+0x34e>
 80071ce:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80071d0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	f000 8094 	beq.w	8007302 <_dtoa_r+0x4da>
 80071da:	4b75      	ldr	r3, [pc, #468]	@ (80073b0 <_dtoa_r+0x588>)
 80071dc:	2200      	movs	r2, #0
 80071de:	4620      	mov	r0, r4
 80071e0:	4629      	mov	r1, r5
 80071e2:	f7f9 fc7b 	bl	8000adc <__aeabi_dcmplt>
 80071e6:	2800      	cmp	r0, #0
 80071e8:	f000 808b 	beq.w	8007302 <_dtoa_r+0x4da>
 80071ec:	9b03      	ldr	r3, [sp, #12]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	f000 8087 	beq.w	8007302 <_dtoa_r+0x4da>
 80071f4:	f1bb 0f00 	cmp.w	fp, #0
 80071f8:	dd34      	ble.n	8007264 <_dtoa_r+0x43c>
 80071fa:	4620      	mov	r0, r4
 80071fc:	4b6d      	ldr	r3, [pc, #436]	@ (80073b4 <_dtoa_r+0x58c>)
 80071fe:	2200      	movs	r2, #0
 8007200:	4629      	mov	r1, r5
 8007202:	f7f9 f9f9 	bl	80005f8 <__aeabi_dmul>
 8007206:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800720a:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800720e:	3601      	adds	r6, #1
 8007210:	465c      	mov	r4, fp
 8007212:	4630      	mov	r0, r6
 8007214:	f7f9 f986 	bl	8000524 <__aeabi_i2d>
 8007218:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800721c:	f7f9 f9ec 	bl	80005f8 <__aeabi_dmul>
 8007220:	4b65      	ldr	r3, [pc, #404]	@ (80073b8 <_dtoa_r+0x590>)
 8007222:	2200      	movs	r2, #0
 8007224:	f7f9 f832 	bl	800028c <__adddf3>
 8007228:	4605      	mov	r5, r0
 800722a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800722e:	2c00      	cmp	r4, #0
 8007230:	d16a      	bne.n	8007308 <_dtoa_r+0x4e0>
 8007232:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007236:	4b61      	ldr	r3, [pc, #388]	@ (80073bc <_dtoa_r+0x594>)
 8007238:	2200      	movs	r2, #0
 800723a:	f7f9 f825 	bl	8000288 <__aeabi_dsub>
 800723e:	4602      	mov	r2, r0
 8007240:	460b      	mov	r3, r1
 8007242:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007246:	462a      	mov	r2, r5
 8007248:	4633      	mov	r3, r6
 800724a:	f7f9 fc65 	bl	8000b18 <__aeabi_dcmpgt>
 800724e:	2800      	cmp	r0, #0
 8007250:	f040 8298 	bne.w	8007784 <_dtoa_r+0x95c>
 8007254:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007258:	462a      	mov	r2, r5
 800725a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800725e:	f7f9 fc3d 	bl	8000adc <__aeabi_dcmplt>
 8007262:	bb38      	cbnz	r0, 80072b4 <_dtoa_r+0x48c>
 8007264:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8007268:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800726c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800726e:	2b00      	cmp	r3, #0
 8007270:	f2c0 8157 	blt.w	8007522 <_dtoa_r+0x6fa>
 8007274:	2f0e      	cmp	r7, #14
 8007276:	f300 8154 	bgt.w	8007522 <_dtoa_r+0x6fa>
 800727a:	4b4b      	ldr	r3, [pc, #300]	@ (80073a8 <_dtoa_r+0x580>)
 800727c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007280:	ed93 7b00 	vldr	d7, [r3]
 8007284:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007286:	2b00      	cmp	r3, #0
 8007288:	ed8d 7b00 	vstr	d7, [sp]
 800728c:	f280 80e5 	bge.w	800745a <_dtoa_r+0x632>
 8007290:	9b03      	ldr	r3, [sp, #12]
 8007292:	2b00      	cmp	r3, #0
 8007294:	f300 80e1 	bgt.w	800745a <_dtoa_r+0x632>
 8007298:	d10c      	bne.n	80072b4 <_dtoa_r+0x48c>
 800729a:	4b48      	ldr	r3, [pc, #288]	@ (80073bc <_dtoa_r+0x594>)
 800729c:	2200      	movs	r2, #0
 800729e:	ec51 0b17 	vmov	r0, r1, d7
 80072a2:	f7f9 f9a9 	bl	80005f8 <__aeabi_dmul>
 80072a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80072aa:	f7f9 fc2b 	bl	8000b04 <__aeabi_dcmpge>
 80072ae:	2800      	cmp	r0, #0
 80072b0:	f000 8266 	beq.w	8007780 <_dtoa_r+0x958>
 80072b4:	2400      	movs	r4, #0
 80072b6:	4625      	mov	r5, r4
 80072b8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80072ba:	4656      	mov	r6, sl
 80072bc:	ea6f 0803 	mvn.w	r8, r3
 80072c0:	2700      	movs	r7, #0
 80072c2:	4621      	mov	r1, r4
 80072c4:	4648      	mov	r0, r9
 80072c6:	f000 fcbf 	bl	8007c48 <_Bfree>
 80072ca:	2d00      	cmp	r5, #0
 80072cc:	f000 80bd 	beq.w	800744a <_dtoa_r+0x622>
 80072d0:	b12f      	cbz	r7, 80072de <_dtoa_r+0x4b6>
 80072d2:	42af      	cmp	r7, r5
 80072d4:	d003      	beq.n	80072de <_dtoa_r+0x4b6>
 80072d6:	4639      	mov	r1, r7
 80072d8:	4648      	mov	r0, r9
 80072da:	f000 fcb5 	bl	8007c48 <_Bfree>
 80072de:	4629      	mov	r1, r5
 80072e0:	4648      	mov	r0, r9
 80072e2:	f000 fcb1 	bl	8007c48 <_Bfree>
 80072e6:	e0b0      	b.n	800744a <_dtoa_r+0x622>
 80072e8:	07e2      	lsls	r2, r4, #31
 80072ea:	d505      	bpl.n	80072f8 <_dtoa_r+0x4d0>
 80072ec:	e9d5 2300 	ldrd	r2, r3, [r5]
 80072f0:	f7f9 f982 	bl	80005f8 <__aeabi_dmul>
 80072f4:	3601      	adds	r6, #1
 80072f6:	2301      	movs	r3, #1
 80072f8:	1064      	asrs	r4, r4, #1
 80072fa:	3508      	adds	r5, #8
 80072fc:	e762      	b.n	80071c4 <_dtoa_r+0x39c>
 80072fe:	2602      	movs	r6, #2
 8007300:	e765      	b.n	80071ce <_dtoa_r+0x3a6>
 8007302:	9c03      	ldr	r4, [sp, #12]
 8007304:	46b8      	mov	r8, r7
 8007306:	e784      	b.n	8007212 <_dtoa_r+0x3ea>
 8007308:	4b27      	ldr	r3, [pc, #156]	@ (80073a8 <_dtoa_r+0x580>)
 800730a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800730c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007310:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007314:	4454      	add	r4, sl
 8007316:	2900      	cmp	r1, #0
 8007318:	d054      	beq.n	80073c4 <_dtoa_r+0x59c>
 800731a:	4929      	ldr	r1, [pc, #164]	@ (80073c0 <_dtoa_r+0x598>)
 800731c:	2000      	movs	r0, #0
 800731e:	f7f9 fa95 	bl	800084c <__aeabi_ddiv>
 8007322:	4633      	mov	r3, r6
 8007324:	462a      	mov	r2, r5
 8007326:	f7f8 ffaf 	bl	8000288 <__aeabi_dsub>
 800732a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800732e:	4656      	mov	r6, sl
 8007330:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007334:	f7f9 fc10 	bl	8000b58 <__aeabi_d2iz>
 8007338:	4605      	mov	r5, r0
 800733a:	f7f9 f8f3 	bl	8000524 <__aeabi_i2d>
 800733e:	4602      	mov	r2, r0
 8007340:	460b      	mov	r3, r1
 8007342:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007346:	f7f8 ff9f 	bl	8000288 <__aeabi_dsub>
 800734a:	3530      	adds	r5, #48	@ 0x30
 800734c:	4602      	mov	r2, r0
 800734e:	460b      	mov	r3, r1
 8007350:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007354:	f806 5b01 	strb.w	r5, [r6], #1
 8007358:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800735c:	f7f9 fbbe 	bl	8000adc <__aeabi_dcmplt>
 8007360:	2800      	cmp	r0, #0
 8007362:	d172      	bne.n	800744a <_dtoa_r+0x622>
 8007364:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007368:	4911      	ldr	r1, [pc, #68]	@ (80073b0 <_dtoa_r+0x588>)
 800736a:	2000      	movs	r0, #0
 800736c:	f7f8 ff8c 	bl	8000288 <__aeabi_dsub>
 8007370:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007374:	f7f9 fbb2 	bl	8000adc <__aeabi_dcmplt>
 8007378:	2800      	cmp	r0, #0
 800737a:	f040 80b4 	bne.w	80074e6 <_dtoa_r+0x6be>
 800737e:	42a6      	cmp	r6, r4
 8007380:	f43f af70 	beq.w	8007264 <_dtoa_r+0x43c>
 8007384:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007388:	4b0a      	ldr	r3, [pc, #40]	@ (80073b4 <_dtoa_r+0x58c>)
 800738a:	2200      	movs	r2, #0
 800738c:	f7f9 f934 	bl	80005f8 <__aeabi_dmul>
 8007390:	4b08      	ldr	r3, [pc, #32]	@ (80073b4 <_dtoa_r+0x58c>)
 8007392:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007396:	2200      	movs	r2, #0
 8007398:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800739c:	f7f9 f92c 	bl	80005f8 <__aeabi_dmul>
 80073a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80073a4:	e7c4      	b.n	8007330 <_dtoa_r+0x508>
 80073a6:	bf00      	nop
 80073a8:	0800af40 	.word	0x0800af40
 80073ac:	0800af18 	.word	0x0800af18
 80073b0:	3ff00000 	.word	0x3ff00000
 80073b4:	40240000 	.word	0x40240000
 80073b8:	401c0000 	.word	0x401c0000
 80073bc:	40140000 	.word	0x40140000
 80073c0:	3fe00000 	.word	0x3fe00000
 80073c4:	4631      	mov	r1, r6
 80073c6:	4628      	mov	r0, r5
 80073c8:	f7f9 f916 	bl	80005f8 <__aeabi_dmul>
 80073cc:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80073d0:	9413      	str	r4, [sp, #76]	@ 0x4c
 80073d2:	4656      	mov	r6, sl
 80073d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80073d8:	f7f9 fbbe 	bl	8000b58 <__aeabi_d2iz>
 80073dc:	4605      	mov	r5, r0
 80073de:	f7f9 f8a1 	bl	8000524 <__aeabi_i2d>
 80073e2:	4602      	mov	r2, r0
 80073e4:	460b      	mov	r3, r1
 80073e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80073ea:	f7f8 ff4d 	bl	8000288 <__aeabi_dsub>
 80073ee:	3530      	adds	r5, #48	@ 0x30
 80073f0:	f806 5b01 	strb.w	r5, [r6], #1
 80073f4:	4602      	mov	r2, r0
 80073f6:	460b      	mov	r3, r1
 80073f8:	42a6      	cmp	r6, r4
 80073fa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80073fe:	f04f 0200 	mov.w	r2, #0
 8007402:	d124      	bne.n	800744e <_dtoa_r+0x626>
 8007404:	4baf      	ldr	r3, [pc, #700]	@ (80076c4 <_dtoa_r+0x89c>)
 8007406:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800740a:	f7f8 ff3f 	bl	800028c <__adddf3>
 800740e:	4602      	mov	r2, r0
 8007410:	460b      	mov	r3, r1
 8007412:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007416:	f7f9 fb7f 	bl	8000b18 <__aeabi_dcmpgt>
 800741a:	2800      	cmp	r0, #0
 800741c:	d163      	bne.n	80074e6 <_dtoa_r+0x6be>
 800741e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007422:	49a8      	ldr	r1, [pc, #672]	@ (80076c4 <_dtoa_r+0x89c>)
 8007424:	2000      	movs	r0, #0
 8007426:	f7f8 ff2f 	bl	8000288 <__aeabi_dsub>
 800742a:	4602      	mov	r2, r0
 800742c:	460b      	mov	r3, r1
 800742e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007432:	f7f9 fb53 	bl	8000adc <__aeabi_dcmplt>
 8007436:	2800      	cmp	r0, #0
 8007438:	f43f af14 	beq.w	8007264 <_dtoa_r+0x43c>
 800743c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800743e:	1e73      	subs	r3, r6, #1
 8007440:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007442:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007446:	2b30      	cmp	r3, #48	@ 0x30
 8007448:	d0f8      	beq.n	800743c <_dtoa_r+0x614>
 800744a:	4647      	mov	r7, r8
 800744c:	e03b      	b.n	80074c6 <_dtoa_r+0x69e>
 800744e:	4b9e      	ldr	r3, [pc, #632]	@ (80076c8 <_dtoa_r+0x8a0>)
 8007450:	f7f9 f8d2 	bl	80005f8 <__aeabi_dmul>
 8007454:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007458:	e7bc      	b.n	80073d4 <_dtoa_r+0x5ac>
 800745a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800745e:	4656      	mov	r6, sl
 8007460:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007464:	4620      	mov	r0, r4
 8007466:	4629      	mov	r1, r5
 8007468:	f7f9 f9f0 	bl	800084c <__aeabi_ddiv>
 800746c:	f7f9 fb74 	bl	8000b58 <__aeabi_d2iz>
 8007470:	4680      	mov	r8, r0
 8007472:	f7f9 f857 	bl	8000524 <__aeabi_i2d>
 8007476:	e9dd 2300 	ldrd	r2, r3, [sp]
 800747a:	f7f9 f8bd 	bl	80005f8 <__aeabi_dmul>
 800747e:	4602      	mov	r2, r0
 8007480:	460b      	mov	r3, r1
 8007482:	4620      	mov	r0, r4
 8007484:	4629      	mov	r1, r5
 8007486:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800748a:	f7f8 fefd 	bl	8000288 <__aeabi_dsub>
 800748e:	f806 4b01 	strb.w	r4, [r6], #1
 8007492:	9d03      	ldr	r5, [sp, #12]
 8007494:	eba6 040a 	sub.w	r4, r6, sl
 8007498:	42a5      	cmp	r5, r4
 800749a:	4602      	mov	r2, r0
 800749c:	460b      	mov	r3, r1
 800749e:	d133      	bne.n	8007508 <_dtoa_r+0x6e0>
 80074a0:	f7f8 fef4 	bl	800028c <__adddf3>
 80074a4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80074a8:	4604      	mov	r4, r0
 80074aa:	460d      	mov	r5, r1
 80074ac:	f7f9 fb34 	bl	8000b18 <__aeabi_dcmpgt>
 80074b0:	b9c0      	cbnz	r0, 80074e4 <_dtoa_r+0x6bc>
 80074b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80074b6:	4620      	mov	r0, r4
 80074b8:	4629      	mov	r1, r5
 80074ba:	f7f9 fb05 	bl	8000ac8 <__aeabi_dcmpeq>
 80074be:	b110      	cbz	r0, 80074c6 <_dtoa_r+0x69e>
 80074c0:	f018 0f01 	tst.w	r8, #1
 80074c4:	d10e      	bne.n	80074e4 <_dtoa_r+0x6bc>
 80074c6:	9902      	ldr	r1, [sp, #8]
 80074c8:	4648      	mov	r0, r9
 80074ca:	f000 fbbd 	bl	8007c48 <_Bfree>
 80074ce:	2300      	movs	r3, #0
 80074d0:	7033      	strb	r3, [r6, #0]
 80074d2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80074d4:	3701      	adds	r7, #1
 80074d6:	601f      	str	r7, [r3, #0]
 80074d8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80074da:	2b00      	cmp	r3, #0
 80074dc:	f000 824b 	beq.w	8007976 <_dtoa_r+0xb4e>
 80074e0:	601e      	str	r6, [r3, #0]
 80074e2:	e248      	b.n	8007976 <_dtoa_r+0xb4e>
 80074e4:	46b8      	mov	r8, r7
 80074e6:	4633      	mov	r3, r6
 80074e8:	461e      	mov	r6, r3
 80074ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80074ee:	2a39      	cmp	r2, #57	@ 0x39
 80074f0:	d106      	bne.n	8007500 <_dtoa_r+0x6d8>
 80074f2:	459a      	cmp	sl, r3
 80074f4:	d1f8      	bne.n	80074e8 <_dtoa_r+0x6c0>
 80074f6:	2230      	movs	r2, #48	@ 0x30
 80074f8:	f108 0801 	add.w	r8, r8, #1
 80074fc:	f88a 2000 	strb.w	r2, [sl]
 8007500:	781a      	ldrb	r2, [r3, #0]
 8007502:	3201      	adds	r2, #1
 8007504:	701a      	strb	r2, [r3, #0]
 8007506:	e7a0      	b.n	800744a <_dtoa_r+0x622>
 8007508:	4b6f      	ldr	r3, [pc, #444]	@ (80076c8 <_dtoa_r+0x8a0>)
 800750a:	2200      	movs	r2, #0
 800750c:	f7f9 f874 	bl	80005f8 <__aeabi_dmul>
 8007510:	2200      	movs	r2, #0
 8007512:	2300      	movs	r3, #0
 8007514:	4604      	mov	r4, r0
 8007516:	460d      	mov	r5, r1
 8007518:	f7f9 fad6 	bl	8000ac8 <__aeabi_dcmpeq>
 800751c:	2800      	cmp	r0, #0
 800751e:	d09f      	beq.n	8007460 <_dtoa_r+0x638>
 8007520:	e7d1      	b.n	80074c6 <_dtoa_r+0x69e>
 8007522:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007524:	2a00      	cmp	r2, #0
 8007526:	f000 80ea 	beq.w	80076fe <_dtoa_r+0x8d6>
 800752a:	9a07      	ldr	r2, [sp, #28]
 800752c:	2a01      	cmp	r2, #1
 800752e:	f300 80cd 	bgt.w	80076cc <_dtoa_r+0x8a4>
 8007532:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007534:	2a00      	cmp	r2, #0
 8007536:	f000 80c1 	beq.w	80076bc <_dtoa_r+0x894>
 800753a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800753e:	9c08      	ldr	r4, [sp, #32]
 8007540:	9e00      	ldr	r6, [sp, #0]
 8007542:	9a00      	ldr	r2, [sp, #0]
 8007544:	441a      	add	r2, r3
 8007546:	9200      	str	r2, [sp, #0]
 8007548:	9a06      	ldr	r2, [sp, #24]
 800754a:	2101      	movs	r1, #1
 800754c:	441a      	add	r2, r3
 800754e:	4648      	mov	r0, r9
 8007550:	9206      	str	r2, [sp, #24]
 8007552:	f000 fc77 	bl	8007e44 <__i2b>
 8007556:	4605      	mov	r5, r0
 8007558:	b166      	cbz	r6, 8007574 <_dtoa_r+0x74c>
 800755a:	9b06      	ldr	r3, [sp, #24]
 800755c:	2b00      	cmp	r3, #0
 800755e:	dd09      	ble.n	8007574 <_dtoa_r+0x74c>
 8007560:	42b3      	cmp	r3, r6
 8007562:	9a00      	ldr	r2, [sp, #0]
 8007564:	bfa8      	it	ge
 8007566:	4633      	movge	r3, r6
 8007568:	1ad2      	subs	r2, r2, r3
 800756a:	9200      	str	r2, [sp, #0]
 800756c:	9a06      	ldr	r2, [sp, #24]
 800756e:	1af6      	subs	r6, r6, r3
 8007570:	1ad3      	subs	r3, r2, r3
 8007572:	9306      	str	r3, [sp, #24]
 8007574:	9b08      	ldr	r3, [sp, #32]
 8007576:	b30b      	cbz	r3, 80075bc <_dtoa_r+0x794>
 8007578:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800757a:	2b00      	cmp	r3, #0
 800757c:	f000 80c6 	beq.w	800770c <_dtoa_r+0x8e4>
 8007580:	2c00      	cmp	r4, #0
 8007582:	f000 80c0 	beq.w	8007706 <_dtoa_r+0x8de>
 8007586:	4629      	mov	r1, r5
 8007588:	4622      	mov	r2, r4
 800758a:	4648      	mov	r0, r9
 800758c:	f000 fd12 	bl	8007fb4 <__pow5mult>
 8007590:	9a02      	ldr	r2, [sp, #8]
 8007592:	4601      	mov	r1, r0
 8007594:	4605      	mov	r5, r0
 8007596:	4648      	mov	r0, r9
 8007598:	f000 fc6a 	bl	8007e70 <__multiply>
 800759c:	9902      	ldr	r1, [sp, #8]
 800759e:	4680      	mov	r8, r0
 80075a0:	4648      	mov	r0, r9
 80075a2:	f000 fb51 	bl	8007c48 <_Bfree>
 80075a6:	9b08      	ldr	r3, [sp, #32]
 80075a8:	1b1b      	subs	r3, r3, r4
 80075aa:	9308      	str	r3, [sp, #32]
 80075ac:	f000 80b1 	beq.w	8007712 <_dtoa_r+0x8ea>
 80075b0:	9a08      	ldr	r2, [sp, #32]
 80075b2:	4641      	mov	r1, r8
 80075b4:	4648      	mov	r0, r9
 80075b6:	f000 fcfd 	bl	8007fb4 <__pow5mult>
 80075ba:	9002      	str	r0, [sp, #8]
 80075bc:	2101      	movs	r1, #1
 80075be:	4648      	mov	r0, r9
 80075c0:	f000 fc40 	bl	8007e44 <__i2b>
 80075c4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80075c6:	4604      	mov	r4, r0
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	f000 81d8 	beq.w	800797e <_dtoa_r+0xb56>
 80075ce:	461a      	mov	r2, r3
 80075d0:	4601      	mov	r1, r0
 80075d2:	4648      	mov	r0, r9
 80075d4:	f000 fcee 	bl	8007fb4 <__pow5mult>
 80075d8:	9b07      	ldr	r3, [sp, #28]
 80075da:	2b01      	cmp	r3, #1
 80075dc:	4604      	mov	r4, r0
 80075de:	f300 809f 	bgt.w	8007720 <_dtoa_r+0x8f8>
 80075e2:	9b04      	ldr	r3, [sp, #16]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	f040 8097 	bne.w	8007718 <_dtoa_r+0x8f0>
 80075ea:	9b05      	ldr	r3, [sp, #20]
 80075ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	f040 8093 	bne.w	800771c <_dtoa_r+0x8f4>
 80075f6:	9b05      	ldr	r3, [sp, #20]
 80075f8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80075fc:	0d1b      	lsrs	r3, r3, #20
 80075fe:	051b      	lsls	r3, r3, #20
 8007600:	b133      	cbz	r3, 8007610 <_dtoa_r+0x7e8>
 8007602:	9b00      	ldr	r3, [sp, #0]
 8007604:	3301      	adds	r3, #1
 8007606:	9300      	str	r3, [sp, #0]
 8007608:	9b06      	ldr	r3, [sp, #24]
 800760a:	3301      	adds	r3, #1
 800760c:	9306      	str	r3, [sp, #24]
 800760e:	2301      	movs	r3, #1
 8007610:	9308      	str	r3, [sp, #32]
 8007612:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007614:	2b00      	cmp	r3, #0
 8007616:	f000 81b8 	beq.w	800798a <_dtoa_r+0xb62>
 800761a:	6923      	ldr	r3, [r4, #16]
 800761c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007620:	6918      	ldr	r0, [r3, #16]
 8007622:	f000 fbc3 	bl	8007dac <__hi0bits>
 8007626:	f1c0 0020 	rsb	r0, r0, #32
 800762a:	9b06      	ldr	r3, [sp, #24]
 800762c:	4418      	add	r0, r3
 800762e:	f010 001f 	ands.w	r0, r0, #31
 8007632:	f000 8082 	beq.w	800773a <_dtoa_r+0x912>
 8007636:	f1c0 0320 	rsb	r3, r0, #32
 800763a:	2b04      	cmp	r3, #4
 800763c:	dd73      	ble.n	8007726 <_dtoa_r+0x8fe>
 800763e:	9b00      	ldr	r3, [sp, #0]
 8007640:	f1c0 001c 	rsb	r0, r0, #28
 8007644:	4403      	add	r3, r0
 8007646:	9300      	str	r3, [sp, #0]
 8007648:	9b06      	ldr	r3, [sp, #24]
 800764a:	4403      	add	r3, r0
 800764c:	4406      	add	r6, r0
 800764e:	9306      	str	r3, [sp, #24]
 8007650:	9b00      	ldr	r3, [sp, #0]
 8007652:	2b00      	cmp	r3, #0
 8007654:	dd05      	ble.n	8007662 <_dtoa_r+0x83a>
 8007656:	9902      	ldr	r1, [sp, #8]
 8007658:	461a      	mov	r2, r3
 800765a:	4648      	mov	r0, r9
 800765c:	f000 fd04 	bl	8008068 <__lshift>
 8007660:	9002      	str	r0, [sp, #8]
 8007662:	9b06      	ldr	r3, [sp, #24]
 8007664:	2b00      	cmp	r3, #0
 8007666:	dd05      	ble.n	8007674 <_dtoa_r+0x84c>
 8007668:	4621      	mov	r1, r4
 800766a:	461a      	mov	r2, r3
 800766c:	4648      	mov	r0, r9
 800766e:	f000 fcfb 	bl	8008068 <__lshift>
 8007672:	4604      	mov	r4, r0
 8007674:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007676:	2b00      	cmp	r3, #0
 8007678:	d061      	beq.n	800773e <_dtoa_r+0x916>
 800767a:	9802      	ldr	r0, [sp, #8]
 800767c:	4621      	mov	r1, r4
 800767e:	f000 fd5f 	bl	8008140 <__mcmp>
 8007682:	2800      	cmp	r0, #0
 8007684:	da5b      	bge.n	800773e <_dtoa_r+0x916>
 8007686:	2300      	movs	r3, #0
 8007688:	9902      	ldr	r1, [sp, #8]
 800768a:	220a      	movs	r2, #10
 800768c:	4648      	mov	r0, r9
 800768e:	f000 fafd 	bl	8007c8c <__multadd>
 8007692:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007694:	9002      	str	r0, [sp, #8]
 8007696:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800769a:	2b00      	cmp	r3, #0
 800769c:	f000 8177 	beq.w	800798e <_dtoa_r+0xb66>
 80076a0:	4629      	mov	r1, r5
 80076a2:	2300      	movs	r3, #0
 80076a4:	220a      	movs	r2, #10
 80076a6:	4648      	mov	r0, r9
 80076a8:	f000 faf0 	bl	8007c8c <__multadd>
 80076ac:	f1bb 0f00 	cmp.w	fp, #0
 80076b0:	4605      	mov	r5, r0
 80076b2:	dc6f      	bgt.n	8007794 <_dtoa_r+0x96c>
 80076b4:	9b07      	ldr	r3, [sp, #28]
 80076b6:	2b02      	cmp	r3, #2
 80076b8:	dc49      	bgt.n	800774e <_dtoa_r+0x926>
 80076ba:	e06b      	b.n	8007794 <_dtoa_r+0x96c>
 80076bc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80076be:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80076c2:	e73c      	b.n	800753e <_dtoa_r+0x716>
 80076c4:	3fe00000 	.word	0x3fe00000
 80076c8:	40240000 	.word	0x40240000
 80076cc:	9b03      	ldr	r3, [sp, #12]
 80076ce:	1e5c      	subs	r4, r3, #1
 80076d0:	9b08      	ldr	r3, [sp, #32]
 80076d2:	42a3      	cmp	r3, r4
 80076d4:	db09      	blt.n	80076ea <_dtoa_r+0x8c2>
 80076d6:	1b1c      	subs	r4, r3, r4
 80076d8:	9b03      	ldr	r3, [sp, #12]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	f6bf af30 	bge.w	8007540 <_dtoa_r+0x718>
 80076e0:	9b00      	ldr	r3, [sp, #0]
 80076e2:	9a03      	ldr	r2, [sp, #12]
 80076e4:	1a9e      	subs	r6, r3, r2
 80076e6:	2300      	movs	r3, #0
 80076e8:	e72b      	b.n	8007542 <_dtoa_r+0x71a>
 80076ea:	9b08      	ldr	r3, [sp, #32]
 80076ec:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80076ee:	9408      	str	r4, [sp, #32]
 80076f0:	1ae3      	subs	r3, r4, r3
 80076f2:	441a      	add	r2, r3
 80076f4:	9e00      	ldr	r6, [sp, #0]
 80076f6:	9b03      	ldr	r3, [sp, #12]
 80076f8:	920d      	str	r2, [sp, #52]	@ 0x34
 80076fa:	2400      	movs	r4, #0
 80076fc:	e721      	b.n	8007542 <_dtoa_r+0x71a>
 80076fe:	9c08      	ldr	r4, [sp, #32]
 8007700:	9e00      	ldr	r6, [sp, #0]
 8007702:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8007704:	e728      	b.n	8007558 <_dtoa_r+0x730>
 8007706:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800770a:	e751      	b.n	80075b0 <_dtoa_r+0x788>
 800770c:	9a08      	ldr	r2, [sp, #32]
 800770e:	9902      	ldr	r1, [sp, #8]
 8007710:	e750      	b.n	80075b4 <_dtoa_r+0x78c>
 8007712:	f8cd 8008 	str.w	r8, [sp, #8]
 8007716:	e751      	b.n	80075bc <_dtoa_r+0x794>
 8007718:	2300      	movs	r3, #0
 800771a:	e779      	b.n	8007610 <_dtoa_r+0x7e8>
 800771c:	9b04      	ldr	r3, [sp, #16]
 800771e:	e777      	b.n	8007610 <_dtoa_r+0x7e8>
 8007720:	2300      	movs	r3, #0
 8007722:	9308      	str	r3, [sp, #32]
 8007724:	e779      	b.n	800761a <_dtoa_r+0x7f2>
 8007726:	d093      	beq.n	8007650 <_dtoa_r+0x828>
 8007728:	9a00      	ldr	r2, [sp, #0]
 800772a:	331c      	adds	r3, #28
 800772c:	441a      	add	r2, r3
 800772e:	9200      	str	r2, [sp, #0]
 8007730:	9a06      	ldr	r2, [sp, #24]
 8007732:	441a      	add	r2, r3
 8007734:	441e      	add	r6, r3
 8007736:	9206      	str	r2, [sp, #24]
 8007738:	e78a      	b.n	8007650 <_dtoa_r+0x828>
 800773a:	4603      	mov	r3, r0
 800773c:	e7f4      	b.n	8007728 <_dtoa_r+0x900>
 800773e:	9b03      	ldr	r3, [sp, #12]
 8007740:	2b00      	cmp	r3, #0
 8007742:	46b8      	mov	r8, r7
 8007744:	dc20      	bgt.n	8007788 <_dtoa_r+0x960>
 8007746:	469b      	mov	fp, r3
 8007748:	9b07      	ldr	r3, [sp, #28]
 800774a:	2b02      	cmp	r3, #2
 800774c:	dd1e      	ble.n	800778c <_dtoa_r+0x964>
 800774e:	f1bb 0f00 	cmp.w	fp, #0
 8007752:	f47f adb1 	bne.w	80072b8 <_dtoa_r+0x490>
 8007756:	4621      	mov	r1, r4
 8007758:	465b      	mov	r3, fp
 800775a:	2205      	movs	r2, #5
 800775c:	4648      	mov	r0, r9
 800775e:	f000 fa95 	bl	8007c8c <__multadd>
 8007762:	4601      	mov	r1, r0
 8007764:	4604      	mov	r4, r0
 8007766:	9802      	ldr	r0, [sp, #8]
 8007768:	f000 fcea 	bl	8008140 <__mcmp>
 800776c:	2800      	cmp	r0, #0
 800776e:	f77f ada3 	ble.w	80072b8 <_dtoa_r+0x490>
 8007772:	4656      	mov	r6, sl
 8007774:	2331      	movs	r3, #49	@ 0x31
 8007776:	f806 3b01 	strb.w	r3, [r6], #1
 800777a:	f108 0801 	add.w	r8, r8, #1
 800777e:	e59f      	b.n	80072c0 <_dtoa_r+0x498>
 8007780:	9c03      	ldr	r4, [sp, #12]
 8007782:	46b8      	mov	r8, r7
 8007784:	4625      	mov	r5, r4
 8007786:	e7f4      	b.n	8007772 <_dtoa_r+0x94a>
 8007788:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800778c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800778e:	2b00      	cmp	r3, #0
 8007790:	f000 8101 	beq.w	8007996 <_dtoa_r+0xb6e>
 8007794:	2e00      	cmp	r6, #0
 8007796:	dd05      	ble.n	80077a4 <_dtoa_r+0x97c>
 8007798:	4629      	mov	r1, r5
 800779a:	4632      	mov	r2, r6
 800779c:	4648      	mov	r0, r9
 800779e:	f000 fc63 	bl	8008068 <__lshift>
 80077a2:	4605      	mov	r5, r0
 80077a4:	9b08      	ldr	r3, [sp, #32]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d05c      	beq.n	8007864 <_dtoa_r+0xa3c>
 80077aa:	6869      	ldr	r1, [r5, #4]
 80077ac:	4648      	mov	r0, r9
 80077ae:	f000 fa0b 	bl	8007bc8 <_Balloc>
 80077b2:	4606      	mov	r6, r0
 80077b4:	b928      	cbnz	r0, 80077c2 <_dtoa_r+0x99a>
 80077b6:	4b82      	ldr	r3, [pc, #520]	@ (80079c0 <_dtoa_r+0xb98>)
 80077b8:	4602      	mov	r2, r0
 80077ba:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80077be:	f7ff bb4a 	b.w	8006e56 <_dtoa_r+0x2e>
 80077c2:	692a      	ldr	r2, [r5, #16]
 80077c4:	3202      	adds	r2, #2
 80077c6:	0092      	lsls	r2, r2, #2
 80077c8:	f105 010c 	add.w	r1, r5, #12
 80077cc:	300c      	adds	r0, #12
 80077ce:	f002 fafb 	bl	8009dc8 <memcpy>
 80077d2:	2201      	movs	r2, #1
 80077d4:	4631      	mov	r1, r6
 80077d6:	4648      	mov	r0, r9
 80077d8:	f000 fc46 	bl	8008068 <__lshift>
 80077dc:	f10a 0301 	add.w	r3, sl, #1
 80077e0:	9300      	str	r3, [sp, #0]
 80077e2:	eb0a 030b 	add.w	r3, sl, fp
 80077e6:	9308      	str	r3, [sp, #32]
 80077e8:	9b04      	ldr	r3, [sp, #16]
 80077ea:	f003 0301 	and.w	r3, r3, #1
 80077ee:	462f      	mov	r7, r5
 80077f0:	9306      	str	r3, [sp, #24]
 80077f2:	4605      	mov	r5, r0
 80077f4:	9b00      	ldr	r3, [sp, #0]
 80077f6:	9802      	ldr	r0, [sp, #8]
 80077f8:	4621      	mov	r1, r4
 80077fa:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 80077fe:	f7ff fa89 	bl	8006d14 <quorem>
 8007802:	4603      	mov	r3, r0
 8007804:	3330      	adds	r3, #48	@ 0x30
 8007806:	9003      	str	r0, [sp, #12]
 8007808:	4639      	mov	r1, r7
 800780a:	9802      	ldr	r0, [sp, #8]
 800780c:	9309      	str	r3, [sp, #36]	@ 0x24
 800780e:	f000 fc97 	bl	8008140 <__mcmp>
 8007812:	462a      	mov	r2, r5
 8007814:	9004      	str	r0, [sp, #16]
 8007816:	4621      	mov	r1, r4
 8007818:	4648      	mov	r0, r9
 800781a:	f000 fcad 	bl	8008178 <__mdiff>
 800781e:	68c2      	ldr	r2, [r0, #12]
 8007820:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007822:	4606      	mov	r6, r0
 8007824:	bb02      	cbnz	r2, 8007868 <_dtoa_r+0xa40>
 8007826:	4601      	mov	r1, r0
 8007828:	9802      	ldr	r0, [sp, #8]
 800782a:	f000 fc89 	bl	8008140 <__mcmp>
 800782e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007830:	4602      	mov	r2, r0
 8007832:	4631      	mov	r1, r6
 8007834:	4648      	mov	r0, r9
 8007836:	920c      	str	r2, [sp, #48]	@ 0x30
 8007838:	9309      	str	r3, [sp, #36]	@ 0x24
 800783a:	f000 fa05 	bl	8007c48 <_Bfree>
 800783e:	9b07      	ldr	r3, [sp, #28]
 8007840:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007842:	9e00      	ldr	r6, [sp, #0]
 8007844:	ea42 0103 	orr.w	r1, r2, r3
 8007848:	9b06      	ldr	r3, [sp, #24]
 800784a:	4319      	orrs	r1, r3
 800784c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800784e:	d10d      	bne.n	800786c <_dtoa_r+0xa44>
 8007850:	2b39      	cmp	r3, #57	@ 0x39
 8007852:	d027      	beq.n	80078a4 <_dtoa_r+0xa7c>
 8007854:	9a04      	ldr	r2, [sp, #16]
 8007856:	2a00      	cmp	r2, #0
 8007858:	dd01      	ble.n	800785e <_dtoa_r+0xa36>
 800785a:	9b03      	ldr	r3, [sp, #12]
 800785c:	3331      	adds	r3, #49	@ 0x31
 800785e:	f88b 3000 	strb.w	r3, [fp]
 8007862:	e52e      	b.n	80072c2 <_dtoa_r+0x49a>
 8007864:	4628      	mov	r0, r5
 8007866:	e7b9      	b.n	80077dc <_dtoa_r+0x9b4>
 8007868:	2201      	movs	r2, #1
 800786a:	e7e2      	b.n	8007832 <_dtoa_r+0xa0a>
 800786c:	9904      	ldr	r1, [sp, #16]
 800786e:	2900      	cmp	r1, #0
 8007870:	db04      	blt.n	800787c <_dtoa_r+0xa54>
 8007872:	9807      	ldr	r0, [sp, #28]
 8007874:	4301      	orrs	r1, r0
 8007876:	9806      	ldr	r0, [sp, #24]
 8007878:	4301      	orrs	r1, r0
 800787a:	d120      	bne.n	80078be <_dtoa_r+0xa96>
 800787c:	2a00      	cmp	r2, #0
 800787e:	ddee      	ble.n	800785e <_dtoa_r+0xa36>
 8007880:	9902      	ldr	r1, [sp, #8]
 8007882:	9300      	str	r3, [sp, #0]
 8007884:	2201      	movs	r2, #1
 8007886:	4648      	mov	r0, r9
 8007888:	f000 fbee 	bl	8008068 <__lshift>
 800788c:	4621      	mov	r1, r4
 800788e:	9002      	str	r0, [sp, #8]
 8007890:	f000 fc56 	bl	8008140 <__mcmp>
 8007894:	2800      	cmp	r0, #0
 8007896:	9b00      	ldr	r3, [sp, #0]
 8007898:	dc02      	bgt.n	80078a0 <_dtoa_r+0xa78>
 800789a:	d1e0      	bne.n	800785e <_dtoa_r+0xa36>
 800789c:	07da      	lsls	r2, r3, #31
 800789e:	d5de      	bpl.n	800785e <_dtoa_r+0xa36>
 80078a0:	2b39      	cmp	r3, #57	@ 0x39
 80078a2:	d1da      	bne.n	800785a <_dtoa_r+0xa32>
 80078a4:	2339      	movs	r3, #57	@ 0x39
 80078a6:	f88b 3000 	strb.w	r3, [fp]
 80078aa:	4633      	mov	r3, r6
 80078ac:	461e      	mov	r6, r3
 80078ae:	3b01      	subs	r3, #1
 80078b0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80078b4:	2a39      	cmp	r2, #57	@ 0x39
 80078b6:	d04e      	beq.n	8007956 <_dtoa_r+0xb2e>
 80078b8:	3201      	adds	r2, #1
 80078ba:	701a      	strb	r2, [r3, #0]
 80078bc:	e501      	b.n	80072c2 <_dtoa_r+0x49a>
 80078be:	2a00      	cmp	r2, #0
 80078c0:	dd03      	ble.n	80078ca <_dtoa_r+0xaa2>
 80078c2:	2b39      	cmp	r3, #57	@ 0x39
 80078c4:	d0ee      	beq.n	80078a4 <_dtoa_r+0xa7c>
 80078c6:	3301      	adds	r3, #1
 80078c8:	e7c9      	b.n	800785e <_dtoa_r+0xa36>
 80078ca:	9a00      	ldr	r2, [sp, #0]
 80078cc:	9908      	ldr	r1, [sp, #32]
 80078ce:	f802 3c01 	strb.w	r3, [r2, #-1]
 80078d2:	428a      	cmp	r2, r1
 80078d4:	d028      	beq.n	8007928 <_dtoa_r+0xb00>
 80078d6:	9902      	ldr	r1, [sp, #8]
 80078d8:	2300      	movs	r3, #0
 80078da:	220a      	movs	r2, #10
 80078dc:	4648      	mov	r0, r9
 80078de:	f000 f9d5 	bl	8007c8c <__multadd>
 80078e2:	42af      	cmp	r7, r5
 80078e4:	9002      	str	r0, [sp, #8]
 80078e6:	f04f 0300 	mov.w	r3, #0
 80078ea:	f04f 020a 	mov.w	r2, #10
 80078ee:	4639      	mov	r1, r7
 80078f0:	4648      	mov	r0, r9
 80078f2:	d107      	bne.n	8007904 <_dtoa_r+0xadc>
 80078f4:	f000 f9ca 	bl	8007c8c <__multadd>
 80078f8:	4607      	mov	r7, r0
 80078fa:	4605      	mov	r5, r0
 80078fc:	9b00      	ldr	r3, [sp, #0]
 80078fe:	3301      	adds	r3, #1
 8007900:	9300      	str	r3, [sp, #0]
 8007902:	e777      	b.n	80077f4 <_dtoa_r+0x9cc>
 8007904:	f000 f9c2 	bl	8007c8c <__multadd>
 8007908:	4629      	mov	r1, r5
 800790a:	4607      	mov	r7, r0
 800790c:	2300      	movs	r3, #0
 800790e:	220a      	movs	r2, #10
 8007910:	4648      	mov	r0, r9
 8007912:	f000 f9bb 	bl	8007c8c <__multadd>
 8007916:	4605      	mov	r5, r0
 8007918:	e7f0      	b.n	80078fc <_dtoa_r+0xad4>
 800791a:	f1bb 0f00 	cmp.w	fp, #0
 800791e:	bfcc      	ite	gt
 8007920:	465e      	movgt	r6, fp
 8007922:	2601      	movle	r6, #1
 8007924:	4456      	add	r6, sl
 8007926:	2700      	movs	r7, #0
 8007928:	9902      	ldr	r1, [sp, #8]
 800792a:	9300      	str	r3, [sp, #0]
 800792c:	2201      	movs	r2, #1
 800792e:	4648      	mov	r0, r9
 8007930:	f000 fb9a 	bl	8008068 <__lshift>
 8007934:	4621      	mov	r1, r4
 8007936:	9002      	str	r0, [sp, #8]
 8007938:	f000 fc02 	bl	8008140 <__mcmp>
 800793c:	2800      	cmp	r0, #0
 800793e:	dcb4      	bgt.n	80078aa <_dtoa_r+0xa82>
 8007940:	d102      	bne.n	8007948 <_dtoa_r+0xb20>
 8007942:	9b00      	ldr	r3, [sp, #0]
 8007944:	07db      	lsls	r3, r3, #31
 8007946:	d4b0      	bmi.n	80078aa <_dtoa_r+0xa82>
 8007948:	4633      	mov	r3, r6
 800794a:	461e      	mov	r6, r3
 800794c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007950:	2a30      	cmp	r2, #48	@ 0x30
 8007952:	d0fa      	beq.n	800794a <_dtoa_r+0xb22>
 8007954:	e4b5      	b.n	80072c2 <_dtoa_r+0x49a>
 8007956:	459a      	cmp	sl, r3
 8007958:	d1a8      	bne.n	80078ac <_dtoa_r+0xa84>
 800795a:	2331      	movs	r3, #49	@ 0x31
 800795c:	f108 0801 	add.w	r8, r8, #1
 8007960:	f88a 3000 	strb.w	r3, [sl]
 8007964:	e4ad      	b.n	80072c2 <_dtoa_r+0x49a>
 8007966:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007968:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80079c4 <_dtoa_r+0xb9c>
 800796c:	b11b      	cbz	r3, 8007976 <_dtoa_r+0xb4e>
 800796e:	f10a 0308 	add.w	r3, sl, #8
 8007972:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8007974:	6013      	str	r3, [r2, #0]
 8007976:	4650      	mov	r0, sl
 8007978:	b017      	add	sp, #92	@ 0x5c
 800797a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800797e:	9b07      	ldr	r3, [sp, #28]
 8007980:	2b01      	cmp	r3, #1
 8007982:	f77f ae2e 	ble.w	80075e2 <_dtoa_r+0x7ba>
 8007986:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007988:	9308      	str	r3, [sp, #32]
 800798a:	2001      	movs	r0, #1
 800798c:	e64d      	b.n	800762a <_dtoa_r+0x802>
 800798e:	f1bb 0f00 	cmp.w	fp, #0
 8007992:	f77f aed9 	ble.w	8007748 <_dtoa_r+0x920>
 8007996:	4656      	mov	r6, sl
 8007998:	9802      	ldr	r0, [sp, #8]
 800799a:	4621      	mov	r1, r4
 800799c:	f7ff f9ba 	bl	8006d14 <quorem>
 80079a0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80079a4:	f806 3b01 	strb.w	r3, [r6], #1
 80079a8:	eba6 020a 	sub.w	r2, r6, sl
 80079ac:	4593      	cmp	fp, r2
 80079ae:	ddb4      	ble.n	800791a <_dtoa_r+0xaf2>
 80079b0:	9902      	ldr	r1, [sp, #8]
 80079b2:	2300      	movs	r3, #0
 80079b4:	220a      	movs	r2, #10
 80079b6:	4648      	mov	r0, r9
 80079b8:	f000 f968 	bl	8007c8c <__multadd>
 80079bc:	9002      	str	r0, [sp, #8]
 80079be:	e7eb      	b.n	8007998 <_dtoa_r+0xb70>
 80079c0:	0800adcb 	.word	0x0800adcb
 80079c4:	0800ad4f 	.word	0x0800ad4f

080079c8 <_free_r>:
 80079c8:	b538      	push	{r3, r4, r5, lr}
 80079ca:	4605      	mov	r5, r0
 80079cc:	2900      	cmp	r1, #0
 80079ce:	d041      	beq.n	8007a54 <_free_r+0x8c>
 80079d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80079d4:	1f0c      	subs	r4, r1, #4
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	bfb8      	it	lt
 80079da:	18e4      	addlt	r4, r4, r3
 80079dc:	f000 f8e8 	bl	8007bb0 <__malloc_lock>
 80079e0:	4a1d      	ldr	r2, [pc, #116]	@ (8007a58 <_free_r+0x90>)
 80079e2:	6813      	ldr	r3, [r2, #0]
 80079e4:	b933      	cbnz	r3, 80079f4 <_free_r+0x2c>
 80079e6:	6063      	str	r3, [r4, #4]
 80079e8:	6014      	str	r4, [r2, #0]
 80079ea:	4628      	mov	r0, r5
 80079ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80079f0:	f000 b8e4 	b.w	8007bbc <__malloc_unlock>
 80079f4:	42a3      	cmp	r3, r4
 80079f6:	d908      	bls.n	8007a0a <_free_r+0x42>
 80079f8:	6820      	ldr	r0, [r4, #0]
 80079fa:	1821      	adds	r1, r4, r0
 80079fc:	428b      	cmp	r3, r1
 80079fe:	bf01      	itttt	eq
 8007a00:	6819      	ldreq	r1, [r3, #0]
 8007a02:	685b      	ldreq	r3, [r3, #4]
 8007a04:	1809      	addeq	r1, r1, r0
 8007a06:	6021      	streq	r1, [r4, #0]
 8007a08:	e7ed      	b.n	80079e6 <_free_r+0x1e>
 8007a0a:	461a      	mov	r2, r3
 8007a0c:	685b      	ldr	r3, [r3, #4]
 8007a0e:	b10b      	cbz	r3, 8007a14 <_free_r+0x4c>
 8007a10:	42a3      	cmp	r3, r4
 8007a12:	d9fa      	bls.n	8007a0a <_free_r+0x42>
 8007a14:	6811      	ldr	r1, [r2, #0]
 8007a16:	1850      	adds	r0, r2, r1
 8007a18:	42a0      	cmp	r0, r4
 8007a1a:	d10b      	bne.n	8007a34 <_free_r+0x6c>
 8007a1c:	6820      	ldr	r0, [r4, #0]
 8007a1e:	4401      	add	r1, r0
 8007a20:	1850      	adds	r0, r2, r1
 8007a22:	4283      	cmp	r3, r0
 8007a24:	6011      	str	r1, [r2, #0]
 8007a26:	d1e0      	bne.n	80079ea <_free_r+0x22>
 8007a28:	6818      	ldr	r0, [r3, #0]
 8007a2a:	685b      	ldr	r3, [r3, #4]
 8007a2c:	6053      	str	r3, [r2, #4]
 8007a2e:	4408      	add	r0, r1
 8007a30:	6010      	str	r0, [r2, #0]
 8007a32:	e7da      	b.n	80079ea <_free_r+0x22>
 8007a34:	d902      	bls.n	8007a3c <_free_r+0x74>
 8007a36:	230c      	movs	r3, #12
 8007a38:	602b      	str	r3, [r5, #0]
 8007a3a:	e7d6      	b.n	80079ea <_free_r+0x22>
 8007a3c:	6820      	ldr	r0, [r4, #0]
 8007a3e:	1821      	adds	r1, r4, r0
 8007a40:	428b      	cmp	r3, r1
 8007a42:	bf04      	itt	eq
 8007a44:	6819      	ldreq	r1, [r3, #0]
 8007a46:	685b      	ldreq	r3, [r3, #4]
 8007a48:	6063      	str	r3, [r4, #4]
 8007a4a:	bf04      	itt	eq
 8007a4c:	1809      	addeq	r1, r1, r0
 8007a4e:	6021      	streq	r1, [r4, #0]
 8007a50:	6054      	str	r4, [r2, #4]
 8007a52:	e7ca      	b.n	80079ea <_free_r+0x22>
 8007a54:	bd38      	pop	{r3, r4, r5, pc}
 8007a56:	bf00      	nop
 8007a58:	20000838 	.word	0x20000838

08007a5c <malloc>:
 8007a5c:	4b02      	ldr	r3, [pc, #8]	@ (8007a68 <malloc+0xc>)
 8007a5e:	4601      	mov	r1, r0
 8007a60:	6818      	ldr	r0, [r3, #0]
 8007a62:	f000 b825 	b.w	8007ab0 <_malloc_r>
 8007a66:	bf00      	nop
 8007a68:	200001d4 	.word	0x200001d4

08007a6c <sbrk_aligned>:
 8007a6c:	b570      	push	{r4, r5, r6, lr}
 8007a6e:	4e0f      	ldr	r6, [pc, #60]	@ (8007aac <sbrk_aligned+0x40>)
 8007a70:	460c      	mov	r4, r1
 8007a72:	6831      	ldr	r1, [r6, #0]
 8007a74:	4605      	mov	r5, r0
 8007a76:	b911      	cbnz	r1, 8007a7e <sbrk_aligned+0x12>
 8007a78:	f002 f996 	bl	8009da8 <_sbrk_r>
 8007a7c:	6030      	str	r0, [r6, #0]
 8007a7e:	4621      	mov	r1, r4
 8007a80:	4628      	mov	r0, r5
 8007a82:	f002 f991 	bl	8009da8 <_sbrk_r>
 8007a86:	1c43      	adds	r3, r0, #1
 8007a88:	d103      	bne.n	8007a92 <sbrk_aligned+0x26>
 8007a8a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8007a8e:	4620      	mov	r0, r4
 8007a90:	bd70      	pop	{r4, r5, r6, pc}
 8007a92:	1cc4      	adds	r4, r0, #3
 8007a94:	f024 0403 	bic.w	r4, r4, #3
 8007a98:	42a0      	cmp	r0, r4
 8007a9a:	d0f8      	beq.n	8007a8e <sbrk_aligned+0x22>
 8007a9c:	1a21      	subs	r1, r4, r0
 8007a9e:	4628      	mov	r0, r5
 8007aa0:	f002 f982 	bl	8009da8 <_sbrk_r>
 8007aa4:	3001      	adds	r0, #1
 8007aa6:	d1f2      	bne.n	8007a8e <sbrk_aligned+0x22>
 8007aa8:	e7ef      	b.n	8007a8a <sbrk_aligned+0x1e>
 8007aaa:	bf00      	nop
 8007aac:	20000834 	.word	0x20000834

08007ab0 <_malloc_r>:
 8007ab0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ab4:	1ccd      	adds	r5, r1, #3
 8007ab6:	f025 0503 	bic.w	r5, r5, #3
 8007aba:	3508      	adds	r5, #8
 8007abc:	2d0c      	cmp	r5, #12
 8007abe:	bf38      	it	cc
 8007ac0:	250c      	movcc	r5, #12
 8007ac2:	2d00      	cmp	r5, #0
 8007ac4:	4606      	mov	r6, r0
 8007ac6:	db01      	blt.n	8007acc <_malloc_r+0x1c>
 8007ac8:	42a9      	cmp	r1, r5
 8007aca:	d904      	bls.n	8007ad6 <_malloc_r+0x26>
 8007acc:	230c      	movs	r3, #12
 8007ace:	6033      	str	r3, [r6, #0]
 8007ad0:	2000      	movs	r0, #0
 8007ad2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ad6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007bac <_malloc_r+0xfc>
 8007ada:	f000 f869 	bl	8007bb0 <__malloc_lock>
 8007ade:	f8d8 3000 	ldr.w	r3, [r8]
 8007ae2:	461c      	mov	r4, r3
 8007ae4:	bb44      	cbnz	r4, 8007b38 <_malloc_r+0x88>
 8007ae6:	4629      	mov	r1, r5
 8007ae8:	4630      	mov	r0, r6
 8007aea:	f7ff ffbf 	bl	8007a6c <sbrk_aligned>
 8007aee:	1c43      	adds	r3, r0, #1
 8007af0:	4604      	mov	r4, r0
 8007af2:	d158      	bne.n	8007ba6 <_malloc_r+0xf6>
 8007af4:	f8d8 4000 	ldr.w	r4, [r8]
 8007af8:	4627      	mov	r7, r4
 8007afa:	2f00      	cmp	r7, #0
 8007afc:	d143      	bne.n	8007b86 <_malloc_r+0xd6>
 8007afe:	2c00      	cmp	r4, #0
 8007b00:	d04b      	beq.n	8007b9a <_malloc_r+0xea>
 8007b02:	6823      	ldr	r3, [r4, #0]
 8007b04:	4639      	mov	r1, r7
 8007b06:	4630      	mov	r0, r6
 8007b08:	eb04 0903 	add.w	r9, r4, r3
 8007b0c:	f002 f94c 	bl	8009da8 <_sbrk_r>
 8007b10:	4581      	cmp	r9, r0
 8007b12:	d142      	bne.n	8007b9a <_malloc_r+0xea>
 8007b14:	6821      	ldr	r1, [r4, #0]
 8007b16:	1a6d      	subs	r5, r5, r1
 8007b18:	4629      	mov	r1, r5
 8007b1a:	4630      	mov	r0, r6
 8007b1c:	f7ff ffa6 	bl	8007a6c <sbrk_aligned>
 8007b20:	3001      	adds	r0, #1
 8007b22:	d03a      	beq.n	8007b9a <_malloc_r+0xea>
 8007b24:	6823      	ldr	r3, [r4, #0]
 8007b26:	442b      	add	r3, r5
 8007b28:	6023      	str	r3, [r4, #0]
 8007b2a:	f8d8 3000 	ldr.w	r3, [r8]
 8007b2e:	685a      	ldr	r2, [r3, #4]
 8007b30:	bb62      	cbnz	r2, 8007b8c <_malloc_r+0xdc>
 8007b32:	f8c8 7000 	str.w	r7, [r8]
 8007b36:	e00f      	b.n	8007b58 <_malloc_r+0xa8>
 8007b38:	6822      	ldr	r2, [r4, #0]
 8007b3a:	1b52      	subs	r2, r2, r5
 8007b3c:	d420      	bmi.n	8007b80 <_malloc_r+0xd0>
 8007b3e:	2a0b      	cmp	r2, #11
 8007b40:	d917      	bls.n	8007b72 <_malloc_r+0xc2>
 8007b42:	1961      	adds	r1, r4, r5
 8007b44:	42a3      	cmp	r3, r4
 8007b46:	6025      	str	r5, [r4, #0]
 8007b48:	bf18      	it	ne
 8007b4a:	6059      	strne	r1, [r3, #4]
 8007b4c:	6863      	ldr	r3, [r4, #4]
 8007b4e:	bf08      	it	eq
 8007b50:	f8c8 1000 	streq.w	r1, [r8]
 8007b54:	5162      	str	r2, [r4, r5]
 8007b56:	604b      	str	r3, [r1, #4]
 8007b58:	4630      	mov	r0, r6
 8007b5a:	f000 f82f 	bl	8007bbc <__malloc_unlock>
 8007b5e:	f104 000b 	add.w	r0, r4, #11
 8007b62:	1d23      	adds	r3, r4, #4
 8007b64:	f020 0007 	bic.w	r0, r0, #7
 8007b68:	1ac2      	subs	r2, r0, r3
 8007b6a:	bf1c      	itt	ne
 8007b6c:	1a1b      	subne	r3, r3, r0
 8007b6e:	50a3      	strne	r3, [r4, r2]
 8007b70:	e7af      	b.n	8007ad2 <_malloc_r+0x22>
 8007b72:	6862      	ldr	r2, [r4, #4]
 8007b74:	42a3      	cmp	r3, r4
 8007b76:	bf0c      	ite	eq
 8007b78:	f8c8 2000 	streq.w	r2, [r8]
 8007b7c:	605a      	strne	r2, [r3, #4]
 8007b7e:	e7eb      	b.n	8007b58 <_malloc_r+0xa8>
 8007b80:	4623      	mov	r3, r4
 8007b82:	6864      	ldr	r4, [r4, #4]
 8007b84:	e7ae      	b.n	8007ae4 <_malloc_r+0x34>
 8007b86:	463c      	mov	r4, r7
 8007b88:	687f      	ldr	r7, [r7, #4]
 8007b8a:	e7b6      	b.n	8007afa <_malloc_r+0x4a>
 8007b8c:	461a      	mov	r2, r3
 8007b8e:	685b      	ldr	r3, [r3, #4]
 8007b90:	42a3      	cmp	r3, r4
 8007b92:	d1fb      	bne.n	8007b8c <_malloc_r+0xdc>
 8007b94:	2300      	movs	r3, #0
 8007b96:	6053      	str	r3, [r2, #4]
 8007b98:	e7de      	b.n	8007b58 <_malloc_r+0xa8>
 8007b9a:	230c      	movs	r3, #12
 8007b9c:	6033      	str	r3, [r6, #0]
 8007b9e:	4630      	mov	r0, r6
 8007ba0:	f000 f80c 	bl	8007bbc <__malloc_unlock>
 8007ba4:	e794      	b.n	8007ad0 <_malloc_r+0x20>
 8007ba6:	6005      	str	r5, [r0, #0]
 8007ba8:	e7d6      	b.n	8007b58 <_malloc_r+0xa8>
 8007baa:	bf00      	nop
 8007bac:	20000838 	.word	0x20000838

08007bb0 <__malloc_lock>:
 8007bb0:	4801      	ldr	r0, [pc, #4]	@ (8007bb8 <__malloc_lock+0x8>)
 8007bb2:	f7ff b8a6 	b.w	8006d02 <__retarget_lock_acquire_recursive>
 8007bb6:	bf00      	nop
 8007bb8:	20000830 	.word	0x20000830

08007bbc <__malloc_unlock>:
 8007bbc:	4801      	ldr	r0, [pc, #4]	@ (8007bc4 <__malloc_unlock+0x8>)
 8007bbe:	f7ff b8a1 	b.w	8006d04 <__retarget_lock_release_recursive>
 8007bc2:	bf00      	nop
 8007bc4:	20000830 	.word	0x20000830

08007bc8 <_Balloc>:
 8007bc8:	b570      	push	{r4, r5, r6, lr}
 8007bca:	69c6      	ldr	r6, [r0, #28]
 8007bcc:	4604      	mov	r4, r0
 8007bce:	460d      	mov	r5, r1
 8007bd0:	b976      	cbnz	r6, 8007bf0 <_Balloc+0x28>
 8007bd2:	2010      	movs	r0, #16
 8007bd4:	f7ff ff42 	bl	8007a5c <malloc>
 8007bd8:	4602      	mov	r2, r0
 8007bda:	61e0      	str	r0, [r4, #28]
 8007bdc:	b920      	cbnz	r0, 8007be8 <_Balloc+0x20>
 8007bde:	4b18      	ldr	r3, [pc, #96]	@ (8007c40 <_Balloc+0x78>)
 8007be0:	4818      	ldr	r0, [pc, #96]	@ (8007c44 <_Balloc+0x7c>)
 8007be2:	216b      	movs	r1, #107	@ 0x6b
 8007be4:	f002 f908 	bl	8009df8 <__assert_func>
 8007be8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007bec:	6006      	str	r6, [r0, #0]
 8007bee:	60c6      	str	r6, [r0, #12]
 8007bf0:	69e6      	ldr	r6, [r4, #28]
 8007bf2:	68f3      	ldr	r3, [r6, #12]
 8007bf4:	b183      	cbz	r3, 8007c18 <_Balloc+0x50>
 8007bf6:	69e3      	ldr	r3, [r4, #28]
 8007bf8:	68db      	ldr	r3, [r3, #12]
 8007bfa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007bfe:	b9b8      	cbnz	r0, 8007c30 <_Balloc+0x68>
 8007c00:	2101      	movs	r1, #1
 8007c02:	fa01 f605 	lsl.w	r6, r1, r5
 8007c06:	1d72      	adds	r2, r6, #5
 8007c08:	0092      	lsls	r2, r2, #2
 8007c0a:	4620      	mov	r0, r4
 8007c0c:	f002 f912 	bl	8009e34 <_calloc_r>
 8007c10:	b160      	cbz	r0, 8007c2c <_Balloc+0x64>
 8007c12:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007c16:	e00e      	b.n	8007c36 <_Balloc+0x6e>
 8007c18:	2221      	movs	r2, #33	@ 0x21
 8007c1a:	2104      	movs	r1, #4
 8007c1c:	4620      	mov	r0, r4
 8007c1e:	f002 f909 	bl	8009e34 <_calloc_r>
 8007c22:	69e3      	ldr	r3, [r4, #28]
 8007c24:	60f0      	str	r0, [r6, #12]
 8007c26:	68db      	ldr	r3, [r3, #12]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d1e4      	bne.n	8007bf6 <_Balloc+0x2e>
 8007c2c:	2000      	movs	r0, #0
 8007c2e:	bd70      	pop	{r4, r5, r6, pc}
 8007c30:	6802      	ldr	r2, [r0, #0]
 8007c32:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007c36:	2300      	movs	r3, #0
 8007c38:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007c3c:	e7f7      	b.n	8007c2e <_Balloc+0x66>
 8007c3e:	bf00      	nop
 8007c40:	0800ad5c 	.word	0x0800ad5c
 8007c44:	0800addc 	.word	0x0800addc

08007c48 <_Bfree>:
 8007c48:	b570      	push	{r4, r5, r6, lr}
 8007c4a:	69c6      	ldr	r6, [r0, #28]
 8007c4c:	4605      	mov	r5, r0
 8007c4e:	460c      	mov	r4, r1
 8007c50:	b976      	cbnz	r6, 8007c70 <_Bfree+0x28>
 8007c52:	2010      	movs	r0, #16
 8007c54:	f7ff ff02 	bl	8007a5c <malloc>
 8007c58:	4602      	mov	r2, r0
 8007c5a:	61e8      	str	r0, [r5, #28]
 8007c5c:	b920      	cbnz	r0, 8007c68 <_Bfree+0x20>
 8007c5e:	4b09      	ldr	r3, [pc, #36]	@ (8007c84 <_Bfree+0x3c>)
 8007c60:	4809      	ldr	r0, [pc, #36]	@ (8007c88 <_Bfree+0x40>)
 8007c62:	218f      	movs	r1, #143	@ 0x8f
 8007c64:	f002 f8c8 	bl	8009df8 <__assert_func>
 8007c68:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007c6c:	6006      	str	r6, [r0, #0]
 8007c6e:	60c6      	str	r6, [r0, #12]
 8007c70:	b13c      	cbz	r4, 8007c82 <_Bfree+0x3a>
 8007c72:	69eb      	ldr	r3, [r5, #28]
 8007c74:	6862      	ldr	r2, [r4, #4]
 8007c76:	68db      	ldr	r3, [r3, #12]
 8007c78:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007c7c:	6021      	str	r1, [r4, #0]
 8007c7e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007c82:	bd70      	pop	{r4, r5, r6, pc}
 8007c84:	0800ad5c 	.word	0x0800ad5c
 8007c88:	0800addc 	.word	0x0800addc

08007c8c <__multadd>:
 8007c8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c90:	690d      	ldr	r5, [r1, #16]
 8007c92:	4607      	mov	r7, r0
 8007c94:	460c      	mov	r4, r1
 8007c96:	461e      	mov	r6, r3
 8007c98:	f101 0c14 	add.w	ip, r1, #20
 8007c9c:	2000      	movs	r0, #0
 8007c9e:	f8dc 3000 	ldr.w	r3, [ip]
 8007ca2:	b299      	uxth	r1, r3
 8007ca4:	fb02 6101 	mla	r1, r2, r1, r6
 8007ca8:	0c1e      	lsrs	r6, r3, #16
 8007caa:	0c0b      	lsrs	r3, r1, #16
 8007cac:	fb02 3306 	mla	r3, r2, r6, r3
 8007cb0:	b289      	uxth	r1, r1
 8007cb2:	3001      	adds	r0, #1
 8007cb4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007cb8:	4285      	cmp	r5, r0
 8007cba:	f84c 1b04 	str.w	r1, [ip], #4
 8007cbe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007cc2:	dcec      	bgt.n	8007c9e <__multadd+0x12>
 8007cc4:	b30e      	cbz	r6, 8007d0a <__multadd+0x7e>
 8007cc6:	68a3      	ldr	r3, [r4, #8]
 8007cc8:	42ab      	cmp	r3, r5
 8007cca:	dc19      	bgt.n	8007d00 <__multadd+0x74>
 8007ccc:	6861      	ldr	r1, [r4, #4]
 8007cce:	4638      	mov	r0, r7
 8007cd0:	3101      	adds	r1, #1
 8007cd2:	f7ff ff79 	bl	8007bc8 <_Balloc>
 8007cd6:	4680      	mov	r8, r0
 8007cd8:	b928      	cbnz	r0, 8007ce6 <__multadd+0x5a>
 8007cda:	4602      	mov	r2, r0
 8007cdc:	4b0c      	ldr	r3, [pc, #48]	@ (8007d10 <__multadd+0x84>)
 8007cde:	480d      	ldr	r0, [pc, #52]	@ (8007d14 <__multadd+0x88>)
 8007ce0:	21ba      	movs	r1, #186	@ 0xba
 8007ce2:	f002 f889 	bl	8009df8 <__assert_func>
 8007ce6:	6922      	ldr	r2, [r4, #16]
 8007ce8:	3202      	adds	r2, #2
 8007cea:	f104 010c 	add.w	r1, r4, #12
 8007cee:	0092      	lsls	r2, r2, #2
 8007cf0:	300c      	adds	r0, #12
 8007cf2:	f002 f869 	bl	8009dc8 <memcpy>
 8007cf6:	4621      	mov	r1, r4
 8007cf8:	4638      	mov	r0, r7
 8007cfa:	f7ff ffa5 	bl	8007c48 <_Bfree>
 8007cfe:	4644      	mov	r4, r8
 8007d00:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007d04:	3501      	adds	r5, #1
 8007d06:	615e      	str	r6, [r3, #20]
 8007d08:	6125      	str	r5, [r4, #16]
 8007d0a:	4620      	mov	r0, r4
 8007d0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d10:	0800adcb 	.word	0x0800adcb
 8007d14:	0800addc 	.word	0x0800addc

08007d18 <__s2b>:
 8007d18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d1c:	460c      	mov	r4, r1
 8007d1e:	4615      	mov	r5, r2
 8007d20:	461f      	mov	r7, r3
 8007d22:	2209      	movs	r2, #9
 8007d24:	3308      	adds	r3, #8
 8007d26:	4606      	mov	r6, r0
 8007d28:	fb93 f3f2 	sdiv	r3, r3, r2
 8007d2c:	2100      	movs	r1, #0
 8007d2e:	2201      	movs	r2, #1
 8007d30:	429a      	cmp	r2, r3
 8007d32:	db09      	blt.n	8007d48 <__s2b+0x30>
 8007d34:	4630      	mov	r0, r6
 8007d36:	f7ff ff47 	bl	8007bc8 <_Balloc>
 8007d3a:	b940      	cbnz	r0, 8007d4e <__s2b+0x36>
 8007d3c:	4602      	mov	r2, r0
 8007d3e:	4b19      	ldr	r3, [pc, #100]	@ (8007da4 <__s2b+0x8c>)
 8007d40:	4819      	ldr	r0, [pc, #100]	@ (8007da8 <__s2b+0x90>)
 8007d42:	21d3      	movs	r1, #211	@ 0xd3
 8007d44:	f002 f858 	bl	8009df8 <__assert_func>
 8007d48:	0052      	lsls	r2, r2, #1
 8007d4a:	3101      	adds	r1, #1
 8007d4c:	e7f0      	b.n	8007d30 <__s2b+0x18>
 8007d4e:	9b08      	ldr	r3, [sp, #32]
 8007d50:	6143      	str	r3, [r0, #20]
 8007d52:	2d09      	cmp	r5, #9
 8007d54:	f04f 0301 	mov.w	r3, #1
 8007d58:	6103      	str	r3, [r0, #16]
 8007d5a:	dd16      	ble.n	8007d8a <__s2b+0x72>
 8007d5c:	f104 0909 	add.w	r9, r4, #9
 8007d60:	46c8      	mov	r8, r9
 8007d62:	442c      	add	r4, r5
 8007d64:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007d68:	4601      	mov	r1, r0
 8007d6a:	3b30      	subs	r3, #48	@ 0x30
 8007d6c:	220a      	movs	r2, #10
 8007d6e:	4630      	mov	r0, r6
 8007d70:	f7ff ff8c 	bl	8007c8c <__multadd>
 8007d74:	45a0      	cmp	r8, r4
 8007d76:	d1f5      	bne.n	8007d64 <__s2b+0x4c>
 8007d78:	f1a5 0408 	sub.w	r4, r5, #8
 8007d7c:	444c      	add	r4, r9
 8007d7e:	1b2d      	subs	r5, r5, r4
 8007d80:	1963      	adds	r3, r4, r5
 8007d82:	42bb      	cmp	r3, r7
 8007d84:	db04      	blt.n	8007d90 <__s2b+0x78>
 8007d86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d8a:	340a      	adds	r4, #10
 8007d8c:	2509      	movs	r5, #9
 8007d8e:	e7f6      	b.n	8007d7e <__s2b+0x66>
 8007d90:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007d94:	4601      	mov	r1, r0
 8007d96:	3b30      	subs	r3, #48	@ 0x30
 8007d98:	220a      	movs	r2, #10
 8007d9a:	4630      	mov	r0, r6
 8007d9c:	f7ff ff76 	bl	8007c8c <__multadd>
 8007da0:	e7ee      	b.n	8007d80 <__s2b+0x68>
 8007da2:	bf00      	nop
 8007da4:	0800adcb 	.word	0x0800adcb
 8007da8:	0800addc 	.word	0x0800addc

08007dac <__hi0bits>:
 8007dac:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007db0:	4603      	mov	r3, r0
 8007db2:	bf36      	itet	cc
 8007db4:	0403      	lslcc	r3, r0, #16
 8007db6:	2000      	movcs	r0, #0
 8007db8:	2010      	movcc	r0, #16
 8007dba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007dbe:	bf3c      	itt	cc
 8007dc0:	021b      	lslcc	r3, r3, #8
 8007dc2:	3008      	addcc	r0, #8
 8007dc4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007dc8:	bf3c      	itt	cc
 8007dca:	011b      	lslcc	r3, r3, #4
 8007dcc:	3004      	addcc	r0, #4
 8007dce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007dd2:	bf3c      	itt	cc
 8007dd4:	009b      	lslcc	r3, r3, #2
 8007dd6:	3002      	addcc	r0, #2
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	db05      	blt.n	8007de8 <__hi0bits+0x3c>
 8007ddc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007de0:	f100 0001 	add.w	r0, r0, #1
 8007de4:	bf08      	it	eq
 8007de6:	2020      	moveq	r0, #32
 8007de8:	4770      	bx	lr

08007dea <__lo0bits>:
 8007dea:	6803      	ldr	r3, [r0, #0]
 8007dec:	4602      	mov	r2, r0
 8007dee:	f013 0007 	ands.w	r0, r3, #7
 8007df2:	d00b      	beq.n	8007e0c <__lo0bits+0x22>
 8007df4:	07d9      	lsls	r1, r3, #31
 8007df6:	d421      	bmi.n	8007e3c <__lo0bits+0x52>
 8007df8:	0798      	lsls	r0, r3, #30
 8007dfa:	bf49      	itett	mi
 8007dfc:	085b      	lsrmi	r3, r3, #1
 8007dfe:	089b      	lsrpl	r3, r3, #2
 8007e00:	2001      	movmi	r0, #1
 8007e02:	6013      	strmi	r3, [r2, #0]
 8007e04:	bf5c      	itt	pl
 8007e06:	6013      	strpl	r3, [r2, #0]
 8007e08:	2002      	movpl	r0, #2
 8007e0a:	4770      	bx	lr
 8007e0c:	b299      	uxth	r1, r3
 8007e0e:	b909      	cbnz	r1, 8007e14 <__lo0bits+0x2a>
 8007e10:	0c1b      	lsrs	r3, r3, #16
 8007e12:	2010      	movs	r0, #16
 8007e14:	b2d9      	uxtb	r1, r3
 8007e16:	b909      	cbnz	r1, 8007e1c <__lo0bits+0x32>
 8007e18:	3008      	adds	r0, #8
 8007e1a:	0a1b      	lsrs	r3, r3, #8
 8007e1c:	0719      	lsls	r1, r3, #28
 8007e1e:	bf04      	itt	eq
 8007e20:	091b      	lsreq	r3, r3, #4
 8007e22:	3004      	addeq	r0, #4
 8007e24:	0799      	lsls	r1, r3, #30
 8007e26:	bf04      	itt	eq
 8007e28:	089b      	lsreq	r3, r3, #2
 8007e2a:	3002      	addeq	r0, #2
 8007e2c:	07d9      	lsls	r1, r3, #31
 8007e2e:	d403      	bmi.n	8007e38 <__lo0bits+0x4e>
 8007e30:	085b      	lsrs	r3, r3, #1
 8007e32:	f100 0001 	add.w	r0, r0, #1
 8007e36:	d003      	beq.n	8007e40 <__lo0bits+0x56>
 8007e38:	6013      	str	r3, [r2, #0]
 8007e3a:	4770      	bx	lr
 8007e3c:	2000      	movs	r0, #0
 8007e3e:	4770      	bx	lr
 8007e40:	2020      	movs	r0, #32
 8007e42:	4770      	bx	lr

08007e44 <__i2b>:
 8007e44:	b510      	push	{r4, lr}
 8007e46:	460c      	mov	r4, r1
 8007e48:	2101      	movs	r1, #1
 8007e4a:	f7ff febd 	bl	8007bc8 <_Balloc>
 8007e4e:	4602      	mov	r2, r0
 8007e50:	b928      	cbnz	r0, 8007e5e <__i2b+0x1a>
 8007e52:	4b05      	ldr	r3, [pc, #20]	@ (8007e68 <__i2b+0x24>)
 8007e54:	4805      	ldr	r0, [pc, #20]	@ (8007e6c <__i2b+0x28>)
 8007e56:	f240 1145 	movw	r1, #325	@ 0x145
 8007e5a:	f001 ffcd 	bl	8009df8 <__assert_func>
 8007e5e:	2301      	movs	r3, #1
 8007e60:	6144      	str	r4, [r0, #20]
 8007e62:	6103      	str	r3, [r0, #16]
 8007e64:	bd10      	pop	{r4, pc}
 8007e66:	bf00      	nop
 8007e68:	0800adcb 	.word	0x0800adcb
 8007e6c:	0800addc 	.word	0x0800addc

08007e70 <__multiply>:
 8007e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e74:	4617      	mov	r7, r2
 8007e76:	690a      	ldr	r2, [r1, #16]
 8007e78:	693b      	ldr	r3, [r7, #16]
 8007e7a:	429a      	cmp	r2, r3
 8007e7c:	bfa8      	it	ge
 8007e7e:	463b      	movge	r3, r7
 8007e80:	4689      	mov	r9, r1
 8007e82:	bfa4      	itt	ge
 8007e84:	460f      	movge	r7, r1
 8007e86:	4699      	movge	r9, r3
 8007e88:	693d      	ldr	r5, [r7, #16]
 8007e8a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007e8e:	68bb      	ldr	r3, [r7, #8]
 8007e90:	6879      	ldr	r1, [r7, #4]
 8007e92:	eb05 060a 	add.w	r6, r5, sl
 8007e96:	42b3      	cmp	r3, r6
 8007e98:	b085      	sub	sp, #20
 8007e9a:	bfb8      	it	lt
 8007e9c:	3101      	addlt	r1, #1
 8007e9e:	f7ff fe93 	bl	8007bc8 <_Balloc>
 8007ea2:	b930      	cbnz	r0, 8007eb2 <__multiply+0x42>
 8007ea4:	4602      	mov	r2, r0
 8007ea6:	4b41      	ldr	r3, [pc, #260]	@ (8007fac <__multiply+0x13c>)
 8007ea8:	4841      	ldr	r0, [pc, #260]	@ (8007fb0 <__multiply+0x140>)
 8007eaa:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007eae:	f001 ffa3 	bl	8009df8 <__assert_func>
 8007eb2:	f100 0414 	add.w	r4, r0, #20
 8007eb6:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8007eba:	4623      	mov	r3, r4
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	4573      	cmp	r3, lr
 8007ec0:	d320      	bcc.n	8007f04 <__multiply+0x94>
 8007ec2:	f107 0814 	add.w	r8, r7, #20
 8007ec6:	f109 0114 	add.w	r1, r9, #20
 8007eca:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8007ece:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8007ed2:	9302      	str	r3, [sp, #8]
 8007ed4:	1beb      	subs	r3, r5, r7
 8007ed6:	3b15      	subs	r3, #21
 8007ed8:	f023 0303 	bic.w	r3, r3, #3
 8007edc:	3304      	adds	r3, #4
 8007ede:	3715      	adds	r7, #21
 8007ee0:	42bd      	cmp	r5, r7
 8007ee2:	bf38      	it	cc
 8007ee4:	2304      	movcc	r3, #4
 8007ee6:	9301      	str	r3, [sp, #4]
 8007ee8:	9b02      	ldr	r3, [sp, #8]
 8007eea:	9103      	str	r1, [sp, #12]
 8007eec:	428b      	cmp	r3, r1
 8007eee:	d80c      	bhi.n	8007f0a <__multiply+0x9a>
 8007ef0:	2e00      	cmp	r6, #0
 8007ef2:	dd03      	ble.n	8007efc <__multiply+0x8c>
 8007ef4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d055      	beq.n	8007fa8 <__multiply+0x138>
 8007efc:	6106      	str	r6, [r0, #16]
 8007efe:	b005      	add	sp, #20
 8007f00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f04:	f843 2b04 	str.w	r2, [r3], #4
 8007f08:	e7d9      	b.n	8007ebe <__multiply+0x4e>
 8007f0a:	f8b1 a000 	ldrh.w	sl, [r1]
 8007f0e:	f1ba 0f00 	cmp.w	sl, #0
 8007f12:	d01f      	beq.n	8007f54 <__multiply+0xe4>
 8007f14:	46c4      	mov	ip, r8
 8007f16:	46a1      	mov	r9, r4
 8007f18:	2700      	movs	r7, #0
 8007f1a:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007f1e:	f8d9 3000 	ldr.w	r3, [r9]
 8007f22:	fa1f fb82 	uxth.w	fp, r2
 8007f26:	b29b      	uxth	r3, r3
 8007f28:	fb0a 330b 	mla	r3, sl, fp, r3
 8007f2c:	443b      	add	r3, r7
 8007f2e:	f8d9 7000 	ldr.w	r7, [r9]
 8007f32:	0c12      	lsrs	r2, r2, #16
 8007f34:	0c3f      	lsrs	r7, r7, #16
 8007f36:	fb0a 7202 	mla	r2, sl, r2, r7
 8007f3a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8007f3e:	b29b      	uxth	r3, r3
 8007f40:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007f44:	4565      	cmp	r5, ip
 8007f46:	f849 3b04 	str.w	r3, [r9], #4
 8007f4a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8007f4e:	d8e4      	bhi.n	8007f1a <__multiply+0xaa>
 8007f50:	9b01      	ldr	r3, [sp, #4]
 8007f52:	50e7      	str	r7, [r4, r3]
 8007f54:	9b03      	ldr	r3, [sp, #12]
 8007f56:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007f5a:	3104      	adds	r1, #4
 8007f5c:	f1b9 0f00 	cmp.w	r9, #0
 8007f60:	d020      	beq.n	8007fa4 <__multiply+0x134>
 8007f62:	6823      	ldr	r3, [r4, #0]
 8007f64:	4647      	mov	r7, r8
 8007f66:	46a4      	mov	ip, r4
 8007f68:	f04f 0a00 	mov.w	sl, #0
 8007f6c:	f8b7 b000 	ldrh.w	fp, [r7]
 8007f70:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8007f74:	fb09 220b 	mla	r2, r9, fp, r2
 8007f78:	4452      	add	r2, sl
 8007f7a:	b29b      	uxth	r3, r3
 8007f7c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007f80:	f84c 3b04 	str.w	r3, [ip], #4
 8007f84:	f857 3b04 	ldr.w	r3, [r7], #4
 8007f88:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007f8c:	f8bc 3000 	ldrh.w	r3, [ip]
 8007f90:	fb09 330a 	mla	r3, r9, sl, r3
 8007f94:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8007f98:	42bd      	cmp	r5, r7
 8007f9a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007f9e:	d8e5      	bhi.n	8007f6c <__multiply+0xfc>
 8007fa0:	9a01      	ldr	r2, [sp, #4]
 8007fa2:	50a3      	str	r3, [r4, r2]
 8007fa4:	3404      	adds	r4, #4
 8007fa6:	e79f      	b.n	8007ee8 <__multiply+0x78>
 8007fa8:	3e01      	subs	r6, #1
 8007faa:	e7a1      	b.n	8007ef0 <__multiply+0x80>
 8007fac:	0800adcb 	.word	0x0800adcb
 8007fb0:	0800addc 	.word	0x0800addc

08007fb4 <__pow5mult>:
 8007fb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007fb8:	4615      	mov	r5, r2
 8007fba:	f012 0203 	ands.w	r2, r2, #3
 8007fbe:	4607      	mov	r7, r0
 8007fc0:	460e      	mov	r6, r1
 8007fc2:	d007      	beq.n	8007fd4 <__pow5mult+0x20>
 8007fc4:	4c25      	ldr	r4, [pc, #148]	@ (800805c <__pow5mult+0xa8>)
 8007fc6:	3a01      	subs	r2, #1
 8007fc8:	2300      	movs	r3, #0
 8007fca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007fce:	f7ff fe5d 	bl	8007c8c <__multadd>
 8007fd2:	4606      	mov	r6, r0
 8007fd4:	10ad      	asrs	r5, r5, #2
 8007fd6:	d03d      	beq.n	8008054 <__pow5mult+0xa0>
 8007fd8:	69fc      	ldr	r4, [r7, #28]
 8007fda:	b97c      	cbnz	r4, 8007ffc <__pow5mult+0x48>
 8007fdc:	2010      	movs	r0, #16
 8007fde:	f7ff fd3d 	bl	8007a5c <malloc>
 8007fe2:	4602      	mov	r2, r0
 8007fe4:	61f8      	str	r0, [r7, #28]
 8007fe6:	b928      	cbnz	r0, 8007ff4 <__pow5mult+0x40>
 8007fe8:	4b1d      	ldr	r3, [pc, #116]	@ (8008060 <__pow5mult+0xac>)
 8007fea:	481e      	ldr	r0, [pc, #120]	@ (8008064 <__pow5mult+0xb0>)
 8007fec:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007ff0:	f001 ff02 	bl	8009df8 <__assert_func>
 8007ff4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007ff8:	6004      	str	r4, [r0, #0]
 8007ffa:	60c4      	str	r4, [r0, #12]
 8007ffc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008000:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008004:	b94c      	cbnz	r4, 800801a <__pow5mult+0x66>
 8008006:	f240 2171 	movw	r1, #625	@ 0x271
 800800a:	4638      	mov	r0, r7
 800800c:	f7ff ff1a 	bl	8007e44 <__i2b>
 8008010:	2300      	movs	r3, #0
 8008012:	f8c8 0008 	str.w	r0, [r8, #8]
 8008016:	4604      	mov	r4, r0
 8008018:	6003      	str	r3, [r0, #0]
 800801a:	f04f 0900 	mov.w	r9, #0
 800801e:	07eb      	lsls	r3, r5, #31
 8008020:	d50a      	bpl.n	8008038 <__pow5mult+0x84>
 8008022:	4631      	mov	r1, r6
 8008024:	4622      	mov	r2, r4
 8008026:	4638      	mov	r0, r7
 8008028:	f7ff ff22 	bl	8007e70 <__multiply>
 800802c:	4631      	mov	r1, r6
 800802e:	4680      	mov	r8, r0
 8008030:	4638      	mov	r0, r7
 8008032:	f7ff fe09 	bl	8007c48 <_Bfree>
 8008036:	4646      	mov	r6, r8
 8008038:	106d      	asrs	r5, r5, #1
 800803a:	d00b      	beq.n	8008054 <__pow5mult+0xa0>
 800803c:	6820      	ldr	r0, [r4, #0]
 800803e:	b938      	cbnz	r0, 8008050 <__pow5mult+0x9c>
 8008040:	4622      	mov	r2, r4
 8008042:	4621      	mov	r1, r4
 8008044:	4638      	mov	r0, r7
 8008046:	f7ff ff13 	bl	8007e70 <__multiply>
 800804a:	6020      	str	r0, [r4, #0]
 800804c:	f8c0 9000 	str.w	r9, [r0]
 8008050:	4604      	mov	r4, r0
 8008052:	e7e4      	b.n	800801e <__pow5mult+0x6a>
 8008054:	4630      	mov	r0, r6
 8008056:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800805a:	bf00      	nop
 800805c:	0800af08 	.word	0x0800af08
 8008060:	0800ad5c 	.word	0x0800ad5c
 8008064:	0800addc 	.word	0x0800addc

08008068 <__lshift>:
 8008068:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800806c:	460c      	mov	r4, r1
 800806e:	6849      	ldr	r1, [r1, #4]
 8008070:	6923      	ldr	r3, [r4, #16]
 8008072:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008076:	68a3      	ldr	r3, [r4, #8]
 8008078:	4607      	mov	r7, r0
 800807a:	4691      	mov	r9, r2
 800807c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008080:	f108 0601 	add.w	r6, r8, #1
 8008084:	42b3      	cmp	r3, r6
 8008086:	db0b      	blt.n	80080a0 <__lshift+0x38>
 8008088:	4638      	mov	r0, r7
 800808a:	f7ff fd9d 	bl	8007bc8 <_Balloc>
 800808e:	4605      	mov	r5, r0
 8008090:	b948      	cbnz	r0, 80080a6 <__lshift+0x3e>
 8008092:	4602      	mov	r2, r0
 8008094:	4b28      	ldr	r3, [pc, #160]	@ (8008138 <__lshift+0xd0>)
 8008096:	4829      	ldr	r0, [pc, #164]	@ (800813c <__lshift+0xd4>)
 8008098:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800809c:	f001 feac 	bl	8009df8 <__assert_func>
 80080a0:	3101      	adds	r1, #1
 80080a2:	005b      	lsls	r3, r3, #1
 80080a4:	e7ee      	b.n	8008084 <__lshift+0x1c>
 80080a6:	2300      	movs	r3, #0
 80080a8:	f100 0114 	add.w	r1, r0, #20
 80080ac:	f100 0210 	add.w	r2, r0, #16
 80080b0:	4618      	mov	r0, r3
 80080b2:	4553      	cmp	r3, sl
 80080b4:	db33      	blt.n	800811e <__lshift+0xb6>
 80080b6:	6920      	ldr	r0, [r4, #16]
 80080b8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80080bc:	f104 0314 	add.w	r3, r4, #20
 80080c0:	f019 091f 	ands.w	r9, r9, #31
 80080c4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80080c8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80080cc:	d02b      	beq.n	8008126 <__lshift+0xbe>
 80080ce:	f1c9 0e20 	rsb	lr, r9, #32
 80080d2:	468a      	mov	sl, r1
 80080d4:	2200      	movs	r2, #0
 80080d6:	6818      	ldr	r0, [r3, #0]
 80080d8:	fa00 f009 	lsl.w	r0, r0, r9
 80080dc:	4310      	orrs	r0, r2
 80080de:	f84a 0b04 	str.w	r0, [sl], #4
 80080e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80080e6:	459c      	cmp	ip, r3
 80080e8:	fa22 f20e 	lsr.w	r2, r2, lr
 80080ec:	d8f3      	bhi.n	80080d6 <__lshift+0x6e>
 80080ee:	ebac 0304 	sub.w	r3, ip, r4
 80080f2:	3b15      	subs	r3, #21
 80080f4:	f023 0303 	bic.w	r3, r3, #3
 80080f8:	3304      	adds	r3, #4
 80080fa:	f104 0015 	add.w	r0, r4, #21
 80080fe:	4560      	cmp	r0, ip
 8008100:	bf88      	it	hi
 8008102:	2304      	movhi	r3, #4
 8008104:	50ca      	str	r2, [r1, r3]
 8008106:	b10a      	cbz	r2, 800810c <__lshift+0xa4>
 8008108:	f108 0602 	add.w	r6, r8, #2
 800810c:	3e01      	subs	r6, #1
 800810e:	4638      	mov	r0, r7
 8008110:	612e      	str	r6, [r5, #16]
 8008112:	4621      	mov	r1, r4
 8008114:	f7ff fd98 	bl	8007c48 <_Bfree>
 8008118:	4628      	mov	r0, r5
 800811a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800811e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008122:	3301      	adds	r3, #1
 8008124:	e7c5      	b.n	80080b2 <__lshift+0x4a>
 8008126:	3904      	subs	r1, #4
 8008128:	f853 2b04 	ldr.w	r2, [r3], #4
 800812c:	f841 2f04 	str.w	r2, [r1, #4]!
 8008130:	459c      	cmp	ip, r3
 8008132:	d8f9      	bhi.n	8008128 <__lshift+0xc0>
 8008134:	e7ea      	b.n	800810c <__lshift+0xa4>
 8008136:	bf00      	nop
 8008138:	0800adcb 	.word	0x0800adcb
 800813c:	0800addc 	.word	0x0800addc

08008140 <__mcmp>:
 8008140:	690a      	ldr	r2, [r1, #16]
 8008142:	4603      	mov	r3, r0
 8008144:	6900      	ldr	r0, [r0, #16]
 8008146:	1a80      	subs	r0, r0, r2
 8008148:	b530      	push	{r4, r5, lr}
 800814a:	d10e      	bne.n	800816a <__mcmp+0x2a>
 800814c:	3314      	adds	r3, #20
 800814e:	3114      	adds	r1, #20
 8008150:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008154:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008158:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800815c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008160:	4295      	cmp	r5, r2
 8008162:	d003      	beq.n	800816c <__mcmp+0x2c>
 8008164:	d205      	bcs.n	8008172 <__mcmp+0x32>
 8008166:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800816a:	bd30      	pop	{r4, r5, pc}
 800816c:	42a3      	cmp	r3, r4
 800816e:	d3f3      	bcc.n	8008158 <__mcmp+0x18>
 8008170:	e7fb      	b.n	800816a <__mcmp+0x2a>
 8008172:	2001      	movs	r0, #1
 8008174:	e7f9      	b.n	800816a <__mcmp+0x2a>
	...

08008178 <__mdiff>:
 8008178:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800817c:	4689      	mov	r9, r1
 800817e:	4606      	mov	r6, r0
 8008180:	4611      	mov	r1, r2
 8008182:	4648      	mov	r0, r9
 8008184:	4614      	mov	r4, r2
 8008186:	f7ff ffdb 	bl	8008140 <__mcmp>
 800818a:	1e05      	subs	r5, r0, #0
 800818c:	d112      	bne.n	80081b4 <__mdiff+0x3c>
 800818e:	4629      	mov	r1, r5
 8008190:	4630      	mov	r0, r6
 8008192:	f7ff fd19 	bl	8007bc8 <_Balloc>
 8008196:	4602      	mov	r2, r0
 8008198:	b928      	cbnz	r0, 80081a6 <__mdiff+0x2e>
 800819a:	4b3f      	ldr	r3, [pc, #252]	@ (8008298 <__mdiff+0x120>)
 800819c:	f240 2137 	movw	r1, #567	@ 0x237
 80081a0:	483e      	ldr	r0, [pc, #248]	@ (800829c <__mdiff+0x124>)
 80081a2:	f001 fe29 	bl	8009df8 <__assert_func>
 80081a6:	2301      	movs	r3, #1
 80081a8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80081ac:	4610      	mov	r0, r2
 80081ae:	b003      	add	sp, #12
 80081b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081b4:	bfbc      	itt	lt
 80081b6:	464b      	movlt	r3, r9
 80081b8:	46a1      	movlt	r9, r4
 80081ba:	4630      	mov	r0, r6
 80081bc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80081c0:	bfba      	itte	lt
 80081c2:	461c      	movlt	r4, r3
 80081c4:	2501      	movlt	r5, #1
 80081c6:	2500      	movge	r5, #0
 80081c8:	f7ff fcfe 	bl	8007bc8 <_Balloc>
 80081cc:	4602      	mov	r2, r0
 80081ce:	b918      	cbnz	r0, 80081d8 <__mdiff+0x60>
 80081d0:	4b31      	ldr	r3, [pc, #196]	@ (8008298 <__mdiff+0x120>)
 80081d2:	f240 2145 	movw	r1, #581	@ 0x245
 80081d6:	e7e3      	b.n	80081a0 <__mdiff+0x28>
 80081d8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80081dc:	6926      	ldr	r6, [r4, #16]
 80081de:	60c5      	str	r5, [r0, #12]
 80081e0:	f109 0310 	add.w	r3, r9, #16
 80081e4:	f109 0514 	add.w	r5, r9, #20
 80081e8:	f104 0e14 	add.w	lr, r4, #20
 80081ec:	f100 0b14 	add.w	fp, r0, #20
 80081f0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80081f4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80081f8:	9301      	str	r3, [sp, #4]
 80081fa:	46d9      	mov	r9, fp
 80081fc:	f04f 0c00 	mov.w	ip, #0
 8008200:	9b01      	ldr	r3, [sp, #4]
 8008202:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008206:	f853 af04 	ldr.w	sl, [r3, #4]!
 800820a:	9301      	str	r3, [sp, #4]
 800820c:	fa1f f38a 	uxth.w	r3, sl
 8008210:	4619      	mov	r1, r3
 8008212:	b283      	uxth	r3, r0
 8008214:	1acb      	subs	r3, r1, r3
 8008216:	0c00      	lsrs	r0, r0, #16
 8008218:	4463      	add	r3, ip
 800821a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800821e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008222:	b29b      	uxth	r3, r3
 8008224:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008228:	4576      	cmp	r6, lr
 800822a:	f849 3b04 	str.w	r3, [r9], #4
 800822e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008232:	d8e5      	bhi.n	8008200 <__mdiff+0x88>
 8008234:	1b33      	subs	r3, r6, r4
 8008236:	3b15      	subs	r3, #21
 8008238:	f023 0303 	bic.w	r3, r3, #3
 800823c:	3415      	adds	r4, #21
 800823e:	3304      	adds	r3, #4
 8008240:	42a6      	cmp	r6, r4
 8008242:	bf38      	it	cc
 8008244:	2304      	movcc	r3, #4
 8008246:	441d      	add	r5, r3
 8008248:	445b      	add	r3, fp
 800824a:	461e      	mov	r6, r3
 800824c:	462c      	mov	r4, r5
 800824e:	4544      	cmp	r4, r8
 8008250:	d30e      	bcc.n	8008270 <__mdiff+0xf8>
 8008252:	f108 0103 	add.w	r1, r8, #3
 8008256:	1b49      	subs	r1, r1, r5
 8008258:	f021 0103 	bic.w	r1, r1, #3
 800825c:	3d03      	subs	r5, #3
 800825e:	45a8      	cmp	r8, r5
 8008260:	bf38      	it	cc
 8008262:	2100      	movcc	r1, #0
 8008264:	440b      	add	r3, r1
 8008266:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800826a:	b191      	cbz	r1, 8008292 <__mdiff+0x11a>
 800826c:	6117      	str	r7, [r2, #16]
 800826e:	e79d      	b.n	80081ac <__mdiff+0x34>
 8008270:	f854 1b04 	ldr.w	r1, [r4], #4
 8008274:	46e6      	mov	lr, ip
 8008276:	0c08      	lsrs	r0, r1, #16
 8008278:	fa1c fc81 	uxtah	ip, ip, r1
 800827c:	4471      	add	r1, lr
 800827e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008282:	b289      	uxth	r1, r1
 8008284:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008288:	f846 1b04 	str.w	r1, [r6], #4
 800828c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008290:	e7dd      	b.n	800824e <__mdiff+0xd6>
 8008292:	3f01      	subs	r7, #1
 8008294:	e7e7      	b.n	8008266 <__mdiff+0xee>
 8008296:	bf00      	nop
 8008298:	0800adcb 	.word	0x0800adcb
 800829c:	0800addc 	.word	0x0800addc

080082a0 <__ulp>:
 80082a0:	b082      	sub	sp, #8
 80082a2:	ed8d 0b00 	vstr	d0, [sp]
 80082a6:	9a01      	ldr	r2, [sp, #4]
 80082a8:	4b0f      	ldr	r3, [pc, #60]	@ (80082e8 <__ulp+0x48>)
 80082aa:	4013      	ands	r3, r2
 80082ac:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	dc08      	bgt.n	80082c6 <__ulp+0x26>
 80082b4:	425b      	negs	r3, r3
 80082b6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80082ba:	ea4f 5223 	mov.w	r2, r3, asr #20
 80082be:	da04      	bge.n	80082ca <__ulp+0x2a>
 80082c0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80082c4:	4113      	asrs	r3, r2
 80082c6:	2200      	movs	r2, #0
 80082c8:	e008      	b.n	80082dc <__ulp+0x3c>
 80082ca:	f1a2 0314 	sub.w	r3, r2, #20
 80082ce:	2b1e      	cmp	r3, #30
 80082d0:	bfda      	itte	le
 80082d2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80082d6:	40da      	lsrle	r2, r3
 80082d8:	2201      	movgt	r2, #1
 80082da:	2300      	movs	r3, #0
 80082dc:	4619      	mov	r1, r3
 80082de:	4610      	mov	r0, r2
 80082e0:	ec41 0b10 	vmov	d0, r0, r1
 80082e4:	b002      	add	sp, #8
 80082e6:	4770      	bx	lr
 80082e8:	7ff00000 	.word	0x7ff00000

080082ec <__b2d>:
 80082ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082f0:	6906      	ldr	r6, [r0, #16]
 80082f2:	f100 0814 	add.w	r8, r0, #20
 80082f6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80082fa:	1f37      	subs	r7, r6, #4
 80082fc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008300:	4610      	mov	r0, r2
 8008302:	f7ff fd53 	bl	8007dac <__hi0bits>
 8008306:	f1c0 0320 	rsb	r3, r0, #32
 800830a:	280a      	cmp	r0, #10
 800830c:	600b      	str	r3, [r1, #0]
 800830e:	491b      	ldr	r1, [pc, #108]	@ (800837c <__b2d+0x90>)
 8008310:	dc15      	bgt.n	800833e <__b2d+0x52>
 8008312:	f1c0 0c0b 	rsb	ip, r0, #11
 8008316:	fa22 f30c 	lsr.w	r3, r2, ip
 800831a:	45b8      	cmp	r8, r7
 800831c:	ea43 0501 	orr.w	r5, r3, r1
 8008320:	bf34      	ite	cc
 8008322:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008326:	2300      	movcs	r3, #0
 8008328:	3015      	adds	r0, #21
 800832a:	fa02 f000 	lsl.w	r0, r2, r0
 800832e:	fa23 f30c 	lsr.w	r3, r3, ip
 8008332:	4303      	orrs	r3, r0
 8008334:	461c      	mov	r4, r3
 8008336:	ec45 4b10 	vmov	d0, r4, r5
 800833a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800833e:	45b8      	cmp	r8, r7
 8008340:	bf3a      	itte	cc
 8008342:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008346:	f1a6 0708 	subcc.w	r7, r6, #8
 800834a:	2300      	movcs	r3, #0
 800834c:	380b      	subs	r0, #11
 800834e:	d012      	beq.n	8008376 <__b2d+0x8a>
 8008350:	f1c0 0120 	rsb	r1, r0, #32
 8008354:	fa23 f401 	lsr.w	r4, r3, r1
 8008358:	4082      	lsls	r2, r0
 800835a:	4322      	orrs	r2, r4
 800835c:	4547      	cmp	r7, r8
 800835e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8008362:	bf8c      	ite	hi
 8008364:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8008368:	2200      	movls	r2, #0
 800836a:	4083      	lsls	r3, r0
 800836c:	40ca      	lsrs	r2, r1
 800836e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8008372:	4313      	orrs	r3, r2
 8008374:	e7de      	b.n	8008334 <__b2d+0x48>
 8008376:	ea42 0501 	orr.w	r5, r2, r1
 800837a:	e7db      	b.n	8008334 <__b2d+0x48>
 800837c:	3ff00000 	.word	0x3ff00000

08008380 <__d2b>:
 8008380:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008384:	460f      	mov	r7, r1
 8008386:	2101      	movs	r1, #1
 8008388:	ec59 8b10 	vmov	r8, r9, d0
 800838c:	4616      	mov	r6, r2
 800838e:	f7ff fc1b 	bl	8007bc8 <_Balloc>
 8008392:	4604      	mov	r4, r0
 8008394:	b930      	cbnz	r0, 80083a4 <__d2b+0x24>
 8008396:	4602      	mov	r2, r0
 8008398:	4b23      	ldr	r3, [pc, #140]	@ (8008428 <__d2b+0xa8>)
 800839a:	4824      	ldr	r0, [pc, #144]	@ (800842c <__d2b+0xac>)
 800839c:	f240 310f 	movw	r1, #783	@ 0x30f
 80083a0:	f001 fd2a 	bl	8009df8 <__assert_func>
 80083a4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80083a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80083ac:	b10d      	cbz	r5, 80083b2 <__d2b+0x32>
 80083ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80083b2:	9301      	str	r3, [sp, #4]
 80083b4:	f1b8 0300 	subs.w	r3, r8, #0
 80083b8:	d023      	beq.n	8008402 <__d2b+0x82>
 80083ba:	4668      	mov	r0, sp
 80083bc:	9300      	str	r3, [sp, #0]
 80083be:	f7ff fd14 	bl	8007dea <__lo0bits>
 80083c2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80083c6:	b1d0      	cbz	r0, 80083fe <__d2b+0x7e>
 80083c8:	f1c0 0320 	rsb	r3, r0, #32
 80083cc:	fa02 f303 	lsl.w	r3, r2, r3
 80083d0:	430b      	orrs	r3, r1
 80083d2:	40c2      	lsrs	r2, r0
 80083d4:	6163      	str	r3, [r4, #20]
 80083d6:	9201      	str	r2, [sp, #4]
 80083d8:	9b01      	ldr	r3, [sp, #4]
 80083da:	61a3      	str	r3, [r4, #24]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	bf0c      	ite	eq
 80083e0:	2201      	moveq	r2, #1
 80083e2:	2202      	movne	r2, #2
 80083e4:	6122      	str	r2, [r4, #16]
 80083e6:	b1a5      	cbz	r5, 8008412 <__d2b+0x92>
 80083e8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80083ec:	4405      	add	r5, r0
 80083ee:	603d      	str	r5, [r7, #0]
 80083f0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80083f4:	6030      	str	r0, [r6, #0]
 80083f6:	4620      	mov	r0, r4
 80083f8:	b003      	add	sp, #12
 80083fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80083fe:	6161      	str	r1, [r4, #20]
 8008400:	e7ea      	b.n	80083d8 <__d2b+0x58>
 8008402:	a801      	add	r0, sp, #4
 8008404:	f7ff fcf1 	bl	8007dea <__lo0bits>
 8008408:	9b01      	ldr	r3, [sp, #4]
 800840a:	6163      	str	r3, [r4, #20]
 800840c:	3020      	adds	r0, #32
 800840e:	2201      	movs	r2, #1
 8008410:	e7e8      	b.n	80083e4 <__d2b+0x64>
 8008412:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008416:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800841a:	6038      	str	r0, [r7, #0]
 800841c:	6918      	ldr	r0, [r3, #16]
 800841e:	f7ff fcc5 	bl	8007dac <__hi0bits>
 8008422:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008426:	e7e5      	b.n	80083f4 <__d2b+0x74>
 8008428:	0800adcb 	.word	0x0800adcb
 800842c:	0800addc 	.word	0x0800addc

08008430 <__ratio>:
 8008430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008434:	b085      	sub	sp, #20
 8008436:	e9cd 1000 	strd	r1, r0, [sp]
 800843a:	a902      	add	r1, sp, #8
 800843c:	f7ff ff56 	bl	80082ec <__b2d>
 8008440:	9800      	ldr	r0, [sp, #0]
 8008442:	a903      	add	r1, sp, #12
 8008444:	ec55 4b10 	vmov	r4, r5, d0
 8008448:	f7ff ff50 	bl	80082ec <__b2d>
 800844c:	9b01      	ldr	r3, [sp, #4]
 800844e:	6919      	ldr	r1, [r3, #16]
 8008450:	9b00      	ldr	r3, [sp, #0]
 8008452:	691b      	ldr	r3, [r3, #16]
 8008454:	1ac9      	subs	r1, r1, r3
 8008456:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800845a:	1a9b      	subs	r3, r3, r2
 800845c:	ec5b ab10 	vmov	sl, fp, d0
 8008460:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8008464:	2b00      	cmp	r3, #0
 8008466:	bfce      	itee	gt
 8008468:	462a      	movgt	r2, r5
 800846a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800846e:	465a      	movle	r2, fp
 8008470:	462f      	mov	r7, r5
 8008472:	46d9      	mov	r9, fp
 8008474:	bfcc      	ite	gt
 8008476:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800847a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800847e:	464b      	mov	r3, r9
 8008480:	4652      	mov	r2, sl
 8008482:	4620      	mov	r0, r4
 8008484:	4639      	mov	r1, r7
 8008486:	f7f8 f9e1 	bl	800084c <__aeabi_ddiv>
 800848a:	ec41 0b10 	vmov	d0, r0, r1
 800848e:	b005      	add	sp, #20
 8008490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008494 <__copybits>:
 8008494:	3901      	subs	r1, #1
 8008496:	b570      	push	{r4, r5, r6, lr}
 8008498:	1149      	asrs	r1, r1, #5
 800849a:	6914      	ldr	r4, [r2, #16]
 800849c:	3101      	adds	r1, #1
 800849e:	f102 0314 	add.w	r3, r2, #20
 80084a2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80084a6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80084aa:	1f05      	subs	r5, r0, #4
 80084ac:	42a3      	cmp	r3, r4
 80084ae:	d30c      	bcc.n	80084ca <__copybits+0x36>
 80084b0:	1aa3      	subs	r3, r4, r2
 80084b2:	3b11      	subs	r3, #17
 80084b4:	f023 0303 	bic.w	r3, r3, #3
 80084b8:	3211      	adds	r2, #17
 80084ba:	42a2      	cmp	r2, r4
 80084bc:	bf88      	it	hi
 80084be:	2300      	movhi	r3, #0
 80084c0:	4418      	add	r0, r3
 80084c2:	2300      	movs	r3, #0
 80084c4:	4288      	cmp	r0, r1
 80084c6:	d305      	bcc.n	80084d4 <__copybits+0x40>
 80084c8:	bd70      	pop	{r4, r5, r6, pc}
 80084ca:	f853 6b04 	ldr.w	r6, [r3], #4
 80084ce:	f845 6f04 	str.w	r6, [r5, #4]!
 80084d2:	e7eb      	b.n	80084ac <__copybits+0x18>
 80084d4:	f840 3b04 	str.w	r3, [r0], #4
 80084d8:	e7f4      	b.n	80084c4 <__copybits+0x30>

080084da <__any_on>:
 80084da:	f100 0214 	add.w	r2, r0, #20
 80084de:	6900      	ldr	r0, [r0, #16]
 80084e0:	114b      	asrs	r3, r1, #5
 80084e2:	4298      	cmp	r0, r3
 80084e4:	b510      	push	{r4, lr}
 80084e6:	db11      	blt.n	800850c <__any_on+0x32>
 80084e8:	dd0a      	ble.n	8008500 <__any_on+0x26>
 80084ea:	f011 011f 	ands.w	r1, r1, #31
 80084ee:	d007      	beq.n	8008500 <__any_on+0x26>
 80084f0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80084f4:	fa24 f001 	lsr.w	r0, r4, r1
 80084f8:	fa00 f101 	lsl.w	r1, r0, r1
 80084fc:	428c      	cmp	r4, r1
 80084fe:	d10b      	bne.n	8008518 <__any_on+0x3e>
 8008500:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008504:	4293      	cmp	r3, r2
 8008506:	d803      	bhi.n	8008510 <__any_on+0x36>
 8008508:	2000      	movs	r0, #0
 800850a:	bd10      	pop	{r4, pc}
 800850c:	4603      	mov	r3, r0
 800850e:	e7f7      	b.n	8008500 <__any_on+0x26>
 8008510:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008514:	2900      	cmp	r1, #0
 8008516:	d0f5      	beq.n	8008504 <__any_on+0x2a>
 8008518:	2001      	movs	r0, #1
 800851a:	e7f6      	b.n	800850a <__any_on+0x30>

0800851c <sulp>:
 800851c:	b570      	push	{r4, r5, r6, lr}
 800851e:	4604      	mov	r4, r0
 8008520:	460d      	mov	r5, r1
 8008522:	ec45 4b10 	vmov	d0, r4, r5
 8008526:	4616      	mov	r6, r2
 8008528:	f7ff feba 	bl	80082a0 <__ulp>
 800852c:	ec51 0b10 	vmov	r0, r1, d0
 8008530:	b17e      	cbz	r6, 8008552 <sulp+0x36>
 8008532:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008536:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800853a:	2b00      	cmp	r3, #0
 800853c:	dd09      	ble.n	8008552 <sulp+0x36>
 800853e:	051b      	lsls	r3, r3, #20
 8008540:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8008544:	2400      	movs	r4, #0
 8008546:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800854a:	4622      	mov	r2, r4
 800854c:	462b      	mov	r3, r5
 800854e:	f7f8 f853 	bl	80005f8 <__aeabi_dmul>
 8008552:	ec41 0b10 	vmov	d0, r0, r1
 8008556:	bd70      	pop	{r4, r5, r6, pc}

08008558 <_strtod_l>:
 8008558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800855c:	b09f      	sub	sp, #124	@ 0x7c
 800855e:	460c      	mov	r4, r1
 8008560:	9217      	str	r2, [sp, #92]	@ 0x5c
 8008562:	2200      	movs	r2, #0
 8008564:	921a      	str	r2, [sp, #104]	@ 0x68
 8008566:	9005      	str	r0, [sp, #20]
 8008568:	f04f 0a00 	mov.w	sl, #0
 800856c:	f04f 0b00 	mov.w	fp, #0
 8008570:	460a      	mov	r2, r1
 8008572:	9219      	str	r2, [sp, #100]	@ 0x64
 8008574:	7811      	ldrb	r1, [r2, #0]
 8008576:	292b      	cmp	r1, #43	@ 0x2b
 8008578:	d04a      	beq.n	8008610 <_strtod_l+0xb8>
 800857a:	d838      	bhi.n	80085ee <_strtod_l+0x96>
 800857c:	290d      	cmp	r1, #13
 800857e:	d832      	bhi.n	80085e6 <_strtod_l+0x8e>
 8008580:	2908      	cmp	r1, #8
 8008582:	d832      	bhi.n	80085ea <_strtod_l+0x92>
 8008584:	2900      	cmp	r1, #0
 8008586:	d03b      	beq.n	8008600 <_strtod_l+0xa8>
 8008588:	2200      	movs	r2, #0
 800858a:	920e      	str	r2, [sp, #56]	@ 0x38
 800858c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800858e:	782a      	ldrb	r2, [r5, #0]
 8008590:	2a30      	cmp	r2, #48	@ 0x30
 8008592:	f040 80b2 	bne.w	80086fa <_strtod_l+0x1a2>
 8008596:	786a      	ldrb	r2, [r5, #1]
 8008598:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800859c:	2a58      	cmp	r2, #88	@ 0x58
 800859e:	d16e      	bne.n	800867e <_strtod_l+0x126>
 80085a0:	9302      	str	r3, [sp, #8]
 80085a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80085a4:	9301      	str	r3, [sp, #4]
 80085a6:	ab1a      	add	r3, sp, #104	@ 0x68
 80085a8:	9300      	str	r3, [sp, #0]
 80085aa:	4a8f      	ldr	r2, [pc, #572]	@ (80087e8 <_strtod_l+0x290>)
 80085ac:	9805      	ldr	r0, [sp, #20]
 80085ae:	ab1b      	add	r3, sp, #108	@ 0x6c
 80085b0:	a919      	add	r1, sp, #100	@ 0x64
 80085b2:	f001 fcbb 	bl	8009f2c <__gethex>
 80085b6:	f010 060f 	ands.w	r6, r0, #15
 80085ba:	4604      	mov	r4, r0
 80085bc:	d005      	beq.n	80085ca <_strtod_l+0x72>
 80085be:	2e06      	cmp	r6, #6
 80085c0:	d128      	bne.n	8008614 <_strtod_l+0xbc>
 80085c2:	3501      	adds	r5, #1
 80085c4:	2300      	movs	r3, #0
 80085c6:	9519      	str	r5, [sp, #100]	@ 0x64
 80085c8:	930e      	str	r3, [sp, #56]	@ 0x38
 80085ca:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	f040 858e 	bne.w	80090ee <_strtod_l+0xb96>
 80085d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80085d4:	b1cb      	cbz	r3, 800860a <_strtod_l+0xb2>
 80085d6:	4652      	mov	r2, sl
 80085d8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80085dc:	ec43 2b10 	vmov	d0, r2, r3
 80085e0:	b01f      	add	sp, #124	@ 0x7c
 80085e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085e6:	2920      	cmp	r1, #32
 80085e8:	d1ce      	bne.n	8008588 <_strtod_l+0x30>
 80085ea:	3201      	adds	r2, #1
 80085ec:	e7c1      	b.n	8008572 <_strtod_l+0x1a>
 80085ee:	292d      	cmp	r1, #45	@ 0x2d
 80085f0:	d1ca      	bne.n	8008588 <_strtod_l+0x30>
 80085f2:	2101      	movs	r1, #1
 80085f4:	910e      	str	r1, [sp, #56]	@ 0x38
 80085f6:	1c51      	adds	r1, r2, #1
 80085f8:	9119      	str	r1, [sp, #100]	@ 0x64
 80085fa:	7852      	ldrb	r2, [r2, #1]
 80085fc:	2a00      	cmp	r2, #0
 80085fe:	d1c5      	bne.n	800858c <_strtod_l+0x34>
 8008600:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008602:	9419      	str	r4, [sp, #100]	@ 0x64
 8008604:	2b00      	cmp	r3, #0
 8008606:	f040 8570 	bne.w	80090ea <_strtod_l+0xb92>
 800860a:	4652      	mov	r2, sl
 800860c:	465b      	mov	r3, fp
 800860e:	e7e5      	b.n	80085dc <_strtod_l+0x84>
 8008610:	2100      	movs	r1, #0
 8008612:	e7ef      	b.n	80085f4 <_strtod_l+0x9c>
 8008614:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008616:	b13a      	cbz	r2, 8008628 <_strtod_l+0xd0>
 8008618:	2135      	movs	r1, #53	@ 0x35
 800861a:	a81c      	add	r0, sp, #112	@ 0x70
 800861c:	f7ff ff3a 	bl	8008494 <__copybits>
 8008620:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008622:	9805      	ldr	r0, [sp, #20]
 8008624:	f7ff fb10 	bl	8007c48 <_Bfree>
 8008628:	3e01      	subs	r6, #1
 800862a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800862c:	2e04      	cmp	r6, #4
 800862e:	d806      	bhi.n	800863e <_strtod_l+0xe6>
 8008630:	e8df f006 	tbb	[pc, r6]
 8008634:	201d0314 	.word	0x201d0314
 8008638:	14          	.byte	0x14
 8008639:	00          	.byte	0x00
 800863a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800863e:	05e1      	lsls	r1, r4, #23
 8008640:	bf48      	it	mi
 8008642:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8008646:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800864a:	0d1b      	lsrs	r3, r3, #20
 800864c:	051b      	lsls	r3, r3, #20
 800864e:	2b00      	cmp	r3, #0
 8008650:	d1bb      	bne.n	80085ca <_strtod_l+0x72>
 8008652:	f7fe fb2b 	bl	8006cac <__errno>
 8008656:	2322      	movs	r3, #34	@ 0x22
 8008658:	6003      	str	r3, [r0, #0]
 800865a:	e7b6      	b.n	80085ca <_strtod_l+0x72>
 800865c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008660:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8008664:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008668:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800866c:	e7e7      	b.n	800863e <_strtod_l+0xe6>
 800866e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 80087f0 <_strtod_l+0x298>
 8008672:	e7e4      	b.n	800863e <_strtod_l+0xe6>
 8008674:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008678:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800867c:	e7df      	b.n	800863e <_strtod_l+0xe6>
 800867e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008680:	1c5a      	adds	r2, r3, #1
 8008682:	9219      	str	r2, [sp, #100]	@ 0x64
 8008684:	785b      	ldrb	r3, [r3, #1]
 8008686:	2b30      	cmp	r3, #48	@ 0x30
 8008688:	d0f9      	beq.n	800867e <_strtod_l+0x126>
 800868a:	2b00      	cmp	r3, #0
 800868c:	d09d      	beq.n	80085ca <_strtod_l+0x72>
 800868e:	2301      	movs	r3, #1
 8008690:	2700      	movs	r7, #0
 8008692:	9308      	str	r3, [sp, #32]
 8008694:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008696:	930c      	str	r3, [sp, #48]	@ 0x30
 8008698:	970b      	str	r7, [sp, #44]	@ 0x2c
 800869a:	46b9      	mov	r9, r7
 800869c:	220a      	movs	r2, #10
 800869e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80086a0:	7805      	ldrb	r5, [r0, #0]
 80086a2:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80086a6:	b2d9      	uxtb	r1, r3
 80086a8:	2909      	cmp	r1, #9
 80086aa:	d928      	bls.n	80086fe <_strtod_l+0x1a6>
 80086ac:	494f      	ldr	r1, [pc, #316]	@ (80087ec <_strtod_l+0x294>)
 80086ae:	2201      	movs	r2, #1
 80086b0:	f001 fb67 	bl	8009d82 <strncmp>
 80086b4:	2800      	cmp	r0, #0
 80086b6:	d032      	beq.n	800871e <_strtod_l+0x1c6>
 80086b8:	2000      	movs	r0, #0
 80086ba:	462a      	mov	r2, r5
 80086bc:	900a      	str	r0, [sp, #40]	@ 0x28
 80086be:	464d      	mov	r5, r9
 80086c0:	4603      	mov	r3, r0
 80086c2:	2a65      	cmp	r2, #101	@ 0x65
 80086c4:	d001      	beq.n	80086ca <_strtod_l+0x172>
 80086c6:	2a45      	cmp	r2, #69	@ 0x45
 80086c8:	d114      	bne.n	80086f4 <_strtod_l+0x19c>
 80086ca:	b91d      	cbnz	r5, 80086d4 <_strtod_l+0x17c>
 80086cc:	9a08      	ldr	r2, [sp, #32]
 80086ce:	4302      	orrs	r2, r0
 80086d0:	d096      	beq.n	8008600 <_strtod_l+0xa8>
 80086d2:	2500      	movs	r5, #0
 80086d4:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80086d6:	1c62      	adds	r2, r4, #1
 80086d8:	9219      	str	r2, [sp, #100]	@ 0x64
 80086da:	7862      	ldrb	r2, [r4, #1]
 80086dc:	2a2b      	cmp	r2, #43	@ 0x2b
 80086de:	d07a      	beq.n	80087d6 <_strtod_l+0x27e>
 80086e0:	2a2d      	cmp	r2, #45	@ 0x2d
 80086e2:	d07e      	beq.n	80087e2 <_strtod_l+0x28a>
 80086e4:	f04f 0c00 	mov.w	ip, #0
 80086e8:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80086ec:	2909      	cmp	r1, #9
 80086ee:	f240 8085 	bls.w	80087fc <_strtod_l+0x2a4>
 80086f2:	9419      	str	r4, [sp, #100]	@ 0x64
 80086f4:	f04f 0800 	mov.w	r8, #0
 80086f8:	e0a5      	b.n	8008846 <_strtod_l+0x2ee>
 80086fa:	2300      	movs	r3, #0
 80086fc:	e7c8      	b.n	8008690 <_strtod_l+0x138>
 80086fe:	f1b9 0f08 	cmp.w	r9, #8
 8008702:	bfd8      	it	le
 8008704:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8008706:	f100 0001 	add.w	r0, r0, #1
 800870a:	bfda      	itte	le
 800870c:	fb02 3301 	mlale	r3, r2, r1, r3
 8008710:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8008712:	fb02 3707 	mlagt	r7, r2, r7, r3
 8008716:	f109 0901 	add.w	r9, r9, #1
 800871a:	9019      	str	r0, [sp, #100]	@ 0x64
 800871c:	e7bf      	b.n	800869e <_strtod_l+0x146>
 800871e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008720:	1c5a      	adds	r2, r3, #1
 8008722:	9219      	str	r2, [sp, #100]	@ 0x64
 8008724:	785a      	ldrb	r2, [r3, #1]
 8008726:	f1b9 0f00 	cmp.w	r9, #0
 800872a:	d03b      	beq.n	80087a4 <_strtod_l+0x24c>
 800872c:	900a      	str	r0, [sp, #40]	@ 0x28
 800872e:	464d      	mov	r5, r9
 8008730:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8008734:	2b09      	cmp	r3, #9
 8008736:	d912      	bls.n	800875e <_strtod_l+0x206>
 8008738:	2301      	movs	r3, #1
 800873a:	e7c2      	b.n	80086c2 <_strtod_l+0x16a>
 800873c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800873e:	1c5a      	adds	r2, r3, #1
 8008740:	9219      	str	r2, [sp, #100]	@ 0x64
 8008742:	785a      	ldrb	r2, [r3, #1]
 8008744:	3001      	adds	r0, #1
 8008746:	2a30      	cmp	r2, #48	@ 0x30
 8008748:	d0f8      	beq.n	800873c <_strtod_l+0x1e4>
 800874a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800874e:	2b08      	cmp	r3, #8
 8008750:	f200 84d2 	bhi.w	80090f8 <_strtod_l+0xba0>
 8008754:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008756:	900a      	str	r0, [sp, #40]	@ 0x28
 8008758:	2000      	movs	r0, #0
 800875a:	930c      	str	r3, [sp, #48]	@ 0x30
 800875c:	4605      	mov	r5, r0
 800875e:	3a30      	subs	r2, #48	@ 0x30
 8008760:	f100 0301 	add.w	r3, r0, #1
 8008764:	d018      	beq.n	8008798 <_strtod_l+0x240>
 8008766:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008768:	4419      	add	r1, r3
 800876a:	910a      	str	r1, [sp, #40]	@ 0x28
 800876c:	462e      	mov	r6, r5
 800876e:	f04f 0e0a 	mov.w	lr, #10
 8008772:	1c71      	adds	r1, r6, #1
 8008774:	eba1 0c05 	sub.w	ip, r1, r5
 8008778:	4563      	cmp	r3, ip
 800877a:	dc15      	bgt.n	80087a8 <_strtod_l+0x250>
 800877c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8008780:	182b      	adds	r3, r5, r0
 8008782:	2b08      	cmp	r3, #8
 8008784:	f105 0501 	add.w	r5, r5, #1
 8008788:	4405      	add	r5, r0
 800878a:	dc1a      	bgt.n	80087c2 <_strtod_l+0x26a>
 800878c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800878e:	230a      	movs	r3, #10
 8008790:	fb03 2301 	mla	r3, r3, r1, r2
 8008794:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008796:	2300      	movs	r3, #0
 8008798:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800879a:	1c51      	adds	r1, r2, #1
 800879c:	9119      	str	r1, [sp, #100]	@ 0x64
 800879e:	7852      	ldrb	r2, [r2, #1]
 80087a0:	4618      	mov	r0, r3
 80087a2:	e7c5      	b.n	8008730 <_strtod_l+0x1d8>
 80087a4:	4648      	mov	r0, r9
 80087a6:	e7ce      	b.n	8008746 <_strtod_l+0x1ee>
 80087a8:	2e08      	cmp	r6, #8
 80087aa:	dc05      	bgt.n	80087b8 <_strtod_l+0x260>
 80087ac:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80087ae:	fb0e f606 	mul.w	r6, lr, r6
 80087b2:	960b      	str	r6, [sp, #44]	@ 0x2c
 80087b4:	460e      	mov	r6, r1
 80087b6:	e7dc      	b.n	8008772 <_strtod_l+0x21a>
 80087b8:	2910      	cmp	r1, #16
 80087ba:	bfd8      	it	le
 80087bc:	fb0e f707 	mulle.w	r7, lr, r7
 80087c0:	e7f8      	b.n	80087b4 <_strtod_l+0x25c>
 80087c2:	2b0f      	cmp	r3, #15
 80087c4:	bfdc      	itt	le
 80087c6:	230a      	movle	r3, #10
 80087c8:	fb03 2707 	mlale	r7, r3, r7, r2
 80087cc:	e7e3      	b.n	8008796 <_strtod_l+0x23e>
 80087ce:	2300      	movs	r3, #0
 80087d0:	930a      	str	r3, [sp, #40]	@ 0x28
 80087d2:	2301      	movs	r3, #1
 80087d4:	e77a      	b.n	80086cc <_strtod_l+0x174>
 80087d6:	f04f 0c00 	mov.w	ip, #0
 80087da:	1ca2      	adds	r2, r4, #2
 80087dc:	9219      	str	r2, [sp, #100]	@ 0x64
 80087de:	78a2      	ldrb	r2, [r4, #2]
 80087e0:	e782      	b.n	80086e8 <_strtod_l+0x190>
 80087e2:	f04f 0c01 	mov.w	ip, #1
 80087e6:	e7f8      	b.n	80087da <_strtod_l+0x282>
 80087e8:	0800b01c 	.word	0x0800b01c
 80087ec:	0800ae35 	.word	0x0800ae35
 80087f0:	7ff00000 	.word	0x7ff00000
 80087f4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80087f6:	1c51      	adds	r1, r2, #1
 80087f8:	9119      	str	r1, [sp, #100]	@ 0x64
 80087fa:	7852      	ldrb	r2, [r2, #1]
 80087fc:	2a30      	cmp	r2, #48	@ 0x30
 80087fe:	d0f9      	beq.n	80087f4 <_strtod_l+0x29c>
 8008800:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8008804:	2908      	cmp	r1, #8
 8008806:	f63f af75 	bhi.w	80086f4 <_strtod_l+0x19c>
 800880a:	3a30      	subs	r2, #48	@ 0x30
 800880c:	9209      	str	r2, [sp, #36]	@ 0x24
 800880e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008810:	920f      	str	r2, [sp, #60]	@ 0x3c
 8008812:	f04f 080a 	mov.w	r8, #10
 8008816:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008818:	1c56      	adds	r6, r2, #1
 800881a:	9619      	str	r6, [sp, #100]	@ 0x64
 800881c:	7852      	ldrb	r2, [r2, #1]
 800881e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8008822:	f1be 0f09 	cmp.w	lr, #9
 8008826:	d939      	bls.n	800889c <_strtod_l+0x344>
 8008828:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800882a:	1a76      	subs	r6, r6, r1
 800882c:	2e08      	cmp	r6, #8
 800882e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8008832:	dc03      	bgt.n	800883c <_strtod_l+0x2e4>
 8008834:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008836:	4588      	cmp	r8, r1
 8008838:	bfa8      	it	ge
 800883a:	4688      	movge	r8, r1
 800883c:	f1bc 0f00 	cmp.w	ip, #0
 8008840:	d001      	beq.n	8008846 <_strtod_l+0x2ee>
 8008842:	f1c8 0800 	rsb	r8, r8, #0
 8008846:	2d00      	cmp	r5, #0
 8008848:	d14e      	bne.n	80088e8 <_strtod_l+0x390>
 800884a:	9908      	ldr	r1, [sp, #32]
 800884c:	4308      	orrs	r0, r1
 800884e:	f47f aebc 	bne.w	80085ca <_strtod_l+0x72>
 8008852:	2b00      	cmp	r3, #0
 8008854:	f47f aed4 	bne.w	8008600 <_strtod_l+0xa8>
 8008858:	2a69      	cmp	r2, #105	@ 0x69
 800885a:	d028      	beq.n	80088ae <_strtod_l+0x356>
 800885c:	dc25      	bgt.n	80088aa <_strtod_l+0x352>
 800885e:	2a49      	cmp	r2, #73	@ 0x49
 8008860:	d025      	beq.n	80088ae <_strtod_l+0x356>
 8008862:	2a4e      	cmp	r2, #78	@ 0x4e
 8008864:	f47f aecc 	bne.w	8008600 <_strtod_l+0xa8>
 8008868:	499a      	ldr	r1, [pc, #616]	@ (8008ad4 <_strtod_l+0x57c>)
 800886a:	a819      	add	r0, sp, #100	@ 0x64
 800886c:	f001 fd80 	bl	800a370 <__match>
 8008870:	2800      	cmp	r0, #0
 8008872:	f43f aec5 	beq.w	8008600 <_strtod_l+0xa8>
 8008876:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008878:	781b      	ldrb	r3, [r3, #0]
 800887a:	2b28      	cmp	r3, #40	@ 0x28
 800887c:	d12e      	bne.n	80088dc <_strtod_l+0x384>
 800887e:	4996      	ldr	r1, [pc, #600]	@ (8008ad8 <_strtod_l+0x580>)
 8008880:	aa1c      	add	r2, sp, #112	@ 0x70
 8008882:	a819      	add	r0, sp, #100	@ 0x64
 8008884:	f001 fd88 	bl	800a398 <__hexnan>
 8008888:	2805      	cmp	r0, #5
 800888a:	d127      	bne.n	80088dc <_strtod_l+0x384>
 800888c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800888e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8008892:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8008896:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800889a:	e696      	b.n	80085ca <_strtod_l+0x72>
 800889c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800889e:	fb08 2101 	mla	r1, r8, r1, r2
 80088a2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80088a6:	9209      	str	r2, [sp, #36]	@ 0x24
 80088a8:	e7b5      	b.n	8008816 <_strtod_l+0x2be>
 80088aa:	2a6e      	cmp	r2, #110	@ 0x6e
 80088ac:	e7da      	b.n	8008864 <_strtod_l+0x30c>
 80088ae:	498b      	ldr	r1, [pc, #556]	@ (8008adc <_strtod_l+0x584>)
 80088b0:	a819      	add	r0, sp, #100	@ 0x64
 80088b2:	f001 fd5d 	bl	800a370 <__match>
 80088b6:	2800      	cmp	r0, #0
 80088b8:	f43f aea2 	beq.w	8008600 <_strtod_l+0xa8>
 80088bc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80088be:	4988      	ldr	r1, [pc, #544]	@ (8008ae0 <_strtod_l+0x588>)
 80088c0:	3b01      	subs	r3, #1
 80088c2:	a819      	add	r0, sp, #100	@ 0x64
 80088c4:	9319      	str	r3, [sp, #100]	@ 0x64
 80088c6:	f001 fd53 	bl	800a370 <__match>
 80088ca:	b910      	cbnz	r0, 80088d2 <_strtod_l+0x37a>
 80088cc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80088ce:	3301      	adds	r3, #1
 80088d0:	9319      	str	r3, [sp, #100]	@ 0x64
 80088d2:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8008af0 <_strtod_l+0x598>
 80088d6:	f04f 0a00 	mov.w	sl, #0
 80088da:	e676      	b.n	80085ca <_strtod_l+0x72>
 80088dc:	4881      	ldr	r0, [pc, #516]	@ (8008ae4 <_strtod_l+0x58c>)
 80088de:	f001 fa83 	bl	8009de8 <nan>
 80088e2:	ec5b ab10 	vmov	sl, fp, d0
 80088e6:	e670      	b.n	80085ca <_strtod_l+0x72>
 80088e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80088ea:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80088ec:	eba8 0303 	sub.w	r3, r8, r3
 80088f0:	f1b9 0f00 	cmp.w	r9, #0
 80088f4:	bf08      	it	eq
 80088f6:	46a9      	moveq	r9, r5
 80088f8:	2d10      	cmp	r5, #16
 80088fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80088fc:	462c      	mov	r4, r5
 80088fe:	bfa8      	it	ge
 8008900:	2410      	movge	r4, #16
 8008902:	f7f7 fdff 	bl	8000504 <__aeabi_ui2d>
 8008906:	2d09      	cmp	r5, #9
 8008908:	4682      	mov	sl, r0
 800890a:	468b      	mov	fp, r1
 800890c:	dc13      	bgt.n	8008936 <_strtod_l+0x3de>
 800890e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008910:	2b00      	cmp	r3, #0
 8008912:	f43f ae5a 	beq.w	80085ca <_strtod_l+0x72>
 8008916:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008918:	dd78      	ble.n	8008a0c <_strtod_l+0x4b4>
 800891a:	2b16      	cmp	r3, #22
 800891c:	dc5f      	bgt.n	80089de <_strtod_l+0x486>
 800891e:	4972      	ldr	r1, [pc, #456]	@ (8008ae8 <_strtod_l+0x590>)
 8008920:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008924:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008928:	4652      	mov	r2, sl
 800892a:	465b      	mov	r3, fp
 800892c:	f7f7 fe64 	bl	80005f8 <__aeabi_dmul>
 8008930:	4682      	mov	sl, r0
 8008932:	468b      	mov	fp, r1
 8008934:	e649      	b.n	80085ca <_strtod_l+0x72>
 8008936:	4b6c      	ldr	r3, [pc, #432]	@ (8008ae8 <_strtod_l+0x590>)
 8008938:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800893c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8008940:	f7f7 fe5a 	bl	80005f8 <__aeabi_dmul>
 8008944:	4682      	mov	sl, r0
 8008946:	4638      	mov	r0, r7
 8008948:	468b      	mov	fp, r1
 800894a:	f7f7 fddb 	bl	8000504 <__aeabi_ui2d>
 800894e:	4602      	mov	r2, r0
 8008950:	460b      	mov	r3, r1
 8008952:	4650      	mov	r0, sl
 8008954:	4659      	mov	r1, fp
 8008956:	f7f7 fc99 	bl	800028c <__adddf3>
 800895a:	2d0f      	cmp	r5, #15
 800895c:	4682      	mov	sl, r0
 800895e:	468b      	mov	fp, r1
 8008960:	ddd5      	ble.n	800890e <_strtod_l+0x3b6>
 8008962:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008964:	1b2c      	subs	r4, r5, r4
 8008966:	441c      	add	r4, r3
 8008968:	2c00      	cmp	r4, #0
 800896a:	f340 8093 	ble.w	8008a94 <_strtod_l+0x53c>
 800896e:	f014 030f 	ands.w	r3, r4, #15
 8008972:	d00a      	beq.n	800898a <_strtod_l+0x432>
 8008974:	495c      	ldr	r1, [pc, #368]	@ (8008ae8 <_strtod_l+0x590>)
 8008976:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800897a:	4652      	mov	r2, sl
 800897c:	465b      	mov	r3, fp
 800897e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008982:	f7f7 fe39 	bl	80005f8 <__aeabi_dmul>
 8008986:	4682      	mov	sl, r0
 8008988:	468b      	mov	fp, r1
 800898a:	f034 040f 	bics.w	r4, r4, #15
 800898e:	d073      	beq.n	8008a78 <_strtod_l+0x520>
 8008990:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8008994:	dd49      	ble.n	8008a2a <_strtod_l+0x4d2>
 8008996:	2400      	movs	r4, #0
 8008998:	46a0      	mov	r8, r4
 800899a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800899c:	46a1      	mov	r9, r4
 800899e:	9a05      	ldr	r2, [sp, #20]
 80089a0:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8008af0 <_strtod_l+0x598>
 80089a4:	2322      	movs	r3, #34	@ 0x22
 80089a6:	6013      	str	r3, [r2, #0]
 80089a8:	f04f 0a00 	mov.w	sl, #0
 80089ac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	f43f ae0b 	beq.w	80085ca <_strtod_l+0x72>
 80089b4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80089b6:	9805      	ldr	r0, [sp, #20]
 80089b8:	f7ff f946 	bl	8007c48 <_Bfree>
 80089bc:	9805      	ldr	r0, [sp, #20]
 80089be:	4649      	mov	r1, r9
 80089c0:	f7ff f942 	bl	8007c48 <_Bfree>
 80089c4:	9805      	ldr	r0, [sp, #20]
 80089c6:	4641      	mov	r1, r8
 80089c8:	f7ff f93e 	bl	8007c48 <_Bfree>
 80089cc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80089ce:	9805      	ldr	r0, [sp, #20]
 80089d0:	f7ff f93a 	bl	8007c48 <_Bfree>
 80089d4:	9805      	ldr	r0, [sp, #20]
 80089d6:	4621      	mov	r1, r4
 80089d8:	f7ff f936 	bl	8007c48 <_Bfree>
 80089dc:	e5f5      	b.n	80085ca <_strtod_l+0x72>
 80089de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80089e0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80089e4:	4293      	cmp	r3, r2
 80089e6:	dbbc      	blt.n	8008962 <_strtod_l+0x40a>
 80089e8:	4c3f      	ldr	r4, [pc, #252]	@ (8008ae8 <_strtod_l+0x590>)
 80089ea:	f1c5 050f 	rsb	r5, r5, #15
 80089ee:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80089f2:	4652      	mov	r2, sl
 80089f4:	465b      	mov	r3, fp
 80089f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80089fa:	f7f7 fdfd 	bl	80005f8 <__aeabi_dmul>
 80089fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a00:	1b5d      	subs	r5, r3, r5
 8008a02:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008a06:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008a0a:	e78f      	b.n	800892c <_strtod_l+0x3d4>
 8008a0c:	3316      	adds	r3, #22
 8008a0e:	dba8      	blt.n	8008962 <_strtod_l+0x40a>
 8008a10:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008a12:	eba3 0808 	sub.w	r8, r3, r8
 8008a16:	4b34      	ldr	r3, [pc, #208]	@ (8008ae8 <_strtod_l+0x590>)
 8008a18:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8008a1c:	e9d8 2300 	ldrd	r2, r3, [r8]
 8008a20:	4650      	mov	r0, sl
 8008a22:	4659      	mov	r1, fp
 8008a24:	f7f7 ff12 	bl	800084c <__aeabi_ddiv>
 8008a28:	e782      	b.n	8008930 <_strtod_l+0x3d8>
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	4f2f      	ldr	r7, [pc, #188]	@ (8008aec <_strtod_l+0x594>)
 8008a2e:	1124      	asrs	r4, r4, #4
 8008a30:	4650      	mov	r0, sl
 8008a32:	4659      	mov	r1, fp
 8008a34:	461e      	mov	r6, r3
 8008a36:	2c01      	cmp	r4, #1
 8008a38:	dc21      	bgt.n	8008a7e <_strtod_l+0x526>
 8008a3a:	b10b      	cbz	r3, 8008a40 <_strtod_l+0x4e8>
 8008a3c:	4682      	mov	sl, r0
 8008a3e:	468b      	mov	fp, r1
 8008a40:	492a      	ldr	r1, [pc, #168]	@ (8008aec <_strtod_l+0x594>)
 8008a42:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8008a46:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8008a4a:	4652      	mov	r2, sl
 8008a4c:	465b      	mov	r3, fp
 8008a4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008a52:	f7f7 fdd1 	bl	80005f8 <__aeabi_dmul>
 8008a56:	4b26      	ldr	r3, [pc, #152]	@ (8008af0 <_strtod_l+0x598>)
 8008a58:	460a      	mov	r2, r1
 8008a5a:	400b      	ands	r3, r1
 8008a5c:	4925      	ldr	r1, [pc, #148]	@ (8008af4 <_strtod_l+0x59c>)
 8008a5e:	428b      	cmp	r3, r1
 8008a60:	4682      	mov	sl, r0
 8008a62:	d898      	bhi.n	8008996 <_strtod_l+0x43e>
 8008a64:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8008a68:	428b      	cmp	r3, r1
 8008a6a:	bf86      	itte	hi
 8008a6c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8008af8 <_strtod_l+0x5a0>
 8008a70:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 8008a74:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8008a78:	2300      	movs	r3, #0
 8008a7a:	9308      	str	r3, [sp, #32]
 8008a7c:	e076      	b.n	8008b6c <_strtod_l+0x614>
 8008a7e:	07e2      	lsls	r2, r4, #31
 8008a80:	d504      	bpl.n	8008a8c <_strtod_l+0x534>
 8008a82:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a86:	f7f7 fdb7 	bl	80005f8 <__aeabi_dmul>
 8008a8a:	2301      	movs	r3, #1
 8008a8c:	3601      	adds	r6, #1
 8008a8e:	1064      	asrs	r4, r4, #1
 8008a90:	3708      	adds	r7, #8
 8008a92:	e7d0      	b.n	8008a36 <_strtod_l+0x4de>
 8008a94:	d0f0      	beq.n	8008a78 <_strtod_l+0x520>
 8008a96:	4264      	negs	r4, r4
 8008a98:	f014 020f 	ands.w	r2, r4, #15
 8008a9c:	d00a      	beq.n	8008ab4 <_strtod_l+0x55c>
 8008a9e:	4b12      	ldr	r3, [pc, #72]	@ (8008ae8 <_strtod_l+0x590>)
 8008aa0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008aa4:	4650      	mov	r0, sl
 8008aa6:	4659      	mov	r1, fp
 8008aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aac:	f7f7 fece 	bl	800084c <__aeabi_ddiv>
 8008ab0:	4682      	mov	sl, r0
 8008ab2:	468b      	mov	fp, r1
 8008ab4:	1124      	asrs	r4, r4, #4
 8008ab6:	d0df      	beq.n	8008a78 <_strtod_l+0x520>
 8008ab8:	2c1f      	cmp	r4, #31
 8008aba:	dd1f      	ble.n	8008afc <_strtod_l+0x5a4>
 8008abc:	2400      	movs	r4, #0
 8008abe:	46a0      	mov	r8, r4
 8008ac0:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008ac2:	46a1      	mov	r9, r4
 8008ac4:	9a05      	ldr	r2, [sp, #20]
 8008ac6:	2322      	movs	r3, #34	@ 0x22
 8008ac8:	f04f 0a00 	mov.w	sl, #0
 8008acc:	f04f 0b00 	mov.w	fp, #0
 8008ad0:	6013      	str	r3, [r2, #0]
 8008ad2:	e76b      	b.n	80089ac <_strtod_l+0x454>
 8008ad4:	0800ad25 	.word	0x0800ad25
 8008ad8:	0800b008 	.word	0x0800b008
 8008adc:	0800ad1d 	.word	0x0800ad1d
 8008ae0:	0800ad52 	.word	0x0800ad52
 8008ae4:	0800aea6 	.word	0x0800aea6
 8008ae8:	0800af40 	.word	0x0800af40
 8008aec:	0800af18 	.word	0x0800af18
 8008af0:	7ff00000 	.word	0x7ff00000
 8008af4:	7ca00000 	.word	0x7ca00000
 8008af8:	7fefffff 	.word	0x7fefffff
 8008afc:	f014 0310 	ands.w	r3, r4, #16
 8008b00:	bf18      	it	ne
 8008b02:	236a      	movne	r3, #106	@ 0x6a
 8008b04:	4ea9      	ldr	r6, [pc, #676]	@ (8008dac <_strtod_l+0x854>)
 8008b06:	9308      	str	r3, [sp, #32]
 8008b08:	4650      	mov	r0, sl
 8008b0a:	4659      	mov	r1, fp
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	07e7      	lsls	r7, r4, #31
 8008b10:	d504      	bpl.n	8008b1c <_strtod_l+0x5c4>
 8008b12:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008b16:	f7f7 fd6f 	bl	80005f8 <__aeabi_dmul>
 8008b1a:	2301      	movs	r3, #1
 8008b1c:	1064      	asrs	r4, r4, #1
 8008b1e:	f106 0608 	add.w	r6, r6, #8
 8008b22:	d1f4      	bne.n	8008b0e <_strtod_l+0x5b6>
 8008b24:	b10b      	cbz	r3, 8008b2a <_strtod_l+0x5d2>
 8008b26:	4682      	mov	sl, r0
 8008b28:	468b      	mov	fp, r1
 8008b2a:	9b08      	ldr	r3, [sp, #32]
 8008b2c:	b1b3      	cbz	r3, 8008b5c <_strtod_l+0x604>
 8008b2e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8008b32:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	4659      	mov	r1, fp
 8008b3a:	dd0f      	ble.n	8008b5c <_strtod_l+0x604>
 8008b3c:	2b1f      	cmp	r3, #31
 8008b3e:	dd56      	ble.n	8008bee <_strtod_l+0x696>
 8008b40:	2b34      	cmp	r3, #52	@ 0x34
 8008b42:	bfde      	ittt	le
 8008b44:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 8008b48:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8008b4c:	4093      	lslle	r3, r2
 8008b4e:	f04f 0a00 	mov.w	sl, #0
 8008b52:	bfcc      	ite	gt
 8008b54:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8008b58:	ea03 0b01 	andle.w	fp, r3, r1
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	2300      	movs	r3, #0
 8008b60:	4650      	mov	r0, sl
 8008b62:	4659      	mov	r1, fp
 8008b64:	f7f7 ffb0 	bl	8000ac8 <__aeabi_dcmpeq>
 8008b68:	2800      	cmp	r0, #0
 8008b6a:	d1a7      	bne.n	8008abc <_strtod_l+0x564>
 8008b6c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008b6e:	9300      	str	r3, [sp, #0]
 8008b70:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8008b72:	9805      	ldr	r0, [sp, #20]
 8008b74:	462b      	mov	r3, r5
 8008b76:	464a      	mov	r2, r9
 8008b78:	f7ff f8ce 	bl	8007d18 <__s2b>
 8008b7c:	900b      	str	r0, [sp, #44]	@ 0x2c
 8008b7e:	2800      	cmp	r0, #0
 8008b80:	f43f af09 	beq.w	8008996 <_strtod_l+0x43e>
 8008b84:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008b86:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008b88:	2a00      	cmp	r2, #0
 8008b8a:	eba3 0308 	sub.w	r3, r3, r8
 8008b8e:	bfa8      	it	ge
 8008b90:	2300      	movge	r3, #0
 8008b92:	9312      	str	r3, [sp, #72]	@ 0x48
 8008b94:	2400      	movs	r4, #0
 8008b96:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008b9a:	9316      	str	r3, [sp, #88]	@ 0x58
 8008b9c:	46a0      	mov	r8, r4
 8008b9e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008ba0:	9805      	ldr	r0, [sp, #20]
 8008ba2:	6859      	ldr	r1, [r3, #4]
 8008ba4:	f7ff f810 	bl	8007bc8 <_Balloc>
 8008ba8:	4681      	mov	r9, r0
 8008baa:	2800      	cmp	r0, #0
 8008bac:	f43f aef7 	beq.w	800899e <_strtod_l+0x446>
 8008bb0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008bb2:	691a      	ldr	r2, [r3, #16]
 8008bb4:	3202      	adds	r2, #2
 8008bb6:	f103 010c 	add.w	r1, r3, #12
 8008bba:	0092      	lsls	r2, r2, #2
 8008bbc:	300c      	adds	r0, #12
 8008bbe:	f001 f903 	bl	8009dc8 <memcpy>
 8008bc2:	ec4b ab10 	vmov	d0, sl, fp
 8008bc6:	9805      	ldr	r0, [sp, #20]
 8008bc8:	aa1c      	add	r2, sp, #112	@ 0x70
 8008bca:	a91b      	add	r1, sp, #108	@ 0x6c
 8008bcc:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8008bd0:	f7ff fbd6 	bl	8008380 <__d2b>
 8008bd4:	901a      	str	r0, [sp, #104]	@ 0x68
 8008bd6:	2800      	cmp	r0, #0
 8008bd8:	f43f aee1 	beq.w	800899e <_strtod_l+0x446>
 8008bdc:	9805      	ldr	r0, [sp, #20]
 8008bde:	2101      	movs	r1, #1
 8008be0:	f7ff f930 	bl	8007e44 <__i2b>
 8008be4:	4680      	mov	r8, r0
 8008be6:	b948      	cbnz	r0, 8008bfc <_strtod_l+0x6a4>
 8008be8:	f04f 0800 	mov.w	r8, #0
 8008bec:	e6d7      	b.n	800899e <_strtod_l+0x446>
 8008bee:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8008bf6:	ea03 0a0a 	and.w	sl, r3, sl
 8008bfa:	e7af      	b.n	8008b5c <_strtod_l+0x604>
 8008bfc:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8008bfe:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8008c00:	2d00      	cmp	r5, #0
 8008c02:	bfab      	itete	ge
 8008c04:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8008c06:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8008c08:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8008c0a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8008c0c:	bfac      	ite	ge
 8008c0e:	18ef      	addge	r7, r5, r3
 8008c10:	1b5e      	sublt	r6, r3, r5
 8008c12:	9b08      	ldr	r3, [sp, #32]
 8008c14:	1aed      	subs	r5, r5, r3
 8008c16:	4415      	add	r5, r2
 8008c18:	4b65      	ldr	r3, [pc, #404]	@ (8008db0 <_strtod_l+0x858>)
 8008c1a:	3d01      	subs	r5, #1
 8008c1c:	429d      	cmp	r5, r3
 8008c1e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8008c22:	da50      	bge.n	8008cc6 <_strtod_l+0x76e>
 8008c24:	1b5b      	subs	r3, r3, r5
 8008c26:	2b1f      	cmp	r3, #31
 8008c28:	eba2 0203 	sub.w	r2, r2, r3
 8008c2c:	f04f 0101 	mov.w	r1, #1
 8008c30:	dc3d      	bgt.n	8008cae <_strtod_l+0x756>
 8008c32:	fa01 f303 	lsl.w	r3, r1, r3
 8008c36:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008c38:	2300      	movs	r3, #0
 8008c3a:	9310      	str	r3, [sp, #64]	@ 0x40
 8008c3c:	18bd      	adds	r5, r7, r2
 8008c3e:	9b08      	ldr	r3, [sp, #32]
 8008c40:	42af      	cmp	r7, r5
 8008c42:	4416      	add	r6, r2
 8008c44:	441e      	add	r6, r3
 8008c46:	463b      	mov	r3, r7
 8008c48:	bfa8      	it	ge
 8008c4a:	462b      	movge	r3, r5
 8008c4c:	42b3      	cmp	r3, r6
 8008c4e:	bfa8      	it	ge
 8008c50:	4633      	movge	r3, r6
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	bfc2      	ittt	gt
 8008c56:	1aed      	subgt	r5, r5, r3
 8008c58:	1af6      	subgt	r6, r6, r3
 8008c5a:	1aff      	subgt	r7, r7, r3
 8008c5c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	dd16      	ble.n	8008c90 <_strtod_l+0x738>
 8008c62:	4641      	mov	r1, r8
 8008c64:	9805      	ldr	r0, [sp, #20]
 8008c66:	461a      	mov	r2, r3
 8008c68:	f7ff f9a4 	bl	8007fb4 <__pow5mult>
 8008c6c:	4680      	mov	r8, r0
 8008c6e:	2800      	cmp	r0, #0
 8008c70:	d0ba      	beq.n	8008be8 <_strtod_l+0x690>
 8008c72:	4601      	mov	r1, r0
 8008c74:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008c76:	9805      	ldr	r0, [sp, #20]
 8008c78:	f7ff f8fa 	bl	8007e70 <__multiply>
 8008c7c:	900a      	str	r0, [sp, #40]	@ 0x28
 8008c7e:	2800      	cmp	r0, #0
 8008c80:	f43f ae8d 	beq.w	800899e <_strtod_l+0x446>
 8008c84:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008c86:	9805      	ldr	r0, [sp, #20]
 8008c88:	f7fe ffde 	bl	8007c48 <_Bfree>
 8008c8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008c8e:	931a      	str	r3, [sp, #104]	@ 0x68
 8008c90:	2d00      	cmp	r5, #0
 8008c92:	dc1d      	bgt.n	8008cd0 <_strtod_l+0x778>
 8008c94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	dd23      	ble.n	8008ce2 <_strtod_l+0x78a>
 8008c9a:	4649      	mov	r1, r9
 8008c9c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8008c9e:	9805      	ldr	r0, [sp, #20]
 8008ca0:	f7ff f988 	bl	8007fb4 <__pow5mult>
 8008ca4:	4681      	mov	r9, r0
 8008ca6:	b9e0      	cbnz	r0, 8008ce2 <_strtod_l+0x78a>
 8008ca8:	f04f 0900 	mov.w	r9, #0
 8008cac:	e677      	b.n	800899e <_strtod_l+0x446>
 8008cae:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8008cb2:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8008cb6:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8008cba:	35e2      	adds	r5, #226	@ 0xe2
 8008cbc:	fa01 f305 	lsl.w	r3, r1, r5
 8008cc0:	9310      	str	r3, [sp, #64]	@ 0x40
 8008cc2:	9113      	str	r1, [sp, #76]	@ 0x4c
 8008cc4:	e7ba      	b.n	8008c3c <_strtod_l+0x6e4>
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	9310      	str	r3, [sp, #64]	@ 0x40
 8008cca:	2301      	movs	r3, #1
 8008ccc:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008cce:	e7b5      	b.n	8008c3c <_strtod_l+0x6e4>
 8008cd0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008cd2:	9805      	ldr	r0, [sp, #20]
 8008cd4:	462a      	mov	r2, r5
 8008cd6:	f7ff f9c7 	bl	8008068 <__lshift>
 8008cda:	901a      	str	r0, [sp, #104]	@ 0x68
 8008cdc:	2800      	cmp	r0, #0
 8008cde:	d1d9      	bne.n	8008c94 <_strtod_l+0x73c>
 8008ce0:	e65d      	b.n	800899e <_strtod_l+0x446>
 8008ce2:	2e00      	cmp	r6, #0
 8008ce4:	dd07      	ble.n	8008cf6 <_strtod_l+0x79e>
 8008ce6:	4649      	mov	r1, r9
 8008ce8:	9805      	ldr	r0, [sp, #20]
 8008cea:	4632      	mov	r2, r6
 8008cec:	f7ff f9bc 	bl	8008068 <__lshift>
 8008cf0:	4681      	mov	r9, r0
 8008cf2:	2800      	cmp	r0, #0
 8008cf4:	d0d8      	beq.n	8008ca8 <_strtod_l+0x750>
 8008cf6:	2f00      	cmp	r7, #0
 8008cf8:	dd08      	ble.n	8008d0c <_strtod_l+0x7b4>
 8008cfa:	4641      	mov	r1, r8
 8008cfc:	9805      	ldr	r0, [sp, #20]
 8008cfe:	463a      	mov	r2, r7
 8008d00:	f7ff f9b2 	bl	8008068 <__lshift>
 8008d04:	4680      	mov	r8, r0
 8008d06:	2800      	cmp	r0, #0
 8008d08:	f43f ae49 	beq.w	800899e <_strtod_l+0x446>
 8008d0c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008d0e:	9805      	ldr	r0, [sp, #20]
 8008d10:	464a      	mov	r2, r9
 8008d12:	f7ff fa31 	bl	8008178 <__mdiff>
 8008d16:	4604      	mov	r4, r0
 8008d18:	2800      	cmp	r0, #0
 8008d1a:	f43f ae40 	beq.w	800899e <_strtod_l+0x446>
 8008d1e:	68c3      	ldr	r3, [r0, #12]
 8008d20:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008d22:	2300      	movs	r3, #0
 8008d24:	60c3      	str	r3, [r0, #12]
 8008d26:	4641      	mov	r1, r8
 8008d28:	f7ff fa0a 	bl	8008140 <__mcmp>
 8008d2c:	2800      	cmp	r0, #0
 8008d2e:	da45      	bge.n	8008dbc <_strtod_l+0x864>
 8008d30:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008d32:	ea53 030a 	orrs.w	r3, r3, sl
 8008d36:	d16b      	bne.n	8008e10 <_strtod_l+0x8b8>
 8008d38:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d167      	bne.n	8008e10 <_strtod_l+0x8b8>
 8008d40:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008d44:	0d1b      	lsrs	r3, r3, #20
 8008d46:	051b      	lsls	r3, r3, #20
 8008d48:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008d4c:	d960      	bls.n	8008e10 <_strtod_l+0x8b8>
 8008d4e:	6963      	ldr	r3, [r4, #20]
 8008d50:	b913      	cbnz	r3, 8008d58 <_strtod_l+0x800>
 8008d52:	6923      	ldr	r3, [r4, #16]
 8008d54:	2b01      	cmp	r3, #1
 8008d56:	dd5b      	ble.n	8008e10 <_strtod_l+0x8b8>
 8008d58:	4621      	mov	r1, r4
 8008d5a:	2201      	movs	r2, #1
 8008d5c:	9805      	ldr	r0, [sp, #20]
 8008d5e:	f7ff f983 	bl	8008068 <__lshift>
 8008d62:	4641      	mov	r1, r8
 8008d64:	4604      	mov	r4, r0
 8008d66:	f7ff f9eb 	bl	8008140 <__mcmp>
 8008d6a:	2800      	cmp	r0, #0
 8008d6c:	dd50      	ble.n	8008e10 <_strtod_l+0x8b8>
 8008d6e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008d72:	9a08      	ldr	r2, [sp, #32]
 8008d74:	0d1b      	lsrs	r3, r3, #20
 8008d76:	051b      	lsls	r3, r3, #20
 8008d78:	2a00      	cmp	r2, #0
 8008d7a:	d06a      	beq.n	8008e52 <_strtod_l+0x8fa>
 8008d7c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008d80:	d867      	bhi.n	8008e52 <_strtod_l+0x8fa>
 8008d82:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8008d86:	f67f ae9d 	bls.w	8008ac4 <_strtod_l+0x56c>
 8008d8a:	4b0a      	ldr	r3, [pc, #40]	@ (8008db4 <_strtod_l+0x85c>)
 8008d8c:	4650      	mov	r0, sl
 8008d8e:	4659      	mov	r1, fp
 8008d90:	2200      	movs	r2, #0
 8008d92:	f7f7 fc31 	bl	80005f8 <__aeabi_dmul>
 8008d96:	4b08      	ldr	r3, [pc, #32]	@ (8008db8 <_strtod_l+0x860>)
 8008d98:	400b      	ands	r3, r1
 8008d9a:	4682      	mov	sl, r0
 8008d9c:	468b      	mov	fp, r1
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	f47f ae08 	bne.w	80089b4 <_strtod_l+0x45c>
 8008da4:	9a05      	ldr	r2, [sp, #20]
 8008da6:	2322      	movs	r3, #34	@ 0x22
 8008da8:	6013      	str	r3, [r2, #0]
 8008daa:	e603      	b.n	80089b4 <_strtod_l+0x45c>
 8008dac:	0800b030 	.word	0x0800b030
 8008db0:	fffffc02 	.word	0xfffffc02
 8008db4:	39500000 	.word	0x39500000
 8008db8:	7ff00000 	.word	0x7ff00000
 8008dbc:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8008dc0:	d165      	bne.n	8008e8e <_strtod_l+0x936>
 8008dc2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008dc4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008dc8:	b35a      	cbz	r2, 8008e22 <_strtod_l+0x8ca>
 8008dca:	4a9f      	ldr	r2, [pc, #636]	@ (8009048 <_strtod_l+0xaf0>)
 8008dcc:	4293      	cmp	r3, r2
 8008dce:	d12b      	bne.n	8008e28 <_strtod_l+0x8d0>
 8008dd0:	9b08      	ldr	r3, [sp, #32]
 8008dd2:	4651      	mov	r1, sl
 8008dd4:	b303      	cbz	r3, 8008e18 <_strtod_l+0x8c0>
 8008dd6:	4b9d      	ldr	r3, [pc, #628]	@ (800904c <_strtod_l+0xaf4>)
 8008dd8:	465a      	mov	r2, fp
 8008dda:	4013      	ands	r3, r2
 8008ddc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8008de0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008de4:	d81b      	bhi.n	8008e1e <_strtod_l+0x8c6>
 8008de6:	0d1b      	lsrs	r3, r3, #20
 8008de8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008dec:	fa02 f303 	lsl.w	r3, r2, r3
 8008df0:	4299      	cmp	r1, r3
 8008df2:	d119      	bne.n	8008e28 <_strtod_l+0x8d0>
 8008df4:	4b96      	ldr	r3, [pc, #600]	@ (8009050 <_strtod_l+0xaf8>)
 8008df6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008df8:	429a      	cmp	r2, r3
 8008dfa:	d102      	bne.n	8008e02 <_strtod_l+0x8aa>
 8008dfc:	3101      	adds	r1, #1
 8008dfe:	f43f adce 	beq.w	800899e <_strtod_l+0x446>
 8008e02:	4b92      	ldr	r3, [pc, #584]	@ (800904c <_strtod_l+0xaf4>)
 8008e04:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008e06:	401a      	ands	r2, r3
 8008e08:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8008e0c:	f04f 0a00 	mov.w	sl, #0
 8008e10:	9b08      	ldr	r3, [sp, #32]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d1b9      	bne.n	8008d8a <_strtod_l+0x832>
 8008e16:	e5cd      	b.n	80089b4 <_strtod_l+0x45c>
 8008e18:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008e1c:	e7e8      	b.n	8008df0 <_strtod_l+0x898>
 8008e1e:	4613      	mov	r3, r2
 8008e20:	e7e6      	b.n	8008df0 <_strtod_l+0x898>
 8008e22:	ea53 030a 	orrs.w	r3, r3, sl
 8008e26:	d0a2      	beq.n	8008d6e <_strtod_l+0x816>
 8008e28:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008e2a:	b1db      	cbz	r3, 8008e64 <_strtod_l+0x90c>
 8008e2c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008e2e:	4213      	tst	r3, r2
 8008e30:	d0ee      	beq.n	8008e10 <_strtod_l+0x8b8>
 8008e32:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008e34:	9a08      	ldr	r2, [sp, #32]
 8008e36:	4650      	mov	r0, sl
 8008e38:	4659      	mov	r1, fp
 8008e3a:	b1bb      	cbz	r3, 8008e6c <_strtod_l+0x914>
 8008e3c:	f7ff fb6e 	bl	800851c <sulp>
 8008e40:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008e44:	ec53 2b10 	vmov	r2, r3, d0
 8008e48:	f7f7 fa20 	bl	800028c <__adddf3>
 8008e4c:	4682      	mov	sl, r0
 8008e4e:	468b      	mov	fp, r1
 8008e50:	e7de      	b.n	8008e10 <_strtod_l+0x8b8>
 8008e52:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8008e56:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008e5a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008e5e:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8008e62:	e7d5      	b.n	8008e10 <_strtod_l+0x8b8>
 8008e64:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008e66:	ea13 0f0a 	tst.w	r3, sl
 8008e6a:	e7e1      	b.n	8008e30 <_strtod_l+0x8d8>
 8008e6c:	f7ff fb56 	bl	800851c <sulp>
 8008e70:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008e74:	ec53 2b10 	vmov	r2, r3, d0
 8008e78:	f7f7 fa06 	bl	8000288 <__aeabi_dsub>
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	2300      	movs	r3, #0
 8008e80:	4682      	mov	sl, r0
 8008e82:	468b      	mov	fp, r1
 8008e84:	f7f7 fe20 	bl	8000ac8 <__aeabi_dcmpeq>
 8008e88:	2800      	cmp	r0, #0
 8008e8a:	d0c1      	beq.n	8008e10 <_strtod_l+0x8b8>
 8008e8c:	e61a      	b.n	8008ac4 <_strtod_l+0x56c>
 8008e8e:	4641      	mov	r1, r8
 8008e90:	4620      	mov	r0, r4
 8008e92:	f7ff facd 	bl	8008430 <__ratio>
 8008e96:	ec57 6b10 	vmov	r6, r7, d0
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008ea0:	4630      	mov	r0, r6
 8008ea2:	4639      	mov	r1, r7
 8008ea4:	f7f7 fe24 	bl	8000af0 <__aeabi_dcmple>
 8008ea8:	2800      	cmp	r0, #0
 8008eaa:	d06f      	beq.n	8008f8c <_strtod_l+0xa34>
 8008eac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d17a      	bne.n	8008fa8 <_strtod_l+0xa50>
 8008eb2:	f1ba 0f00 	cmp.w	sl, #0
 8008eb6:	d158      	bne.n	8008f6a <_strtod_l+0xa12>
 8008eb8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008eba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d15a      	bne.n	8008f78 <_strtod_l+0xa20>
 8008ec2:	4b64      	ldr	r3, [pc, #400]	@ (8009054 <_strtod_l+0xafc>)
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	4630      	mov	r0, r6
 8008ec8:	4639      	mov	r1, r7
 8008eca:	f7f7 fe07 	bl	8000adc <__aeabi_dcmplt>
 8008ece:	2800      	cmp	r0, #0
 8008ed0:	d159      	bne.n	8008f86 <_strtod_l+0xa2e>
 8008ed2:	4630      	mov	r0, r6
 8008ed4:	4639      	mov	r1, r7
 8008ed6:	4b60      	ldr	r3, [pc, #384]	@ (8009058 <_strtod_l+0xb00>)
 8008ed8:	2200      	movs	r2, #0
 8008eda:	f7f7 fb8d 	bl	80005f8 <__aeabi_dmul>
 8008ede:	4606      	mov	r6, r0
 8008ee0:	460f      	mov	r7, r1
 8008ee2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8008ee6:	9606      	str	r6, [sp, #24]
 8008ee8:	9307      	str	r3, [sp, #28]
 8008eea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008eee:	4d57      	ldr	r5, [pc, #348]	@ (800904c <_strtod_l+0xaf4>)
 8008ef0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008ef4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008ef6:	401d      	ands	r5, r3
 8008ef8:	4b58      	ldr	r3, [pc, #352]	@ (800905c <_strtod_l+0xb04>)
 8008efa:	429d      	cmp	r5, r3
 8008efc:	f040 80b2 	bne.w	8009064 <_strtod_l+0xb0c>
 8008f00:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008f02:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8008f06:	ec4b ab10 	vmov	d0, sl, fp
 8008f0a:	f7ff f9c9 	bl	80082a0 <__ulp>
 8008f0e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008f12:	ec51 0b10 	vmov	r0, r1, d0
 8008f16:	f7f7 fb6f 	bl	80005f8 <__aeabi_dmul>
 8008f1a:	4652      	mov	r2, sl
 8008f1c:	465b      	mov	r3, fp
 8008f1e:	f7f7 f9b5 	bl	800028c <__adddf3>
 8008f22:	460b      	mov	r3, r1
 8008f24:	4949      	ldr	r1, [pc, #292]	@ (800904c <_strtod_l+0xaf4>)
 8008f26:	4a4e      	ldr	r2, [pc, #312]	@ (8009060 <_strtod_l+0xb08>)
 8008f28:	4019      	ands	r1, r3
 8008f2a:	4291      	cmp	r1, r2
 8008f2c:	4682      	mov	sl, r0
 8008f2e:	d942      	bls.n	8008fb6 <_strtod_l+0xa5e>
 8008f30:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008f32:	4b47      	ldr	r3, [pc, #284]	@ (8009050 <_strtod_l+0xaf8>)
 8008f34:	429a      	cmp	r2, r3
 8008f36:	d103      	bne.n	8008f40 <_strtod_l+0x9e8>
 8008f38:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008f3a:	3301      	adds	r3, #1
 8008f3c:	f43f ad2f 	beq.w	800899e <_strtod_l+0x446>
 8008f40:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8009050 <_strtod_l+0xaf8>
 8008f44:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8008f48:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008f4a:	9805      	ldr	r0, [sp, #20]
 8008f4c:	f7fe fe7c 	bl	8007c48 <_Bfree>
 8008f50:	9805      	ldr	r0, [sp, #20]
 8008f52:	4649      	mov	r1, r9
 8008f54:	f7fe fe78 	bl	8007c48 <_Bfree>
 8008f58:	9805      	ldr	r0, [sp, #20]
 8008f5a:	4641      	mov	r1, r8
 8008f5c:	f7fe fe74 	bl	8007c48 <_Bfree>
 8008f60:	9805      	ldr	r0, [sp, #20]
 8008f62:	4621      	mov	r1, r4
 8008f64:	f7fe fe70 	bl	8007c48 <_Bfree>
 8008f68:	e619      	b.n	8008b9e <_strtod_l+0x646>
 8008f6a:	f1ba 0f01 	cmp.w	sl, #1
 8008f6e:	d103      	bne.n	8008f78 <_strtod_l+0xa20>
 8008f70:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	f43f ada6 	beq.w	8008ac4 <_strtod_l+0x56c>
 8008f78:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8009028 <_strtod_l+0xad0>
 8008f7c:	4f35      	ldr	r7, [pc, #212]	@ (8009054 <_strtod_l+0xafc>)
 8008f7e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008f82:	2600      	movs	r6, #0
 8008f84:	e7b1      	b.n	8008eea <_strtod_l+0x992>
 8008f86:	4f34      	ldr	r7, [pc, #208]	@ (8009058 <_strtod_l+0xb00>)
 8008f88:	2600      	movs	r6, #0
 8008f8a:	e7aa      	b.n	8008ee2 <_strtod_l+0x98a>
 8008f8c:	4b32      	ldr	r3, [pc, #200]	@ (8009058 <_strtod_l+0xb00>)
 8008f8e:	4630      	mov	r0, r6
 8008f90:	4639      	mov	r1, r7
 8008f92:	2200      	movs	r2, #0
 8008f94:	f7f7 fb30 	bl	80005f8 <__aeabi_dmul>
 8008f98:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008f9a:	4606      	mov	r6, r0
 8008f9c:	460f      	mov	r7, r1
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d09f      	beq.n	8008ee2 <_strtod_l+0x98a>
 8008fa2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008fa6:	e7a0      	b.n	8008eea <_strtod_l+0x992>
 8008fa8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8009030 <_strtod_l+0xad8>
 8008fac:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008fb0:	ec57 6b17 	vmov	r6, r7, d7
 8008fb4:	e799      	b.n	8008eea <_strtod_l+0x992>
 8008fb6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8008fba:	9b08      	ldr	r3, [sp, #32]
 8008fbc:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d1c1      	bne.n	8008f48 <_strtod_l+0x9f0>
 8008fc4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008fc8:	0d1b      	lsrs	r3, r3, #20
 8008fca:	051b      	lsls	r3, r3, #20
 8008fcc:	429d      	cmp	r5, r3
 8008fce:	d1bb      	bne.n	8008f48 <_strtod_l+0x9f0>
 8008fd0:	4630      	mov	r0, r6
 8008fd2:	4639      	mov	r1, r7
 8008fd4:	f7f7 fe70 	bl	8000cb8 <__aeabi_d2lz>
 8008fd8:	f7f7 fae0 	bl	800059c <__aeabi_l2d>
 8008fdc:	4602      	mov	r2, r0
 8008fde:	460b      	mov	r3, r1
 8008fe0:	4630      	mov	r0, r6
 8008fe2:	4639      	mov	r1, r7
 8008fe4:	f7f7 f950 	bl	8000288 <__aeabi_dsub>
 8008fe8:	460b      	mov	r3, r1
 8008fea:	4602      	mov	r2, r0
 8008fec:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008ff0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8008ff4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008ff6:	ea46 060a 	orr.w	r6, r6, sl
 8008ffa:	431e      	orrs	r6, r3
 8008ffc:	d06f      	beq.n	80090de <_strtod_l+0xb86>
 8008ffe:	a30e      	add	r3, pc, #56	@ (adr r3, 8009038 <_strtod_l+0xae0>)
 8009000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009004:	f7f7 fd6a 	bl	8000adc <__aeabi_dcmplt>
 8009008:	2800      	cmp	r0, #0
 800900a:	f47f acd3 	bne.w	80089b4 <_strtod_l+0x45c>
 800900e:	a30c      	add	r3, pc, #48	@ (adr r3, 8009040 <_strtod_l+0xae8>)
 8009010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009014:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009018:	f7f7 fd7e 	bl	8000b18 <__aeabi_dcmpgt>
 800901c:	2800      	cmp	r0, #0
 800901e:	d093      	beq.n	8008f48 <_strtod_l+0x9f0>
 8009020:	e4c8      	b.n	80089b4 <_strtod_l+0x45c>
 8009022:	bf00      	nop
 8009024:	f3af 8000 	nop.w
 8009028:	00000000 	.word	0x00000000
 800902c:	bff00000 	.word	0xbff00000
 8009030:	00000000 	.word	0x00000000
 8009034:	3ff00000 	.word	0x3ff00000
 8009038:	94a03595 	.word	0x94a03595
 800903c:	3fdfffff 	.word	0x3fdfffff
 8009040:	35afe535 	.word	0x35afe535
 8009044:	3fe00000 	.word	0x3fe00000
 8009048:	000fffff 	.word	0x000fffff
 800904c:	7ff00000 	.word	0x7ff00000
 8009050:	7fefffff 	.word	0x7fefffff
 8009054:	3ff00000 	.word	0x3ff00000
 8009058:	3fe00000 	.word	0x3fe00000
 800905c:	7fe00000 	.word	0x7fe00000
 8009060:	7c9fffff 	.word	0x7c9fffff
 8009064:	9b08      	ldr	r3, [sp, #32]
 8009066:	b323      	cbz	r3, 80090b2 <_strtod_l+0xb5a>
 8009068:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800906c:	d821      	bhi.n	80090b2 <_strtod_l+0xb5a>
 800906e:	a328      	add	r3, pc, #160	@ (adr r3, 8009110 <_strtod_l+0xbb8>)
 8009070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009074:	4630      	mov	r0, r6
 8009076:	4639      	mov	r1, r7
 8009078:	f7f7 fd3a 	bl	8000af0 <__aeabi_dcmple>
 800907c:	b1a0      	cbz	r0, 80090a8 <_strtod_l+0xb50>
 800907e:	4639      	mov	r1, r7
 8009080:	4630      	mov	r0, r6
 8009082:	f7f7 fd91 	bl	8000ba8 <__aeabi_d2uiz>
 8009086:	2801      	cmp	r0, #1
 8009088:	bf38      	it	cc
 800908a:	2001      	movcc	r0, #1
 800908c:	f7f7 fa3a 	bl	8000504 <__aeabi_ui2d>
 8009090:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009092:	4606      	mov	r6, r0
 8009094:	460f      	mov	r7, r1
 8009096:	b9fb      	cbnz	r3, 80090d8 <_strtod_l+0xb80>
 8009098:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800909c:	9014      	str	r0, [sp, #80]	@ 0x50
 800909e:	9315      	str	r3, [sp, #84]	@ 0x54
 80090a0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80090a4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80090a8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80090aa:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80090ae:	1b5b      	subs	r3, r3, r5
 80090b0:	9311      	str	r3, [sp, #68]	@ 0x44
 80090b2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80090b6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80090ba:	f7ff f8f1 	bl	80082a0 <__ulp>
 80090be:	4650      	mov	r0, sl
 80090c0:	ec53 2b10 	vmov	r2, r3, d0
 80090c4:	4659      	mov	r1, fp
 80090c6:	f7f7 fa97 	bl	80005f8 <__aeabi_dmul>
 80090ca:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80090ce:	f7f7 f8dd 	bl	800028c <__adddf3>
 80090d2:	4682      	mov	sl, r0
 80090d4:	468b      	mov	fp, r1
 80090d6:	e770      	b.n	8008fba <_strtod_l+0xa62>
 80090d8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80090dc:	e7e0      	b.n	80090a0 <_strtod_l+0xb48>
 80090de:	a30e      	add	r3, pc, #56	@ (adr r3, 8009118 <_strtod_l+0xbc0>)
 80090e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090e4:	f7f7 fcfa 	bl	8000adc <__aeabi_dcmplt>
 80090e8:	e798      	b.n	800901c <_strtod_l+0xac4>
 80090ea:	2300      	movs	r3, #0
 80090ec:	930e      	str	r3, [sp, #56]	@ 0x38
 80090ee:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80090f0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80090f2:	6013      	str	r3, [r2, #0]
 80090f4:	f7ff ba6d 	b.w	80085d2 <_strtod_l+0x7a>
 80090f8:	2a65      	cmp	r2, #101	@ 0x65
 80090fa:	f43f ab68 	beq.w	80087ce <_strtod_l+0x276>
 80090fe:	2a45      	cmp	r2, #69	@ 0x45
 8009100:	f43f ab65 	beq.w	80087ce <_strtod_l+0x276>
 8009104:	2301      	movs	r3, #1
 8009106:	f7ff bba0 	b.w	800884a <_strtod_l+0x2f2>
 800910a:	bf00      	nop
 800910c:	f3af 8000 	nop.w
 8009110:	ffc00000 	.word	0xffc00000
 8009114:	41dfffff 	.word	0x41dfffff
 8009118:	94a03595 	.word	0x94a03595
 800911c:	3fcfffff 	.word	0x3fcfffff

08009120 <_strtod_r>:
 8009120:	4b01      	ldr	r3, [pc, #4]	@ (8009128 <_strtod_r+0x8>)
 8009122:	f7ff ba19 	b.w	8008558 <_strtod_l>
 8009126:	bf00      	nop
 8009128:	20000224 	.word	0x20000224

0800912c <_strtol_l.isra.0>:
 800912c:	2b24      	cmp	r3, #36	@ 0x24
 800912e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009132:	4686      	mov	lr, r0
 8009134:	4690      	mov	r8, r2
 8009136:	d801      	bhi.n	800913c <_strtol_l.isra.0+0x10>
 8009138:	2b01      	cmp	r3, #1
 800913a:	d106      	bne.n	800914a <_strtol_l.isra.0+0x1e>
 800913c:	f7fd fdb6 	bl	8006cac <__errno>
 8009140:	2316      	movs	r3, #22
 8009142:	6003      	str	r3, [r0, #0]
 8009144:	2000      	movs	r0, #0
 8009146:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800914a:	4834      	ldr	r0, [pc, #208]	@ (800921c <_strtol_l.isra.0+0xf0>)
 800914c:	460d      	mov	r5, r1
 800914e:	462a      	mov	r2, r5
 8009150:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009154:	5d06      	ldrb	r6, [r0, r4]
 8009156:	f016 0608 	ands.w	r6, r6, #8
 800915a:	d1f8      	bne.n	800914e <_strtol_l.isra.0+0x22>
 800915c:	2c2d      	cmp	r4, #45	@ 0x2d
 800915e:	d110      	bne.n	8009182 <_strtol_l.isra.0+0x56>
 8009160:	782c      	ldrb	r4, [r5, #0]
 8009162:	2601      	movs	r6, #1
 8009164:	1c95      	adds	r5, r2, #2
 8009166:	f033 0210 	bics.w	r2, r3, #16
 800916a:	d115      	bne.n	8009198 <_strtol_l.isra.0+0x6c>
 800916c:	2c30      	cmp	r4, #48	@ 0x30
 800916e:	d10d      	bne.n	800918c <_strtol_l.isra.0+0x60>
 8009170:	782a      	ldrb	r2, [r5, #0]
 8009172:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009176:	2a58      	cmp	r2, #88	@ 0x58
 8009178:	d108      	bne.n	800918c <_strtol_l.isra.0+0x60>
 800917a:	786c      	ldrb	r4, [r5, #1]
 800917c:	3502      	adds	r5, #2
 800917e:	2310      	movs	r3, #16
 8009180:	e00a      	b.n	8009198 <_strtol_l.isra.0+0x6c>
 8009182:	2c2b      	cmp	r4, #43	@ 0x2b
 8009184:	bf04      	itt	eq
 8009186:	782c      	ldrbeq	r4, [r5, #0]
 8009188:	1c95      	addeq	r5, r2, #2
 800918a:	e7ec      	b.n	8009166 <_strtol_l.isra.0+0x3a>
 800918c:	2b00      	cmp	r3, #0
 800918e:	d1f6      	bne.n	800917e <_strtol_l.isra.0+0x52>
 8009190:	2c30      	cmp	r4, #48	@ 0x30
 8009192:	bf14      	ite	ne
 8009194:	230a      	movne	r3, #10
 8009196:	2308      	moveq	r3, #8
 8009198:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800919c:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 80091a0:	2200      	movs	r2, #0
 80091a2:	fbbc f9f3 	udiv	r9, ip, r3
 80091a6:	4610      	mov	r0, r2
 80091a8:	fb03 ca19 	mls	sl, r3, r9, ip
 80091ac:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80091b0:	2f09      	cmp	r7, #9
 80091b2:	d80f      	bhi.n	80091d4 <_strtol_l.isra.0+0xa8>
 80091b4:	463c      	mov	r4, r7
 80091b6:	42a3      	cmp	r3, r4
 80091b8:	dd1b      	ble.n	80091f2 <_strtol_l.isra.0+0xc6>
 80091ba:	1c57      	adds	r7, r2, #1
 80091bc:	d007      	beq.n	80091ce <_strtol_l.isra.0+0xa2>
 80091be:	4581      	cmp	r9, r0
 80091c0:	d314      	bcc.n	80091ec <_strtol_l.isra.0+0xc0>
 80091c2:	d101      	bne.n	80091c8 <_strtol_l.isra.0+0x9c>
 80091c4:	45a2      	cmp	sl, r4
 80091c6:	db11      	blt.n	80091ec <_strtol_l.isra.0+0xc0>
 80091c8:	fb00 4003 	mla	r0, r0, r3, r4
 80091cc:	2201      	movs	r2, #1
 80091ce:	f815 4b01 	ldrb.w	r4, [r5], #1
 80091d2:	e7eb      	b.n	80091ac <_strtol_l.isra.0+0x80>
 80091d4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80091d8:	2f19      	cmp	r7, #25
 80091da:	d801      	bhi.n	80091e0 <_strtol_l.isra.0+0xb4>
 80091dc:	3c37      	subs	r4, #55	@ 0x37
 80091de:	e7ea      	b.n	80091b6 <_strtol_l.isra.0+0x8a>
 80091e0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80091e4:	2f19      	cmp	r7, #25
 80091e6:	d804      	bhi.n	80091f2 <_strtol_l.isra.0+0xc6>
 80091e8:	3c57      	subs	r4, #87	@ 0x57
 80091ea:	e7e4      	b.n	80091b6 <_strtol_l.isra.0+0x8a>
 80091ec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80091f0:	e7ed      	b.n	80091ce <_strtol_l.isra.0+0xa2>
 80091f2:	1c53      	adds	r3, r2, #1
 80091f4:	d108      	bne.n	8009208 <_strtol_l.isra.0+0xdc>
 80091f6:	2322      	movs	r3, #34	@ 0x22
 80091f8:	f8ce 3000 	str.w	r3, [lr]
 80091fc:	4660      	mov	r0, ip
 80091fe:	f1b8 0f00 	cmp.w	r8, #0
 8009202:	d0a0      	beq.n	8009146 <_strtol_l.isra.0+0x1a>
 8009204:	1e69      	subs	r1, r5, #1
 8009206:	e006      	b.n	8009216 <_strtol_l.isra.0+0xea>
 8009208:	b106      	cbz	r6, 800920c <_strtol_l.isra.0+0xe0>
 800920a:	4240      	negs	r0, r0
 800920c:	f1b8 0f00 	cmp.w	r8, #0
 8009210:	d099      	beq.n	8009146 <_strtol_l.isra.0+0x1a>
 8009212:	2a00      	cmp	r2, #0
 8009214:	d1f6      	bne.n	8009204 <_strtol_l.isra.0+0xd8>
 8009216:	f8c8 1000 	str.w	r1, [r8]
 800921a:	e794      	b.n	8009146 <_strtol_l.isra.0+0x1a>
 800921c:	0800b059 	.word	0x0800b059

08009220 <_strtol_r>:
 8009220:	f7ff bf84 	b.w	800912c <_strtol_l.isra.0>

08009224 <__ssputs_r>:
 8009224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009228:	688e      	ldr	r6, [r1, #8]
 800922a:	461f      	mov	r7, r3
 800922c:	42be      	cmp	r6, r7
 800922e:	680b      	ldr	r3, [r1, #0]
 8009230:	4682      	mov	sl, r0
 8009232:	460c      	mov	r4, r1
 8009234:	4690      	mov	r8, r2
 8009236:	d82d      	bhi.n	8009294 <__ssputs_r+0x70>
 8009238:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800923c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009240:	d026      	beq.n	8009290 <__ssputs_r+0x6c>
 8009242:	6965      	ldr	r5, [r4, #20]
 8009244:	6909      	ldr	r1, [r1, #16]
 8009246:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800924a:	eba3 0901 	sub.w	r9, r3, r1
 800924e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009252:	1c7b      	adds	r3, r7, #1
 8009254:	444b      	add	r3, r9
 8009256:	106d      	asrs	r5, r5, #1
 8009258:	429d      	cmp	r5, r3
 800925a:	bf38      	it	cc
 800925c:	461d      	movcc	r5, r3
 800925e:	0553      	lsls	r3, r2, #21
 8009260:	d527      	bpl.n	80092b2 <__ssputs_r+0x8e>
 8009262:	4629      	mov	r1, r5
 8009264:	f7fe fc24 	bl	8007ab0 <_malloc_r>
 8009268:	4606      	mov	r6, r0
 800926a:	b360      	cbz	r0, 80092c6 <__ssputs_r+0xa2>
 800926c:	6921      	ldr	r1, [r4, #16]
 800926e:	464a      	mov	r2, r9
 8009270:	f000 fdaa 	bl	8009dc8 <memcpy>
 8009274:	89a3      	ldrh	r3, [r4, #12]
 8009276:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800927a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800927e:	81a3      	strh	r3, [r4, #12]
 8009280:	6126      	str	r6, [r4, #16]
 8009282:	6165      	str	r5, [r4, #20]
 8009284:	444e      	add	r6, r9
 8009286:	eba5 0509 	sub.w	r5, r5, r9
 800928a:	6026      	str	r6, [r4, #0]
 800928c:	60a5      	str	r5, [r4, #8]
 800928e:	463e      	mov	r6, r7
 8009290:	42be      	cmp	r6, r7
 8009292:	d900      	bls.n	8009296 <__ssputs_r+0x72>
 8009294:	463e      	mov	r6, r7
 8009296:	6820      	ldr	r0, [r4, #0]
 8009298:	4632      	mov	r2, r6
 800929a:	4641      	mov	r1, r8
 800929c:	f000 fd57 	bl	8009d4e <memmove>
 80092a0:	68a3      	ldr	r3, [r4, #8]
 80092a2:	1b9b      	subs	r3, r3, r6
 80092a4:	60a3      	str	r3, [r4, #8]
 80092a6:	6823      	ldr	r3, [r4, #0]
 80092a8:	4433      	add	r3, r6
 80092aa:	6023      	str	r3, [r4, #0]
 80092ac:	2000      	movs	r0, #0
 80092ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092b2:	462a      	mov	r2, r5
 80092b4:	f001 f91d 	bl	800a4f2 <_realloc_r>
 80092b8:	4606      	mov	r6, r0
 80092ba:	2800      	cmp	r0, #0
 80092bc:	d1e0      	bne.n	8009280 <__ssputs_r+0x5c>
 80092be:	6921      	ldr	r1, [r4, #16]
 80092c0:	4650      	mov	r0, sl
 80092c2:	f7fe fb81 	bl	80079c8 <_free_r>
 80092c6:	230c      	movs	r3, #12
 80092c8:	f8ca 3000 	str.w	r3, [sl]
 80092cc:	89a3      	ldrh	r3, [r4, #12]
 80092ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80092d2:	81a3      	strh	r3, [r4, #12]
 80092d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80092d8:	e7e9      	b.n	80092ae <__ssputs_r+0x8a>
	...

080092dc <_svfiprintf_r>:
 80092dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092e0:	4698      	mov	r8, r3
 80092e2:	898b      	ldrh	r3, [r1, #12]
 80092e4:	061b      	lsls	r3, r3, #24
 80092e6:	b09d      	sub	sp, #116	@ 0x74
 80092e8:	4607      	mov	r7, r0
 80092ea:	460d      	mov	r5, r1
 80092ec:	4614      	mov	r4, r2
 80092ee:	d510      	bpl.n	8009312 <_svfiprintf_r+0x36>
 80092f0:	690b      	ldr	r3, [r1, #16]
 80092f2:	b973      	cbnz	r3, 8009312 <_svfiprintf_r+0x36>
 80092f4:	2140      	movs	r1, #64	@ 0x40
 80092f6:	f7fe fbdb 	bl	8007ab0 <_malloc_r>
 80092fa:	6028      	str	r0, [r5, #0]
 80092fc:	6128      	str	r0, [r5, #16]
 80092fe:	b930      	cbnz	r0, 800930e <_svfiprintf_r+0x32>
 8009300:	230c      	movs	r3, #12
 8009302:	603b      	str	r3, [r7, #0]
 8009304:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009308:	b01d      	add	sp, #116	@ 0x74
 800930a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800930e:	2340      	movs	r3, #64	@ 0x40
 8009310:	616b      	str	r3, [r5, #20]
 8009312:	2300      	movs	r3, #0
 8009314:	9309      	str	r3, [sp, #36]	@ 0x24
 8009316:	2320      	movs	r3, #32
 8009318:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800931c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009320:	2330      	movs	r3, #48	@ 0x30
 8009322:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80094c0 <_svfiprintf_r+0x1e4>
 8009326:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800932a:	f04f 0901 	mov.w	r9, #1
 800932e:	4623      	mov	r3, r4
 8009330:	469a      	mov	sl, r3
 8009332:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009336:	b10a      	cbz	r2, 800933c <_svfiprintf_r+0x60>
 8009338:	2a25      	cmp	r2, #37	@ 0x25
 800933a:	d1f9      	bne.n	8009330 <_svfiprintf_r+0x54>
 800933c:	ebba 0b04 	subs.w	fp, sl, r4
 8009340:	d00b      	beq.n	800935a <_svfiprintf_r+0x7e>
 8009342:	465b      	mov	r3, fp
 8009344:	4622      	mov	r2, r4
 8009346:	4629      	mov	r1, r5
 8009348:	4638      	mov	r0, r7
 800934a:	f7ff ff6b 	bl	8009224 <__ssputs_r>
 800934e:	3001      	adds	r0, #1
 8009350:	f000 80a7 	beq.w	80094a2 <_svfiprintf_r+0x1c6>
 8009354:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009356:	445a      	add	r2, fp
 8009358:	9209      	str	r2, [sp, #36]	@ 0x24
 800935a:	f89a 3000 	ldrb.w	r3, [sl]
 800935e:	2b00      	cmp	r3, #0
 8009360:	f000 809f 	beq.w	80094a2 <_svfiprintf_r+0x1c6>
 8009364:	2300      	movs	r3, #0
 8009366:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800936a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800936e:	f10a 0a01 	add.w	sl, sl, #1
 8009372:	9304      	str	r3, [sp, #16]
 8009374:	9307      	str	r3, [sp, #28]
 8009376:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800937a:	931a      	str	r3, [sp, #104]	@ 0x68
 800937c:	4654      	mov	r4, sl
 800937e:	2205      	movs	r2, #5
 8009380:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009384:	484e      	ldr	r0, [pc, #312]	@ (80094c0 <_svfiprintf_r+0x1e4>)
 8009386:	f7f6 ff23 	bl	80001d0 <memchr>
 800938a:	9a04      	ldr	r2, [sp, #16]
 800938c:	b9d8      	cbnz	r0, 80093c6 <_svfiprintf_r+0xea>
 800938e:	06d0      	lsls	r0, r2, #27
 8009390:	bf44      	itt	mi
 8009392:	2320      	movmi	r3, #32
 8009394:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009398:	0711      	lsls	r1, r2, #28
 800939a:	bf44      	itt	mi
 800939c:	232b      	movmi	r3, #43	@ 0x2b
 800939e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80093a2:	f89a 3000 	ldrb.w	r3, [sl]
 80093a6:	2b2a      	cmp	r3, #42	@ 0x2a
 80093a8:	d015      	beq.n	80093d6 <_svfiprintf_r+0xfa>
 80093aa:	9a07      	ldr	r2, [sp, #28]
 80093ac:	4654      	mov	r4, sl
 80093ae:	2000      	movs	r0, #0
 80093b0:	f04f 0c0a 	mov.w	ip, #10
 80093b4:	4621      	mov	r1, r4
 80093b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80093ba:	3b30      	subs	r3, #48	@ 0x30
 80093bc:	2b09      	cmp	r3, #9
 80093be:	d94b      	bls.n	8009458 <_svfiprintf_r+0x17c>
 80093c0:	b1b0      	cbz	r0, 80093f0 <_svfiprintf_r+0x114>
 80093c2:	9207      	str	r2, [sp, #28]
 80093c4:	e014      	b.n	80093f0 <_svfiprintf_r+0x114>
 80093c6:	eba0 0308 	sub.w	r3, r0, r8
 80093ca:	fa09 f303 	lsl.w	r3, r9, r3
 80093ce:	4313      	orrs	r3, r2
 80093d0:	9304      	str	r3, [sp, #16]
 80093d2:	46a2      	mov	sl, r4
 80093d4:	e7d2      	b.n	800937c <_svfiprintf_r+0xa0>
 80093d6:	9b03      	ldr	r3, [sp, #12]
 80093d8:	1d19      	adds	r1, r3, #4
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	9103      	str	r1, [sp, #12]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	bfbb      	ittet	lt
 80093e2:	425b      	neglt	r3, r3
 80093e4:	f042 0202 	orrlt.w	r2, r2, #2
 80093e8:	9307      	strge	r3, [sp, #28]
 80093ea:	9307      	strlt	r3, [sp, #28]
 80093ec:	bfb8      	it	lt
 80093ee:	9204      	strlt	r2, [sp, #16]
 80093f0:	7823      	ldrb	r3, [r4, #0]
 80093f2:	2b2e      	cmp	r3, #46	@ 0x2e
 80093f4:	d10a      	bne.n	800940c <_svfiprintf_r+0x130>
 80093f6:	7863      	ldrb	r3, [r4, #1]
 80093f8:	2b2a      	cmp	r3, #42	@ 0x2a
 80093fa:	d132      	bne.n	8009462 <_svfiprintf_r+0x186>
 80093fc:	9b03      	ldr	r3, [sp, #12]
 80093fe:	1d1a      	adds	r2, r3, #4
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	9203      	str	r2, [sp, #12]
 8009404:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009408:	3402      	adds	r4, #2
 800940a:	9305      	str	r3, [sp, #20]
 800940c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80094d0 <_svfiprintf_r+0x1f4>
 8009410:	7821      	ldrb	r1, [r4, #0]
 8009412:	2203      	movs	r2, #3
 8009414:	4650      	mov	r0, sl
 8009416:	f7f6 fedb 	bl	80001d0 <memchr>
 800941a:	b138      	cbz	r0, 800942c <_svfiprintf_r+0x150>
 800941c:	9b04      	ldr	r3, [sp, #16]
 800941e:	eba0 000a 	sub.w	r0, r0, sl
 8009422:	2240      	movs	r2, #64	@ 0x40
 8009424:	4082      	lsls	r2, r0
 8009426:	4313      	orrs	r3, r2
 8009428:	3401      	adds	r4, #1
 800942a:	9304      	str	r3, [sp, #16]
 800942c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009430:	4824      	ldr	r0, [pc, #144]	@ (80094c4 <_svfiprintf_r+0x1e8>)
 8009432:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009436:	2206      	movs	r2, #6
 8009438:	f7f6 feca 	bl	80001d0 <memchr>
 800943c:	2800      	cmp	r0, #0
 800943e:	d036      	beq.n	80094ae <_svfiprintf_r+0x1d2>
 8009440:	4b21      	ldr	r3, [pc, #132]	@ (80094c8 <_svfiprintf_r+0x1ec>)
 8009442:	bb1b      	cbnz	r3, 800948c <_svfiprintf_r+0x1b0>
 8009444:	9b03      	ldr	r3, [sp, #12]
 8009446:	3307      	adds	r3, #7
 8009448:	f023 0307 	bic.w	r3, r3, #7
 800944c:	3308      	adds	r3, #8
 800944e:	9303      	str	r3, [sp, #12]
 8009450:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009452:	4433      	add	r3, r6
 8009454:	9309      	str	r3, [sp, #36]	@ 0x24
 8009456:	e76a      	b.n	800932e <_svfiprintf_r+0x52>
 8009458:	fb0c 3202 	mla	r2, ip, r2, r3
 800945c:	460c      	mov	r4, r1
 800945e:	2001      	movs	r0, #1
 8009460:	e7a8      	b.n	80093b4 <_svfiprintf_r+0xd8>
 8009462:	2300      	movs	r3, #0
 8009464:	3401      	adds	r4, #1
 8009466:	9305      	str	r3, [sp, #20]
 8009468:	4619      	mov	r1, r3
 800946a:	f04f 0c0a 	mov.w	ip, #10
 800946e:	4620      	mov	r0, r4
 8009470:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009474:	3a30      	subs	r2, #48	@ 0x30
 8009476:	2a09      	cmp	r2, #9
 8009478:	d903      	bls.n	8009482 <_svfiprintf_r+0x1a6>
 800947a:	2b00      	cmp	r3, #0
 800947c:	d0c6      	beq.n	800940c <_svfiprintf_r+0x130>
 800947e:	9105      	str	r1, [sp, #20]
 8009480:	e7c4      	b.n	800940c <_svfiprintf_r+0x130>
 8009482:	fb0c 2101 	mla	r1, ip, r1, r2
 8009486:	4604      	mov	r4, r0
 8009488:	2301      	movs	r3, #1
 800948a:	e7f0      	b.n	800946e <_svfiprintf_r+0x192>
 800948c:	ab03      	add	r3, sp, #12
 800948e:	9300      	str	r3, [sp, #0]
 8009490:	462a      	mov	r2, r5
 8009492:	4b0e      	ldr	r3, [pc, #56]	@ (80094cc <_svfiprintf_r+0x1f0>)
 8009494:	a904      	add	r1, sp, #16
 8009496:	4638      	mov	r0, r7
 8009498:	f7fc fc86 	bl	8005da8 <_printf_float>
 800949c:	1c42      	adds	r2, r0, #1
 800949e:	4606      	mov	r6, r0
 80094a0:	d1d6      	bne.n	8009450 <_svfiprintf_r+0x174>
 80094a2:	89ab      	ldrh	r3, [r5, #12]
 80094a4:	065b      	lsls	r3, r3, #25
 80094a6:	f53f af2d 	bmi.w	8009304 <_svfiprintf_r+0x28>
 80094aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80094ac:	e72c      	b.n	8009308 <_svfiprintf_r+0x2c>
 80094ae:	ab03      	add	r3, sp, #12
 80094b0:	9300      	str	r3, [sp, #0]
 80094b2:	462a      	mov	r2, r5
 80094b4:	4b05      	ldr	r3, [pc, #20]	@ (80094cc <_svfiprintf_r+0x1f0>)
 80094b6:	a904      	add	r1, sp, #16
 80094b8:	4638      	mov	r0, r7
 80094ba:	f7fc ff0d 	bl	80062d8 <_printf_i>
 80094be:	e7ed      	b.n	800949c <_svfiprintf_r+0x1c0>
 80094c0:	0800ae37 	.word	0x0800ae37
 80094c4:	0800ae41 	.word	0x0800ae41
 80094c8:	08005da9 	.word	0x08005da9
 80094cc:	08009225 	.word	0x08009225
 80094d0:	0800ae3d 	.word	0x0800ae3d

080094d4 <_sungetc_r>:
 80094d4:	b538      	push	{r3, r4, r5, lr}
 80094d6:	1c4b      	adds	r3, r1, #1
 80094d8:	4614      	mov	r4, r2
 80094da:	d103      	bne.n	80094e4 <_sungetc_r+0x10>
 80094dc:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80094e0:	4628      	mov	r0, r5
 80094e2:	bd38      	pop	{r3, r4, r5, pc}
 80094e4:	8993      	ldrh	r3, [r2, #12]
 80094e6:	f023 0320 	bic.w	r3, r3, #32
 80094ea:	8193      	strh	r3, [r2, #12]
 80094ec:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80094ee:	6852      	ldr	r2, [r2, #4]
 80094f0:	b2cd      	uxtb	r5, r1
 80094f2:	b18b      	cbz	r3, 8009518 <_sungetc_r+0x44>
 80094f4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80094f6:	4293      	cmp	r3, r2
 80094f8:	dd08      	ble.n	800950c <_sungetc_r+0x38>
 80094fa:	6823      	ldr	r3, [r4, #0]
 80094fc:	1e5a      	subs	r2, r3, #1
 80094fe:	6022      	str	r2, [r4, #0]
 8009500:	f803 5c01 	strb.w	r5, [r3, #-1]
 8009504:	6863      	ldr	r3, [r4, #4]
 8009506:	3301      	adds	r3, #1
 8009508:	6063      	str	r3, [r4, #4]
 800950a:	e7e9      	b.n	80094e0 <_sungetc_r+0xc>
 800950c:	4621      	mov	r1, r4
 800950e:	f000 fbe4 	bl	8009cda <__submore>
 8009512:	2800      	cmp	r0, #0
 8009514:	d0f1      	beq.n	80094fa <_sungetc_r+0x26>
 8009516:	e7e1      	b.n	80094dc <_sungetc_r+0x8>
 8009518:	6921      	ldr	r1, [r4, #16]
 800951a:	6823      	ldr	r3, [r4, #0]
 800951c:	b151      	cbz	r1, 8009534 <_sungetc_r+0x60>
 800951e:	4299      	cmp	r1, r3
 8009520:	d208      	bcs.n	8009534 <_sungetc_r+0x60>
 8009522:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8009526:	42a9      	cmp	r1, r5
 8009528:	d104      	bne.n	8009534 <_sungetc_r+0x60>
 800952a:	3b01      	subs	r3, #1
 800952c:	3201      	adds	r2, #1
 800952e:	6023      	str	r3, [r4, #0]
 8009530:	6062      	str	r2, [r4, #4]
 8009532:	e7d5      	b.n	80094e0 <_sungetc_r+0xc>
 8009534:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 8009538:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800953c:	6363      	str	r3, [r4, #52]	@ 0x34
 800953e:	2303      	movs	r3, #3
 8009540:	63a3      	str	r3, [r4, #56]	@ 0x38
 8009542:	4623      	mov	r3, r4
 8009544:	f803 5f46 	strb.w	r5, [r3, #70]!
 8009548:	6023      	str	r3, [r4, #0]
 800954a:	2301      	movs	r3, #1
 800954c:	e7dc      	b.n	8009508 <_sungetc_r+0x34>

0800954e <__ssrefill_r>:
 800954e:	b510      	push	{r4, lr}
 8009550:	460c      	mov	r4, r1
 8009552:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8009554:	b169      	cbz	r1, 8009572 <__ssrefill_r+0x24>
 8009556:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800955a:	4299      	cmp	r1, r3
 800955c:	d001      	beq.n	8009562 <__ssrefill_r+0x14>
 800955e:	f7fe fa33 	bl	80079c8 <_free_r>
 8009562:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009564:	6063      	str	r3, [r4, #4]
 8009566:	2000      	movs	r0, #0
 8009568:	6360      	str	r0, [r4, #52]	@ 0x34
 800956a:	b113      	cbz	r3, 8009572 <__ssrefill_r+0x24>
 800956c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800956e:	6023      	str	r3, [r4, #0]
 8009570:	bd10      	pop	{r4, pc}
 8009572:	6923      	ldr	r3, [r4, #16]
 8009574:	6023      	str	r3, [r4, #0]
 8009576:	2300      	movs	r3, #0
 8009578:	6063      	str	r3, [r4, #4]
 800957a:	89a3      	ldrh	r3, [r4, #12]
 800957c:	f043 0320 	orr.w	r3, r3, #32
 8009580:	81a3      	strh	r3, [r4, #12]
 8009582:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009586:	e7f3      	b.n	8009570 <__ssrefill_r+0x22>

08009588 <__ssvfiscanf_r>:
 8009588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800958c:	460c      	mov	r4, r1
 800958e:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 8009592:	2100      	movs	r1, #0
 8009594:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8009598:	49a6      	ldr	r1, [pc, #664]	@ (8009834 <__ssvfiscanf_r+0x2ac>)
 800959a:	91a0      	str	r1, [sp, #640]	@ 0x280
 800959c:	f10d 0804 	add.w	r8, sp, #4
 80095a0:	49a5      	ldr	r1, [pc, #660]	@ (8009838 <__ssvfiscanf_r+0x2b0>)
 80095a2:	4fa6      	ldr	r7, [pc, #664]	@ (800983c <__ssvfiscanf_r+0x2b4>)
 80095a4:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 80095a8:	4606      	mov	r6, r0
 80095aa:	91a1      	str	r1, [sp, #644]	@ 0x284
 80095ac:	9300      	str	r3, [sp, #0]
 80095ae:	f892 9000 	ldrb.w	r9, [r2]
 80095b2:	f1b9 0f00 	cmp.w	r9, #0
 80095b6:	f000 8158 	beq.w	800986a <__ssvfiscanf_r+0x2e2>
 80095ba:	f817 3009 	ldrb.w	r3, [r7, r9]
 80095be:	f013 0308 	ands.w	r3, r3, #8
 80095c2:	f102 0501 	add.w	r5, r2, #1
 80095c6:	d019      	beq.n	80095fc <__ssvfiscanf_r+0x74>
 80095c8:	6863      	ldr	r3, [r4, #4]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	dd0f      	ble.n	80095ee <__ssvfiscanf_r+0x66>
 80095ce:	6823      	ldr	r3, [r4, #0]
 80095d0:	781a      	ldrb	r2, [r3, #0]
 80095d2:	5cba      	ldrb	r2, [r7, r2]
 80095d4:	0712      	lsls	r2, r2, #28
 80095d6:	d401      	bmi.n	80095dc <__ssvfiscanf_r+0x54>
 80095d8:	462a      	mov	r2, r5
 80095da:	e7e8      	b.n	80095ae <__ssvfiscanf_r+0x26>
 80095dc:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80095de:	3201      	adds	r2, #1
 80095e0:	9245      	str	r2, [sp, #276]	@ 0x114
 80095e2:	6862      	ldr	r2, [r4, #4]
 80095e4:	3301      	adds	r3, #1
 80095e6:	3a01      	subs	r2, #1
 80095e8:	6062      	str	r2, [r4, #4]
 80095ea:	6023      	str	r3, [r4, #0]
 80095ec:	e7ec      	b.n	80095c8 <__ssvfiscanf_r+0x40>
 80095ee:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80095f0:	4621      	mov	r1, r4
 80095f2:	4630      	mov	r0, r6
 80095f4:	4798      	blx	r3
 80095f6:	2800      	cmp	r0, #0
 80095f8:	d0e9      	beq.n	80095ce <__ssvfiscanf_r+0x46>
 80095fa:	e7ed      	b.n	80095d8 <__ssvfiscanf_r+0x50>
 80095fc:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 8009600:	f040 8085 	bne.w	800970e <__ssvfiscanf_r+0x186>
 8009604:	9341      	str	r3, [sp, #260]	@ 0x104
 8009606:	9343      	str	r3, [sp, #268]	@ 0x10c
 8009608:	7853      	ldrb	r3, [r2, #1]
 800960a:	2b2a      	cmp	r3, #42	@ 0x2a
 800960c:	bf02      	ittt	eq
 800960e:	2310      	moveq	r3, #16
 8009610:	1c95      	addeq	r5, r2, #2
 8009612:	9341      	streq	r3, [sp, #260]	@ 0x104
 8009614:	220a      	movs	r2, #10
 8009616:	46aa      	mov	sl, r5
 8009618:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800961c:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8009620:	2b09      	cmp	r3, #9
 8009622:	d91e      	bls.n	8009662 <__ssvfiscanf_r+0xda>
 8009624:	f8df b218 	ldr.w	fp, [pc, #536]	@ 8009840 <__ssvfiscanf_r+0x2b8>
 8009628:	2203      	movs	r2, #3
 800962a:	4658      	mov	r0, fp
 800962c:	f7f6 fdd0 	bl	80001d0 <memchr>
 8009630:	b138      	cbz	r0, 8009642 <__ssvfiscanf_r+0xba>
 8009632:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8009634:	eba0 000b 	sub.w	r0, r0, fp
 8009638:	2301      	movs	r3, #1
 800963a:	4083      	lsls	r3, r0
 800963c:	4313      	orrs	r3, r2
 800963e:	9341      	str	r3, [sp, #260]	@ 0x104
 8009640:	4655      	mov	r5, sl
 8009642:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009646:	2b78      	cmp	r3, #120	@ 0x78
 8009648:	d806      	bhi.n	8009658 <__ssvfiscanf_r+0xd0>
 800964a:	2b57      	cmp	r3, #87	@ 0x57
 800964c:	d810      	bhi.n	8009670 <__ssvfiscanf_r+0xe8>
 800964e:	2b25      	cmp	r3, #37	@ 0x25
 8009650:	d05d      	beq.n	800970e <__ssvfiscanf_r+0x186>
 8009652:	d857      	bhi.n	8009704 <__ssvfiscanf_r+0x17c>
 8009654:	2b00      	cmp	r3, #0
 8009656:	d075      	beq.n	8009744 <__ssvfiscanf_r+0x1bc>
 8009658:	2303      	movs	r3, #3
 800965a:	9347      	str	r3, [sp, #284]	@ 0x11c
 800965c:	230a      	movs	r3, #10
 800965e:	9342      	str	r3, [sp, #264]	@ 0x108
 8009660:	e088      	b.n	8009774 <__ssvfiscanf_r+0x1ec>
 8009662:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8009664:	fb02 1103 	mla	r1, r2, r3, r1
 8009668:	3930      	subs	r1, #48	@ 0x30
 800966a:	9143      	str	r1, [sp, #268]	@ 0x10c
 800966c:	4655      	mov	r5, sl
 800966e:	e7d2      	b.n	8009616 <__ssvfiscanf_r+0x8e>
 8009670:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8009674:	2a20      	cmp	r2, #32
 8009676:	d8ef      	bhi.n	8009658 <__ssvfiscanf_r+0xd0>
 8009678:	a101      	add	r1, pc, #4	@ (adr r1, 8009680 <__ssvfiscanf_r+0xf8>)
 800967a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800967e:	bf00      	nop
 8009680:	08009753 	.word	0x08009753
 8009684:	08009659 	.word	0x08009659
 8009688:	08009659 	.word	0x08009659
 800968c:	080097ad 	.word	0x080097ad
 8009690:	08009659 	.word	0x08009659
 8009694:	08009659 	.word	0x08009659
 8009698:	08009659 	.word	0x08009659
 800969c:	08009659 	.word	0x08009659
 80096a0:	08009659 	.word	0x08009659
 80096a4:	08009659 	.word	0x08009659
 80096a8:	08009659 	.word	0x08009659
 80096ac:	080097c3 	.word	0x080097c3
 80096b0:	080097a9 	.word	0x080097a9
 80096b4:	0800970b 	.word	0x0800970b
 80096b8:	0800970b 	.word	0x0800970b
 80096bc:	0800970b 	.word	0x0800970b
 80096c0:	08009659 	.word	0x08009659
 80096c4:	08009765 	.word	0x08009765
 80096c8:	08009659 	.word	0x08009659
 80096cc:	08009659 	.word	0x08009659
 80096d0:	08009659 	.word	0x08009659
 80096d4:	08009659 	.word	0x08009659
 80096d8:	080097d3 	.word	0x080097d3
 80096dc:	0800976d 	.word	0x0800976d
 80096e0:	0800974b 	.word	0x0800974b
 80096e4:	08009659 	.word	0x08009659
 80096e8:	08009659 	.word	0x08009659
 80096ec:	080097cf 	.word	0x080097cf
 80096f0:	08009659 	.word	0x08009659
 80096f4:	080097a9 	.word	0x080097a9
 80096f8:	08009659 	.word	0x08009659
 80096fc:	08009659 	.word	0x08009659
 8009700:	08009753 	.word	0x08009753
 8009704:	3b45      	subs	r3, #69	@ 0x45
 8009706:	2b02      	cmp	r3, #2
 8009708:	d8a6      	bhi.n	8009658 <__ssvfiscanf_r+0xd0>
 800970a:	2305      	movs	r3, #5
 800970c:	e031      	b.n	8009772 <__ssvfiscanf_r+0x1ea>
 800970e:	6863      	ldr	r3, [r4, #4]
 8009710:	2b00      	cmp	r3, #0
 8009712:	dd0d      	ble.n	8009730 <__ssvfiscanf_r+0x1a8>
 8009714:	6823      	ldr	r3, [r4, #0]
 8009716:	781a      	ldrb	r2, [r3, #0]
 8009718:	454a      	cmp	r2, r9
 800971a:	f040 80a6 	bne.w	800986a <__ssvfiscanf_r+0x2e2>
 800971e:	3301      	adds	r3, #1
 8009720:	6862      	ldr	r2, [r4, #4]
 8009722:	6023      	str	r3, [r4, #0]
 8009724:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8009726:	3a01      	subs	r2, #1
 8009728:	3301      	adds	r3, #1
 800972a:	6062      	str	r2, [r4, #4]
 800972c:	9345      	str	r3, [sp, #276]	@ 0x114
 800972e:	e753      	b.n	80095d8 <__ssvfiscanf_r+0x50>
 8009730:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8009732:	4621      	mov	r1, r4
 8009734:	4630      	mov	r0, r6
 8009736:	4798      	blx	r3
 8009738:	2800      	cmp	r0, #0
 800973a:	d0eb      	beq.n	8009714 <__ssvfiscanf_r+0x18c>
 800973c:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800973e:	2800      	cmp	r0, #0
 8009740:	f040 808b 	bne.w	800985a <__ssvfiscanf_r+0x2d2>
 8009744:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009748:	e08b      	b.n	8009862 <__ssvfiscanf_r+0x2da>
 800974a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800974c:	f042 0220 	orr.w	r2, r2, #32
 8009750:	9241      	str	r2, [sp, #260]	@ 0x104
 8009752:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8009754:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009758:	9241      	str	r2, [sp, #260]	@ 0x104
 800975a:	2210      	movs	r2, #16
 800975c:	2b6e      	cmp	r3, #110	@ 0x6e
 800975e:	9242      	str	r2, [sp, #264]	@ 0x108
 8009760:	d902      	bls.n	8009768 <__ssvfiscanf_r+0x1e0>
 8009762:	e005      	b.n	8009770 <__ssvfiscanf_r+0x1e8>
 8009764:	2300      	movs	r3, #0
 8009766:	9342      	str	r3, [sp, #264]	@ 0x108
 8009768:	2303      	movs	r3, #3
 800976a:	e002      	b.n	8009772 <__ssvfiscanf_r+0x1ea>
 800976c:	2308      	movs	r3, #8
 800976e:	9342      	str	r3, [sp, #264]	@ 0x108
 8009770:	2304      	movs	r3, #4
 8009772:	9347      	str	r3, [sp, #284]	@ 0x11c
 8009774:	6863      	ldr	r3, [r4, #4]
 8009776:	2b00      	cmp	r3, #0
 8009778:	dd39      	ble.n	80097ee <__ssvfiscanf_r+0x266>
 800977a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800977c:	0659      	lsls	r1, r3, #25
 800977e:	d404      	bmi.n	800978a <__ssvfiscanf_r+0x202>
 8009780:	6823      	ldr	r3, [r4, #0]
 8009782:	781a      	ldrb	r2, [r3, #0]
 8009784:	5cba      	ldrb	r2, [r7, r2]
 8009786:	0712      	lsls	r2, r2, #28
 8009788:	d438      	bmi.n	80097fc <__ssvfiscanf_r+0x274>
 800978a:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800978c:	2b02      	cmp	r3, #2
 800978e:	dc47      	bgt.n	8009820 <__ssvfiscanf_r+0x298>
 8009790:	466b      	mov	r3, sp
 8009792:	4622      	mov	r2, r4
 8009794:	a941      	add	r1, sp, #260	@ 0x104
 8009796:	4630      	mov	r0, r6
 8009798:	f000 f86c 	bl	8009874 <_scanf_chars>
 800979c:	2801      	cmp	r0, #1
 800979e:	d064      	beq.n	800986a <__ssvfiscanf_r+0x2e2>
 80097a0:	2802      	cmp	r0, #2
 80097a2:	f47f af19 	bne.w	80095d8 <__ssvfiscanf_r+0x50>
 80097a6:	e7c9      	b.n	800973c <__ssvfiscanf_r+0x1b4>
 80097a8:	220a      	movs	r2, #10
 80097aa:	e7d7      	b.n	800975c <__ssvfiscanf_r+0x1d4>
 80097ac:	4629      	mov	r1, r5
 80097ae:	4640      	mov	r0, r8
 80097b0:	f000 fa5a 	bl	8009c68 <__sccl>
 80097b4:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80097b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80097ba:	9341      	str	r3, [sp, #260]	@ 0x104
 80097bc:	4605      	mov	r5, r0
 80097be:	2301      	movs	r3, #1
 80097c0:	e7d7      	b.n	8009772 <__ssvfiscanf_r+0x1ea>
 80097c2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80097c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80097c8:	9341      	str	r3, [sp, #260]	@ 0x104
 80097ca:	2300      	movs	r3, #0
 80097cc:	e7d1      	b.n	8009772 <__ssvfiscanf_r+0x1ea>
 80097ce:	2302      	movs	r3, #2
 80097d0:	e7cf      	b.n	8009772 <__ssvfiscanf_r+0x1ea>
 80097d2:	9841      	ldr	r0, [sp, #260]	@ 0x104
 80097d4:	06c3      	lsls	r3, r0, #27
 80097d6:	f53f aeff 	bmi.w	80095d8 <__ssvfiscanf_r+0x50>
 80097da:	9b00      	ldr	r3, [sp, #0]
 80097dc:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80097de:	1d19      	adds	r1, r3, #4
 80097e0:	9100      	str	r1, [sp, #0]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	07c0      	lsls	r0, r0, #31
 80097e6:	bf4c      	ite	mi
 80097e8:	801a      	strhmi	r2, [r3, #0]
 80097ea:	601a      	strpl	r2, [r3, #0]
 80097ec:	e6f4      	b.n	80095d8 <__ssvfiscanf_r+0x50>
 80097ee:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80097f0:	4621      	mov	r1, r4
 80097f2:	4630      	mov	r0, r6
 80097f4:	4798      	blx	r3
 80097f6:	2800      	cmp	r0, #0
 80097f8:	d0bf      	beq.n	800977a <__ssvfiscanf_r+0x1f2>
 80097fa:	e79f      	b.n	800973c <__ssvfiscanf_r+0x1b4>
 80097fc:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80097fe:	3201      	adds	r2, #1
 8009800:	9245      	str	r2, [sp, #276]	@ 0x114
 8009802:	6862      	ldr	r2, [r4, #4]
 8009804:	3a01      	subs	r2, #1
 8009806:	2a00      	cmp	r2, #0
 8009808:	6062      	str	r2, [r4, #4]
 800980a:	dd02      	ble.n	8009812 <__ssvfiscanf_r+0x28a>
 800980c:	3301      	adds	r3, #1
 800980e:	6023      	str	r3, [r4, #0]
 8009810:	e7b6      	b.n	8009780 <__ssvfiscanf_r+0x1f8>
 8009812:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8009814:	4621      	mov	r1, r4
 8009816:	4630      	mov	r0, r6
 8009818:	4798      	blx	r3
 800981a:	2800      	cmp	r0, #0
 800981c:	d0b0      	beq.n	8009780 <__ssvfiscanf_r+0x1f8>
 800981e:	e78d      	b.n	800973c <__ssvfiscanf_r+0x1b4>
 8009820:	2b04      	cmp	r3, #4
 8009822:	dc0f      	bgt.n	8009844 <__ssvfiscanf_r+0x2bc>
 8009824:	466b      	mov	r3, sp
 8009826:	4622      	mov	r2, r4
 8009828:	a941      	add	r1, sp, #260	@ 0x104
 800982a:	4630      	mov	r0, r6
 800982c:	f000 f87c 	bl	8009928 <_scanf_i>
 8009830:	e7b4      	b.n	800979c <__ssvfiscanf_r+0x214>
 8009832:	bf00      	nop
 8009834:	080094d5 	.word	0x080094d5
 8009838:	0800954f 	.word	0x0800954f
 800983c:	0800b059 	.word	0x0800b059
 8009840:	0800ae3d 	.word	0x0800ae3d
 8009844:	4b0a      	ldr	r3, [pc, #40]	@ (8009870 <__ssvfiscanf_r+0x2e8>)
 8009846:	2b00      	cmp	r3, #0
 8009848:	f43f aec6 	beq.w	80095d8 <__ssvfiscanf_r+0x50>
 800984c:	466b      	mov	r3, sp
 800984e:	4622      	mov	r2, r4
 8009850:	a941      	add	r1, sp, #260	@ 0x104
 8009852:	4630      	mov	r0, r6
 8009854:	f7fc fe5e 	bl	8006514 <_scanf_float>
 8009858:	e7a0      	b.n	800979c <__ssvfiscanf_r+0x214>
 800985a:	89a3      	ldrh	r3, [r4, #12]
 800985c:	065b      	lsls	r3, r3, #25
 800985e:	f53f af71 	bmi.w	8009744 <__ssvfiscanf_r+0x1bc>
 8009862:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 8009866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800986a:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800986c:	e7f9      	b.n	8009862 <__ssvfiscanf_r+0x2da>
 800986e:	bf00      	nop
 8009870:	08006515 	.word	0x08006515

08009874 <_scanf_chars>:
 8009874:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009878:	4615      	mov	r5, r2
 800987a:	688a      	ldr	r2, [r1, #8]
 800987c:	4680      	mov	r8, r0
 800987e:	460c      	mov	r4, r1
 8009880:	b932      	cbnz	r2, 8009890 <_scanf_chars+0x1c>
 8009882:	698a      	ldr	r2, [r1, #24]
 8009884:	2a00      	cmp	r2, #0
 8009886:	bf14      	ite	ne
 8009888:	f04f 32ff 	movne.w	r2, #4294967295	@ 0xffffffff
 800988c:	2201      	moveq	r2, #1
 800988e:	608a      	str	r2, [r1, #8]
 8009890:	6822      	ldr	r2, [r4, #0]
 8009892:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8009924 <_scanf_chars+0xb0>
 8009896:	06d1      	lsls	r1, r2, #27
 8009898:	bf5f      	itttt	pl
 800989a:	681a      	ldrpl	r2, [r3, #0]
 800989c:	1d11      	addpl	r1, r2, #4
 800989e:	6019      	strpl	r1, [r3, #0]
 80098a0:	6816      	ldrpl	r6, [r2, #0]
 80098a2:	2700      	movs	r7, #0
 80098a4:	69a0      	ldr	r0, [r4, #24]
 80098a6:	b188      	cbz	r0, 80098cc <_scanf_chars+0x58>
 80098a8:	2801      	cmp	r0, #1
 80098aa:	d107      	bne.n	80098bc <_scanf_chars+0x48>
 80098ac:	682b      	ldr	r3, [r5, #0]
 80098ae:	781a      	ldrb	r2, [r3, #0]
 80098b0:	6963      	ldr	r3, [r4, #20]
 80098b2:	5c9b      	ldrb	r3, [r3, r2]
 80098b4:	b953      	cbnz	r3, 80098cc <_scanf_chars+0x58>
 80098b6:	2f00      	cmp	r7, #0
 80098b8:	d031      	beq.n	800991e <_scanf_chars+0xaa>
 80098ba:	e022      	b.n	8009902 <_scanf_chars+0x8e>
 80098bc:	2802      	cmp	r0, #2
 80098be:	d120      	bne.n	8009902 <_scanf_chars+0x8e>
 80098c0:	682b      	ldr	r3, [r5, #0]
 80098c2:	781b      	ldrb	r3, [r3, #0]
 80098c4:	f819 3003 	ldrb.w	r3, [r9, r3]
 80098c8:	071b      	lsls	r3, r3, #28
 80098ca:	d41a      	bmi.n	8009902 <_scanf_chars+0x8e>
 80098cc:	6823      	ldr	r3, [r4, #0]
 80098ce:	06da      	lsls	r2, r3, #27
 80098d0:	bf5e      	ittt	pl
 80098d2:	682b      	ldrpl	r3, [r5, #0]
 80098d4:	781b      	ldrbpl	r3, [r3, #0]
 80098d6:	f806 3b01 	strbpl.w	r3, [r6], #1
 80098da:	682a      	ldr	r2, [r5, #0]
 80098dc:	686b      	ldr	r3, [r5, #4]
 80098de:	3201      	adds	r2, #1
 80098e0:	602a      	str	r2, [r5, #0]
 80098e2:	68a2      	ldr	r2, [r4, #8]
 80098e4:	3b01      	subs	r3, #1
 80098e6:	3a01      	subs	r2, #1
 80098e8:	606b      	str	r3, [r5, #4]
 80098ea:	3701      	adds	r7, #1
 80098ec:	60a2      	str	r2, [r4, #8]
 80098ee:	b142      	cbz	r2, 8009902 <_scanf_chars+0x8e>
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	dcd7      	bgt.n	80098a4 <_scanf_chars+0x30>
 80098f4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80098f8:	4629      	mov	r1, r5
 80098fa:	4640      	mov	r0, r8
 80098fc:	4798      	blx	r3
 80098fe:	2800      	cmp	r0, #0
 8009900:	d0d0      	beq.n	80098a4 <_scanf_chars+0x30>
 8009902:	6823      	ldr	r3, [r4, #0]
 8009904:	f013 0310 	ands.w	r3, r3, #16
 8009908:	d105      	bne.n	8009916 <_scanf_chars+0xa2>
 800990a:	68e2      	ldr	r2, [r4, #12]
 800990c:	3201      	adds	r2, #1
 800990e:	60e2      	str	r2, [r4, #12]
 8009910:	69a2      	ldr	r2, [r4, #24]
 8009912:	b102      	cbz	r2, 8009916 <_scanf_chars+0xa2>
 8009914:	7033      	strb	r3, [r6, #0]
 8009916:	6923      	ldr	r3, [r4, #16]
 8009918:	443b      	add	r3, r7
 800991a:	6123      	str	r3, [r4, #16]
 800991c:	2000      	movs	r0, #0
 800991e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009922:	bf00      	nop
 8009924:	0800b059 	.word	0x0800b059

08009928 <_scanf_i>:
 8009928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800992c:	4698      	mov	r8, r3
 800992e:	4b74      	ldr	r3, [pc, #464]	@ (8009b00 <_scanf_i+0x1d8>)
 8009930:	460c      	mov	r4, r1
 8009932:	4682      	mov	sl, r0
 8009934:	4616      	mov	r6, r2
 8009936:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800993a:	b087      	sub	sp, #28
 800993c:	ab03      	add	r3, sp, #12
 800993e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8009942:	4b70      	ldr	r3, [pc, #448]	@ (8009b04 <_scanf_i+0x1dc>)
 8009944:	69a1      	ldr	r1, [r4, #24]
 8009946:	4a70      	ldr	r2, [pc, #448]	@ (8009b08 <_scanf_i+0x1e0>)
 8009948:	2903      	cmp	r1, #3
 800994a:	bf08      	it	eq
 800994c:	461a      	moveq	r2, r3
 800994e:	68a3      	ldr	r3, [r4, #8]
 8009950:	9201      	str	r2, [sp, #4]
 8009952:	1e5a      	subs	r2, r3, #1
 8009954:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8009958:	bf88      	it	hi
 800995a:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800995e:	4627      	mov	r7, r4
 8009960:	bf82      	ittt	hi
 8009962:	eb03 0905 	addhi.w	r9, r3, r5
 8009966:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800996a:	60a3      	strhi	r3, [r4, #8]
 800996c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8009970:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8009974:	bf98      	it	ls
 8009976:	f04f 0900 	movls.w	r9, #0
 800997a:	6023      	str	r3, [r4, #0]
 800997c:	463d      	mov	r5, r7
 800997e:	f04f 0b00 	mov.w	fp, #0
 8009982:	6831      	ldr	r1, [r6, #0]
 8009984:	ab03      	add	r3, sp, #12
 8009986:	7809      	ldrb	r1, [r1, #0]
 8009988:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800998c:	2202      	movs	r2, #2
 800998e:	f7f6 fc1f 	bl	80001d0 <memchr>
 8009992:	b328      	cbz	r0, 80099e0 <_scanf_i+0xb8>
 8009994:	f1bb 0f01 	cmp.w	fp, #1
 8009998:	d159      	bne.n	8009a4e <_scanf_i+0x126>
 800999a:	6862      	ldr	r2, [r4, #4]
 800999c:	b92a      	cbnz	r2, 80099aa <_scanf_i+0x82>
 800999e:	6822      	ldr	r2, [r4, #0]
 80099a0:	2108      	movs	r1, #8
 80099a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80099a6:	6061      	str	r1, [r4, #4]
 80099a8:	6022      	str	r2, [r4, #0]
 80099aa:	6822      	ldr	r2, [r4, #0]
 80099ac:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 80099b0:	6022      	str	r2, [r4, #0]
 80099b2:	68a2      	ldr	r2, [r4, #8]
 80099b4:	1e51      	subs	r1, r2, #1
 80099b6:	60a1      	str	r1, [r4, #8]
 80099b8:	b192      	cbz	r2, 80099e0 <_scanf_i+0xb8>
 80099ba:	6832      	ldr	r2, [r6, #0]
 80099bc:	1c51      	adds	r1, r2, #1
 80099be:	6031      	str	r1, [r6, #0]
 80099c0:	7812      	ldrb	r2, [r2, #0]
 80099c2:	f805 2b01 	strb.w	r2, [r5], #1
 80099c6:	6872      	ldr	r2, [r6, #4]
 80099c8:	3a01      	subs	r2, #1
 80099ca:	2a00      	cmp	r2, #0
 80099cc:	6072      	str	r2, [r6, #4]
 80099ce:	dc07      	bgt.n	80099e0 <_scanf_i+0xb8>
 80099d0:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 80099d4:	4631      	mov	r1, r6
 80099d6:	4650      	mov	r0, sl
 80099d8:	4790      	blx	r2
 80099da:	2800      	cmp	r0, #0
 80099dc:	f040 8085 	bne.w	8009aea <_scanf_i+0x1c2>
 80099e0:	f10b 0b01 	add.w	fp, fp, #1
 80099e4:	f1bb 0f03 	cmp.w	fp, #3
 80099e8:	d1cb      	bne.n	8009982 <_scanf_i+0x5a>
 80099ea:	6863      	ldr	r3, [r4, #4]
 80099ec:	b90b      	cbnz	r3, 80099f2 <_scanf_i+0xca>
 80099ee:	230a      	movs	r3, #10
 80099f0:	6063      	str	r3, [r4, #4]
 80099f2:	6863      	ldr	r3, [r4, #4]
 80099f4:	4945      	ldr	r1, [pc, #276]	@ (8009b0c <_scanf_i+0x1e4>)
 80099f6:	6960      	ldr	r0, [r4, #20]
 80099f8:	1ac9      	subs	r1, r1, r3
 80099fa:	f000 f935 	bl	8009c68 <__sccl>
 80099fe:	f04f 0b00 	mov.w	fp, #0
 8009a02:	68a3      	ldr	r3, [r4, #8]
 8009a04:	6822      	ldr	r2, [r4, #0]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d03d      	beq.n	8009a86 <_scanf_i+0x15e>
 8009a0a:	6831      	ldr	r1, [r6, #0]
 8009a0c:	6960      	ldr	r0, [r4, #20]
 8009a0e:	f891 c000 	ldrb.w	ip, [r1]
 8009a12:	f810 000c 	ldrb.w	r0, [r0, ip]
 8009a16:	2800      	cmp	r0, #0
 8009a18:	d035      	beq.n	8009a86 <_scanf_i+0x15e>
 8009a1a:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8009a1e:	d124      	bne.n	8009a6a <_scanf_i+0x142>
 8009a20:	0510      	lsls	r0, r2, #20
 8009a22:	d522      	bpl.n	8009a6a <_scanf_i+0x142>
 8009a24:	f10b 0b01 	add.w	fp, fp, #1
 8009a28:	f1b9 0f00 	cmp.w	r9, #0
 8009a2c:	d003      	beq.n	8009a36 <_scanf_i+0x10e>
 8009a2e:	3301      	adds	r3, #1
 8009a30:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 8009a34:	60a3      	str	r3, [r4, #8]
 8009a36:	6873      	ldr	r3, [r6, #4]
 8009a38:	3b01      	subs	r3, #1
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	6073      	str	r3, [r6, #4]
 8009a3e:	dd1b      	ble.n	8009a78 <_scanf_i+0x150>
 8009a40:	6833      	ldr	r3, [r6, #0]
 8009a42:	3301      	adds	r3, #1
 8009a44:	6033      	str	r3, [r6, #0]
 8009a46:	68a3      	ldr	r3, [r4, #8]
 8009a48:	3b01      	subs	r3, #1
 8009a4a:	60a3      	str	r3, [r4, #8]
 8009a4c:	e7d9      	b.n	8009a02 <_scanf_i+0xda>
 8009a4e:	f1bb 0f02 	cmp.w	fp, #2
 8009a52:	d1ae      	bne.n	80099b2 <_scanf_i+0x8a>
 8009a54:	6822      	ldr	r2, [r4, #0]
 8009a56:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8009a5a:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8009a5e:	d1c4      	bne.n	80099ea <_scanf_i+0xc2>
 8009a60:	2110      	movs	r1, #16
 8009a62:	6061      	str	r1, [r4, #4]
 8009a64:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009a68:	e7a2      	b.n	80099b0 <_scanf_i+0x88>
 8009a6a:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8009a6e:	6022      	str	r2, [r4, #0]
 8009a70:	780b      	ldrb	r3, [r1, #0]
 8009a72:	f805 3b01 	strb.w	r3, [r5], #1
 8009a76:	e7de      	b.n	8009a36 <_scanf_i+0x10e>
 8009a78:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8009a7c:	4631      	mov	r1, r6
 8009a7e:	4650      	mov	r0, sl
 8009a80:	4798      	blx	r3
 8009a82:	2800      	cmp	r0, #0
 8009a84:	d0df      	beq.n	8009a46 <_scanf_i+0x11e>
 8009a86:	6823      	ldr	r3, [r4, #0]
 8009a88:	05d9      	lsls	r1, r3, #23
 8009a8a:	d50d      	bpl.n	8009aa8 <_scanf_i+0x180>
 8009a8c:	42bd      	cmp	r5, r7
 8009a8e:	d909      	bls.n	8009aa4 <_scanf_i+0x17c>
 8009a90:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8009a94:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009a98:	4632      	mov	r2, r6
 8009a9a:	4650      	mov	r0, sl
 8009a9c:	4798      	blx	r3
 8009a9e:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 8009aa2:	464d      	mov	r5, r9
 8009aa4:	42bd      	cmp	r5, r7
 8009aa6:	d028      	beq.n	8009afa <_scanf_i+0x1d2>
 8009aa8:	6822      	ldr	r2, [r4, #0]
 8009aaa:	f012 0210 	ands.w	r2, r2, #16
 8009aae:	d113      	bne.n	8009ad8 <_scanf_i+0x1b0>
 8009ab0:	702a      	strb	r2, [r5, #0]
 8009ab2:	6863      	ldr	r3, [r4, #4]
 8009ab4:	9e01      	ldr	r6, [sp, #4]
 8009ab6:	4639      	mov	r1, r7
 8009ab8:	4650      	mov	r0, sl
 8009aba:	47b0      	blx	r6
 8009abc:	f8d8 3000 	ldr.w	r3, [r8]
 8009ac0:	6821      	ldr	r1, [r4, #0]
 8009ac2:	1d1a      	adds	r2, r3, #4
 8009ac4:	f8c8 2000 	str.w	r2, [r8]
 8009ac8:	f011 0f20 	tst.w	r1, #32
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	d00f      	beq.n	8009af0 <_scanf_i+0x1c8>
 8009ad0:	6018      	str	r0, [r3, #0]
 8009ad2:	68e3      	ldr	r3, [r4, #12]
 8009ad4:	3301      	adds	r3, #1
 8009ad6:	60e3      	str	r3, [r4, #12]
 8009ad8:	6923      	ldr	r3, [r4, #16]
 8009ada:	1bed      	subs	r5, r5, r7
 8009adc:	445d      	add	r5, fp
 8009ade:	442b      	add	r3, r5
 8009ae0:	6123      	str	r3, [r4, #16]
 8009ae2:	2000      	movs	r0, #0
 8009ae4:	b007      	add	sp, #28
 8009ae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009aea:	f04f 0b00 	mov.w	fp, #0
 8009aee:	e7ca      	b.n	8009a86 <_scanf_i+0x15e>
 8009af0:	07ca      	lsls	r2, r1, #31
 8009af2:	bf4c      	ite	mi
 8009af4:	8018      	strhmi	r0, [r3, #0]
 8009af6:	6018      	strpl	r0, [r3, #0]
 8009af8:	e7eb      	b.n	8009ad2 <_scanf_i+0x1aa>
 8009afa:	2001      	movs	r0, #1
 8009afc:	e7f2      	b.n	8009ae4 <_scanf_i+0x1bc>
 8009afe:	bf00      	nop
 8009b00:	0800ac90 	.word	0x0800ac90
 8009b04:	08009221 	.word	0x08009221
 8009b08:	0800a62d 	.word	0x0800a62d
 8009b0c:	0800ae58 	.word	0x0800ae58

08009b10 <__sflush_r>:
 8009b10:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009b14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b18:	0716      	lsls	r6, r2, #28
 8009b1a:	4605      	mov	r5, r0
 8009b1c:	460c      	mov	r4, r1
 8009b1e:	d454      	bmi.n	8009bca <__sflush_r+0xba>
 8009b20:	684b      	ldr	r3, [r1, #4]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	dc02      	bgt.n	8009b2c <__sflush_r+0x1c>
 8009b26:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	dd48      	ble.n	8009bbe <__sflush_r+0xae>
 8009b2c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009b2e:	2e00      	cmp	r6, #0
 8009b30:	d045      	beq.n	8009bbe <__sflush_r+0xae>
 8009b32:	2300      	movs	r3, #0
 8009b34:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009b38:	682f      	ldr	r7, [r5, #0]
 8009b3a:	6a21      	ldr	r1, [r4, #32]
 8009b3c:	602b      	str	r3, [r5, #0]
 8009b3e:	d030      	beq.n	8009ba2 <__sflush_r+0x92>
 8009b40:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009b42:	89a3      	ldrh	r3, [r4, #12]
 8009b44:	0759      	lsls	r1, r3, #29
 8009b46:	d505      	bpl.n	8009b54 <__sflush_r+0x44>
 8009b48:	6863      	ldr	r3, [r4, #4]
 8009b4a:	1ad2      	subs	r2, r2, r3
 8009b4c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009b4e:	b10b      	cbz	r3, 8009b54 <__sflush_r+0x44>
 8009b50:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009b52:	1ad2      	subs	r2, r2, r3
 8009b54:	2300      	movs	r3, #0
 8009b56:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009b58:	6a21      	ldr	r1, [r4, #32]
 8009b5a:	4628      	mov	r0, r5
 8009b5c:	47b0      	blx	r6
 8009b5e:	1c43      	adds	r3, r0, #1
 8009b60:	89a3      	ldrh	r3, [r4, #12]
 8009b62:	d106      	bne.n	8009b72 <__sflush_r+0x62>
 8009b64:	6829      	ldr	r1, [r5, #0]
 8009b66:	291d      	cmp	r1, #29
 8009b68:	d82b      	bhi.n	8009bc2 <__sflush_r+0xb2>
 8009b6a:	4a2a      	ldr	r2, [pc, #168]	@ (8009c14 <__sflush_r+0x104>)
 8009b6c:	40ca      	lsrs	r2, r1
 8009b6e:	07d6      	lsls	r6, r2, #31
 8009b70:	d527      	bpl.n	8009bc2 <__sflush_r+0xb2>
 8009b72:	2200      	movs	r2, #0
 8009b74:	6062      	str	r2, [r4, #4]
 8009b76:	04d9      	lsls	r1, r3, #19
 8009b78:	6922      	ldr	r2, [r4, #16]
 8009b7a:	6022      	str	r2, [r4, #0]
 8009b7c:	d504      	bpl.n	8009b88 <__sflush_r+0x78>
 8009b7e:	1c42      	adds	r2, r0, #1
 8009b80:	d101      	bne.n	8009b86 <__sflush_r+0x76>
 8009b82:	682b      	ldr	r3, [r5, #0]
 8009b84:	b903      	cbnz	r3, 8009b88 <__sflush_r+0x78>
 8009b86:	6560      	str	r0, [r4, #84]	@ 0x54
 8009b88:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009b8a:	602f      	str	r7, [r5, #0]
 8009b8c:	b1b9      	cbz	r1, 8009bbe <__sflush_r+0xae>
 8009b8e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009b92:	4299      	cmp	r1, r3
 8009b94:	d002      	beq.n	8009b9c <__sflush_r+0x8c>
 8009b96:	4628      	mov	r0, r5
 8009b98:	f7fd ff16 	bl	80079c8 <_free_r>
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	6363      	str	r3, [r4, #52]	@ 0x34
 8009ba0:	e00d      	b.n	8009bbe <__sflush_r+0xae>
 8009ba2:	2301      	movs	r3, #1
 8009ba4:	4628      	mov	r0, r5
 8009ba6:	47b0      	blx	r6
 8009ba8:	4602      	mov	r2, r0
 8009baa:	1c50      	adds	r0, r2, #1
 8009bac:	d1c9      	bne.n	8009b42 <__sflush_r+0x32>
 8009bae:	682b      	ldr	r3, [r5, #0]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d0c6      	beq.n	8009b42 <__sflush_r+0x32>
 8009bb4:	2b1d      	cmp	r3, #29
 8009bb6:	d001      	beq.n	8009bbc <__sflush_r+0xac>
 8009bb8:	2b16      	cmp	r3, #22
 8009bba:	d11e      	bne.n	8009bfa <__sflush_r+0xea>
 8009bbc:	602f      	str	r7, [r5, #0]
 8009bbe:	2000      	movs	r0, #0
 8009bc0:	e022      	b.n	8009c08 <__sflush_r+0xf8>
 8009bc2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009bc6:	b21b      	sxth	r3, r3
 8009bc8:	e01b      	b.n	8009c02 <__sflush_r+0xf2>
 8009bca:	690f      	ldr	r7, [r1, #16]
 8009bcc:	2f00      	cmp	r7, #0
 8009bce:	d0f6      	beq.n	8009bbe <__sflush_r+0xae>
 8009bd0:	0793      	lsls	r3, r2, #30
 8009bd2:	680e      	ldr	r6, [r1, #0]
 8009bd4:	bf08      	it	eq
 8009bd6:	694b      	ldreq	r3, [r1, #20]
 8009bd8:	600f      	str	r7, [r1, #0]
 8009bda:	bf18      	it	ne
 8009bdc:	2300      	movne	r3, #0
 8009bde:	eba6 0807 	sub.w	r8, r6, r7
 8009be2:	608b      	str	r3, [r1, #8]
 8009be4:	f1b8 0f00 	cmp.w	r8, #0
 8009be8:	dde9      	ble.n	8009bbe <__sflush_r+0xae>
 8009bea:	6a21      	ldr	r1, [r4, #32]
 8009bec:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009bee:	4643      	mov	r3, r8
 8009bf0:	463a      	mov	r2, r7
 8009bf2:	4628      	mov	r0, r5
 8009bf4:	47b0      	blx	r6
 8009bf6:	2800      	cmp	r0, #0
 8009bf8:	dc08      	bgt.n	8009c0c <__sflush_r+0xfc>
 8009bfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009bfe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009c02:	81a3      	strh	r3, [r4, #12]
 8009c04:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009c08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c0c:	4407      	add	r7, r0
 8009c0e:	eba8 0800 	sub.w	r8, r8, r0
 8009c12:	e7e7      	b.n	8009be4 <__sflush_r+0xd4>
 8009c14:	20400001 	.word	0x20400001

08009c18 <_fflush_r>:
 8009c18:	b538      	push	{r3, r4, r5, lr}
 8009c1a:	690b      	ldr	r3, [r1, #16]
 8009c1c:	4605      	mov	r5, r0
 8009c1e:	460c      	mov	r4, r1
 8009c20:	b913      	cbnz	r3, 8009c28 <_fflush_r+0x10>
 8009c22:	2500      	movs	r5, #0
 8009c24:	4628      	mov	r0, r5
 8009c26:	bd38      	pop	{r3, r4, r5, pc}
 8009c28:	b118      	cbz	r0, 8009c32 <_fflush_r+0x1a>
 8009c2a:	6a03      	ldr	r3, [r0, #32]
 8009c2c:	b90b      	cbnz	r3, 8009c32 <_fflush_r+0x1a>
 8009c2e:	f7fc ff0b 	bl	8006a48 <__sinit>
 8009c32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d0f3      	beq.n	8009c22 <_fflush_r+0xa>
 8009c3a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009c3c:	07d0      	lsls	r0, r2, #31
 8009c3e:	d404      	bmi.n	8009c4a <_fflush_r+0x32>
 8009c40:	0599      	lsls	r1, r3, #22
 8009c42:	d402      	bmi.n	8009c4a <_fflush_r+0x32>
 8009c44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009c46:	f7fd f85c 	bl	8006d02 <__retarget_lock_acquire_recursive>
 8009c4a:	4628      	mov	r0, r5
 8009c4c:	4621      	mov	r1, r4
 8009c4e:	f7ff ff5f 	bl	8009b10 <__sflush_r>
 8009c52:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009c54:	07da      	lsls	r2, r3, #31
 8009c56:	4605      	mov	r5, r0
 8009c58:	d4e4      	bmi.n	8009c24 <_fflush_r+0xc>
 8009c5a:	89a3      	ldrh	r3, [r4, #12]
 8009c5c:	059b      	lsls	r3, r3, #22
 8009c5e:	d4e1      	bmi.n	8009c24 <_fflush_r+0xc>
 8009c60:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009c62:	f7fd f84f 	bl	8006d04 <__retarget_lock_release_recursive>
 8009c66:	e7dd      	b.n	8009c24 <_fflush_r+0xc>

08009c68 <__sccl>:
 8009c68:	b570      	push	{r4, r5, r6, lr}
 8009c6a:	780b      	ldrb	r3, [r1, #0]
 8009c6c:	4604      	mov	r4, r0
 8009c6e:	2b5e      	cmp	r3, #94	@ 0x5e
 8009c70:	bf0b      	itete	eq
 8009c72:	784b      	ldrbeq	r3, [r1, #1]
 8009c74:	1c4a      	addne	r2, r1, #1
 8009c76:	1c8a      	addeq	r2, r1, #2
 8009c78:	2100      	movne	r1, #0
 8009c7a:	bf08      	it	eq
 8009c7c:	2101      	moveq	r1, #1
 8009c7e:	3801      	subs	r0, #1
 8009c80:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8009c84:	f800 1f01 	strb.w	r1, [r0, #1]!
 8009c88:	42a8      	cmp	r0, r5
 8009c8a:	d1fb      	bne.n	8009c84 <__sccl+0x1c>
 8009c8c:	b90b      	cbnz	r3, 8009c92 <__sccl+0x2a>
 8009c8e:	1e50      	subs	r0, r2, #1
 8009c90:	bd70      	pop	{r4, r5, r6, pc}
 8009c92:	f081 0101 	eor.w	r1, r1, #1
 8009c96:	54e1      	strb	r1, [r4, r3]
 8009c98:	4610      	mov	r0, r2
 8009c9a:	4602      	mov	r2, r0
 8009c9c:	f812 5b01 	ldrb.w	r5, [r2], #1
 8009ca0:	2d2d      	cmp	r5, #45	@ 0x2d
 8009ca2:	d005      	beq.n	8009cb0 <__sccl+0x48>
 8009ca4:	2d5d      	cmp	r5, #93	@ 0x5d
 8009ca6:	d016      	beq.n	8009cd6 <__sccl+0x6e>
 8009ca8:	2d00      	cmp	r5, #0
 8009caa:	d0f1      	beq.n	8009c90 <__sccl+0x28>
 8009cac:	462b      	mov	r3, r5
 8009cae:	e7f2      	b.n	8009c96 <__sccl+0x2e>
 8009cb0:	7846      	ldrb	r6, [r0, #1]
 8009cb2:	2e5d      	cmp	r6, #93	@ 0x5d
 8009cb4:	d0fa      	beq.n	8009cac <__sccl+0x44>
 8009cb6:	42b3      	cmp	r3, r6
 8009cb8:	dcf8      	bgt.n	8009cac <__sccl+0x44>
 8009cba:	3002      	adds	r0, #2
 8009cbc:	461a      	mov	r2, r3
 8009cbe:	3201      	adds	r2, #1
 8009cc0:	4296      	cmp	r6, r2
 8009cc2:	54a1      	strb	r1, [r4, r2]
 8009cc4:	dcfb      	bgt.n	8009cbe <__sccl+0x56>
 8009cc6:	1af2      	subs	r2, r6, r3
 8009cc8:	3a01      	subs	r2, #1
 8009cca:	1c5d      	adds	r5, r3, #1
 8009ccc:	42b3      	cmp	r3, r6
 8009cce:	bfa8      	it	ge
 8009cd0:	2200      	movge	r2, #0
 8009cd2:	18ab      	adds	r3, r5, r2
 8009cd4:	e7e1      	b.n	8009c9a <__sccl+0x32>
 8009cd6:	4610      	mov	r0, r2
 8009cd8:	e7da      	b.n	8009c90 <__sccl+0x28>

08009cda <__submore>:
 8009cda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cde:	460c      	mov	r4, r1
 8009ce0:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8009ce2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009ce6:	4299      	cmp	r1, r3
 8009ce8:	d11d      	bne.n	8009d26 <__submore+0x4c>
 8009cea:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8009cee:	f7fd fedf 	bl	8007ab0 <_malloc_r>
 8009cf2:	b918      	cbnz	r0, 8009cfc <__submore+0x22>
 8009cf4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009cf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009cfc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009d00:	63a3      	str	r3, [r4, #56]	@ 0x38
 8009d02:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8009d06:	6360      	str	r0, [r4, #52]	@ 0x34
 8009d08:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8009d0c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8009d10:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8009d14:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8009d18:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8009d1c:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8009d20:	6020      	str	r0, [r4, #0]
 8009d22:	2000      	movs	r0, #0
 8009d24:	e7e8      	b.n	8009cf8 <__submore+0x1e>
 8009d26:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8009d28:	0077      	lsls	r7, r6, #1
 8009d2a:	463a      	mov	r2, r7
 8009d2c:	f000 fbe1 	bl	800a4f2 <_realloc_r>
 8009d30:	4605      	mov	r5, r0
 8009d32:	2800      	cmp	r0, #0
 8009d34:	d0de      	beq.n	8009cf4 <__submore+0x1a>
 8009d36:	eb00 0806 	add.w	r8, r0, r6
 8009d3a:	4601      	mov	r1, r0
 8009d3c:	4632      	mov	r2, r6
 8009d3e:	4640      	mov	r0, r8
 8009d40:	f000 f842 	bl	8009dc8 <memcpy>
 8009d44:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8009d48:	f8c4 8000 	str.w	r8, [r4]
 8009d4c:	e7e9      	b.n	8009d22 <__submore+0x48>

08009d4e <memmove>:
 8009d4e:	4288      	cmp	r0, r1
 8009d50:	b510      	push	{r4, lr}
 8009d52:	eb01 0402 	add.w	r4, r1, r2
 8009d56:	d902      	bls.n	8009d5e <memmove+0x10>
 8009d58:	4284      	cmp	r4, r0
 8009d5a:	4623      	mov	r3, r4
 8009d5c:	d807      	bhi.n	8009d6e <memmove+0x20>
 8009d5e:	1e43      	subs	r3, r0, #1
 8009d60:	42a1      	cmp	r1, r4
 8009d62:	d008      	beq.n	8009d76 <memmove+0x28>
 8009d64:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009d68:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009d6c:	e7f8      	b.n	8009d60 <memmove+0x12>
 8009d6e:	4402      	add	r2, r0
 8009d70:	4601      	mov	r1, r0
 8009d72:	428a      	cmp	r2, r1
 8009d74:	d100      	bne.n	8009d78 <memmove+0x2a>
 8009d76:	bd10      	pop	{r4, pc}
 8009d78:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009d7c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009d80:	e7f7      	b.n	8009d72 <memmove+0x24>

08009d82 <strncmp>:
 8009d82:	b510      	push	{r4, lr}
 8009d84:	b16a      	cbz	r2, 8009da2 <strncmp+0x20>
 8009d86:	3901      	subs	r1, #1
 8009d88:	1884      	adds	r4, r0, r2
 8009d8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009d8e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009d92:	429a      	cmp	r2, r3
 8009d94:	d103      	bne.n	8009d9e <strncmp+0x1c>
 8009d96:	42a0      	cmp	r0, r4
 8009d98:	d001      	beq.n	8009d9e <strncmp+0x1c>
 8009d9a:	2a00      	cmp	r2, #0
 8009d9c:	d1f5      	bne.n	8009d8a <strncmp+0x8>
 8009d9e:	1ad0      	subs	r0, r2, r3
 8009da0:	bd10      	pop	{r4, pc}
 8009da2:	4610      	mov	r0, r2
 8009da4:	e7fc      	b.n	8009da0 <strncmp+0x1e>
	...

08009da8 <_sbrk_r>:
 8009da8:	b538      	push	{r3, r4, r5, lr}
 8009daa:	4d06      	ldr	r5, [pc, #24]	@ (8009dc4 <_sbrk_r+0x1c>)
 8009dac:	2300      	movs	r3, #0
 8009dae:	4604      	mov	r4, r0
 8009db0:	4608      	mov	r0, r1
 8009db2:	602b      	str	r3, [r5, #0]
 8009db4:	f7f8 fbce 	bl	8002554 <_sbrk>
 8009db8:	1c43      	adds	r3, r0, #1
 8009dba:	d102      	bne.n	8009dc2 <_sbrk_r+0x1a>
 8009dbc:	682b      	ldr	r3, [r5, #0]
 8009dbe:	b103      	cbz	r3, 8009dc2 <_sbrk_r+0x1a>
 8009dc0:	6023      	str	r3, [r4, #0]
 8009dc2:	bd38      	pop	{r3, r4, r5, pc}
 8009dc4:	2000082c 	.word	0x2000082c

08009dc8 <memcpy>:
 8009dc8:	440a      	add	r2, r1
 8009dca:	4291      	cmp	r1, r2
 8009dcc:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8009dd0:	d100      	bne.n	8009dd4 <memcpy+0xc>
 8009dd2:	4770      	bx	lr
 8009dd4:	b510      	push	{r4, lr}
 8009dd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009dda:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009dde:	4291      	cmp	r1, r2
 8009de0:	d1f9      	bne.n	8009dd6 <memcpy+0xe>
 8009de2:	bd10      	pop	{r4, pc}
 8009de4:	0000      	movs	r0, r0
	...

08009de8 <nan>:
 8009de8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009df0 <nan+0x8>
 8009dec:	4770      	bx	lr
 8009dee:	bf00      	nop
 8009df0:	00000000 	.word	0x00000000
 8009df4:	7ff80000 	.word	0x7ff80000

08009df8 <__assert_func>:
 8009df8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009dfa:	4614      	mov	r4, r2
 8009dfc:	461a      	mov	r2, r3
 8009dfe:	4b09      	ldr	r3, [pc, #36]	@ (8009e24 <__assert_func+0x2c>)
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	4605      	mov	r5, r0
 8009e04:	68d8      	ldr	r0, [r3, #12]
 8009e06:	b14c      	cbz	r4, 8009e1c <__assert_func+0x24>
 8009e08:	4b07      	ldr	r3, [pc, #28]	@ (8009e28 <__assert_func+0x30>)
 8009e0a:	9100      	str	r1, [sp, #0]
 8009e0c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009e10:	4906      	ldr	r1, [pc, #24]	@ (8009e2c <__assert_func+0x34>)
 8009e12:	462b      	mov	r3, r5
 8009e14:	f000 fc1a 	bl	800a64c <fiprintf>
 8009e18:	f000 fc2a 	bl	800a670 <abort>
 8009e1c:	4b04      	ldr	r3, [pc, #16]	@ (8009e30 <__assert_func+0x38>)
 8009e1e:	461c      	mov	r4, r3
 8009e20:	e7f3      	b.n	8009e0a <__assert_func+0x12>
 8009e22:	bf00      	nop
 8009e24:	200001d4 	.word	0x200001d4
 8009e28:	0800ae6b 	.word	0x0800ae6b
 8009e2c:	0800ae78 	.word	0x0800ae78
 8009e30:	0800aea6 	.word	0x0800aea6

08009e34 <_calloc_r>:
 8009e34:	b570      	push	{r4, r5, r6, lr}
 8009e36:	fba1 5402 	umull	r5, r4, r1, r2
 8009e3a:	b934      	cbnz	r4, 8009e4a <_calloc_r+0x16>
 8009e3c:	4629      	mov	r1, r5
 8009e3e:	f7fd fe37 	bl	8007ab0 <_malloc_r>
 8009e42:	4606      	mov	r6, r0
 8009e44:	b928      	cbnz	r0, 8009e52 <_calloc_r+0x1e>
 8009e46:	4630      	mov	r0, r6
 8009e48:	bd70      	pop	{r4, r5, r6, pc}
 8009e4a:	220c      	movs	r2, #12
 8009e4c:	6002      	str	r2, [r0, #0]
 8009e4e:	2600      	movs	r6, #0
 8009e50:	e7f9      	b.n	8009e46 <_calloc_r+0x12>
 8009e52:	462a      	mov	r2, r5
 8009e54:	4621      	mov	r1, r4
 8009e56:	f7fc fec0 	bl	8006bda <memset>
 8009e5a:	e7f4      	b.n	8009e46 <_calloc_r+0x12>

08009e5c <rshift>:
 8009e5c:	6903      	ldr	r3, [r0, #16]
 8009e5e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009e62:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009e66:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009e6a:	f100 0414 	add.w	r4, r0, #20
 8009e6e:	dd45      	ble.n	8009efc <rshift+0xa0>
 8009e70:	f011 011f 	ands.w	r1, r1, #31
 8009e74:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009e78:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009e7c:	d10c      	bne.n	8009e98 <rshift+0x3c>
 8009e7e:	f100 0710 	add.w	r7, r0, #16
 8009e82:	4629      	mov	r1, r5
 8009e84:	42b1      	cmp	r1, r6
 8009e86:	d334      	bcc.n	8009ef2 <rshift+0x96>
 8009e88:	1a9b      	subs	r3, r3, r2
 8009e8a:	009b      	lsls	r3, r3, #2
 8009e8c:	1eea      	subs	r2, r5, #3
 8009e8e:	4296      	cmp	r6, r2
 8009e90:	bf38      	it	cc
 8009e92:	2300      	movcc	r3, #0
 8009e94:	4423      	add	r3, r4
 8009e96:	e015      	b.n	8009ec4 <rshift+0x68>
 8009e98:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009e9c:	f1c1 0820 	rsb	r8, r1, #32
 8009ea0:	40cf      	lsrs	r7, r1
 8009ea2:	f105 0e04 	add.w	lr, r5, #4
 8009ea6:	46a1      	mov	r9, r4
 8009ea8:	4576      	cmp	r6, lr
 8009eaa:	46f4      	mov	ip, lr
 8009eac:	d815      	bhi.n	8009eda <rshift+0x7e>
 8009eae:	1a9a      	subs	r2, r3, r2
 8009eb0:	0092      	lsls	r2, r2, #2
 8009eb2:	3a04      	subs	r2, #4
 8009eb4:	3501      	adds	r5, #1
 8009eb6:	42ae      	cmp	r6, r5
 8009eb8:	bf38      	it	cc
 8009eba:	2200      	movcc	r2, #0
 8009ebc:	18a3      	adds	r3, r4, r2
 8009ebe:	50a7      	str	r7, [r4, r2]
 8009ec0:	b107      	cbz	r7, 8009ec4 <rshift+0x68>
 8009ec2:	3304      	adds	r3, #4
 8009ec4:	1b1a      	subs	r2, r3, r4
 8009ec6:	42a3      	cmp	r3, r4
 8009ec8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009ecc:	bf08      	it	eq
 8009ece:	2300      	moveq	r3, #0
 8009ed0:	6102      	str	r2, [r0, #16]
 8009ed2:	bf08      	it	eq
 8009ed4:	6143      	streq	r3, [r0, #20]
 8009ed6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009eda:	f8dc c000 	ldr.w	ip, [ip]
 8009ede:	fa0c fc08 	lsl.w	ip, ip, r8
 8009ee2:	ea4c 0707 	orr.w	r7, ip, r7
 8009ee6:	f849 7b04 	str.w	r7, [r9], #4
 8009eea:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009eee:	40cf      	lsrs	r7, r1
 8009ef0:	e7da      	b.n	8009ea8 <rshift+0x4c>
 8009ef2:	f851 cb04 	ldr.w	ip, [r1], #4
 8009ef6:	f847 cf04 	str.w	ip, [r7, #4]!
 8009efa:	e7c3      	b.n	8009e84 <rshift+0x28>
 8009efc:	4623      	mov	r3, r4
 8009efe:	e7e1      	b.n	8009ec4 <rshift+0x68>

08009f00 <__hexdig_fun>:
 8009f00:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8009f04:	2b09      	cmp	r3, #9
 8009f06:	d802      	bhi.n	8009f0e <__hexdig_fun+0xe>
 8009f08:	3820      	subs	r0, #32
 8009f0a:	b2c0      	uxtb	r0, r0
 8009f0c:	4770      	bx	lr
 8009f0e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8009f12:	2b05      	cmp	r3, #5
 8009f14:	d801      	bhi.n	8009f1a <__hexdig_fun+0x1a>
 8009f16:	3847      	subs	r0, #71	@ 0x47
 8009f18:	e7f7      	b.n	8009f0a <__hexdig_fun+0xa>
 8009f1a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8009f1e:	2b05      	cmp	r3, #5
 8009f20:	d801      	bhi.n	8009f26 <__hexdig_fun+0x26>
 8009f22:	3827      	subs	r0, #39	@ 0x27
 8009f24:	e7f1      	b.n	8009f0a <__hexdig_fun+0xa>
 8009f26:	2000      	movs	r0, #0
 8009f28:	4770      	bx	lr
	...

08009f2c <__gethex>:
 8009f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f30:	b085      	sub	sp, #20
 8009f32:	468a      	mov	sl, r1
 8009f34:	9302      	str	r3, [sp, #8]
 8009f36:	680b      	ldr	r3, [r1, #0]
 8009f38:	9001      	str	r0, [sp, #4]
 8009f3a:	4690      	mov	r8, r2
 8009f3c:	1c9c      	adds	r4, r3, #2
 8009f3e:	46a1      	mov	r9, r4
 8009f40:	f814 0b01 	ldrb.w	r0, [r4], #1
 8009f44:	2830      	cmp	r0, #48	@ 0x30
 8009f46:	d0fa      	beq.n	8009f3e <__gethex+0x12>
 8009f48:	eba9 0303 	sub.w	r3, r9, r3
 8009f4c:	f1a3 0b02 	sub.w	fp, r3, #2
 8009f50:	f7ff ffd6 	bl	8009f00 <__hexdig_fun>
 8009f54:	4605      	mov	r5, r0
 8009f56:	2800      	cmp	r0, #0
 8009f58:	d168      	bne.n	800a02c <__gethex+0x100>
 8009f5a:	49a0      	ldr	r1, [pc, #640]	@ (800a1dc <__gethex+0x2b0>)
 8009f5c:	2201      	movs	r2, #1
 8009f5e:	4648      	mov	r0, r9
 8009f60:	f7ff ff0f 	bl	8009d82 <strncmp>
 8009f64:	4607      	mov	r7, r0
 8009f66:	2800      	cmp	r0, #0
 8009f68:	d167      	bne.n	800a03a <__gethex+0x10e>
 8009f6a:	f899 0001 	ldrb.w	r0, [r9, #1]
 8009f6e:	4626      	mov	r6, r4
 8009f70:	f7ff ffc6 	bl	8009f00 <__hexdig_fun>
 8009f74:	2800      	cmp	r0, #0
 8009f76:	d062      	beq.n	800a03e <__gethex+0x112>
 8009f78:	4623      	mov	r3, r4
 8009f7a:	7818      	ldrb	r0, [r3, #0]
 8009f7c:	2830      	cmp	r0, #48	@ 0x30
 8009f7e:	4699      	mov	r9, r3
 8009f80:	f103 0301 	add.w	r3, r3, #1
 8009f84:	d0f9      	beq.n	8009f7a <__gethex+0x4e>
 8009f86:	f7ff ffbb 	bl	8009f00 <__hexdig_fun>
 8009f8a:	fab0 f580 	clz	r5, r0
 8009f8e:	096d      	lsrs	r5, r5, #5
 8009f90:	f04f 0b01 	mov.w	fp, #1
 8009f94:	464a      	mov	r2, r9
 8009f96:	4616      	mov	r6, r2
 8009f98:	3201      	adds	r2, #1
 8009f9a:	7830      	ldrb	r0, [r6, #0]
 8009f9c:	f7ff ffb0 	bl	8009f00 <__hexdig_fun>
 8009fa0:	2800      	cmp	r0, #0
 8009fa2:	d1f8      	bne.n	8009f96 <__gethex+0x6a>
 8009fa4:	498d      	ldr	r1, [pc, #564]	@ (800a1dc <__gethex+0x2b0>)
 8009fa6:	2201      	movs	r2, #1
 8009fa8:	4630      	mov	r0, r6
 8009faa:	f7ff feea 	bl	8009d82 <strncmp>
 8009fae:	2800      	cmp	r0, #0
 8009fb0:	d13f      	bne.n	800a032 <__gethex+0x106>
 8009fb2:	b944      	cbnz	r4, 8009fc6 <__gethex+0x9a>
 8009fb4:	1c74      	adds	r4, r6, #1
 8009fb6:	4622      	mov	r2, r4
 8009fb8:	4616      	mov	r6, r2
 8009fba:	3201      	adds	r2, #1
 8009fbc:	7830      	ldrb	r0, [r6, #0]
 8009fbe:	f7ff ff9f 	bl	8009f00 <__hexdig_fun>
 8009fc2:	2800      	cmp	r0, #0
 8009fc4:	d1f8      	bne.n	8009fb8 <__gethex+0x8c>
 8009fc6:	1ba4      	subs	r4, r4, r6
 8009fc8:	00a7      	lsls	r7, r4, #2
 8009fca:	7833      	ldrb	r3, [r6, #0]
 8009fcc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8009fd0:	2b50      	cmp	r3, #80	@ 0x50
 8009fd2:	d13e      	bne.n	800a052 <__gethex+0x126>
 8009fd4:	7873      	ldrb	r3, [r6, #1]
 8009fd6:	2b2b      	cmp	r3, #43	@ 0x2b
 8009fd8:	d033      	beq.n	800a042 <__gethex+0x116>
 8009fda:	2b2d      	cmp	r3, #45	@ 0x2d
 8009fdc:	d034      	beq.n	800a048 <__gethex+0x11c>
 8009fde:	1c71      	adds	r1, r6, #1
 8009fe0:	2400      	movs	r4, #0
 8009fe2:	7808      	ldrb	r0, [r1, #0]
 8009fe4:	f7ff ff8c 	bl	8009f00 <__hexdig_fun>
 8009fe8:	1e43      	subs	r3, r0, #1
 8009fea:	b2db      	uxtb	r3, r3
 8009fec:	2b18      	cmp	r3, #24
 8009fee:	d830      	bhi.n	800a052 <__gethex+0x126>
 8009ff0:	f1a0 0210 	sub.w	r2, r0, #16
 8009ff4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009ff8:	f7ff ff82 	bl	8009f00 <__hexdig_fun>
 8009ffc:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 800a000:	fa5f fc8c 	uxtb.w	ip, ip
 800a004:	f1bc 0f18 	cmp.w	ip, #24
 800a008:	f04f 030a 	mov.w	r3, #10
 800a00c:	d91e      	bls.n	800a04c <__gethex+0x120>
 800a00e:	b104      	cbz	r4, 800a012 <__gethex+0xe6>
 800a010:	4252      	negs	r2, r2
 800a012:	4417      	add	r7, r2
 800a014:	f8ca 1000 	str.w	r1, [sl]
 800a018:	b1ed      	cbz	r5, 800a056 <__gethex+0x12a>
 800a01a:	f1bb 0f00 	cmp.w	fp, #0
 800a01e:	bf0c      	ite	eq
 800a020:	2506      	moveq	r5, #6
 800a022:	2500      	movne	r5, #0
 800a024:	4628      	mov	r0, r5
 800a026:	b005      	add	sp, #20
 800a028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a02c:	2500      	movs	r5, #0
 800a02e:	462c      	mov	r4, r5
 800a030:	e7b0      	b.n	8009f94 <__gethex+0x68>
 800a032:	2c00      	cmp	r4, #0
 800a034:	d1c7      	bne.n	8009fc6 <__gethex+0x9a>
 800a036:	4627      	mov	r7, r4
 800a038:	e7c7      	b.n	8009fca <__gethex+0x9e>
 800a03a:	464e      	mov	r6, r9
 800a03c:	462f      	mov	r7, r5
 800a03e:	2501      	movs	r5, #1
 800a040:	e7c3      	b.n	8009fca <__gethex+0x9e>
 800a042:	2400      	movs	r4, #0
 800a044:	1cb1      	adds	r1, r6, #2
 800a046:	e7cc      	b.n	8009fe2 <__gethex+0xb6>
 800a048:	2401      	movs	r4, #1
 800a04a:	e7fb      	b.n	800a044 <__gethex+0x118>
 800a04c:	fb03 0002 	mla	r0, r3, r2, r0
 800a050:	e7ce      	b.n	8009ff0 <__gethex+0xc4>
 800a052:	4631      	mov	r1, r6
 800a054:	e7de      	b.n	800a014 <__gethex+0xe8>
 800a056:	eba6 0309 	sub.w	r3, r6, r9
 800a05a:	3b01      	subs	r3, #1
 800a05c:	4629      	mov	r1, r5
 800a05e:	2b07      	cmp	r3, #7
 800a060:	dc0a      	bgt.n	800a078 <__gethex+0x14c>
 800a062:	9801      	ldr	r0, [sp, #4]
 800a064:	f7fd fdb0 	bl	8007bc8 <_Balloc>
 800a068:	4604      	mov	r4, r0
 800a06a:	b940      	cbnz	r0, 800a07e <__gethex+0x152>
 800a06c:	4b5c      	ldr	r3, [pc, #368]	@ (800a1e0 <__gethex+0x2b4>)
 800a06e:	4602      	mov	r2, r0
 800a070:	21e4      	movs	r1, #228	@ 0xe4
 800a072:	485c      	ldr	r0, [pc, #368]	@ (800a1e4 <__gethex+0x2b8>)
 800a074:	f7ff fec0 	bl	8009df8 <__assert_func>
 800a078:	3101      	adds	r1, #1
 800a07a:	105b      	asrs	r3, r3, #1
 800a07c:	e7ef      	b.n	800a05e <__gethex+0x132>
 800a07e:	f100 0a14 	add.w	sl, r0, #20
 800a082:	2300      	movs	r3, #0
 800a084:	4655      	mov	r5, sl
 800a086:	469b      	mov	fp, r3
 800a088:	45b1      	cmp	r9, r6
 800a08a:	d337      	bcc.n	800a0fc <__gethex+0x1d0>
 800a08c:	f845 bb04 	str.w	fp, [r5], #4
 800a090:	eba5 050a 	sub.w	r5, r5, sl
 800a094:	10ad      	asrs	r5, r5, #2
 800a096:	6125      	str	r5, [r4, #16]
 800a098:	4658      	mov	r0, fp
 800a09a:	f7fd fe87 	bl	8007dac <__hi0bits>
 800a09e:	016d      	lsls	r5, r5, #5
 800a0a0:	f8d8 6000 	ldr.w	r6, [r8]
 800a0a4:	1a2d      	subs	r5, r5, r0
 800a0a6:	42b5      	cmp	r5, r6
 800a0a8:	dd54      	ble.n	800a154 <__gethex+0x228>
 800a0aa:	1bad      	subs	r5, r5, r6
 800a0ac:	4629      	mov	r1, r5
 800a0ae:	4620      	mov	r0, r4
 800a0b0:	f7fe fa13 	bl	80084da <__any_on>
 800a0b4:	4681      	mov	r9, r0
 800a0b6:	b178      	cbz	r0, 800a0d8 <__gethex+0x1ac>
 800a0b8:	1e6b      	subs	r3, r5, #1
 800a0ba:	1159      	asrs	r1, r3, #5
 800a0bc:	f003 021f 	and.w	r2, r3, #31
 800a0c0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a0c4:	f04f 0901 	mov.w	r9, #1
 800a0c8:	fa09 f202 	lsl.w	r2, r9, r2
 800a0cc:	420a      	tst	r2, r1
 800a0ce:	d003      	beq.n	800a0d8 <__gethex+0x1ac>
 800a0d0:	454b      	cmp	r3, r9
 800a0d2:	dc36      	bgt.n	800a142 <__gethex+0x216>
 800a0d4:	f04f 0902 	mov.w	r9, #2
 800a0d8:	4629      	mov	r1, r5
 800a0da:	4620      	mov	r0, r4
 800a0dc:	f7ff febe 	bl	8009e5c <rshift>
 800a0e0:	442f      	add	r7, r5
 800a0e2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a0e6:	42bb      	cmp	r3, r7
 800a0e8:	da42      	bge.n	800a170 <__gethex+0x244>
 800a0ea:	9801      	ldr	r0, [sp, #4]
 800a0ec:	4621      	mov	r1, r4
 800a0ee:	f7fd fdab 	bl	8007c48 <_Bfree>
 800a0f2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	6013      	str	r3, [r2, #0]
 800a0f8:	25a3      	movs	r5, #163	@ 0xa3
 800a0fa:	e793      	b.n	800a024 <__gethex+0xf8>
 800a0fc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800a100:	2a2e      	cmp	r2, #46	@ 0x2e
 800a102:	d012      	beq.n	800a12a <__gethex+0x1fe>
 800a104:	2b20      	cmp	r3, #32
 800a106:	d104      	bne.n	800a112 <__gethex+0x1e6>
 800a108:	f845 bb04 	str.w	fp, [r5], #4
 800a10c:	f04f 0b00 	mov.w	fp, #0
 800a110:	465b      	mov	r3, fp
 800a112:	7830      	ldrb	r0, [r6, #0]
 800a114:	9303      	str	r3, [sp, #12]
 800a116:	f7ff fef3 	bl	8009f00 <__hexdig_fun>
 800a11a:	9b03      	ldr	r3, [sp, #12]
 800a11c:	f000 000f 	and.w	r0, r0, #15
 800a120:	4098      	lsls	r0, r3
 800a122:	ea4b 0b00 	orr.w	fp, fp, r0
 800a126:	3304      	adds	r3, #4
 800a128:	e7ae      	b.n	800a088 <__gethex+0x15c>
 800a12a:	45b1      	cmp	r9, r6
 800a12c:	d8ea      	bhi.n	800a104 <__gethex+0x1d8>
 800a12e:	492b      	ldr	r1, [pc, #172]	@ (800a1dc <__gethex+0x2b0>)
 800a130:	9303      	str	r3, [sp, #12]
 800a132:	2201      	movs	r2, #1
 800a134:	4630      	mov	r0, r6
 800a136:	f7ff fe24 	bl	8009d82 <strncmp>
 800a13a:	9b03      	ldr	r3, [sp, #12]
 800a13c:	2800      	cmp	r0, #0
 800a13e:	d1e1      	bne.n	800a104 <__gethex+0x1d8>
 800a140:	e7a2      	b.n	800a088 <__gethex+0x15c>
 800a142:	1ea9      	subs	r1, r5, #2
 800a144:	4620      	mov	r0, r4
 800a146:	f7fe f9c8 	bl	80084da <__any_on>
 800a14a:	2800      	cmp	r0, #0
 800a14c:	d0c2      	beq.n	800a0d4 <__gethex+0x1a8>
 800a14e:	f04f 0903 	mov.w	r9, #3
 800a152:	e7c1      	b.n	800a0d8 <__gethex+0x1ac>
 800a154:	da09      	bge.n	800a16a <__gethex+0x23e>
 800a156:	1b75      	subs	r5, r6, r5
 800a158:	4621      	mov	r1, r4
 800a15a:	9801      	ldr	r0, [sp, #4]
 800a15c:	462a      	mov	r2, r5
 800a15e:	f7fd ff83 	bl	8008068 <__lshift>
 800a162:	1b7f      	subs	r7, r7, r5
 800a164:	4604      	mov	r4, r0
 800a166:	f100 0a14 	add.w	sl, r0, #20
 800a16a:	f04f 0900 	mov.w	r9, #0
 800a16e:	e7b8      	b.n	800a0e2 <__gethex+0x1b6>
 800a170:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a174:	42bd      	cmp	r5, r7
 800a176:	dd6f      	ble.n	800a258 <__gethex+0x32c>
 800a178:	1bed      	subs	r5, r5, r7
 800a17a:	42ae      	cmp	r6, r5
 800a17c:	dc34      	bgt.n	800a1e8 <__gethex+0x2bc>
 800a17e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a182:	2b02      	cmp	r3, #2
 800a184:	d022      	beq.n	800a1cc <__gethex+0x2a0>
 800a186:	2b03      	cmp	r3, #3
 800a188:	d024      	beq.n	800a1d4 <__gethex+0x2a8>
 800a18a:	2b01      	cmp	r3, #1
 800a18c:	d115      	bne.n	800a1ba <__gethex+0x28e>
 800a18e:	42ae      	cmp	r6, r5
 800a190:	d113      	bne.n	800a1ba <__gethex+0x28e>
 800a192:	2e01      	cmp	r6, #1
 800a194:	d10b      	bne.n	800a1ae <__gethex+0x282>
 800a196:	9a02      	ldr	r2, [sp, #8]
 800a198:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a19c:	6013      	str	r3, [r2, #0]
 800a19e:	2301      	movs	r3, #1
 800a1a0:	6123      	str	r3, [r4, #16]
 800a1a2:	f8ca 3000 	str.w	r3, [sl]
 800a1a6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a1a8:	2562      	movs	r5, #98	@ 0x62
 800a1aa:	601c      	str	r4, [r3, #0]
 800a1ac:	e73a      	b.n	800a024 <__gethex+0xf8>
 800a1ae:	1e71      	subs	r1, r6, #1
 800a1b0:	4620      	mov	r0, r4
 800a1b2:	f7fe f992 	bl	80084da <__any_on>
 800a1b6:	2800      	cmp	r0, #0
 800a1b8:	d1ed      	bne.n	800a196 <__gethex+0x26a>
 800a1ba:	9801      	ldr	r0, [sp, #4]
 800a1bc:	4621      	mov	r1, r4
 800a1be:	f7fd fd43 	bl	8007c48 <_Bfree>
 800a1c2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	6013      	str	r3, [r2, #0]
 800a1c8:	2550      	movs	r5, #80	@ 0x50
 800a1ca:	e72b      	b.n	800a024 <__gethex+0xf8>
 800a1cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d1f3      	bne.n	800a1ba <__gethex+0x28e>
 800a1d2:	e7e0      	b.n	800a196 <__gethex+0x26a>
 800a1d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d1dd      	bne.n	800a196 <__gethex+0x26a>
 800a1da:	e7ee      	b.n	800a1ba <__gethex+0x28e>
 800a1dc:	0800ae35 	.word	0x0800ae35
 800a1e0:	0800adcb 	.word	0x0800adcb
 800a1e4:	0800aea7 	.word	0x0800aea7
 800a1e8:	1e6f      	subs	r7, r5, #1
 800a1ea:	f1b9 0f00 	cmp.w	r9, #0
 800a1ee:	d130      	bne.n	800a252 <__gethex+0x326>
 800a1f0:	b127      	cbz	r7, 800a1fc <__gethex+0x2d0>
 800a1f2:	4639      	mov	r1, r7
 800a1f4:	4620      	mov	r0, r4
 800a1f6:	f7fe f970 	bl	80084da <__any_on>
 800a1fa:	4681      	mov	r9, r0
 800a1fc:	117a      	asrs	r2, r7, #5
 800a1fe:	2301      	movs	r3, #1
 800a200:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a204:	f007 071f 	and.w	r7, r7, #31
 800a208:	40bb      	lsls	r3, r7
 800a20a:	4213      	tst	r3, r2
 800a20c:	4629      	mov	r1, r5
 800a20e:	4620      	mov	r0, r4
 800a210:	bf18      	it	ne
 800a212:	f049 0902 	orrne.w	r9, r9, #2
 800a216:	f7ff fe21 	bl	8009e5c <rshift>
 800a21a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800a21e:	1b76      	subs	r6, r6, r5
 800a220:	2502      	movs	r5, #2
 800a222:	f1b9 0f00 	cmp.w	r9, #0
 800a226:	d047      	beq.n	800a2b8 <__gethex+0x38c>
 800a228:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a22c:	2b02      	cmp	r3, #2
 800a22e:	d015      	beq.n	800a25c <__gethex+0x330>
 800a230:	2b03      	cmp	r3, #3
 800a232:	d017      	beq.n	800a264 <__gethex+0x338>
 800a234:	2b01      	cmp	r3, #1
 800a236:	d109      	bne.n	800a24c <__gethex+0x320>
 800a238:	f019 0f02 	tst.w	r9, #2
 800a23c:	d006      	beq.n	800a24c <__gethex+0x320>
 800a23e:	f8da 3000 	ldr.w	r3, [sl]
 800a242:	ea49 0903 	orr.w	r9, r9, r3
 800a246:	f019 0f01 	tst.w	r9, #1
 800a24a:	d10e      	bne.n	800a26a <__gethex+0x33e>
 800a24c:	f045 0510 	orr.w	r5, r5, #16
 800a250:	e032      	b.n	800a2b8 <__gethex+0x38c>
 800a252:	f04f 0901 	mov.w	r9, #1
 800a256:	e7d1      	b.n	800a1fc <__gethex+0x2d0>
 800a258:	2501      	movs	r5, #1
 800a25a:	e7e2      	b.n	800a222 <__gethex+0x2f6>
 800a25c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a25e:	f1c3 0301 	rsb	r3, r3, #1
 800a262:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a264:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a266:	2b00      	cmp	r3, #0
 800a268:	d0f0      	beq.n	800a24c <__gethex+0x320>
 800a26a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a26e:	f104 0314 	add.w	r3, r4, #20
 800a272:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a276:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a27a:	f04f 0c00 	mov.w	ip, #0
 800a27e:	4618      	mov	r0, r3
 800a280:	f853 2b04 	ldr.w	r2, [r3], #4
 800a284:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 800a288:	d01b      	beq.n	800a2c2 <__gethex+0x396>
 800a28a:	3201      	adds	r2, #1
 800a28c:	6002      	str	r2, [r0, #0]
 800a28e:	2d02      	cmp	r5, #2
 800a290:	f104 0314 	add.w	r3, r4, #20
 800a294:	d13c      	bne.n	800a310 <__gethex+0x3e4>
 800a296:	f8d8 2000 	ldr.w	r2, [r8]
 800a29a:	3a01      	subs	r2, #1
 800a29c:	42b2      	cmp	r2, r6
 800a29e:	d109      	bne.n	800a2b4 <__gethex+0x388>
 800a2a0:	1171      	asrs	r1, r6, #5
 800a2a2:	2201      	movs	r2, #1
 800a2a4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a2a8:	f006 061f 	and.w	r6, r6, #31
 800a2ac:	fa02 f606 	lsl.w	r6, r2, r6
 800a2b0:	421e      	tst	r6, r3
 800a2b2:	d13a      	bne.n	800a32a <__gethex+0x3fe>
 800a2b4:	f045 0520 	orr.w	r5, r5, #32
 800a2b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a2ba:	601c      	str	r4, [r3, #0]
 800a2bc:	9b02      	ldr	r3, [sp, #8]
 800a2be:	601f      	str	r7, [r3, #0]
 800a2c0:	e6b0      	b.n	800a024 <__gethex+0xf8>
 800a2c2:	4299      	cmp	r1, r3
 800a2c4:	f843 cc04 	str.w	ip, [r3, #-4]
 800a2c8:	d8d9      	bhi.n	800a27e <__gethex+0x352>
 800a2ca:	68a3      	ldr	r3, [r4, #8]
 800a2cc:	459b      	cmp	fp, r3
 800a2ce:	db17      	blt.n	800a300 <__gethex+0x3d4>
 800a2d0:	6861      	ldr	r1, [r4, #4]
 800a2d2:	9801      	ldr	r0, [sp, #4]
 800a2d4:	3101      	adds	r1, #1
 800a2d6:	f7fd fc77 	bl	8007bc8 <_Balloc>
 800a2da:	4681      	mov	r9, r0
 800a2dc:	b918      	cbnz	r0, 800a2e6 <__gethex+0x3ba>
 800a2de:	4b1a      	ldr	r3, [pc, #104]	@ (800a348 <__gethex+0x41c>)
 800a2e0:	4602      	mov	r2, r0
 800a2e2:	2184      	movs	r1, #132	@ 0x84
 800a2e4:	e6c5      	b.n	800a072 <__gethex+0x146>
 800a2e6:	6922      	ldr	r2, [r4, #16]
 800a2e8:	3202      	adds	r2, #2
 800a2ea:	f104 010c 	add.w	r1, r4, #12
 800a2ee:	0092      	lsls	r2, r2, #2
 800a2f0:	300c      	adds	r0, #12
 800a2f2:	f7ff fd69 	bl	8009dc8 <memcpy>
 800a2f6:	4621      	mov	r1, r4
 800a2f8:	9801      	ldr	r0, [sp, #4]
 800a2fa:	f7fd fca5 	bl	8007c48 <_Bfree>
 800a2fe:	464c      	mov	r4, r9
 800a300:	6923      	ldr	r3, [r4, #16]
 800a302:	1c5a      	adds	r2, r3, #1
 800a304:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a308:	6122      	str	r2, [r4, #16]
 800a30a:	2201      	movs	r2, #1
 800a30c:	615a      	str	r2, [r3, #20]
 800a30e:	e7be      	b.n	800a28e <__gethex+0x362>
 800a310:	6922      	ldr	r2, [r4, #16]
 800a312:	455a      	cmp	r2, fp
 800a314:	dd0b      	ble.n	800a32e <__gethex+0x402>
 800a316:	2101      	movs	r1, #1
 800a318:	4620      	mov	r0, r4
 800a31a:	f7ff fd9f 	bl	8009e5c <rshift>
 800a31e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a322:	3701      	adds	r7, #1
 800a324:	42bb      	cmp	r3, r7
 800a326:	f6ff aee0 	blt.w	800a0ea <__gethex+0x1be>
 800a32a:	2501      	movs	r5, #1
 800a32c:	e7c2      	b.n	800a2b4 <__gethex+0x388>
 800a32e:	f016 061f 	ands.w	r6, r6, #31
 800a332:	d0fa      	beq.n	800a32a <__gethex+0x3fe>
 800a334:	4453      	add	r3, sl
 800a336:	f1c6 0620 	rsb	r6, r6, #32
 800a33a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a33e:	f7fd fd35 	bl	8007dac <__hi0bits>
 800a342:	42b0      	cmp	r0, r6
 800a344:	dbe7      	blt.n	800a316 <__gethex+0x3ea>
 800a346:	e7f0      	b.n	800a32a <__gethex+0x3fe>
 800a348:	0800adcb 	.word	0x0800adcb

0800a34c <L_shift>:
 800a34c:	f1c2 0208 	rsb	r2, r2, #8
 800a350:	0092      	lsls	r2, r2, #2
 800a352:	b570      	push	{r4, r5, r6, lr}
 800a354:	f1c2 0620 	rsb	r6, r2, #32
 800a358:	6843      	ldr	r3, [r0, #4]
 800a35a:	6804      	ldr	r4, [r0, #0]
 800a35c:	fa03 f506 	lsl.w	r5, r3, r6
 800a360:	432c      	orrs	r4, r5
 800a362:	40d3      	lsrs	r3, r2
 800a364:	6004      	str	r4, [r0, #0]
 800a366:	f840 3f04 	str.w	r3, [r0, #4]!
 800a36a:	4288      	cmp	r0, r1
 800a36c:	d3f4      	bcc.n	800a358 <L_shift+0xc>
 800a36e:	bd70      	pop	{r4, r5, r6, pc}

0800a370 <__match>:
 800a370:	b530      	push	{r4, r5, lr}
 800a372:	6803      	ldr	r3, [r0, #0]
 800a374:	3301      	adds	r3, #1
 800a376:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a37a:	b914      	cbnz	r4, 800a382 <__match+0x12>
 800a37c:	6003      	str	r3, [r0, #0]
 800a37e:	2001      	movs	r0, #1
 800a380:	bd30      	pop	{r4, r5, pc}
 800a382:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a386:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800a38a:	2d19      	cmp	r5, #25
 800a38c:	bf98      	it	ls
 800a38e:	3220      	addls	r2, #32
 800a390:	42a2      	cmp	r2, r4
 800a392:	d0f0      	beq.n	800a376 <__match+0x6>
 800a394:	2000      	movs	r0, #0
 800a396:	e7f3      	b.n	800a380 <__match+0x10>

0800a398 <__hexnan>:
 800a398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a39c:	680b      	ldr	r3, [r1, #0]
 800a39e:	6801      	ldr	r1, [r0, #0]
 800a3a0:	115e      	asrs	r6, r3, #5
 800a3a2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a3a6:	f013 031f 	ands.w	r3, r3, #31
 800a3aa:	b087      	sub	sp, #28
 800a3ac:	bf18      	it	ne
 800a3ae:	3604      	addne	r6, #4
 800a3b0:	2500      	movs	r5, #0
 800a3b2:	1f37      	subs	r7, r6, #4
 800a3b4:	4682      	mov	sl, r0
 800a3b6:	4690      	mov	r8, r2
 800a3b8:	9301      	str	r3, [sp, #4]
 800a3ba:	f846 5c04 	str.w	r5, [r6, #-4]
 800a3be:	46b9      	mov	r9, r7
 800a3c0:	463c      	mov	r4, r7
 800a3c2:	9502      	str	r5, [sp, #8]
 800a3c4:	46ab      	mov	fp, r5
 800a3c6:	784a      	ldrb	r2, [r1, #1]
 800a3c8:	1c4b      	adds	r3, r1, #1
 800a3ca:	9303      	str	r3, [sp, #12]
 800a3cc:	b342      	cbz	r2, 800a420 <__hexnan+0x88>
 800a3ce:	4610      	mov	r0, r2
 800a3d0:	9105      	str	r1, [sp, #20]
 800a3d2:	9204      	str	r2, [sp, #16]
 800a3d4:	f7ff fd94 	bl	8009f00 <__hexdig_fun>
 800a3d8:	2800      	cmp	r0, #0
 800a3da:	d151      	bne.n	800a480 <__hexnan+0xe8>
 800a3dc:	9a04      	ldr	r2, [sp, #16]
 800a3de:	9905      	ldr	r1, [sp, #20]
 800a3e0:	2a20      	cmp	r2, #32
 800a3e2:	d818      	bhi.n	800a416 <__hexnan+0x7e>
 800a3e4:	9b02      	ldr	r3, [sp, #8]
 800a3e6:	459b      	cmp	fp, r3
 800a3e8:	dd13      	ble.n	800a412 <__hexnan+0x7a>
 800a3ea:	454c      	cmp	r4, r9
 800a3ec:	d206      	bcs.n	800a3fc <__hexnan+0x64>
 800a3ee:	2d07      	cmp	r5, #7
 800a3f0:	dc04      	bgt.n	800a3fc <__hexnan+0x64>
 800a3f2:	462a      	mov	r2, r5
 800a3f4:	4649      	mov	r1, r9
 800a3f6:	4620      	mov	r0, r4
 800a3f8:	f7ff ffa8 	bl	800a34c <L_shift>
 800a3fc:	4544      	cmp	r4, r8
 800a3fe:	d952      	bls.n	800a4a6 <__hexnan+0x10e>
 800a400:	2300      	movs	r3, #0
 800a402:	f1a4 0904 	sub.w	r9, r4, #4
 800a406:	f844 3c04 	str.w	r3, [r4, #-4]
 800a40a:	f8cd b008 	str.w	fp, [sp, #8]
 800a40e:	464c      	mov	r4, r9
 800a410:	461d      	mov	r5, r3
 800a412:	9903      	ldr	r1, [sp, #12]
 800a414:	e7d7      	b.n	800a3c6 <__hexnan+0x2e>
 800a416:	2a29      	cmp	r2, #41	@ 0x29
 800a418:	d157      	bne.n	800a4ca <__hexnan+0x132>
 800a41a:	3102      	adds	r1, #2
 800a41c:	f8ca 1000 	str.w	r1, [sl]
 800a420:	f1bb 0f00 	cmp.w	fp, #0
 800a424:	d051      	beq.n	800a4ca <__hexnan+0x132>
 800a426:	454c      	cmp	r4, r9
 800a428:	d206      	bcs.n	800a438 <__hexnan+0xa0>
 800a42a:	2d07      	cmp	r5, #7
 800a42c:	dc04      	bgt.n	800a438 <__hexnan+0xa0>
 800a42e:	462a      	mov	r2, r5
 800a430:	4649      	mov	r1, r9
 800a432:	4620      	mov	r0, r4
 800a434:	f7ff ff8a 	bl	800a34c <L_shift>
 800a438:	4544      	cmp	r4, r8
 800a43a:	d936      	bls.n	800a4aa <__hexnan+0x112>
 800a43c:	f1a8 0204 	sub.w	r2, r8, #4
 800a440:	4623      	mov	r3, r4
 800a442:	f853 1b04 	ldr.w	r1, [r3], #4
 800a446:	f842 1f04 	str.w	r1, [r2, #4]!
 800a44a:	429f      	cmp	r7, r3
 800a44c:	d2f9      	bcs.n	800a442 <__hexnan+0xaa>
 800a44e:	1b3b      	subs	r3, r7, r4
 800a450:	f023 0303 	bic.w	r3, r3, #3
 800a454:	3304      	adds	r3, #4
 800a456:	3401      	adds	r4, #1
 800a458:	3e03      	subs	r6, #3
 800a45a:	42b4      	cmp	r4, r6
 800a45c:	bf88      	it	hi
 800a45e:	2304      	movhi	r3, #4
 800a460:	4443      	add	r3, r8
 800a462:	2200      	movs	r2, #0
 800a464:	f843 2b04 	str.w	r2, [r3], #4
 800a468:	429f      	cmp	r7, r3
 800a46a:	d2fb      	bcs.n	800a464 <__hexnan+0xcc>
 800a46c:	683b      	ldr	r3, [r7, #0]
 800a46e:	b91b      	cbnz	r3, 800a478 <__hexnan+0xe0>
 800a470:	4547      	cmp	r7, r8
 800a472:	d128      	bne.n	800a4c6 <__hexnan+0x12e>
 800a474:	2301      	movs	r3, #1
 800a476:	603b      	str	r3, [r7, #0]
 800a478:	2005      	movs	r0, #5
 800a47a:	b007      	add	sp, #28
 800a47c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a480:	3501      	adds	r5, #1
 800a482:	2d08      	cmp	r5, #8
 800a484:	f10b 0b01 	add.w	fp, fp, #1
 800a488:	dd06      	ble.n	800a498 <__hexnan+0x100>
 800a48a:	4544      	cmp	r4, r8
 800a48c:	d9c1      	bls.n	800a412 <__hexnan+0x7a>
 800a48e:	2300      	movs	r3, #0
 800a490:	f844 3c04 	str.w	r3, [r4, #-4]
 800a494:	2501      	movs	r5, #1
 800a496:	3c04      	subs	r4, #4
 800a498:	6822      	ldr	r2, [r4, #0]
 800a49a:	f000 000f 	and.w	r0, r0, #15
 800a49e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a4a2:	6020      	str	r0, [r4, #0]
 800a4a4:	e7b5      	b.n	800a412 <__hexnan+0x7a>
 800a4a6:	2508      	movs	r5, #8
 800a4a8:	e7b3      	b.n	800a412 <__hexnan+0x7a>
 800a4aa:	9b01      	ldr	r3, [sp, #4]
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d0dd      	beq.n	800a46c <__hexnan+0xd4>
 800a4b0:	f1c3 0320 	rsb	r3, r3, #32
 800a4b4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a4b8:	40da      	lsrs	r2, r3
 800a4ba:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a4be:	4013      	ands	r3, r2
 800a4c0:	f846 3c04 	str.w	r3, [r6, #-4]
 800a4c4:	e7d2      	b.n	800a46c <__hexnan+0xd4>
 800a4c6:	3f04      	subs	r7, #4
 800a4c8:	e7d0      	b.n	800a46c <__hexnan+0xd4>
 800a4ca:	2004      	movs	r0, #4
 800a4cc:	e7d5      	b.n	800a47a <__hexnan+0xe2>

0800a4ce <__ascii_mbtowc>:
 800a4ce:	b082      	sub	sp, #8
 800a4d0:	b901      	cbnz	r1, 800a4d4 <__ascii_mbtowc+0x6>
 800a4d2:	a901      	add	r1, sp, #4
 800a4d4:	b142      	cbz	r2, 800a4e8 <__ascii_mbtowc+0x1a>
 800a4d6:	b14b      	cbz	r3, 800a4ec <__ascii_mbtowc+0x1e>
 800a4d8:	7813      	ldrb	r3, [r2, #0]
 800a4da:	600b      	str	r3, [r1, #0]
 800a4dc:	7812      	ldrb	r2, [r2, #0]
 800a4de:	1e10      	subs	r0, r2, #0
 800a4e0:	bf18      	it	ne
 800a4e2:	2001      	movne	r0, #1
 800a4e4:	b002      	add	sp, #8
 800a4e6:	4770      	bx	lr
 800a4e8:	4610      	mov	r0, r2
 800a4ea:	e7fb      	b.n	800a4e4 <__ascii_mbtowc+0x16>
 800a4ec:	f06f 0001 	mvn.w	r0, #1
 800a4f0:	e7f8      	b.n	800a4e4 <__ascii_mbtowc+0x16>

0800a4f2 <_realloc_r>:
 800a4f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4f6:	4607      	mov	r7, r0
 800a4f8:	4614      	mov	r4, r2
 800a4fa:	460d      	mov	r5, r1
 800a4fc:	b921      	cbnz	r1, 800a508 <_realloc_r+0x16>
 800a4fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a502:	4611      	mov	r1, r2
 800a504:	f7fd bad4 	b.w	8007ab0 <_malloc_r>
 800a508:	b92a      	cbnz	r2, 800a516 <_realloc_r+0x24>
 800a50a:	f7fd fa5d 	bl	80079c8 <_free_r>
 800a50e:	4625      	mov	r5, r4
 800a510:	4628      	mov	r0, r5
 800a512:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a516:	f000 f8b2 	bl	800a67e <_malloc_usable_size_r>
 800a51a:	4284      	cmp	r4, r0
 800a51c:	4606      	mov	r6, r0
 800a51e:	d802      	bhi.n	800a526 <_realloc_r+0x34>
 800a520:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a524:	d8f4      	bhi.n	800a510 <_realloc_r+0x1e>
 800a526:	4621      	mov	r1, r4
 800a528:	4638      	mov	r0, r7
 800a52a:	f7fd fac1 	bl	8007ab0 <_malloc_r>
 800a52e:	4680      	mov	r8, r0
 800a530:	b908      	cbnz	r0, 800a536 <_realloc_r+0x44>
 800a532:	4645      	mov	r5, r8
 800a534:	e7ec      	b.n	800a510 <_realloc_r+0x1e>
 800a536:	42b4      	cmp	r4, r6
 800a538:	4622      	mov	r2, r4
 800a53a:	4629      	mov	r1, r5
 800a53c:	bf28      	it	cs
 800a53e:	4632      	movcs	r2, r6
 800a540:	f7ff fc42 	bl	8009dc8 <memcpy>
 800a544:	4629      	mov	r1, r5
 800a546:	4638      	mov	r0, r7
 800a548:	f7fd fa3e 	bl	80079c8 <_free_r>
 800a54c:	e7f1      	b.n	800a532 <_realloc_r+0x40>
	...

0800a550 <_strtoul_l.isra.0>:
 800a550:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a554:	4e34      	ldr	r6, [pc, #208]	@ (800a628 <_strtoul_l.isra.0+0xd8>)
 800a556:	4686      	mov	lr, r0
 800a558:	460d      	mov	r5, r1
 800a55a:	4628      	mov	r0, r5
 800a55c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a560:	5d37      	ldrb	r7, [r6, r4]
 800a562:	f017 0708 	ands.w	r7, r7, #8
 800a566:	d1f8      	bne.n	800a55a <_strtoul_l.isra.0+0xa>
 800a568:	2c2d      	cmp	r4, #45	@ 0x2d
 800a56a:	d110      	bne.n	800a58e <_strtoul_l.isra.0+0x3e>
 800a56c:	782c      	ldrb	r4, [r5, #0]
 800a56e:	2701      	movs	r7, #1
 800a570:	1c85      	adds	r5, r0, #2
 800a572:	f033 0010 	bics.w	r0, r3, #16
 800a576:	d115      	bne.n	800a5a4 <_strtoul_l.isra.0+0x54>
 800a578:	2c30      	cmp	r4, #48	@ 0x30
 800a57a:	d10d      	bne.n	800a598 <_strtoul_l.isra.0+0x48>
 800a57c:	7828      	ldrb	r0, [r5, #0]
 800a57e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800a582:	2858      	cmp	r0, #88	@ 0x58
 800a584:	d108      	bne.n	800a598 <_strtoul_l.isra.0+0x48>
 800a586:	786c      	ldrb	r4, [r5, #1]
 800a588:	3502      	adds	r5, #2
 800a58a:	2310      	movs	r3, #16
 800a58c:	e00a      	b.n	800a5a4 <_strtoul_l.isra.0+0x54>
 800a58e:	2c2b      	cmp	r4, #43	@ 0x2b
 800a590:	bf04      	itt	eq
 800a592:	782c      	ldrbeq	r4, [r5, #0]
 800a594:	1c85      	addeq	r5, r0, #2
 800a596:	e7ec      	b.n	800a572 <_strtoul_l.isra.0+0x22>
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d1f6      	bne.n	800a58a <_strtoul_l.isra.0+0x3a>
 800a59c:	2c30      	cmp	r4, #48	@ 0x30
 800a59e:	bf14      	ite	ne
 800a5a0:	230a      	movne	r3, #10
 800a5a2:	2308      	moveq	r3, #8
 800a5a4:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 800a5a8:	2600      	movs	r6, #0
 800a5aa:	fbb8 f8f3 	udiv	r8, r8, r3
 800a5ae:	fb03 f908 	mul.w	r9, r3, r8
 800a5b2:	ea6f 0909 	mvn.w	r9, r9
 800a5b6:	4630      	mov	r0, r6
 800a5b8:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800a5bc:	f1bc 0f09 	cmp.w	ip, #9
 800a5c0:	d810      	bhi.n	800a5e4 <_strtoul_l.isra.0+0x94>
 800a5c2:	4664      	mov	r4, ip
 800a5c4:	42a3      	cmp	r3, r4
 800a5c6:	dd1e      	ble.n	800a606 <_strtoul_l.isra.0+0xb6>
 800a5c8:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 800a5cc:	d007      	beq.n	800a5de <_strtoul_l.isra.0+0x8e>
 800a5ce:	4580      	cmp	r8, r0
 800a5d0:	d316      	bcc.n	800a600 <_strtoul_l.isra.0+0xb0>
 800a5d2:	d101      	bne.n	800a5d8 <_strtoul_l.isra.0+0x88>
 800a5d4:	45a1      	cmp	r9, r4
 800a5d6:	db13      	blt.n	800a600 <_strtoul_l.isra.0+0xb0>
 800a5d8:	fb00 4003 	mla	r0, r0, r3, r4
 800a5dc:	2601      	movs	r6, #1
 800a5de:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a5e2:	e7e9      	b.n	800a5b8 <_strtoul_l.isra.0+0x68>
 800a5e4:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800a5e8:	f1bc 0f19 	cmp.w	ip, #25
 800a5ec:	d801      	bhi.n	800a5f2 <_strtoul_l.isra.0+0xa2>
 800a5ee:	3c37      	subs	r4, #55	@ 0x37
 800a5f0:	e7e8      	b.n	800a5c4 <_strtoul_l.isra.0+0x74>
 800a5f2:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800a5f6:	f1bc 0f19 	cmp.w	ip, #25
 800a5fa:	d804      	bhi.n	800a606 <_strtoul_l.isra.0+0xb6>
 800a5fc:	3c57      	subs	r4, #87	@ 0x57
 800a5fe:	e7e1      	b.n	800a5c4 <_strtoul_l.isra.0+0x74>
 800a600:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 800a604:	e7eb      	b.n	800a5de <_strtoul_l.isra.0+0x8e>
 800a606:	1c73      	adds	r3, r6, #1
 800a608:	d106      	bne.n	800a618 <_strtoul_l.isra.0+0xc8>
 800a60a:	2322      	movs	r3, #34	@ 0x22
 800a60c:	f8ce 3000 	str.w	r3, [lr]
 800a610:	4630      	mov	r0, r6
 800a612:	b932      	cbnz	r2, 800a622 <_strtoul_l.isra.0+0xd2>
 800a614:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a618:	b107      	cbz	r7, 800a61c <_strtoul_l.isra.0+0xcc>
 800a61a:	4240      	negs	r0, r0
 800a61c:	2a00      	cmp	r2, #0
 800a61e:	d0f9      	beq.n	800a614 <_strtoul_l.isra.0+0xc4>
 800a620:	b106      	cbz	r6, 800a624 <_strtoul_l.isra.0+0xd4>
 800a622:	1e69      	subs	r1, r5, #1
 800a624:	6011      	str	r1, [r2, #0]
 800a626:	e7f5      	b.n	800a614 <_strtoul_l.isra.0+0xc4>
 800a628:	0800b059 	.word	0x0800b059

0800a62c <_strtoul_r>:
 800a62c:	f7ff bf90 	b.w	800a550 <_strtoul_l.isra.0>

0800a630 <__ascii_wctomb>:
 800a630:	4603      	mov	r3, r0
 800a632:	4608      	mov	r0, r1
 800a634:	b141      	cbz	r1, 800a648 <__ascii_wctomb+0x18>
 800a636:	2aff      	cmp	r2, #255	@ 0xff
 800a638:	d904      	bls.n	800a644 <__ascii_wctomb+0x14>
 800a63a:	228a      	movs	r2, #138	@ 0x8a
 800a63c:	601a      	str	r2, [r3, #0]
 800a63e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a642:	4770      	bx	lr
 800a644:	700a      	strb	r2, [r1, #0]
 800a646:	2001      	movs	r0, #1
 800a648:	4770      	bx	lr
	...

0800a64c <fiprintf>:
 800a64c:	b40e      	push	{r1, r2, r3}
 800a64e:	b503      	push	{r0, r1, lr}
 800a650:	4601      	mov	r1, r0
 800a652:	ab03      	add	r3, sp, #12
 800a654:	4805      	ldr	r0, [pc, #20]	@ (800a66c <fiprintf+0x20>)
 800a656:	f853 2b04 	ldr.w	r2, [r3], #4
 800a65a:	6800      	ldr	r0, [r0, #0]
 800a65c:	9301      	str	r3, [sp, #4]
 800a65e:	f000 f83f 	bl	800a6e0 <_vfiprintf_r>
 800a662:	b002      	add	sp, #8
 800a664:	f85d eb04 	ldr.w	lr, [sp], #4
 800a668:	b003      	add	sp, #12
 800a66a:	4770      	bx	lr
 800a66c:	200001d4 	.word	0x200001d4

0800a670 <abort>:
 800a670:	b508      	push	{r3, lr}
 800a672:	2006      	movs	r0, #6
 800a674:	f000 fa08 	bl	800aa88 <raise>
 800a678:	2001      	movs	r0, #1
 800a67a:	f7f7 fef3 	bl	8002464 <_exit>

0800a67e <_malloc_usable_size_r>:
 800a67e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a682:	1f18      	subs	r0, r3, #4
 800a684:	2b00      	cmp	r3, #0
 800a686:	bfbc      	itt	lt
 800a688:	580b      	ldrlt	r3, [r1, r0]
 800a68a:	18c0      	addlt	r0, r0, r3
 800a68c:	4770      	bx	lr

0800a68e <__sfputc_r>:
 800a68e:	6893      	ldr	r3, [r2, #8]
 800a690:	3b01      	subs	r3, #1
 800a692:	2b00      	cmp	r3, #0
 800a694:	b410      	push	{r4}
 800a696:	6093      	str	r3, [r2, #8]
 800a698:	da08      	bge.n	800a6ac <__sfputc_r+0x1e>
 800a69a:	6994      	ldr	r4, [r2, #24]
 800a69c:	42a3      	cmp	r3, r4
 800a69e:	db01      	blt.n	800a6a4 <__sfputc_r+0x16>
 800a6a0:	290a      	cmp	r1, #10
 800a6a2:	d103      	bne.n	800a6ac <__sfputc_r+0x1e>
 800a6a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a6a8:	f000 b932 	b.w	800a910 <__swbuf_r>
 800a6ac:	6813      	ldr	r3, [r2, #0]
 800a6ae:	1c58      	adds	r0, r3, #1
 800a6b0:	6010      	str	r0, [r2, #0]
 800a6b2:	7019      	strb	r1, [r3, #0]
 800a6b4:	4608      	mov	r0, r1
 800a6b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a6ba:	4770      	bx	lr

0800a6bc <__sfputs_r>:
 800a6bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6be:	4606      	mov	r6, r0
 800a6c0:	460f      	mov	r7, r1
 800a6c2:	4614      	mov	r4, r2
 800a6c4:	18d5      	adds	r5, r2, r3
 800a6c6:	42ac      	cmp	r4, r5
 800a6c8:	d101      	bne.n	800a6ce <__sfputs_r+0x12>
 800a6ca:	2000      	movs	r0, #0
 800a6cc:	e007      	b.n	800a6de <__sfputs_r+0x22>
 800a6ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6d2:	463a      	mov	r2, r7
 800a6d4:	4630      	mov	r0, r6
 800a6d6:	f7ff ffda 	bl	800a68e <__sfputc_r>
 800a6da:	1c43      	adds	r3, r0, #1
 800a6dc:	d1f3      	bne.n	800a6c6 <__sfputs_r+0xa>
 800a6de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a6e0 <_vfiprintf_r>:
 800a6e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6e4:	460d      	mov	r5, r1
 800a6e6:	b09d      	sub	sp, #116	@ 0x74
 800a6e8:	4614      	mov	r4, r2
 800a6ea:	4698      	mov	r8, r3
 800a6ec:	4606      	mov	r6, r0
 800a6ee:	b118      	cbz	r0, 800a6f8 <_vfiprintf_r+0x18>
 800a6f0:	6a03      	ldr	r3, [r0, #32]
 800a6f2:	b90b      	cbnz	r3, 800a6f8 <_vfiprintf_r+0x18>
 800a6f4:	f7fc f9a8 	bl	8006a48 <__sinit>
 800a6f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a6fa:	07d9      	lsls	r1, r3, #31
 800a6fc:	d405      	bmi.n	800a70a <_vfiprintf_r+0x2a>
 800a6fe:	89ab      	ldrh	r3, [r5, #12]
 800a700:	059a      	lsls	r2, r3, #22
 800a702:	d402      	bmi.n	800a70a <_vfiprintf_r+0x2a>
 800a704:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a706:	f7fc fafc 	bl	8006d02 <__retarget_lock_acquire_recursive>
 800a70a:	89ab      	ldrh	r3, [r5, #12]
 800a70c:	071b      	lsls	r3, r3, #28
 800a70e:	d501      	bpl.n	800a714 <_vfiprintf_r+0x34>
 800a710:	692b      	ldr	r3, [r5, #16]
 800a712:	b99b      	cbnz	r3, 800a73c <_vfiprintf_r+0x5c>
 800a714:	4629      	mov	r1, r5
 800a716:	4630      	mov	r0, r6
 800a718:	f000 f938 	bl	800a98c <__swsetup_r>
 800a71c:	b170      	cbz	r0, 800a73c <_vfiprintf_r+0x5c>
 800a71e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a720:	07dc      	lsls	r4, r3, #31
 800a722:	d504      	bpl.n	800a72e <_vfiprintf_r+0x4e>
 800a724:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a728:	b01d      	add	sp, #116	@ 0x74
 800a72a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a72e:	89ab      	ldrh	r3, [r5, #12]
 800a730:	0598      	lsls	r0, r3, #22
 800a732:	d4f7      	bmi.n	800a724 <_vfiprintf_r+0x44>
 800a734:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a736:	f7fc fae5 	bl	8006d04 <__retarget_lock_release_recursive>
 800a73a:	e7f3      	b.n	800a724 <_vfiprintf_r+0x44>
 800a73c:	2300      	movs	r3, #0
 800a73e:	9309      	str	r3, [sp, #36]	@ 0x24
 800a740:	2320      	movs	r3, #32
 800a742:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a746:	f8cd 800c 	str.w	r8, [sp, #12]
 800a74a:	2330      	movs	r3, #48	@ 0x30
 800a74c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a8fc <_vfiprintf_r+0x21c>
 800a750:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a754:	f04f 0901 	mov.w	r9, #1
 800a758:	4623      	mov	r3, r4
 800a75a:	469a      	mov	sl, r3
 800a75c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a760:	b10a      	cbz	r2, 800a766 <_vfiprintf_r+0x86>
 800a762:	2a25      	cmp	r2, #37	@ 0x25
 800a764:	d1f9      	bne.n	800a75a <_vfiprintf_r+0x7a>
 800a766:	ebba 0b04 	subs.w	fp, sl, r4
 800a76a:	d00b      	beq.n	800a784 <_vfiprintf_r+0xa4>
 800a76c:	465b      	mov	r3, fp
 800a76e:	4622      	mov	r2, r4
 800a770:	4629      	mov	r1, r5
 800a772:	4630      	mov	r0, r6
 800a774:	f7ff ffa2 	bl	800a6bc <__sfputs_r>
 800a778:	3001      	adds	r0, #1
 800a77a:	f000 80a7 	beq.w	800a8cc <_vfiprintf_r+0x1ec>
 800a77e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a780:	445a      	add	r2, fp
 800a782:	9209      	str	r2, [sp, #36]	@ 0x24
 800a784:	f89a 3000 	ldrb.w	r3, [sl]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	f000 809f 	beq.w	800a8cc <_vfiprintf_r+0x1ec>
 800a78e:	2300      	movs	r3, #0
 800a790:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a794:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a798:	f10a 0a01 	add.w	sl, sl, #1
 800a79c:	9304      	str	r3, [sp, #16]
 800a79e:	9307      	str	r3, [sp, #28]
 800a7a0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a7a4:	931a      	str	r3, [sp, #104]	@ 0x68
 800a7a6:	4654      	mov	r4, sl
 800a7a8:	2205      	movs	r2, #5
 800a7aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7ae:	4853      	ldr	r0, [pc, #332]	@ (800a8fc <_vfiprintf_r+0x21c>)
 800a7b0:	f7f5 fd0e 	bl	80001d0 <memchr>
 800a7b4:	9a04      	ldr	r2, [sp, #16]
 800a7b6:	b9d8      	cbnz	r0, 800a7f0 <_vfiprintf_r+0x110>
 800a7b8:	06d1      	lsls	r1, r2, #27
 800a7ba:	bf44      	itt	mi
 800a7bc:	2320      	movmi	r3, #32
 800a7be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a7c2:	0713      	lsls	r3, r2, #28
 800a7c4:	bf44      	itt	mi
 800a7c6:	232b      	movmi	r3, #43	@ 0x2b
 800a7c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a7cc:	f89a 3000 	ldrb.w	r3, [sl]
 800a7d0:	2b2a      	cmp	r3, #42	@ 0x2a
 800a7d2:	d015      	beq.n	800a800 <_vfiprintf_r+0x120>
 800a7d4:	9a07      	ldr	r2, [sp, #28]
 800a7d6:	4654      	mov	r4, sl
 800a7d8:	2000      	movs	r0, #0
 800a7da:	f04f 0c0a 	mov.w	ip, #10
 800a7de:	4621      	mov	r1, r4
 800a7e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a7e4:	3b30      	subs	r3, #48	@ 0x30
 800a7e6:	2b09      	cmp	r3, #9
 800a7e8:	d94b      	bls.n	800a882 <_vfiprintf_r+0x1a2>
 800a7ea:	b1b0      	cbz	r0, 800a81a <_vfiprintf_r+0x13a>
 800a7ec:	9207      	str	r2, [sp, #28]
 800a7ee:	e014      	b.n	800a81a <_vfiprintf_r+0x13a>
 800a7f0:	eba0 0308 	sub.w	r3, r0, r8
 800a7f4:	fa09 f303 	lsl.w	r3, r9, r3
 800a7f8:	4313      	orrs	r3, r2
 800a7fa:	9304      	str	r3, [sp, #16]
 800a7fc:	46a2      	mov	sl, r4
 800a7fe:	e7d2      	b.n	800a7a6 <_vfiprintf_r+0xc6>
 800a800:	9b03      	ldr	r3, [sp, #12]
 800a802:	1d19      	adds	r1, r3, #4
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	9103      	str	r1, [sp, #12]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	bfbb      	ittet	lt
 800a80c:	425b      	neglt	r3, r3
 800a80e:	f042 0202 	orrlt.w	r2, r2, #2
 800a812:	9307      	strge	r3, [sp, #28]
 800a814:	9307      	strlt	r3, [sp, #28]
 800a816:	bfb8      	it	lt
 800a818:	9204      	strlt	r2, [sp, #16]
 800a81a:	7823      	ldrb	r3, [r4, #0]
 800a81c:	2b2e      	cmp	r3, #46	@ 0x2e
 800a81e:	d10a      	bne.n	800a836 <_vfiprintf_r+0x156>
 800a820:	7863      	ldrb	r3, [r4, #1]
 800a822:	2b2a      	cmp	r3, #42	@ 0x2a
 800a824:	d132      	bne.n	800a88c <_vfiprintf_r+0x1ac>
 800a826:	9b03      	ldr	r3, [sp, #12]
 800a828:	1d1a      	adds	r2, r3, #4
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	9203      	str	r2, [sp, #12]
 800a82e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a832:	3402      	adds	r4, #2
 800a834:	9305      	str	r3, [sp, #20]
 800a836:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a90c <_vfiprintf_r+0x22c>
 800a83a:	7821      	ldrb	r1, [r4, #0]
 800a83c:	2203      	movs	r2, #3
 800a83e:	4650      	mov	r0, sl
 800a840:	f7f5 fcc6 	bl	80001d0 <memchr>
 800a844:	b138      	cbz	r0, 800a856 <_vfiprintf_r+0x176>
 800a846:	9b04      	ldr	r3, [sp, #16]
 800a848:	eba0 000a 	sub.w	r0, r0, sl
 800a84c:	2240      	movs	r2, #64	@ 0x40
 800a84e:	4082      	lsls	r2, r0
 800a850:	4313      	orrs	r3, r2
 800a852:	3401      	adds	r4, #1
 800a854:	9304      	str	r3, [sp, #16]
 800a856:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a85a:	4829      	ldr	r0, [pc, #164]	@ (800a900 <_vfiprintf_r+0x220>)
 800a85c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a860:	2206      	movs	r2, #6
 800a862:	f7f5 fcb5 	bl	80001d0 <memchr>
 800a866:	2800      	cmp	r0, #0
 800a868:	d03f      	beq.n	800a8ea <_vfiprintf_r+0x20a>
 800a86a:	4b26      	ldr	r3, [pc, #152]	@ (800a904 <_vfiprintf_r+0x224>)
 800a86c:	bb1b      	cbnz	r3, 800a8b6 <_vfiprintf_r+0x1d6>
 800a86e:	9b03      	ldr	r3, [sp, #12]
 800a870:	3307      	adds	r3, #7
 800a872:	f023 0307 	bic.w	r3, r3, #7
 800a876:	3308      	adds	r3, #8
 800a878:	9303      	str	r3, [sp, #12]
 800a87a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a87c:	443b      	add	r3, r7
 800a87e:	9309      	str	r3, [sp, #36]	@ 0x24
 800a880:	e76a      	b.n	800a758 <_vfiprintf_r+0x78>
 800a882:	fb0c 3202 	mla	r2, ip, r2, r3
 800a886:	460c      	mov	r4, r1
 800a888:	2001      	movs	r0, #1
 800a88a:	e7a8      	b.n	800a7de <_vfiprintf_r+0xfe>
 800a88c:	2300      	movs	r3, #0
 800a88e:	3401      	adds	r4, #1
 800a890:	9305      	str	r3, [sp, #20]
 800a892:	4619      	mov	r1, r3
 800a894:	f04f 0c0a 	mov.w	ip, #10
 800a898:	4620      	mov	r0, r4
 800a89a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a89e:	3a30      	subs	r2, #48	@ 0x30
 800a8a0:	2a09      	cmp	r2, #9
 800a8a2:	d903      	bls.n	800a8ac <_vfiprintf_r+0x1cc>
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d0c6      	beq.n	800a836 <_vfiprintf_r+0x156>
 800a8a8:	9105      	str	r1, [sp, #20]
 800a8aa:	e7c4      	b.n	800a836 <_vfiprintf_r+0x156>
 800a8ac:	fb0c 2101 	mla	r1, ip, r1, r2
 800a8b0:	4604      	mov	r4, r0
 800a8b2:	2301      	movs	r3, #1
 800a8b4:	e7f0      	b.n	800a898 <_vfiprintf_r+0x1b8>
 800a8b6:	ab03      	add	r3, sp, #12
 800a8b8:	9300      	str	r3, [sp, #0]
 800a8ba:	462a      	mov	r2, r5
 800a8bc:	4b12      	ldr	r3, [pc, #72]	@ (800a908 <_vfiprintf_r+0x228>)
 800a8be:	a904      	add	r1, sp, #16
 800a8c0:	4630      	mov	r0, r6
 800a8c2:	f7fb fa71 	bl	8005da8 <_printf_float>
 800a8c6:	4607      	mov	r7, r0
 800a8c8:	1c78      	adds	r0, r7, #1
 800a8ca:	d1d6      	bne.n	800a87a <_vfiprintf_r+0x19a>
 800a8cc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a8ce:	07d9      	lsls	r1, r3, #31
 800a8d0:	d405      	bmi.n	800a8de <_vfiprintf_r+0x1fe>
 800a8d2:	89ab      	ldrh	r3, [r5, #12]
 800a8d4:	059a      	lsls	r2, r3, #22
 800a8d6:	d402      	bmi.n	800a8de <_vfiprintf_r+0x1fe>
 800a8d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a8da:	f7fc fa13 	bl	8006d04 <__retarget_lock_release_recursive>
 800a8de:	89ab      	ldrh	r3, [r5, #12]
 800a8e0:	065b      	lsls	r3, r3, #25
 800a8e2:	f53f af1f 	bmi.w	800a724 <_vfiprintf_r+0x44>
 800a8e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a8e8:	e71e      	b.n	800a728 <_vfiprintf_r+0x48>
 800a8ea:	ab03      	add	r3, sp, #12
 800a8ec:	9300      	str	r3, [sp, #0]
 800a8ee:	462a      	mov	r2, r5
 800a8f0:	4b05      	ldr	r3, [pc, #20]	@ (800a908 <_vfiprintf_r+0x228>)
 800a8f2:	a904      	add	r1, sp, #16
 800a8f4:	4630      	mov	r0, r6
 800a8f6:	f7fb fcef 	bl	80062d8 <_printf_i>
 800a8fa:	e7e4      	b.n	800a8c6 <_vfiprintf_r+0x1e6>
 800a8fc:	0800ae37 	.word	0x0800ae37
 800a900:	0800ae41 	.word	0x0800ae41
 800a904:	08005da9 	.word	0x08005da9
 800a908:	0800a6bd 	.word	0x0800a6bd
 800a90c:	0800ae3d 	.word	0x0800ae3d

0800a910 <__swbuf_r>:
 800a910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a912:	460e      	mov	r6, r1
 800a914:	4614      	mov	r4, r2
 800a916:	4605      	mov	r5, r0
 800a918:	b118      	cbz	r0, 800a922 <__swbuf_r+0x12>
 800a91a:	6a03      	ldr	r3, [r0, #32]
 800a91c:	b90b      	cbnz	r3, 800a922 <__swbuf_r+0x12>
 800a91e:	f7fc f893 	bl	8006a48 <__sinit>
 800a922:	69a3      	ldr	r3, [r4, #24]
 800a924:	60a3      	str	r3, [r4, #8]
 800a926:	89a3      	ldrh	r3, [r4, #12]
 800a928:	071a      	lsls	r2, r3, #28
 800a92a:	d501      	bpl.n	800a930 <__swbuf_r+0x20>
 800a92c:	6923      	ldr	r3, [r4, #16]
 800a92e:	b943      	cbnz	r3, 800a942 <__swbuf_r+0x32>
 800a930:	4621      	mov	r1, r4
 800a932:	4628      	mov	r0, r5
 800a934:	f000 f82a 	bl	800a98c <__swsetup_r>
 800a938:	b118      	cbz	r0, 800a942 <__swbuf_r+0x32>
 800a93a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800a93e:	4638      	mov	r0, r7
 800a940:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a942:	6823      	ldr	r3, [r4, #0]
 800a944:	6922      	ldr	r2, [r4, #16]
 800a946:	1a98      	subs	r0, r3, r2
 800a948:	6963      	ldr	r3, [r4, #20]
 800a94a:	b2f6      	uxtb	r6, r6
 800a94c:	4283      	cmp	r3, r0
 800a94e:	4637      	mov	r7, r6
 800a950:	dc05      	bgt.n	800a95e <__swbuf_r+0x4e>
 800a952:	4621      	mov	r1, r4
 800a954:	4628      	mov	r0, r5
 800a956:	f7ff f95f 	bl	8009c18 <_fflush_r>
 800a95a:	2800      	cmp	r0, #0
 800a95c:	d1ed      	bne.n	800a93a <__swbuf_r+0x2a>
 800a95e:	68a3      	ldr	r3, [r4, #8]
 800a960:	3b01      	subs	r3, #1
 800a962:	60a3      	str	r3, [r4, #8]
 800a964:	6823      	ldr	r3, [r4, #0]
 800a966:	1c5a      	adds	r2, r3, #1
 800a968:	6022      	str	r2, [r4, #0]
 800a96a:	701e      	strb	r6, [r3, #0]
 800a96c:	6962      	ldr	r2, [r4, #20]
 800a96e:	1c43      	adds	r3, r0, #1
 800a970:	429a      	cmp	r2, r3
 800a972:	d004      	beq.n	800a97e <__swbuf_r+0x6e>
 800a974:	89a3      	ldrh	r3, [r4, #12]
 800a976:	07db      	lsls	r3, r3, #31
 800a978:	d5e1      	bpl.n	800a93e <__swbuf_r+0x2e>
 800a97a:	2e0a      	cmp	r6, #10
 800a97c:	d1df      	bne.n	800a93e <__swbuf_r+0x2e>
 800a97e:	4621      	mov	r1, r4
 800a980:	4628      	mov	r0, r5
 800a982:	f7ff f949 	bl	8009c18 <_fflush_r>
 800a986:	2800      	cmp	r0, #0
 800a988:	d0d9      	beq.n	800a93e <__swbuf_r+0x2e>
 800a98a:	e7d6      	b.n	800a93a <__swbuf_r+0x2a>

0800a98c <__swsetup_r>:
 800a98c:	b538      	push	{r3, r4, r5, lr}
 800a98e:	4b29      	ldr	r3, [pc, #164]	@ (800aa34 <__swsetup_r+0xa8>)
 800a990:	4605      	mov	r5, r0
 800a992:	6818      	ldr	r0, [r3, #0]
 800a994:	460c      	mov	r4, r1
 800a996:	b118      	cbz	r0, 800a9a0 <__swsetup_r+0x14>
 800a998:	6a03      	ldr	r3, [r0, #32]
 800a99a:	b90b      	cbnz	r3, 800a9a0 <__swsetup_r+0x14>
 800a99c:	f7fc f854 	bl	8006a48 <__sinit>
 800a9a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a9a4:	0719      	lsls	r1, r3, #28
 800a9a6:	d422      	bmi.n	800a9ee <__swsetup_r+0x62>
 800a9a8:	06da      	lsls	r2, r3, #27
 800a9aa:	d407      	bmi.n	800a9bc <__swsetup_r+0x30>
 800a9ac:	2209      	movs	r2, #9
 800a9ae:	602a      	str	r2, [r5, #0]
 800a9b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a9b4:	81a3      	strh	r3, [r4, #12]
 800a9b6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a9ba:	e033      	b.n	800aa24 <__swsetup_r+0x98>
 800a9bc:	0758      	lsls	r0, r3, #29
 800a9be:	d512      	bpl.n	800a9e6 <__swsetup_r+0x5a>
 800a9c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a9c2:	b141      	cbz	r1, 800a9d6 <__swsetup_r+0x4a>
 800a9c4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a9c8:	4299      	cmp	r1, r3
 800a9ca:	d002      	beq.n	800a9d2 <__swsetup_r+0x46>
 800a9cc:	4628      	mov	r0, r5
 800a9ce:	f7fc fffb 	bl	80079c8 <_free_r>
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	6363      	str	r3, [r4, #52]	@ 0x34
 800a9d6:	89a3      	ldrh	r3, [r4, #12]
 800a9d8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a9dc:	81a3      	strh	r3, [r4, #12]
 800a9de:	2300      	movs	r3, #0
 800a9e0:	6063      	str	r3, [r4, #4]
 800a9e2:	6923      	ldr	r3, [r4, #16]
 800a9e4:	6023      	str	r3, [r4, #0]
 800a9e6:	89a3      	ldrh	r3, [r4, #12]
 800a9e8:	f043 0308 	orr.w	r3, r3, #8
 800a9ec:	81a3      	strh	r3, [r4, #12]
 800a9ee:	6923      	ldr	r3, [r4, #16]
 800a9f0:	b94b      	cbnz	r3, 800aa06 <__swsetup_r+0x7a>
 800a9f2:	89a3      	ldrh	r3, [r4, #12]
 800a9f4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a9f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a9fc:	d003      	beq.n	800aa06 <__swsetup_r+0x7a>
 800a9fe:	4621      	mov	r1, r4
 800aa00:	4628      	mov	r0, r5
 800aa02:	f000 f883 	bl	800ab0c <__smakebuf_r>
 800aa06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa0a:	f013 0201 	ands.w	r2, r3, #1
 800aa0e:	d00a      	beq.n	800aa26 <__swsetup_r+0x9a>
 800aa10:	2200      	movs	r2, #0
 800aa12:	60a2      	str	r2, [r4, #8]
 800aa14:	6962      	ldr	r2, [r4, #20]
 800aa16:	4252      	negs	r2, r2
 800aa18:	61a2      	str	r2, [r4, #24]
 800aa1a:	6922      	ldr	r2, [r4, #16]
 800aa1c:	b942      	cbnz	r2, 800aa30 <__swsetup_r+0xa4>
 800aa1e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800aa22:	d1c5      	bne.n	800a9b0 <__swsetup_r+0x24>
 800aa24:	bd38      	pop	{r3, r4, r5, pc}
 800aa26:	0799      	lsls	r1, r3, #30
 800aa28:	bf58      	it	pl
 800aa2a:	6962      	ldrpl	r2, [r4, #20]
 800aa2c:	60a2      	str	r2, [r4, #8]
 800aa2e:	e7f4      	b.n	800aa1a <__swsetup_r+0x8e>
 800aa30:	2000      	movs	r0, #0
 800aa32:	e7f7      	b.n	800aa24 <__swsetup_r+0x98>
 800aa34:	200001d4 	.word	0x200001d4

0800aa38 <_raise_r>:
 800aa38:	291f      	cmp	r1, #31
 800aa3a:	b538      	push	{r3, r4, r5, lr}
 800aa3c:	4605      	mov	r5, r0
 800aa3e:	460c      	mov	r4, r1
 800aa40:	d904      	bls.n	800aa4c <_raise_r+0x14>
 800aa42:	2316      	movs	r3, #22
 800aa44:	6003      	str	r3, [r0, #0]
 800aa46:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800aa4a:	bd38      	pop	{r3, r4, r5, pc}
 800aa4c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800aa4e:	b112      	cbz	r2, 800aa56 <_raise_r+0x1e>
 800aa50:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800aa54:	b94b      	cbnz	r3, 800aa6a <_raise_r+0x32>
 800aa56:	4628      	mov	r0, r5
 800aa58:	f000 f830 	bl	800aabc <_getpid_r>
 800aa5c:	4622      	mov	r2, r4
 800aa5e:	4601      	mov	r1, r0
 800aa60:	4628      	mov	r0, r5
 800aa62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aa66:	f000 b817 	b.w	800aa98 <_kill_r>
 800aa6a:	2b01      	cmp	r3, #1
 800aa6c:	d00a      	beq.n	800aa84 <_raise_r+0x4c>
 800aa6e:	1c59      	adds	r1, r3, #1
 800aa70:	d103      	bne.n	800aa7a <_raise_r+0x42>
 800aa72:	2316      	movs	r3, #22
 800aa74:	6003      	str	r3, [r0, #0]
 800aa76:	2001      	movs	r0, #1
 800aa78:	e7e7      	b.n	800aa4a <_raise_r+0x12>
 800aa7a:	2100      	movs	r1, #0
 800aa7c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800aa80:	4620      	mov	r0, r4
 800aa82:	4798      	blx	r3
 800aa84:	2000      	movs	r0, #0
 800aa86:	e7e0      	b.n	800aa4a <_raise_r+0x12>

0800aa88 <raise>:
 800aa88:	4b02      	ldr	r3, [pc, #8]	@ (800aa94 <raise+0xc>)
 800aa8a:	4601      	mov	r1, r0
 800aa8c:	6818      	ldr	r0, [r3, #0]
 800aa8e:	f7ff bfd3 	b.w	800aa38 <_raise_r>
 800aa92:	bf00      	nop
 800aa94:	200001d4 	.word	0x200001d4

0800aa98 <_kill_r>:
 800aa98:	b538      	push	{r3, r4, r5, lr}
 800aa9a:	4d07      	ldr	r5, [pc, #28]	@ (800aab8 <_kill_r+0x20>)
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	4604      	mov	r4, r0
 800aaa0:	4608      	mov	r0, r1
 800aaa2:	4611      	mov	r1, r2
 800aaa4:	602b      	str	r3, [r5, #0]
 800aaa6:	f7f7 fccd 	bl	8002444 <_kill>
 800aaaa:	1c43      	adds	r3, r0, #1
 800aaac:	d102      	bne.n	800aab4 <_kill_r+0x1c>
 800aaae:	682b      	ldr	r3, [r5, #0]
 800aab0:	b103      	cbz	r3, 800aab4 <_kill_r+0x1c>
 800aab2:	6023      	str	r3, [r4, #0]
 800aab4:	bd38      	pop	{r3, r4, r5, pc}
 800aab6:	bf00      	nop
 800aab8:	2000082c 	.word	0x2000082c

0800aabc <_getpid_r>:
 800aabc:	f7f7 bcba 	b.w	8002434 <_getpid>

0800aac0 <__swhatbuf_r>:
 800aac0:	b570      	push	{r4, r5, r6, lr}
 800aac2:	460c      	mov	r4, r1
 800aac4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aac8:	2900      	cmp	r1, #0
 800aaca:	b096      	sub	sp, #88	@ 0x58
 800aacc:	4615      	mov	r5, r2
 800aace:	461e      	mov	r6, r3
 800aad0:	da0d      	bge.n	800aaee <__swhatbuf_r+0x2e>
 800aad2:	89a3      	ldrh	r3, [r4, #12]
 800aad4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800aad8:	f04f 0100 	mov.w	r1, #0
 800aadc:	bf14      	ite	ne
 800aade:	2340      	movne	r3, #64	@ 0x40
 800aae0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800aae4:	2000      	movs	r0, #0
 800aae6:	6031      	str	r1, [r6, #0]
 800aae8:	602b      	str	r3, [r5, #0]
 800aaea:	b016      	add	sp, #88	@ 0x58
 800aaec:	bd70      	pop	{r4, r5, r6, pc}
 800aaee:	466a      	mov	r2, sp
 800aaf0:	f000 f848 	bl	800ab84 <_fstat_r>
 800aaf4:	2800      	cmp	r0, #0
 800aaf6:	dbec      	blt.n	800aad2 <__swhatbuf_r+0x12>
 800aaf8:	9901      	ldr	r1, [sp, #4]
 800aafa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800aafe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ab02:	4259      	negs	r1, r3
 800ab04:	4159      	adcs	r1, r3
 800ab06:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ab0a:	e7eb      	b.n	800aae4 <__swhatbuf_r+0x24>

0800ab0c <__smakebuf_r>:
 800ab0c:	898b      	ldrh	r3, [r1, #12]
 800ab0e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ab10:	079d      	lsls	r5, r3, #30
 800ab12:	4606      	mov	r6, r0
 800ab14:	460c      	mov	r4, r1
 800ab16:	d507      	bpl.n	800ab28 <__smakebuf_r+0x1c>
 800ab18:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ab1c:	6023      	str	r3, [r4, #0]
 800ab1e:	6123      	str	r3, [r4, #16]
 800ab20:	2301      	movs	r3, #1
 800ab22:	6163      	str	r3, [r4, #20]
 800ab24:	b003      	add	sp, #12
 800ab26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab28:	ab01      	add	r3, sp, #4
 800ab2a:	466a      	mov	r2, sp
 800ab2c:	f7ff ffc8 	bl	800aac0 <__swhatbuf_r>
 800ab30:	9f00      	ldr	r7, [sp, #0]
 800ab32:	4605      	mov	r5, r0
 800ab34:	4639      	mov	r1, r7
 800ab36:	4630      	mov	r0, r6
 800ab38:	f7fc ffba 	bl	8007ab0 <_malloc_r>
 800ab3c:	b948      	cbnz	r0, 800ab52 <__smakebuf_r+0x46>
 800ab3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab42:	059a      	lsls	r2, r3, #22
 800ab44:	d4ee      	bmi.n	800ab24 <__smakebuf_r+0x18>
 800ab46:	f023 0303 	bic.w	r3, r3, #3
 800ab4a:	f043 0302 	orr.w	r3, r3, #2
 800ab4e:	81a3      	strh	r3, [r4, #12]
 800ab50:	e7e2      	b.n	800ab18 <__smakebuf_r+0xc>
 800ab52:	89a3      	ldrh	r3, [r4, #12]
 800ab54:	6020      	str	r0, [r4, #0]
 800ab56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ab5a:	81a3      	strh	r3, [r4, #12]
 800ab5c:	9b01      	ldr	r3, [sp, #4]
 800ab5e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ab62:	b15b      	cbz	r3, 800ab7c <__smakebuf_r+0x70>
 800ab64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ab68:	4630      	mov	r0, r6
 800ab6a:	f000 f81d 	bl	800aba8 <_isatty_r>
 800ab6e:	b128      	cbz	r0, 800ab7c <__smakebuf_r+0x70>
 800ab70:	89a3      	ldrh	r3, [r4, #12]
 800ab72:	f023 0303 	bic.w	r3, r3, #3
 800ab76:	f043 0301 	orr.w	r3, r3, #1
 800ab7a:	81a3      	strh	r3, [r4, #12]
 800ab7c:	89a3      	ldrh	r3, [r4, #12]
 800ab7e:	431d      	orrs	r5, r3
 800ab80:	81a5      	strh	r5, [r4, #12]
 800ab82:	e7cf      	b.n	800ab24 <__smakebuf_r+0x18>

0800ab84 <_fstat_r>:
 800ab84:	b538      	push	{r3, r4, r5, lr}
 800ab86:	4d07      	ldr	r5, [pc, #28]	@ (800aba4 <_fstat_r+0x20>)
 800ab88:	2300      	movs	r3, #0
 800ab8a:	4604      	mov	r4, r0
 800ab8c:	4608      	mov	r0, r1
 800ab8e:	4611      	mov	r1, r2
 800ab90:	602b      	str	r3, [r5, #0]
 800ab92:	f7f7 fcb7 	bl	8002504 <_fstat>
 800ab96:	1c43      	adds	r3, r0, #1
 800ab98:	d102      	bne.n	800aba0 <_fstat_r+0x1c>
 800ab9a:	682b      	ldr	r3, [r5, #0]
 800ab9c:	b103      	cbz	r3, 800aba0 <_fstat_r+0x1c>
 800ab9e:	6023      	str	r3, [r4, #0]
 800aba0:	bd38      	pop	{r3, r4, r5, pc}
 800aba2:	bf00      	nop
 800aba4:	2000082c 	.word	0x2000082c

0800aba8 <_isatty_r>:
 800aba8:	b538      	push	{r3, r4, r5, lr}
 800abaa:	4d06      	ldr	r5, [pc, #24]	@ (800abc4 <_isatty_r+0x1c>)
 800abac:	2300      	movs	r3, #0
 800abae:	4604      	mov	r4, r0
 800abb0:	4608      	mov	r0, r1
 800abb2:	602b      	str	r3, [r5, #0]
 800abb4:	f7f7 fcb6 	bl	8002524 <_isatty>
 800abb8:	1c43      	adds	r3, r0, #1
 800abba:	d102      	bne.n	800abc2 <_isatty_r+0x1a>
 800abbc:	682b      	ldr	r3, [r5, #0]
 800abbe:	b103      	cbz	r3, 800abc2 <_isatty_r+0x1a>
 800abc0:	6023      	str	r3, [r4, #0]
 800abc2:	bd38      	pop	{r3, r4, r5, pc}
 800abc4:	2000082c 	.word	0x2000082c

0800abc8 <_init>:
 800abc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abca:	bf00      	nop
 800abcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abce:	bc08      	pop	{r3}
 800abd0:	469e      	mov	lr, r3
 800abd2:	4770      	bx	lr

0800abd4 <_fini>:
 800abd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abd6:	bf00      	nop
 800abd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abda:	bc08      	pop	{r3}
 800abdc:	469e      	mov	lr, r3
 800abde:	4770      	bx	lr
