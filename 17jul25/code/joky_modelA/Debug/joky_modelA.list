
joky_modelA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059d0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b8  08005b60  08005b60  00015b60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.exidx    00000008  08005e18  08005e18  00015e18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .preinit_array 00000000  08005e20  08005e20  00020228  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  5 .init_array   00000004  08005e20  08005e20  00015e20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  08005e24  08005e24  00015e24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         00000228  20000000  08005e28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .ccmram       00000000  10000000  10000000  00020228  2**0
                  CONTENTS
  9 .bss          00000364  20000228  20000228  00020228  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000058c  2000058c  00020228  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012406  00000000  00000000  00020258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002519  00000000  00000000  0003265e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001028  00000000  00000000  00034b78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f40  00000000  00000000  00035ba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000d8eb  00000000  00000000  00036ae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000048b7  00000000  00000000  000443cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  00048c82  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00004b10  00000000  00000000  00048cd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000228 	.word	0x20000228
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005b48 	.word	0x08005b48

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000022c 	.word	0x2000022c
 80001cc:	08005b48 	.word	0x08005b48

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <SSD1309_WriteCommand>:

extern SPI_HandleTypeDef hspi1;

uint8_t SSD1309_Buffer[SSD1309_WIDTH * SSD1309_HEIGHT / 8];

void SSD1309_WriteCommand(uint8_t cmd) {
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	4603      	mov	r3, r0
 800058c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);    // CS LOW
 800058e:	2200      	movs	r2, #0
 8000590:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000594:	480c      	ldr	r0, [pc, #48]	; (80005c8 <SSD1309_WriteCommand+0x44>)
 8000596:	f002 f8ff 	bl	8002798 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DATA_CMD_PORT, DATA_CMD_PIN, GPIO_PIN_RESET);    // D/C pin LOW (Command)
 800059a:	2200      	movs	r2, #0
 800059c:	2120      	movs	r1, #32
 800059e:	480a      	ldr	r0, [pc, #40]	; (80005c8 <SSD1309_WriteCommand+0x44>)
 80005a0:	f002 f8fa 	bl	8002798 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, &cmd, 1, HAL_MAX_DELAY);            // Send command byte
 80005a4:	1df9      	adds	r1, r7, #7
 80005a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005aa:	2201      	movs	r2, #1
 80005ac:	4807      	ldr	r0, [pc, #28]	; (80005cc <SSD1309_WriteCommand+0x48>)
 80005ae:	f002 fe12 	bl	80031d6 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);      // CS HIGH
 80005b2:	2201      	movs	r2, #1
 80005b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005b8:	4803      	ldr	r0, [pc, #12]	; (80005c8 <SSD1309_WriteCommand+0x44>)
 80005ba:	f002 f8ed 	bl	8002798 <HAL_GPIO_WritePin>
}
 80005be:	bf00      	nop
 80005c0:	3708      	adds	r7, #8
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	40020800 	.word	0x40020800
 80005cc:	2000031c 	.word	0x2000031c

080005d0 <SSD1309_WriteData>:



void SSD1309_WriteData(uint8_t * data, size_t length) {
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
 80005d8:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);    // CS LOW
 80005da:	2200      	movs	r2, #0
 80005dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005e0:	480c      	ldr	r0, [pc, #48]	; (8000614 <SSD1309_WriteData+0x44>)
 80005e2:	f002 f8d9 	bl	8002798 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DATA_CMD_PORT, DATA_CMD_PIN, GPIO_PIN_SET);      // D/C HIGH (Data)
 80005e6:	2201      	movs	r2, #1
 80005e8:	2120      	movs	r1, #32
 80005ea:	480a      	ldr	r0, [pc, #40]	; (8000614 <SSD1309_WriteData+0x44>)
 80005ec:	f002 f8d4 	bl	8002798 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, data, length, HAL_MAX_DELAY);       // Send display buffer
 80005f0:	683b      	ldr	r3, [r7, #0]
 80005f2:	b29a      	uxth	r2, r3
 80005f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005f8:	6879      	ldr	r1, [r7, #4]
 80005fa:	4807      	ldr	r0, [pc, #28]	; (8000618 <SSD1309_WriteData+0x48>)
 80005fc:	f002 fdeb 	bl	80031d6 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);      // CS HIGH
 8000600:	2201      	movs	r2, #1
 8000602:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000606:	4803      	ldr	r0, [pc, #12]	; (8000614 <SSD1309_WriteData+0x44>)
 8000608:	f002 f8c6 	bl	8002798 <HAL_GPIO_WritePin>
}
 800060c:	bf00      	nop
 800060e:	3708      	adds	r7, #8
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	40020800 	.word	0x40020800
 8000618:	2000031c 	.word	0x2000031c

0800061c <SSD1309_Reset>:



void SSD1309_Reset(void) {
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RES_PORT, RES_PIN, GPIO_PIN_RESET);
 8000620:	2200      	movs	r2, #0
 8000622:	2110      	movs	r1, #16
 8000624:	4807      	ldr	r0, [pc, #28]	; (8000644 <SSD1309_Reset+0x28>)
 8000626:	f002 f8b7 	bl	8002798 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800062a:	200a      	movs	r0, #10
 800062c:	f001 fa16 	bl	8001a5c <HAL_Delay>
	HAL_GPIO_WritePin(RES_PORT, RES_PIN, GPIO_PIN_SET);
 8000630:	2201      	movs	r2, #1
 8000632:	2110      	movs	r1, #16
 8000634:	4803      	ldr	r0, [pc, #12]	; (8000644 <SSD1309_Reset+0x28>)
 8000636:	f002 f8af 	bl	8002798 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800063a:	200a      	movs	r0, #10
 800063c:	f001 fa0e 	bl	8001a5c <HAL_Delay>
}
 8000640:	bf00      	nop
 8000642:	bd80      	pop	{r7, pc}
 8000644:	40020800 	.word	0x40020800

08000648 <InitDisplay>:

void InitDisplay()
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
	int i=0;
 800064e:	2300      	movs	r3, #0
 8000650:	607b      	str	r3, [r7, #4]

	for(i=0; i<20; i++)
 8000652:	2300      	movs	r3, #0
 8000654:	607b      	str	r3, [r7, #4]
 8000656:	e009      	b.n	800066c <InitDisplay+0x24>
	{
		SSD1309_WriteCommand(init_sequence[i]);
 8000658:	4a08      	ldr	r2, [pc, #32]	; (800067c <InitDisplay+0x34>)
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	4413      	add	r3, r2
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	4618      	mov	r0, r3
 8000662:	f7ff ff8f 	bl	8000584 <SSD1309_WriteCommand>
	for(i=0; i<20; i++)
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	3301      	adds	r3, #1
 800066a:	607b      	str	r3, [r7, #4]
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	2b13      	cmp	r3, #19
 8000670:	ddf2      	ble.n	8000658 <InitDisplay+0x10>
	}
}
 8000672:	bf00      	nop
 8000674:	bf00      	nop
 8000676:	3708      	adds	r7, #8
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	08005c1c 	.word	0x08005c1c

08000680 <ClearScreen>:
	}

}

void ClearScreen()
{
 8000680:	b580      	push	{r7, lr}
 8000682:	f5ad 6d81 	sub.w	sp, sp, #1032	; 0x408
 8000686:	af00      	add	r7, sp, #0
	uint8_t page=0;
 8000688:	2300      	movs	r3, #0
 800068a:	f887 3407 	strb.w	r3, [r7, #1031]	; 0x407
	uint8_t clearbuff[1024]={0};
 800068e:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8000692:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8000696:	2200      	movs	r2, #0
 8000698:	601a      	str	r2, [r3, #0]
 800069a:	3304      	adds	r3, #4
 800069c:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 80006a0:	2100      	movs	r1, #0
 80006a2:	4618      	mov	r0, r3
 80006a4:	f004 fc32 	bl	8004f0c <memset>
	for(page=0; page<8; page++)
 80006a8:	2300      	movs	r3, #0
 80006aa:	f887 3407 	strb.w	r3, [r7, #1031]	; 0x407
 80006ae:	e016      	b.n	80006de <ClearScreen+0x5e>
	{

		/*page addressing mode*/
		SSD1309_WriteCommand(0xB0 + page);
 80006b0:	f897 3407 	ldrb.w	r3, [r7, #1031]	; 0x407
 80006b4:	3b50      	subs	r3, #80	; 0x50
 80006b6:	b2db      	uxtb	r3, r3
 80006b8:	4618      	mov	r0, r3
 80006ba:	f7ff ff63 	bl	8000584 <SSD1309_WriteCommand>
		SSD1309_WriteCommand(0x00 );
 80006be:	2000      	movs	r0, #0
 80006c0:	f7ff ff60 	bl	8000584 <SSD1309_WriteCommand>
		SSD1309_WriteCommand(0x10);
 80006c4:	2010      	movs	r0, #16
 80006c6:	f7ff ff5d 	bl	8000584 <SSD1309_WriteCommand>
		/*write char*/
		SSD1309_WriteData(&clearbuff, 128);
 80006ca:	1d3b      	adds	r3, r7, #4
 80006cc:	2180      	movs	r1, #128	; 0x80
 80006ce:	4618      	mov	r0, r3
 80006d0:	f7ff ff7e 	bl	80005d0 <SSD1309_WriteData>
	for(page=0; page<8; page++)
 80006d4:	f897 3407 	ldrb.w	r3, [r7, #1031]	; 0x407
 80006d8:	3301      	adds	r3, #1
 80006da:	f887 3407 	strb.w	r3, [r7, #1031]	; 0x407
 80006de:	f897 3407 	ldrb.w	r3, [r7, #1031]	; 0x407
 80006e2:	2b07      	cmp	r3, #7
 80006e4:	d9e4      	bls.n	80006b0 <ClearScreen+0x30>
	}
}
 80006e6:	bf00      	nop
 80006e8:	bf00      	nop
 80006ea:	f507 6781 	add.w	r7, r7, #1032	; 0x408
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
	...

080006f4 <WriteText>:

void WriteText(uint8_t u8Colmn, uint8_t u8page,unsigned char * data)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b084      	sub	sp, #16
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	4603      	mov	r3, r0
 80006fc:	603a      	str	r2, [r7, #0]
 80006fe:	71fb      	strb	r3, [r7, #7]
 8000700:	460b      	mov	r3, r1
 8000702:	71bb      	strb	r3, [r7, #6]



	uint8_t i=0;
 8000704:	2300      	movs	r3, #0
 8000706:	73fb      	strb	r3, [r7, #15]

	uint8_t temp=0;
 8000708:	2300      	movs	r3, #0
 800070a:	73bb      	strb	r3, [r7, #14]


	/*page addressing mode*/
			SSD1309_WriteCommand(0xB0 + u8page);
 800070c:	79bb      	ldrb	r3, [r7, #6]
 800070e:	3b50      	subs	r3, #80	; 0x50
 8000710:	b2db      	uxtb	r3, r3
 8000712:	4618      	mov	r0, r3
 8000714:	f7ff ff36 	bl	8000584 <SSD1309_WriteCommand>
			SSD1309_WriteCommand(0x00 | (u8Colmn & 0x0F));
 8000718:	79fb      	ldrb	r3, [r7, #7]
 800071a:	f003 030f 	and.w	r3, r3, #15
 800071e:	b2db      	uxtb	r3, r3
 8000720:	4618      	mov	r0, r3
 8000722:	f7ff ff2f 	bl	8000584 <SSD1309_WriteCommand>
			SSD1309_WriteCommand(0x10 | (u8Colmn >> 4));
 8000726:	79fb      	ldrb	r3, [r7, #7]
 8000728:	091b      	lsrs	r3, r3, #4
 800072a:	b2db      	uxtb	r3, r3
 800072c:	f043 0310 	orr.w	r3, r3, #16
 8000730:	b2db      	uxtb	r3, r3
 8000732:	4618      	mov	r0, r3
 8000734:	f7ff ff26 	bl	8000584 <SSD1309_WriteCommand>



	if((u8page < 8) && (u8Colmn< 128))
 8000738:	79bb      	ldrb	r3, [r7, #6]
 800073a:	2b07      	cmp	r3, #7
 800073c:	f200 8098 	bhi.w	8000870 <WriteText+0x17c>
 8000740:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000744:	2b00      	cmp	r3, #0
 8000746:	f2c0 8093 	blt.w	8000870 <WriteText+0x17c>
	{
		/*page addressing mode*/
		SSD1309_WriteCommand(0xB0 + u8page);
 800074a:	79bb      	ldrb	r3, [r7, #6]
 800074c:	3b50      	subs	r3, #80	; 0x50
 800074e:	b2db      	uxtb	r3, r3
 8000750:	4618      	mov	r0, r3
 8000752:	f7ff ff17 	bl	8000584 <SSD1309_WriteCommand>
		SSD1309_WriteCommand(0x00 | (u8Colmn & 0x0F));
 8000756:	79fb      	ldrb	r3, [r7, #7]
 8000758:	f003 030f 	and.w	r3, r3, #15
 800075c:	b2db      	uxtb	r3, r3
 800075e:	4618      	mov	r0, r3
 8000760:	f7ff ff10 	bl	8000584 <SSD1309_WriteCommand>
		SSD1309_WriteCommand(0x10 | (u8Colmn >> 4));
 8000764:	79fb      	ldrb	r3, [r7, #7]
 8000766:	091b      	lsrs	r3, r3, #4
 8000768:	b2db      	uxtb	r3, r3
 800076a:	f043 0310 	orr.w	r3, r3, #16
 800076e:	b2db      	uxtb	r3, r3
 8000770:	4618      	mov	r0, r3
 8000772:	f7ff ff07 	bl	8000584 <SSD1309_WriteCommand>
		/*write char*/

		for(i=0; data[i] !='\0'; i++)
 8000776:	2300      	movs	r3, #0
 8000778:	73fb      	strb	r3, [r7, #15]
 800077a:	e071      	b.n	8000860 <WriteText+0x16c>
		{
			if(( ((uint8_t)data[i]>=48u) &&((uint8_t)data[i]<=90u ))||((uint8_t)data[i] ==32u) ){
 800077c:	7bfb      	ldrb	r3, [r7, #15]
 800077e:	683a      	ldr	r2, [r7, #0]
 8000780:	4413      	add	r3, r2
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	2b2f      	cmp	r3, #47	; 0x2f
 8000786:	d905      	bls.n	8000794 <WriteText+0xa0>
 8000788:	7bfb      	ldrb	r3, [r7, #15]
 800078a:	683a      	ldr	r2, [r7, #0]
 800078c:	4413      	add	r3, r2
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	2b5a      	cmp	r3, #90	; 0x5a
 8000792:	d905      	bls.n	80007a0 <WriteText+0xac>
 8000794:	7bfb      	ldrb	r3, [r7, #15]
 8000796:	683a      	ldr	r2, [r7, #0]
 8000798:	4413      	add	r3, r2
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	2b20      	cmp	r3, #32
 800079e:	d15c      	bne.n	800085a <WriteText+0x166>
			if((u8Colmn >=128) || ((128-u8Colmn)<9))
 80007a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	db04      	blt.n	80007b2 <WriteText+0xbe>
 80007a8:	79fb      	ldrb	r3, [r7, #7]
 80007aa:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80007ae:	2b08      	cmp	r3, #8
 80007b0:	dc37      	bgt.n	8000822 <WriteText+0x12e>
			{
				u8page++;
 80007b2:	79bb      	ldrb	r3, [r7, #6]
 80007b4:	3301      	adds	r3, #1
 80007b6:	71bb      	strb	r3, [r7, #6]
				if(u8page <8)
 80007b8:	79bb      	ldrb	r3, [r7, #6]
 80007ba:	2b07      	cmp	r3, #7
 80007bc:	d857      	bhi.n	800086e <WriteText+0x17a>
				{
					u8Colmn=0;
 80007be:	2300      	movs	r3, #0
 80007c0:	71fb      	strb	r3, [r7, #7]
					if(data[i] == 32u)
 80007c2:	7bfb      	ldrb	r3, [r7, #15]
 80007c4:	683a      	ldr	r2, [r7, #0]
 80007c6:	4413      	add	r3, r2
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	2b20      	cmp	r3, #32
 80007cc:	d102      	bne.n	80007d4 <WriteText+0xe0>
					{
						temp=15;
 80007ce:	230f      	movs	r3, #15
 80007d0:	73bb      	strb	r3, [r7, #14]
 80007d2:	e005      	b.n	80007e0 <WriteText+0xec>
					}else{
					temp=data[i]-48;
 80007d4:	7bfb      	ldrb	r3, [r7, #15]
 80007d6:	683a      	ldr	r2, [r7, #0]
 80007d8:	4413      	add	r3, r2
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	3b30      	subs	r3, #48	; 0x30
 80007de:	73bb      	strb	r3, [r7, #14]
					}
					SSD1309_WriteCommand(0xB0 + u8page);
 80007e0:	79bb      	ldrb	r3, [r7, #6]
 80007e2:	3b50      	subs	r3, #80	; 0x50
 80007e4:	b2db      	uxtb	r3, r3
 80007e6:	4618      	mov	r0, r3
 80007e8:	f7ff fecc 	bl	8000584 <SSD1309_WriteCommand>
					SSD1309_WriteCommand(0x00 | (u8Colmn & 0x0F));
 80007ec:	79fb      	ldrb	r3, [r7, #7]
 80007ee:	f003 030f 	and.w	r3, r3, #15
 80007f2:	b2db      	uxtb	r3, r3
 80007f4:	4618      	mov	r0, r3
 80007f6:	f7ff fec5 	bl	8000584 <SSD1309_WriteCommand>
					SSD1309_WriteCommand(0x10 | (u8Colmn >> 4));
 80007fa:	79fb      	ldrb	r3, [r7, #7]
 80007fc:	091b      	lsrs	r3, r3, #4
 80007fe:	b2db      	uxtb	r3, r3
 8000800:	f043 0310 	orr.w	r3, r3, #16
 8000804:	b2db      	uxtb	r3, r3
 8000806:	4618      	mov	r0, r3
 8000808:	f7ff febc 	bl	8000584 <SSD1309_WriteCommand>
					SSD1309_WriteData(&charset[temp][0], 9);
 800080c:	7bba      	ldrb	r2, [r7, #14]
 800080e:	4613      	mov	r3, r2
 8000810:	00db      	lsls	r3, r3, #3
 8000812:	4413      	add	r3, r2
 8000814:	4a18      	ldr	r2, [pc, #96]	; (8000878 <WriteText+0x184>)
 8000816:	4413      	add	r3, r2
 8000818:	2109      	movs	r1, #9
 800081a:	4618      	mov	r0, r3
 800081c:	f7ff fed8 	bl	80005d0 <SSD1309_WriteData>
				if(u8page <8)
 8000820:	e01b      	b.n	800085a <WriteText+0x166>
					return;
				}

			}else
			{
				if(data[i] == 32u)
 8000822:	7bfb      	ldrb	r3, [r7, #15]
 8000824:	683a      	ldr	r2, [r7, #0]
 8000826:	4413      	add	r3, r2
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	2b20      	cmp	r3, #32
 800082c:	d102      	bne.n	8000834 <WriteText+0x140>
				{
					temp=15;
 800082e:	230f      	movs	r3, #15
 8000830:	73bb      	strb	r3, [r7, #14]
 8000832:	e005      	b.n	8000840 <WriteText+0x14c>
				}else{
					temp=data[i]-48;
 8000834:	7bfb      	ldrb	r3, [r7, #15]
 8000836:	683a      	ldr	r2, [r7, #0]
 8000838:	4413      	add	r3, r2
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	3b30      	subs	r3, #48	; 0x30
 800083e:	73bb      	strb	r3, [r7, #14]
				}
				SSD1309_WriteData(&charset[temp][0], 9);
 8000840:	7bba      	ldrb	r2, [r7, #14]
 8000842:	4613      	mov	r3, r2
 8000844:	00db      	lsls	r3, r3, #3
 8000846:	4413      	add	r3, r2
 8000848:	4a0b      	ldr	r2, [pc, #44]	; (8000878 <WriteText+0x184>)
 800084a:	4413      	add	r3, r2
 800084c:	2109      	movs	r1, #9
 800084e:	4618      	mov	r0, r3
 8000850:	f7ff febe 	bl	80005d0 <SSD1309_WriteData>
				u8Colmn +=9;
 8000854:	79fb      	ldrb	r3, [r7, #7]
 8000856:	3309      	adds	r3, #9
 8000858:	71fb      	strb	r3, [r7, #7]
		for(i=0; data[i] !='\0'; i++)
 800085a:	7bfb      	ldrb	r3, [r7, #15]
 800085c:	3301      	adds	r3, #1
 800085e:	73fb      	strb	r3, [r7, #15]
 8000860:	7bfb      	ldrb	r3, [r7, #15]
 8000862:	683a      	ldr	r2, [r7, #0]
 8000864:	4413      	add	r3, r2
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	2b00      	cmp	r3, #0
 800086a:	d187      	bne.n	800077c <WriteText+0x88>
 800086c:	e000      	b.n	8000870 <WriteText+0x17c>
					return;
 800086e:	bf00      	nop



	}

}
 8000870:	3710      	adds	r7, #16
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	20000000 	.word	0x20000000

0800087c <HAL_TIM_PeriodElapsedCallback>:
//    	}
//    }
//
//}
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800087c:	b480      	push	{r7}
 800087e:	b083      	sub	sp, #12
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2)  // Check if the interrupt comes from TIM2
    {
        //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);  // Toggle LED on PA5
        //OLED update
    }
}
 8000884:	bf00      	nop
 8000886:	370c      	adds	r7, #12
 8000888:	46bd      	mov	sp, r7
 800088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088e:	4770      	bx	lr

08000890 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000896:	f001 f86f 	bl	8001978 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800089a:	f000 f899 	bl	80009d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800089e:	f000 fb5f 	bl	8000f60 <MX_GPIO_Init>
  MX_ADC1_Init();
 80008a2:	f000 f8ff 	bl	8000aa4 <MX_ADC1_Init>
  MX_ADC2_Init();
 80008a6:	f000 f94f 	bl	8000b48 <MX_ADC2_Init>
  MX_UART5_Init();
 80008aa:	f000 fb05 	bl	8000eb8 <MX_UART5_Init>
  MX_USART1_UART_Init();
 80008ae:	f000 fb2d 	bl	8000f0c <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80008b2:	f000 fa5b 	bl	8000d6c <MX_TIM2_Init>
  MX_SPI3_Init();
 80008b6:	f000 fa23 	bl	8000d00 <MX_SPI3_Init>
  MX_TIM4_Init();
 80008ba:	f000 faa5 	bl	8000e08 <MX_TIM4_Init>
  MX_SPI1_Init();
 80008be:	f000 f9e7 	bl	8000c90 <MX_SPI1_Init>
  MX_ADC3_Init();
 80008c2:	f000 f993 	bl	8000bec <MX_ADC3_Init>

  /* USER CODE BEGIN 2 */
  TLE9201_Init();
 80008c6:	f000 ffe9 	bl	800189c <TLE9201_Init>
  // SA818S_Init();
  lora_init();
 80008ca:	f000 fbeb 	bl	80010a4 <lora_init>

  uint32_t adc_value;
  uint8_t cmd_received = 0;
 80008ce:	2300      	movs	r3, #0
 80008d0:	71fb      	strb	r3, [r7, #7]
//  uint8_t speed;

     // Start ADC
  HAL_ADC_Start(&hadc1);
 80008d2:	4838      	ldr	r0, [pc, #224]	; (80009b4 <main+0x124>)
 80008d4:	f001 f92a 	bl	8001b2c <HAL_ADC_Start>
  TLE9201_SetDirection(1);    // Forward
 80008d8:	2001      	movs	r0, #1
 80008da:	f000 fff9 	bl	80018d0 <TLE9201_SetDirection>
  TLE9201_SetSpeed(255);
 80008de:	20ff      	movs	r0, #255	; 0xff
 80008e0:	f001 f80e 	bl	8001900 <TLE9201_SetSpeed>
  HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 80008e4:	2201      	movs	r2, #1
 80008e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008ea:	4833      	ldr	r0, [pc, #204]	; (80009b8 <main+0x128>)
 80008ec:	f001 ff54 	bl	8002798 <HAL_GPIO_WritePin>

  SSD1309_Reset();
 80008f0:	f7ff fe94 	bl	800061c <SSD1309_Reset>
  InitDisplay();
 80008f4:	f7ff fea8 	bl	8000648 <InitDisplay>
  ClearScreen();
 80008f8:	f7ff fec2 	bl	8000680 <ClearScreen>

  WriteText(1, 1, devcode);
 80008fc:	4a2f      	ldr	r2, [pc, #188]	; (80009bc <main+0x12c>)
 80008fe:	2101      	movs	r1, #1
 8000900:	2001      	movs	r0, #1
 8000902:	f7ff fef7 	bl	80006f4 <WriteText>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000906:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800090a:	482a      	ldr	r0, [pc, #168]	; (80009b4 <main+0x124>)
 800090c:	f001 f9e0 	bl	8001cd0 <HAL_ADC_PollForConversion>
	          adc_value = HAL_ADC_GetValue(&hadc1);
 8000910:	4828      	ldr	r0, [pc, #160]	; (80009b4 <main+0x124>)
 8000912:	f001 fa68 	bl	8001de6 <HAL_ADC_GetValue>
 8000916:	6038      	str	r0, [r7, #0]

	          // Divide ADC range into 3 equal sections
	          if (adc_value <= 1365) { // 0–1365 (4095/3)
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	f240 5255 	movw	r2, #1365	; 0x555
 800091e:	4293      	cmp	r3, r2
 8000920:	d80b      	bhi.n	800093a <main+0xaa>
	              WriteText(1, 1, speed1); // Speed 1
 8000922:	4a27      	ldr	r2, [pc, #156]	; (80009c0 <main+0x130>)
 8000924:	2101      	movs	r1, #1
 8000926:	2001      	movs	r0, #1
 8000928:	f7ff fee4 	bl	80006f4 <WriteText>
                TLE9201_SetSpeed(255); // Set speed to 255
 800092c:	20ff      	movs	r0, #255	; 0xff
 800092e:	f000 ffe7 	bl	8001900 <TLE9201_SetSpeed>
              motor_pwm_speed = 255; // Set motor speed to maximum                          
 8000932:	4b24      	ldr	r3, [pc, #144]	; (80009c4 <main+0x134>)
 8000934:	22ff      	movs	r2, #255	; 0xff
 8000936:	701a      	strb	r2, [r3, #0]
 8000938:	e01b      	b.n	8000972 <main+0xe2>
	          } else if (adc_value <= 2730) { // 1366–2730
 800093a:	683b      	ldr	r3, [r7, #0]
 800093c:	f640 22aa 	movw	r2, #2730	; 0xaaa
 8000940:	4293      	cmp	r3, r2
 8000942:	d80b      	bhi.n	800095c <main+0xcc>
	        	  WriteText(1, 1, speed2); // Speed 2
 8000944:	4a20      	ldr	r2, [pc, #128]	; (80009c8 <main+0x138>)
 8000946:	2101      	movs	r1, #1
 8000948:	2001      	movs	r0, #1
 800094a:	f7ff fed3 	bl	80006f4 <WriteText>
              TLE9201_SetSpeed(200); // Set speed to 200
 800094e:	20c8      	movs	r0, #200	; 0xc8
 8000950:	f000 ffd6 	bl	8001900 <TLE9201_SetSpeed>
              motor_pwm_speed = 200; // Set motor speed to 200
 8000954:	4b1b      	ldr	r3, [pc, #108]	; (80009c4 <main+0x134>)
 8000956:	22c8      	movs	r2, #200	; 0xc8
 8000958:	701a      	strb	r2, [r3, #0]
 800095a:	e00a      	b.n	8000972 <main+0xe2>
	          } else { // 2731–4095
	        	  WriteText(1, 1, speed3); // Speed
 800095c:	4a1b      	ldr	r2, [pc, #108]	; (80009cc <main+0x13c>)
 800095e:	2101      	movs	r1, #1
 8000960:	2001      	movs	r0, #1
 8000962:	f7ff fec7 	bl	80006f4 <WriteText>
              TLE9201_SetSpeed(170); // Set speed to 170
 8000966:	20aa      	movs	r0, #170	; 0xaa
 8000968:	f000 ffca 	bl	8001900 <TLE9201_SetSpeed>
              motor_pwm_speed = 170; // Set motor speed to 170
 800096c:	4b15      	ldr	r3, [pc, #84]	; (80009c4 <main+0x134>)
 800096e:	22aa      	movs	r2, #170	; 0xaa
 8000970:	701a      	strb	r2, [r3, #0]

	          }
   
//	  HAL_UART_Transmit(huart, pData, Size, Timeout)/
//      HAL_UART_Receive(&huart1, &uart_recive_buffer, 1, HAL_MAX_DELAY);  // Blocking receive
      cmd_received =lora_receive();
 8000972:	f000 fbbb 	bl	80010ec <lora_receive>
 8000976:	4603      	mov	r3, r0
 8000978:	71fb      	strb	r3, [r7, #7]

      if (cmd_received == 'c') {
 800097a:	79fb      	ldrb	r3, [r7, #7]
 800097c:	2b63      	cmp	r3, #99	; 0x63
 800097e:	d105      	bne.n	800098c <main+0xfc>
        TLE9201_SetSpeed(motor_pwm_speed); // Set motor speed to current PWM speed
 8000980:	4b10      	ldr	r3, [pc, #64]	; (80009c4 <main+0x134>)
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	4618      	mov	r0, r3
 8000986:	f000 ffbb 	bl	8001900 <TLE9201_SetSpeed>
 800098a:	e7bc      	b.n	8000906 <main+0x76>

      }
      else if (cmd_received == 'd') {
 800098c:	79fb      	ldrb	r3, [r7, #7]
 800098e:	2b64      	cmp	r3, #100	; 0x64
 8000990:	d10c      	bne.n	80009ac <main+0x11c>
          // HAL_GPIO_WritePin(MOTOR_GPIO_Port, MOTOR_Pin, GPIO_PIN_SET);
          TLE9201_SetSpeed(motor_pwm_speed); // Stop the motor
 8000992:	4b0c      	ldr	r3, [pc, #48]	; (80009c4 <main+0x134>)
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	4618      	mov	r0, r3
 8000998:	f000 ffb2 	bl	8001900 <TLE9201_SetSpeed>
          HAL_Delay(4000);
 800099c:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80009a0:	f001 f85c 	bl	8001a5c <HAL_Delay>
          TLE9201_SetSpeed(0); // Set speed to 0
 80009a4:	2000      	movs	r0, #0
 80009a6:	f000 ffab 	bl	8001900 <TLE9201_SetSpeed>
 80009aa:	e7ac      	b.n	8000906 <main+0x76>
      }
      else {
        TLE9201_SetSpeed(0); // Set speed to 0
 80009ac:	2000      	movs	r0, #0
 80009ae:	f000 ffa7 	bl	8001900 <TLE9201_SetSpeed>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80009b2:	e7a8      	b.n	8000906 <main+0x76>
 80009b4:	20000244 	.word	0x20000244
 80009b8:	40020800 	.word	0x40020800
 80009bc:	20000184 	.word	0x20000184
 80009c0:	20000194 	.word	0x20000194
 80009c4:	200001b7 	.word	0x200001b7
 80009c8:	200001a0 	.word	0x200001a0
 80009cc:	200001ac 	.word	0x200001ac

080009d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b094      	sub	sp, #80	; 0x50
 80009d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009d6:	f107 0320 	add.w	r3, r7, #32
 80009da:	2230      	movs	r2, #48	; 0x30
 80009dc:	2100      	movs	r1, #0
 80009de:	4618      	mov	r0, r3
 80009e0:	f004 fa94 	bl	8004f0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009e4:	f107 030c 	add.w	r3, r7, #12
 80009e8:	2200      	movs	r2, #0
 80009ea:	601a      	str	r2, [r3, #0]
 80009ec:	605a      	str	r2, [r3, #4]
 80009ee:	609a      	str	r2, [r3, #8]
 80009f0:	60da      	str	r2, [r3, #12]
 80009f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009f4:	2300      	movs	r3, #0
 80009f6:	60bb      	str	r3, [r7, #8]
 80009f8:	4b28      	ldr	r3, [pc, #160]	; (8000a9c <SystemClock_Config+0xcc>)
 80009fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fc:	4a27      	ldr	r2, [pc, #156]	; (8000a9c <SystemClock_Config+0xcc>)
 80009fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a02:	6413      	str	r3, [r2, #64]	; 0x40
 8000a04:	4b25      	ldr	r3, [pc, #148]	; (8000a9c <SystemClock_Config+0xcc>)
 8000a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a0c:	60bb      	str	r3, [r7, #8]
 8000a0e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a10:	2300      	movs	r3, #0
 8000a12:	607b      	str	r3, [r7, #4]
 8000a14:	4b22      	ldr	r3, [pc, #136]	; (8000aa0 <SystemClock_Config+0xd0>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a21      	ldr	r2, [pc, #132]	; (8000aa0 <SystemClock_Config+0xd0>)
 8000a1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a1e:	6013      	str	r3, [r2, #0]
 8000a20:	4b1f      	ldr	r3, [pc, #124]	; (8000aa0 <SystemClock_Config+0xd0>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a28:	607b      	str	r3, [r7, #4]
 8000a2a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a2c:	2302      	movs	r3, #2
 8000a2e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a30:	2301      	movs	r3, #1
 8000a32:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a34:	2310      	movs	r3, #16
 8000a36:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a38:	2302      	movs	r3, #2
 8000a3a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000a40:	2308      	movs	r3, #8
 8000a42:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000a44:	23a8      	movs	r3, #168	; 0xa8
 8000a46:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a48:	2302      	movs	r3, #2
 8000a4a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a4c:	2304      	movs	r3, #4
 8000a4e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a50:	f107 0320 	add.w	r3, r7, #32
 8000a54:	4618      	mov	r0, r3
 8000a56:	f001 fedd 	bl	8002814 <HAL_RCC_OscConfig>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a60:	f000 fb1a 	bl	8001098 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a64:	230f      	movs	r3, #15
 8000a66:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a68:	2302      	movs	r3, #2
 8000a6a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a70:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a74:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a7a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a7c:	f107 030c 	add.w	r3, r7, #12
 8000a80:	2105      	movs	r1, #5
 8000a82:	4618      	mov	r0, r3
 8000a84:	f002 f93e 	bl	8002d04 <HAL_RCC_ClockConfig>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000a8e:	f000 fb03 	bl	8001098 <Error_Handler>
  }
}
 8000a92:	bf00      	nop
 8000a94:	3750      	adds	r7, #80	; 0x50
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	40023800 	.word	0x40023800
 8000aa0:	40007000 	.word	0x40007000

08000aa4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b084      	sub	sp, #16
 8000aa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000aaa:	463b      	mov	r3, r7
 8000aac:	2200      	movs	r2, #0
 8000aae:	601a      	str	r2, [r3, #0]
 8000ab0:	605a      	str	r2, [r3, #4]
 8000ab2:	609a      	str	r2, [r3, #8]
 8000ab4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000ab6:	4b21      	ldr	r3, [pc, #132]	; (8000b3c <MX_ADC1_Init+0x98>)
 8000ab8:	4a21      	ldr	r2, [pc, #132]	; (8000b40 <MX_ADC1_Init+0x9c>)
 8000aba:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000abc:	4b1f      	ldr	r3, [pc, #124]	; (8000b3c <MX_ADC1_Init+0x98>)
 8000abe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000ac2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ac4:	4b1d      	ldr	r3, [pc, #116]	; (8000b3c <MX_ADC1_Init+0x98>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000aca:	4b1c      	ldr	r3, [pc, #112]	; (8000b3c <MX_ADC1_Init+0x98>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ad0:	4b1a      	ldr	r3, [pc, #104]	; (8000b3c <MX_ADC1_Init+0x98>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ad6:	4b19      	ldr	r3, [pc, #100]	; (8000b3c <MX_ADC1_Init+0x98>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ade:	4b17      	ldr	r3, [pc, #92]	; (8000b3c <MX_ADC1_Init+0x98>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ae4:	4b15      	ldr	r3, [pc, #84]	; (8000b3c <MX_ADC1_Init+0x98>)
 8000ae6:	4a17      	ldr	r2, [pc, #92]	; (8000b44 <MX_ADC1_Init+0xa0>)
 8000ae8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000aea:	4b14      	ldr	r3, [pc, #80]	; (8000b3c <MX_ADC1_Init+0x98>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000af0:	4b12      	ldr	r3, [pc, #72]	; (8000b3c <MX_ADC1_Init+0x98>)
 8000af2:	2201      	movs	r2, #1
 8000af4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000af6:	4b11      	ldr	r3, [pc, #68]	; (8000b3c <MX_ADC1_Init+0x98>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000afe:	4b0f      	ldr	r3, [pc, #60]	; (8000b3c <MX_ADC1_Init+0x98>)
 8000b00:	2201      	movs	r2, #1
 8000b02:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b04:	480d      	ldr	r0, [pc, #52]	; (8000b3c <MX_ADC1_Init+0x98>)
 8000b06:	f000 ffcd 	bl	8001aa4 <HAL_ADC_Init>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000b10:	f000 fac2 	bl	8001098 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000b14:	2308      	movs	r3, #8
 8000b16:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b20:	463b      	mov	r3, r7
 8000b22:	4619      	mov	r1, r3
 8000b24:	4805      	ldr	r0, [pc, #20]	; (8000b3c <MX_ADC1_Init+0x98>)
 8000b26:	f001 f96b 	bl	8001e00 <HAL_ADC_ConfigChannel>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000b30:	f000 fab2 	bl	8001098 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b34:	bf00      	nop
 8000b36:	3710      	adds	r7, #16
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	20000244 	.word	0x20000244
 8000b40:	40012000 	.word	0x40012000
 8000b44:	0f000001 	.word	0x0f000001

08000b48 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b084      	sub	sp, #16
 8000b4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b4e:	463b      	mov	r3, r7
 8000b50:	2200      	movs	r2, #0
 8000b52:	601a      	str	r2, [r3, #0]
 8000b54:	605a      	str	r2, [r3, #4]
 8000b56:	609a      	str	r2, [r3, #8]
 8000b58:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000b5a:	4b21      	ldr	r3, [pc, #132]	; (8000be0 <MX_ADC2_Init+0x98>)
 8000b5c:	4a21      	ldr	r2, [pc, #132]	; (8000be4 <MX_ADC2_Init+0x9c>)
 8000b5e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000b60:	4b1f      	ldr	r3, [pc, #124]	; (8000be0 <MX_ADC2_Init+0x98>)
 8000b62:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000b66:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000b68:	4b1d      	ldr	r3, [pc, #116]	; (8000be0 <MX_ADC2_Init+0x98>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8000b6e:	4b1c      	ldr	r3, [pc, #112]	; (8000be0 <MX_ADC2_Init+0x98>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000b74:	4b1a      	ldr	r3, [pc, #104]	; (8000be0 <MX_ADC2_Init+0x98>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000b7a:	4b19      	ldr	r3, [pc, #100]	; (8000be0 <MX_ADC2_Init+0x98>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b82:	4b17      	ldr	r3, [pc, #92]	; (8000be0 <MX_ADC2_Init+0x98>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b88:	4b15      	ldr	r3, [pc, #84]	; (8000be0 <MX_ADC2_Init+0x98>)
 8000b8a:	4a17      	ldr	r2, [pc, #92]	; (8000be8 <MX_ADC2_Init+0xa0>)
 8000b8c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b8e:	4b14      	ldr	r3, [pc, #80]	; (8000be0 <MX_ADC2_Init+0x98>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000b94:	4b12      	ldr	r3, [pc, #72]	; (8000be0 <MX_ADC2_Init+0x98>)
 8000b96:	2201      	movs	r2, #1
 8000b98:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000b9a:	4b11      	ldr	r3, [pc, #68]	; (8000be0 <MX_ADC2_Init+0x98>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ba2:	4b0f      	ldr	r3, [pc, #60]	; (8000be0 <MX_ADC2_Init+0x98>)
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000ba8:	480d      	ldr	r0, [pc, #52]	; (8000be0 <MX_ADC2_Init+0x98>)
 8000baa:	f000 ff7b 	bl	8001aa4 <HAL_ADC_Init>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8000bb4:	f000 fa70 	bl	8001098 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000bb8:	2309      	movs	r3, #9
 8000bba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000bc4:	463b      	mov	r3, r7
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4805      	ldr	r0, [pc, #20]	; (8000be0 <MX_ADC2_Init+0x98>)
 8000bca:	f001 f919 	bl	8001e00 <HAL_ADC_ConfigChannel>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8000bd4:	f000 fa60 	bl	8001098 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000bd8:	bf00      	nop
 8000bda:	3710      	adds	r7, #16
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	2000028c 	.word	0x2000028c
 8000be4:	40012100 	.word	0x40012100
 8000be8:	0f000001 	.word	0x0f000001

08000bec <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b084      	sub	sp, #16
 8000bf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000bf2:	463b      	mov	r3, r7
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	601a      	str	r2, [r3, #0]
 8000bf8:	605a      	str	r2, [r3, #4]
 8000bfa:	609a      	str	r2, [r3, #8]
 8000bfc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000bfe:	4b21      	ldr	r3, [pc, #132]	; (8000c84 <MX_ADC3_Init+0x98>)
 8000c00:	4a21      	ldr	r2, [pc, #132]	; (8000c88 <MX_ADC3_Init+0x9c>)
 8000c02:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000c04:	4b1f      	ldr	r3, [pc, #124]	; (8000c84 <MX_ADC3_Init+0x98>)
 8000c06:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000c0a:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000c0c:	4b1d      	ldr	r3, [pc, #116]	; (8000c84 <MX_ADC3_Init+0x98>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8000c12:	4b1c      	ldr	r3, [pc, #112]	; (8000c84 <MX_ADC3_Init+0x98>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000c18:	4b1a      	ldr	r3, [pc, #104]	; (8000c84 <MX_ADC3_Init+0x98>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000c1e:	4b19      	ldr	r3, [pc, #100]	; (8000c84 <MX_ADC3_Init+0x98>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c26:	4b17      	ldr	r3, [pc, #92]	; (8000c84 <MX_ADC3_Init+0x98>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c2c:	4b15      	ldr	r3, [pc, #84]	; (8000c84 <MX_ADC3_Init+0x98>)
 8000c2e:	4a17      	ldr	r2, [pc, #92]	; (8000c8c <MX_ADC3_Init+0xa0>)
 8000c30:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c32:	4b14      	ldr	r3, [pc, #80]	; (8000c84 <MX_ADC3_Init+0x98>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000c38:	4b12      	ldr	r3, [pc, #72]	; (8000c84 <MX_ADC3_Init+0x98>)
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000c3e:	4b11      	ldr	r3, [pc, #68]	; (8000c84 <MX_ADC3_Init+0x98>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c46:	4b0f      	ldr	r3, [pc, #60]	; (8000c84 <MX_ADC3_Init+0x98>)
 8000c48:	2201      	movs	r2, #1
 8000c4a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000c4c:	480d      	ldr	r0, [pc, #52]	; (8000c84 <MX_ADC3_Init+0x98>)
 8000c4e:	f000 ff29 	bl	8001aa4 <HAL_ADC_Init>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000c58:	f000 fa1e 	bl	8001098 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000c5c:	230a      	movs	r3, #10
 8000c5e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000c60:	2301      	movs	r3, #1
 8000c62:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000c64:	2300      	movs	r3, #0
 8000c66:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000c68:	463b      	mov	r3, r7
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4805      	ldr	r0, [pc, #20]	; (8000c84 <MX_ADC3_Init+0x98>)
 8000c6e:	f001 f8c7 	bl	8001e00 <HAL_ADC_ConfigChannel>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000c78:	f000 fa0e 	bl	8001098 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000c7c:	bf00      	nop
 8000c7e:	3710      	adds	r7, #16
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	200002d4 	.word	0x200002d4
 8000c88:	40012200 	.word	0x40012200
 8000c8c:	0f000001 	.word	0x0f000001

08000c90 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c94:	4b18      	ldr	r3, [pc, #96]	; (8000cf8 <MX_SPI1_Init+0x68>)
 8000c96:	4a19      	ldr	r2, [pc, #100]	; (8000cfc <MX_SPI1_Init+0x6c>)
 8000c98:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c9a:	4b17      	ldr	r3, [pc, #92]	; (8000cf8 <MX_SPI1_Init+0x68>)
 8000c9c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ca0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8000ca2:	4b15      	ldr	r3, [pc, #84]	; (8000cf8 <MX_SPI1_Init+0x68>)
 8000ca4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000ca8:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000caa:	4b13      	ldr	r3, [pc, #76]	; (8000cf8 <MX_SPI1_Init+0x68>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cb0:	4b11      	ldr	r3, [pc, #68]	; (8000cf8 <MX_SPI1_Init+0x68>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cb6:	4b10      	ldr	r3, [pc, #64]	; (8000cf8 <MX_SPI1_Init+0x68>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000cbc:	4b0e      	ldr	r3, [pc, #56]	; (8000cf8 <MX_SPI1_Init+0x68>)
 8000cbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cc2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000cc4:	4b0c      	ldr	r3, [pc, #48]	; (8000cf8 <MX_SPI1_Init+0x68>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cca:	4b0b      	ldr	r3, [pc, #44]	; (8000cf8 <MX_SPI1_Init+0x68>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cd0:	4b09      	ldr	r3, [pc, #36]	; (8000cf8 <MX_SPI1_Init+0x68>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cd6:	4b08      	ldr	r3, [pc, #32]	; (8000cf8 <MX_SPI1_Init+0x68>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000cdc:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <MX_SPI1_Init+0x68>)
 8000cde:	220a      	movs	r2, #10
 8000ce0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ce2:	4805      	ldr	r0, [pc, #20]	; (8000cf8 <MX_SPI1_Init+0x68>)
 8000ce4:	f002 f9ee 	bl	80030c4 <HAL_SPI_Init>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8000cee:	f000 f9d3 	bl	8001098 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000cf2:	bf00      	nop
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	2000031c 	.word	0x2000031c
 8000cfc:	40013000 	.word	0x40013000

08000d00 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000d04:	4b17      	ldr	r3, [pc, #92]	; (8000d64 <MX_SPI3_Init+0x64>)
 8000d06:	4a18      	ldr	r2, [pc, #96]	; (8000d68 <MX_SPI3_Init+0x68>)
 8000d08:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000d0a:	4b16      	ldr	r3, [pc, #88]	; (8000d64 <MX_SPI3_Init+0x64>)
 8000d0c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d10:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000d12:	4b14      	ldr	r3, [pc, #80]	; (8000d64 <MX_SPI3_Init+0x64>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d18:	4b12      	ldr	r3, [pc, #72]	; (8000d64 <MX_SPI3_Init+0x64>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d1e:	4b11      	ldr	r3, [pc, #68]	; (8000d64 <MX_SPI3_Init+0x64>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d24:	4b0f      	ldr	r3, [pc, #60]	; (8000d64 <MX_SPI3_Init+0x64>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000d2a:	4b0e      	ldr	r3, [pc, #56]	; (8000d64 <MX_SPI3_Init+0x64>)
 8000d2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d30:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d32:	4b0c      	ldr	r3, [pc, #48]	; (8000d64 <MX_SPI3_Init+0x64>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d38:	4b0a      	ldr	r3, [pc, #40]	; (8000d64 <MX_SPI3_Init+0x64>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d3e:	4b09      	ldr	r3, [pc, #36]	; (8000d64 <MX_SPI3_Init+0x64>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d44:	4b07      	ldr	r3, [pc, #28]	; (8000d64 <MX_SPI3_Init+0x64>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000d4a:	4b06      	ldr	r3, [pc, #24]	; (8000d64 <MX_SPI3_Init+0x64>)
 8000d4c:	220a      	movs	r2, #10
 8000d4e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000d50:	4804      	ldr	r0, [pc, #16]	; (8000d64 <MX_SPI3_Init+0x64>)
 8000d52:	f002 f9b7 	bl	80030c4 <HAL_SPI_Init>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8000d5c:	f000 f99c 	bl	8001098 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000d60:	bf00      	nop
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	20000374 	.word	0x20000374
 8000d68:	40003c00 	.word	0x40003c00

08000d6c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b086      	sub	sp, #24
 8000d70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d72:	f107 0308 	add.w	r3, r7, #8
 8000d76:	2200      	movs	r2, #0
 8000d78:	601a      	str	r2, [r3, #0]
 8000d7a:	605a      	str	r2, [r3, #4]
 8000d7c:	609a      	str	r2, [r3, #8]
 8000d7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d80:	463b      	mov	r3, r7
 8000d82:	2200      	movs	r2, #0
 8000d84:	601a      	str	r2, [r3, #0]
 8000d86:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d88:	4b1e      	ldr	r3, [pc, #120]	; (8000e04 <MX_TIM2_Init+0x98>)
 8000d8a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d8e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 18600;
 8000d90:	4b1c      	ldr	r3, [pc, #112]	; (8000e04 <MX_TIM2_Init+0x98>)
 8000d92:	f644 02a8 	movw	r2, #18600	; 0x48a8
 8000d96:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d98:	4b1a      	ldr	r3, [pc, #104]	; (8000e04 <MX_TIM2_Init+0x98>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50000;
 8000d9e:	4b19      	ldr	r3, [pc, #100]	; (8000e04 <MX_TIM2_Init+0x98>)
 8000da0:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000da4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000da6:	4b17      	ldr	r3, [pc, #92]	; (8000e04 <MX_TIM2_Init+0x98>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dac:	4b15      	ldr	r3, [pc, #84]	; (8000e04 <MX_TIM2_Init+0x98>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000db2:	4814      	ldr	r0, [pc, #80]	; (8000e04 <MX_TIM2_Init+0x98>)
 8000db4:	f002 fc30 	bl	8003618 <HAL_TIM_Base_Init>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000dbe:	f000 f96b 	bl	8001098 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dc6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000dc8:	f107 0308 	add.w	r3, r7, #8
 8000dcc:	4619      	mov	r1, r3
 8000dce:	480d      	ldr	r0, [pc, #52]	; (8000e04 <MX_TIM2_Init+0x98>)
 8000dd0:	f002 ff3a 	bl	8003c48 <HAL_TIM_ConfigClockSource>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000dda:	f000 f95d 	bl	8001098 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dde:	2300      	movs	r3, #0
 8000de0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000de2:	2300      	movs	r3, #0
 8000de4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000de6:	463b      	mov	r3, r7
 8000de8:	4619      	mov	r1, r3
 8000dea:	4806      	ldr	r0, [pc, #24]	; (8000e04 <MX_TIM2_Init+0x98>)
 8000dec:	f003 fb32 	bl	8004454 <HAL_TIMEx_MasterConfigSynchronization>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000df6:	f000 f94f 	bl	8001098 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000dfa:	bf00      	nop
 8000dfc:	3718      	adds	r7, #24
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	200003cc 	.word	0x200003cc

08000e08 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b08a      	sub	sp, #40	; 0x28
 8000e0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e0e:	f107 0320 	add.w	r3, r7, #32
 8000e12:	2200      	movs	r2, #0
 8000e14:	601a      	str	r2, [r3, #0]
 8000e16:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e18:	1d3b      	adds	r3, r7, #4
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	601a      	str	r2, [r3, #0]
 8000e1e:	605a      	str	r2, [r3, #4]
 8000e20:	609a      	str	r2, [r3, #8]
 8000e22:	60da      	str	r2, [r3, #12]
 8000e24:	611a      	str	r2, [r3, #16]
 8000e26:	615a      	str	r2, [r3, #20]
 8000e28:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000e2a:	4b21      	ldr	r3, [pc, #132]	; (8000eb0 <MX_TIM4_Init+0xa8>)
 8000e2c:	4a21      	ldr	r2, [pc, #132]	; (8000eb4 <MX_TIM4_Init+0xac>)
 8000e2e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 33-1;
 8000e30:	4b1f      	ldr	r3, [pc, #124]	; (8000eb0 <MX_TIM4_Init+0xa8>)
 8000e32:	2220      	movs	r2, #32
 8000e34:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e36:	4b1e      	ldr	r3, [pc, #120]	; (8000eb0 <MX_TIM4_Init+0xa8>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 255;
 8000e3c:	4b1c      	ldr	r3, [pc, #112]	; (8000eb0 <MX_TIM4_Init+0xa8>)
 8000e3e:	22ff      	movs	r2, #255	; 0xff
 8000e40:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e42:	4b1b      	ldr	r3, [pc, #108]	; (8000eb0 <MX_TIM4_Init+0xa8>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e48:	4b19      	ldr	r3, [pc, #100]	; (8000eb0 <MX_TIM4_Init+0xa8>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000e4e:	4818      	ldr	r0, [pc, #96]	; (8000eb0 <MX_TIM4_Init+0xa8>)
 8000e50:	f002 fc31 	bl	80036b6 <HAL_TIM_PWM_Init>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8000e5a:	f000 f91d 	bl	8001098 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e62:	2300      	movs	r3, #0
 8000e64:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000e66:	f107 0320 	add.w	r3, r7, #32
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	4810      	ldr	r0, [pc, #64]	; (8000eb0 <MX_TIM4_Init+0xa8>)
 8000e6e:	f003 faf1 	bl	8004454 <HAL_TIMEx_MasterConfigSynchronization>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 8000e78:	f000 f90e 	bl	8001098 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e7c:	2360      	movs	r3, #96	; 0x60
 8000e7e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000e80:	2300      	movs	r3, #0
 8000e82:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e84:	2300      	movs	r3, #0
 8000e86:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e8c:	1d3b      	adds	r3, r7, #4
 8000e8e:	2200      	movs	r2, #0
 8000e90:	4619      	mov	r1, r3
 8000e92:	4807      	ldr	r0, [pc, #28]	; (8000eb0 <MX_TIM4_Init+0xa8>)
 8000e94:	f002 fe16 	bl	8003ac4 <HAL_TIM_PWM_ConfigChannel>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000e9e:	f000 f8fb 	bl	8001098 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000ea2:	4803      	ldr	r0, [pc, #12]	; (8000eb0 <MX_TIM4_Init+0xa8>)
 8000ea4:	f000 fb90 	bl	80015c8 <HAL_TIM_MspPostInit>

}
 8000ea8:	bf00      	nop
 8000eaa:	3728      	adds	r7, #40	; 0x28
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	20000414 	.word	0x20000414
 8000eb4:	40000800 	.word	0x40000800

08000eb8 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000ebc:	4b11      	ldr	r3, [pc, #68]	; (8000f04 <MX_UART5_Init+0x4c>)
 8000ebe:	4a12      	ldr	r2, [pc, #72]	; (8000f08 <MX_UART5_Init+0x50>)
 8000ec0:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000ec2:	4b10      	ldr	r3, [pc, #64]	; (8000f04 <MX_UART5_Init+0x4c>)
 8000ec4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ec8:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000eca:	4b0e      	ldr	r3, [pc, #56]	; (8000f04 <MX_UART5_Init+0x4c>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000ed0:	4b0c      	ldr	r3, [pc, #48]	; (8000f04 <MX_UART5_Init+0x4c>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000ed6:	4b0b      	ldr	r3, [pc, #44]	; (8000f04 <MX_UART5_Init+0x4c>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000edc:	4b09      	ldr	r3, [pc, #36]	; (8000f04 <MX_UART5_Init+0x4c>)
 8000ede:	220c      	movs	r2, #12
 8000ee0:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ee2:	4b08      	ldr	r3, [pc, #32]	; (8000f04 <MX_UART5_Init+0x4c>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ee8:	4b06      	ldr	r3, [pc, #24]	; (8000f04 <MX_UART5_Init+0x4c>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000eee:	4805      	ldr	r0, [pc, #20]	; (8000f04 <MX_UART5_Init+0x4c>)
 8000ef0:	f003 fb40 	bl	8004574 <HAL_UART_Init>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8000efa:	f000 f8cd 	bl	8001098 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000efe:	bf00      	nop
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	2000045c 	.word	0x2000045c
 8000f08:	40005000 	.word	0x40005000

08000f0c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f10:	4b11      	ldr	r3, [pc, #68]	; (8000f58 <MX_USART1_UART_Init+0x4c>)
 8000f12:	4a12      	ldr	r2, [pc, #72]	; (8000f5c <MX_USART1_UART_Init+0x50>)
 8000f14:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000f16:	4b10      	ldr	r3, [pc, #64]	; (8000f58 <MX_USART1_UART_Init+0x4c>)
 8000f18:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000f1c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f1e:	4b0e      	ldr	r3, [pc, #56]	; (8000f58 <MX_USART1_UART_Init+0x4c>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f24:	4b0c      	ldr	r3, [pc, #48]	; (8000f58 <MX_USART1_UART_Init+0x4c>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f2a:	4b0b      	ldr	r3, [pc, #44]	; (8000f58 <MX_USART1_UART_Init+0x4c>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f30:	4b09      	ldr	r3, [pc, #36]	; (8000f58 <MX_USART1_UART_Init+0x4c>)
 8000f32:	220c      	movs	r2, #12
 8000f34:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f36:	4b08      	ldr	r3, [pc, #32]	; (8000f58 <MX_USART1_UART_Init+0x4c>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f3c:	4b06      	ldr	r3, [pc, #24]	; (8000f58 <MX_USART1_UART_Init+0x4c>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f42:	4805      	ldr	r0, [pc, #20]	; (8000f58 <MX_USART1_UART_Init+0x4c>)
 8000f44:	f003 fb16 	bl	8004574 <HAL_UART_Init>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000f4e:	f000 f8a3 	bl	8001098 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f52:	bf00      	nop
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	200004a4 	.word	0x200004a4
 8000f5c:	40011000 	.word	0x40011000

08000f60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b08a      	sub	sp, #40	; 0x28
 8000f64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f66:	f107 0314 	add.w	r3, r7, #20
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	601a      	str	r2, [r3, #0]
 8000f6e:	605a      	str	r2, [r3, #4]
 8000f70:	609a      	str	r2, [r3, #8]
 8000f72:	60da      	str	r2, [r3, #12]
 8000f74:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f76:	2300      	movs	r3, #0
 8000f78:	613b      	str	r3, [r7, #16]
 8000f7a:	4b44      	ldr	r3, [pc, #272]	; (800108c <MX_GPIO_Init+0x12c>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7e:	4a43      	ldr	r2, [pc, #268]	; (800108c <MX_GPIO_Init+0x12c>)
 8000f80:	f043 0304 	orr.w	r3, r3, #4
 8000f84:	6313      	str	r3, [r2, #48]	; 0x30
 8000f86:	4b41      	ldr	r3, [pc, #260]	; (800108c <MX_GPIO_Init+0x12c>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8a:	f003 0304 	and.w	r3, r3, #4
 8000f8e:	613b      	str	r3, [r7, #16]
 8000f90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f92:	2300      	movs	r3, #0
 8000f94:	60fb      	str	r3, [r7, #12]
 8000f96:	4b3d      	ldr	r3, [pc, #244]	; (800108c <MX_GPIO_Init+0x12c>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9a:	4a3c      	ldr	r2, [pc, #240]	; (800108c <MX_GPIO_Init+0x12c>)
 8000f9c:	f043 0301 	orr.w	r3, r3, #1
 8000fa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa2:	4b3a      	ldr	r3, [pc, #232]	; (800108c <MX_GPIO_Init+0x12c>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa6:	f003 0301 	and.w	r3, r3, #1
 8000faa:	60fb      	str	r3, [r7, #12]
 8000fac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fae:	2300      	movs	r3, #0
 8000fb0:	60bb      	str	r3, [r7, #8]
 8000fb2:	4b36      	ldr	r3, [pc, #216]	; (800108c <MX_GPIO_Init+0x12c>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb6:	4a35      	ldr	r2, [pc, #212]	; (800108c <MX_GPIO_Init+0x12c>)
 8000fb8:	f043 0302 	orr.w	r3, r3, #2
 8000fbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fbe:	4b33      	ldr	r3, [pc, #204]	; (800108c <MX_GPIO_Init+0x12c>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc2:	f003 0302 	and.w	r3, r3, #2
 8000fc6:	60bb      	str	r3, [r7, #8]
 8000fc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fca:	2300      	movs	r3, #0
 8000fcc:	607b      	str	r3, [r7, #4]
 8000fce:	4b2f      	ldr	r3, [pc, #188]	; (800108c <MX_GPIO_Init+0x12c>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd2:	4a2e      	ldr	r2, [pc, #184]	; (800108c <MX_GPIO_Init+0x12c>)
 8000fd4:	f043 0308 	orr.w	r3, r3, #8
 8000fd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fda:	4b2c      	ldr	r3, [pc, #176]	; (800108c <MX_GPIO_Init+0x12c>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fde:	f003 0308 	and.w	r3, r3, #8
 8000fe2:	607b      	str	r3, [r7, #4]
 8000fe4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_PIN__Pin|RES_PIN__Pin|DATA_CMD_PIN__Pin, GPIO_PIN_RESET);
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	f248 0130 	movw	r1, #32816	; 0x8030
 8000fec:	4828      	ldr	r0, [pc, #160]	; (8001090 <MX_GPIO_Init+0x130>)
 8000fee:	f001 fbd3 	bl	8002798 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DIS_Pin|DIR_Pin|SA818PD_Pin, GPIO_PIN_RESET);
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	f44f 5198 	mov.w	r1, #4864	; 0x1300
 8000ff8:	4826      	ldr	r0, [pc, #152]	; (8001094 <MX_GPIO_Init+0x134>)
 8000ffa:	f001 fbcd 	bl	8002798 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : V_HIGH_Pin V_LOW_Pin */
  GPIO_InitStruct.Pin = V_HIGH_Pin|V_LOW_Pin;
 8000ffe:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001002:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001004:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001008:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100a:	2300      	movs	r3, #0
 800100c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800100e:	f107 0314 	add.w	r3, r7, #20
 8001012:	4619      	mov	r1, r3
 8001014:	481e      	ldr	r0, [pc, #120]	; (8001090 <MX_GPIO_Init+0x130>)
 8001016:	f001 fa23 	bl	8002460 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_PIN__Pin RES_PIN__Pin DATA_CMD_PIN__Pin */
  GPIO_InitStruct.Pin = CS_PIN__Pin|RES_PIN__Pin|DATA_CMD_PIN__Pin;
 800101a:	f248 0330 	movw	r3, #32816	; 0x8030
 800101e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001020:	2301      	movs	r3, #1
 8001022:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001024:	2300      	movs	r3, #0
 8001026:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001028:	2300      	movs	r3, #0
 800102a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800102c:	f107 0314 	add.w	r3, r7, #20
 8001030:	4619      	mov	r1, r3
 8001032:	4817      	ldr	r0, [pc, #92]	; (8001090 <MX_GPIO_Init+0x130>)
 8001034:	f001 fa14 	bl	8002460 <HAL_GPIO_Init>

  /*Configure GPIO pins : S_LOW_Pin S_HIGH_Pin */
  GPIO_InitStruct.Pin = S_LOW_Pin|S_HIGH_Pin;
 8001038:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 800103c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800103e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001042:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001044:	2300      	movs	r3, #0
 8001046:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001048:	f107 0314 	add.w	r3, r7, #20
 800104c:	4619      	mov	r1, r3
 800104e:	4811      	ldr	r0, [pc, #68]	; (8001094 <MX_GPIO_Init+0x134>)
 8001050:	f001 fa06 	bl	8002460 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIS_Pin DIR_Pin SA818PD_Pin */
  GPIO_InitStruct.Pin = DIS_Pin|DIR_Pin|SA818PD_Pin;
 8001054:	f44f 5398 	mov.w	r3, #4864	; 0x1300
 8001058:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800105a:	2301      	movs	r3, #1
 800105c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105e:	2300      	movs	r3, #0
 8001060:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001062:	2300      	movs	r3, #0
 8001064:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001066:	f107 0314 	add.w	r3, r7, #20
 800106a:	4619      	mov	r1, r3
 800106c:	4809      	ldr	r0, [pc, #36]	; (8001094 <MX_GPIO_Init+0x134>)
 800106e:	f001 f9f7 	bl	8002460 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001072:	2200      	movs	r2, #0
 8001074:	2100      	movs	r1, #0
 8001076:	2028      	movs	r0, #40	; 0x28
 8001078:	f001 f9bb 	bl	80023f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800107c:	2028      	movs	r0, #40	; 0x28
 800107e:	f001 f9d4 	bl	800242a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001082:	bf00      	nop
 8001084:	3728      	adds	r7, #40	; 0x28
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	40023800 	.word	0x40023800
 8001090:	40020800 	.word	0x40020800
 8001094:	40020400 	.word	0x40020400

08001098 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800109c:	b672      	cpsid	i
}
 800109e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010a0:	e7fe      	b.n	80010a0 <Error_Handler+0x8>
	...

080010a4 <lora_init>:
uint8_t uart_rx_buffer[100];
uint8_t uart6passwotd[14];

LoRaConfig_t lora_config;

void lora_init() {
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
    lora_config.receiver_id = get_id();
 80010a8:	f000 f872 	bl	8001190 <get_id>
 80010ac:	4603      	mov	r3, r0
 80010ae:	461a      	mov	r2, r3
 80010b0:	4b0a      	ldr	r3, [pc, #40]	; (80010dc <lora_init+0x38>)
 80010b2:	809a      	strh	r2, [r3, #4]
    lora_config.receiver_addr = get_address();
 80010b4:	f000 f8a0 	bl	80011f8 <get_address>
 80010b8:	4603      	mov	r3, r0
 80010ba:	461a      	mov	r2, r3
 80010bc:	4b07      	ldr	r3, [pc, #28]	; (80010dc <lora_init+0x38>)
 80010be:	80da      	strh	r2, [r3, #6]

    HAL_UART_Transmit(&LORA_UART_HANDLE, LORA_AT_BAND, sizeof(LORA_AT_BAND)-1, 100);
 80010c0:	2364      	movs	r3, #100	; 0x64
 80010c2:	2213      	movs	r2, #19
 80010c4:	4906      	ldr	r1, [pc, #24]	; (80010e0 <lora_init+0x3c>)
 80010c6:	4807      	ldr	r0, [pc, #28]	; (80010e4 <lora_init+0x40>)
 80010c8:	f003 faa4 	bl	8004614 <HAL_UART_Transmit>
    HAL_UART_Transmit(&LORA_UART_HANDLE, LORA_AT_PWD, sizeof(LORA_AT_PWD)-1, 100);
 80010cc:	2364      	movs	r3, #100	; 0x64
 80010ce:	2218      	movs	r2, #24
 80010d0:	4905      	ldr	r1, [pc, #20]	; (80010e8 <lora_init+0x44>)
 80010d2:	4804      	ldr	r0, [pc, #16]	; (80010e4 <lora_init+0x40>)
 80010d4:	f003 fa9e 	bl	8004614 <HAL_UART_Transmit>
}
 80010d8:	bf00      	nop
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	20000550 	.word	0x20000550
 80010e0:	08005c30 	.word	0x08005c30
 80010e4:	2000045c 	.word	0x2000045c
 80010e8:	08005c44 	.word	0x08005c44

080010ec <lora_receive>:

uint8_t lora_receive() {
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
    return receive_message();
 80010f0:	f000 f804 	bl	80010fc <receive_message>
 80010f4:	4603      	mov	r3, r0
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	bd80      	pop	{r7, pc}
	...

080010fc <receive_message>:

uint8_t receive_message() {
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
    memset(uart_rx_buffer, 0, sizeof(uart_rx_buffer));
 8001102:	2264      	movs	r2, #100	; 0x64
 8001104:	2100      	movs	r1, #0
 8001106:	480e      	ldr	r0, [pc, #56]	; (8001140 <receive_message+0x44>)
 8001108:	f003 ff00 	bl	8004f0c <memset>
    uint8_t cmd = 0;
 800110c:	2300      	movs	r3, #0
 800110e:	71fb      	strb	r3, [r7, #7]
    HAL_UART_Receive(&LORA_UART_HANDLE, uart_rx_buffer, sizeof(uart_rx_buffer), 100);
 8001110:	2364      	movs	r3, #100	; 0x64
 8001112:	2264      	movs	r2, #100	; 0x64
 8001114:	490a      	ldr	r1, [pc, #40]	; (8001140 <receive_message+0x44>)
 8001116:	480b      	ldr	r0, [pc, #44]	; (8001144 <receive_message+0x48>)
 8001118:	f003 fb07 	bl	800472a <HAL_UART_Receive>

    if (strstr((char*)uart_rx_buffer, "+RCV=")) {
 800111c:	490a      	ldr	r1, [pc, #40]	; (8001148 <receive_message+0x4c>)
 800111e:	4808      	ldr	r0, [pc, #32]	; (8001140 <receive_message+0x44>)
 8001120:	f003 ff2a 	bl	8004f78 <strstr>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d004      	beq.n	8001134 <receive_message+0x38>
        cmd = process_message((char*)uart_rx_buffer);
 800112a:	4805      	ldr	r0, [pc, #20]	; (8001140 <receive_message+0x44>)
 800112c:	f000 f80e 	bl	800114c <process_message>
 8001130:	4603      	mov	r3, r0
 8001132:	71fb      	strb	r3, [r7, #7]
    }
    return cmd;
 8001134:	79fb      	ldrb	r3, [r7, #7]
}
 8001136:	4618      	mov	r0, r3
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	200004ec 	.word	0x200004ec
 8001144:	2000045c 	.word	0x2000045c
 8001148:	08005b60 	.word	0x08005b60

0800114c <process_message>:

uint8_t process_message(const char *message) {
 800114c:	b580      	push	{r7, lr}
 800114e:	b088      	sub	sp, #32
 8001150:	af02      	add	r7, sp, #8
 8001152:	6078      	str	r0, [r7, #4]
    int address = 0, rssi = 0, length = 0;
 8001154:	2300      	movs	r3, #0
 8001156:	617b      	str	r3, [r7, #20]
 8001158:	2300      	movs	r3, #0
 800115a:	613b      	str	r3, [r7, #16]
 800115c:	2300      	movs	r3, #0
 800115e:	60fb      	str	r3, [r7, #12]
    char data = 0;
 8001160:	2300      	movs	r3, #0
 8001162:	72fb      	strb	r3, [r7, #11]
    sscanf(message, "+RCV=%d,%d,%c,%d,%*d", &address, &length, &data, &rssi);
 8001164:	f107 010c 	add.w	r1, r7, #12
 8001168:	f107 0214 	add.w	r2, r7, #20
 800116c:	f107 0310 	add.w	r3, r7, #16
 8001170:	9301      	str	r3, [sp, #4]
 8001172:	f107 030b 	add.w	r3, r7, #11
 8001176:	9300      	str	r3, [sp, #0]
 8001178:	460b      	mov	r3, r1
 800117a:	4904      	ldr	r1, [pc, #16]	; (800118c <process_message+0x40>)
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	f003 fecd 	bl	8004f1c <siscanf>
    return (uint8_t)data;
 8001182:	7afb      	ldrb	r3, [r7, #11]
}
 8001184:	4618      	mov	r0, r3
 8001186:	3718      	adds	r7, #24
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	08005b68 	.word	0x08005b68

08001190 <get_id>:
    char buffer[250] = {0};
    sprintf(buffer, "AT+SEND=%d,%d,%s\r\n", lora_config.receiver_addr, len, pdata);
    HAL_UART_Transmit(&LORA_UART_HANDLE, (uint8_t*)buffer, strlen(buffer), 100);
}

uint16_t get_id() {
 8001190:	b580      	push	{r7, lr}
 8001192:	b088      	sub	sp, #32
 8001194:	af00      	add	r7, sp, #0
    char buffer[25] = {0};
 8001196:	2300      	movs	r3, #0
 8001198:	607b      	str	r3, [r7, #4]
 800119a:	f107 0308 	add.w	r3, r7, #8
 800119e:	2200      	movs	r2, #0
 80011a0:	601a      	str	r2, [r3, #0]
 80011a2:	605a      	str	r2, [r3, #4]
 80011a4:	609a      	str	r2, [r3, #8]
 80011a6:	60da      	str	r2, [r3, #12]
 80011a8:	611a      	str	r2, [r3, #16]
 80011aa:	751a      	strb	r2, [r3, #20]
    uint16_t id = 0;
 80011ac:	2300      	movs	r3, #0
 80011ae:	807b      	strh	r3, [r7, #2]

    HAL_UART_Transmit(&LORA_UART_HANDLE, LORA_AT_GETID, sizeof(LORA_AT_GETID)-1, 100);
 80011b0:	2364      	movs	r3, #100	; 0x64
 80011b2:	220e      	movs	r2, #14
 80011b4:	490c      	ldr	r1, [pc, #48]	; (80011e8 <get_id+0x58>)
 80011b6:	480d      	ldr	r0, [pc, #52]	; (80011ec <get_id+0x5c>)
 80011b8:	f003 fa2c 	bl	8004614 <HAL_UART_Transmit>
    HAL_UART_Receive(&LORA_UART_HANDLE, (uint8_t*)buffer, sizeof(buffer), 100);
 80011bc:	1d39      	adds	r1, r7, #4
 80011be:	2364      	movs	r3, #100	; 0x64
 80011c0:	2219      	movs	r2, #25
 80011c2:	480a      	ldr	r0, [pc, #40]	; (80011ec <get_id+0x5c>)
 80011c4:	f003 fab1 	bl	800472a <HAL_UART_Receive>

    sscanf(buffer, "+NETWORKID=%hu", &id);
 80011c8:	1cba      	adds	r2, r7, #2
 80011ca:	1d3b      	adds	r3, r7, #4
 80011cc:	4908      	ldr	r1, [pc, #32]	; (80011f0 <get_id+0x60>)
 80011ce:	4618      	mov	r0, r3
 80011d0:	f003 fea4 	bl	8004f1c <siscanf>
    lora_config.id = id;
 80011d4:	887a      	ldrh	r2, [r7, #2]
 80011d6:	4b07      	ldr	r3, [pc, #28]	; (80011f4 <get_id+0x64>)
 80011d8:	801a      	strh	r2, [r3, #0]

    return (IAM == LORA_ROLE_TRANSMITTER) ? id + 1 : id - 1;
 80011da:	887b      	ldrh	r3, [r7, #2]
 80011dc:	3b01      	subs	r3, #1
 80011de:	b29b      	uxth	r3, r3
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3720      	adds	r7, #32
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	08005c60 	.word	0x08005c60
 80011ec:	2000045c 	.word	0x2000045c
 80011f0:	08005ba8 	.word	0x08005ba8
 80011f4:	20000550 	.word	0x20000550

080011f8 <get_address>:

uint16_t get_address() {
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b088      	sub	sp, #32
 80011fc:	af00      	add	r7, sp, #0
    char buffer[25] = {0};
 80011fe:	2300      	movs	r3, #0
 8001200:	607b      	str	r3, [r7, #4]
 8001202:	f107 0308 	add.w	r3, r7, #8
 8001206:	2200      	movs	r2, #0
 8001208:	601a      	str	r2, [r3, #0]
 800120a:	605a      	str	r2, [r3, #4]
 800120c:	609a      	str	r2, [r3, #8]
 800120e:	60da      	str	r2, [r3, #12]
 8001210:	611a      	str	r2, [r3, #16]
 8001212:	751a      	strb	r2, [r3, #20]
    uint16_t addr = 0;
 8001214:	2300      	movs	r3, #0
 8001216:	807b      	strh	r3, [r7, #2]

    HAL_UART_Transmit(&LORA_UART_HANDLE, LORA_AT_GETADDR, sizeof(LORA_AT_GETADDR)-1, 100);
 8001218:	2364      	movs	r3, #100	; 0x64
 800121a:	220c      	movs	r2, #12
 800121c:	490c      	ldr	r1, [pc, #48]	; (8001250 <get_address+0x58>)
 800121e:	480d      	ldr	r0, [pc, #52]	; (8001254 <get_address+0x5c>)
 8001220:	f003 f9f8 	bl	8004614 <HAL_UART_Transmit>
    HAL_UART_Receive(&LORA_UART_HANDLE, (uint8_t*)buffer, sizeof(buffer), 100);
 8001224:	1d39      	adds	r1, r7, #4
 8001226:	2364      	movs	r3, #100	; 0x64
 8001228:	2219      	movs	r2, #25
 800122a:	480a      	ldr	r0, [pc, #40]	; (8001254 <get_address+0x5c>)
 800122c:	f003 fa7d 	bl	800472a <HAL_UART_Receive>

    sscanf(buffer, "+ADDRESS=%hu", &addr);
 8001230:	1cba      	adds	r2, r7, #2
 8001232:	1d3b      	adds	r3, r7, #4
 8001234:	4908      	ldr	r1, [pc, #32]	; (8001258 <get_address+0x60>)
 8001236:	4618      	mov	r0, r3
 8001238:	f003 fe70 	bl	8004f1c <siscanf>
    lora_config.addr = addr;
 800123c:	887a      	ldrh	r2, [r7, #2]
 800123e:	4b07      	ldr	r3, [pc, #28]	; (800125c <get_address+0x64>)
 8001240:	805a      	strh	r2, [r3, #2]

    return (IAM == LORA_ROLE_TRANSMITTER) ? addr + 1 : addr - 1;
 8001242:	887b      	ldrh	r3, [r7, #2]
 8001244:	3b01      	subs	r3, #1
 8001246:	b29b      	uxth	r3, r3
}
 8001248:	4618      	mov	r0, r3
 800124a:	3720      	adds	r7, #32
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	08005c70 	.word	0x08005c70
 8001254:	2000045c 	.word	0x2000045c
 8001258:	08005bb8 	.word	0x08005bb8
 800125c:	20000550 	.word	0x20000550

08001260 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001266:	2300      	movs	r3, #0
 8001268:	607b      	str	r3, [r7, #4]
 800126a:	4b10      	ldr	r3, [pc, #64]	; (80012ac <HAL_MspInit+0x4c>)
 800126c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126e:	4a0f      	ldr	r2, [pc, #60]	; (80012ac <HAL_MspInit+0x4c>)
 8001270:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001274:	6453      	str	r3, [r2, #68]	; 0x44
 8001276:	4b0d      	ldr	r3, [pc, #52]	; (80012ac <HAL_MspInit+0x4c>)
 8001278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800127a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800127e:	607b      	str	r3, [r7, #4]
 8001280:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001282:	2300      	movs	r3, #0
 8001284:	603b      	str	r3, [r7, #0]
 8001286:	4b09      	ldr	r3, [pc, #36]	; (80012ac <HAL_MspInit+0x4c>)
 8001288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128a:	4a08      	ldr	r2, [pc, #32]	; (80012ac <HAL_MspInit+0x4c>)
 800128c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001290:	6413      	str	r3, [r2, #64]	; 0x40
 8001292:	4b06      	ldr	r3, [pc, #24]	; (80012ac <HAL_MspInit+0x4c>)
 8001294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001296:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800129a:	603b      	str	r3, [r7, #0]
 800129c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800129e:	bf00      	nop
 80012a0:	370c      	adds	r7, #12
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	40023800 	.word	0x40023800

080012b0 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b08e      	sub	sp, #56	; 0x38
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	605a      	str	r2, [r3, #4]
 80012c2:	609a      	str	r2, [r3, #8]
 80012c4:	60da      	str	r2, [r3, #12]
 80012c6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a45      	ldr	r2, [pc, #276]	; (80013e4 <HAL_ADC_MspInit+0x134>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d128      	bne.n	8001324 <HAL_ADC_MspInit+0x74>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80012d2:	2300      	movs	r3, #0
 80012d4:	623b      	str	r3, [r7, #32]
 80012d6:	4b44      	ldr	r3, [pc, #272]	; (80013e8 <HAL_ADC_MspInit+0x138>)
 80012d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012da:	4a43      	ldr	r2, [pc, #268]	; (80013e8 <HAL_ADC_MspInit+0x138>)
 80012dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012e0:	6453      	str	r3, [r2, #68]	; 0x44
 80012e2:	4b41      	ldr	r3, [pc, #260]	; (80013e8 <HAL_ADC_MspInit+0x138>)
 80012e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012ea:	623b      	str	r3, [r7, #32]
 80012ec:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ee:	2300      	movs	r3, #0
 80012f0:	61fb      	str	r3, [r7, #28]
 80012f2:	4b3d      	ldr	r3, [pc, #244]	; (80013e8 <HAL_ADC_MspInit+0x138>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	4a3c      	ldr	r2, [pc, #240]	; (80013e8 <HAL_ADC_MspInit+0x138>)
 80012f8:	f043 0302 	orr.w	r3, r3, #2
 80012fc:	6313      	str	r3, [r2, #48]	; 0x30
 80012fe:	4b3a      	ldr	r3, [pc, #232]	; (80013e8 <HAL_ADC_MspInit+0x138>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001302:	f003 0302 	and.w	r3, r3, #2
 8001306:	61fb      	str	r3, [r7, #28]
 8001308:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = I_OUT_Pin;
 800130a:	2301      	movs	r3, #1
 800130c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800130e:	2303      	movs	r3, #3
 8001310:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001312:	2300      	movs	r3, #0
 8001314:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(I_OUT_GPIO_Port, &GPIO_InitStruct);
 8001316:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800131a:	4619      	mov	r1, r3
 800131c:	4833      	ldr	r0, [pc, #204]	; (80013ec <HAL_ADC_MspInit+0x13c>)
 800131e:	f001 f89f 	bl	8002460 <HAL_GPIO_Init>
    /* USER CODE BEGIN ADC3_MspInit 1 */

    /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001322:	e05a      	b.n	80013da <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC2)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a31      	ldr	r2, [pc, #196]	; (80013f0 <HAL_ADC_MspInit+0x140>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d128      	bne.n	8001380 <HAL_ADC_MspInit+0xd0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800132e:	2300      	movs	r3, #0
 8001330:	61bb      	str	r3, [r7, #24]
 8001332:	4b2d      	ldr	r3, [pc, #180]	; (80013e8 <HAL_ADC_MspInit+0x138>)
 8001334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001336:	4a2c      	ldr	r2, [pc, #176]	; (80013e8 <HAL_ADC_MspInit+0x138>)
 8001338:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800133c:	6453      	str	r3, [r2, #68]	; 0x44
 800133e:	4b2a      	ldr	r3, [pc, #168]	; (80013e8 <HAL_ADC_MspInit+0x138>)
 8001340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001342:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001346:	61bb      	str	r3, [r7, #24]
 8001348:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800134a:	2300      	movs	r3, #0
 800134c:	617b      	str	r3, [r7, #20]
 800134e:	4b26      	ldr	r3, [pc, #152]	; (80013e8 <HAL_ADC_MspInit+0x138>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001352:	4a25      	ldr	r2, [pc, #148]	; (80013e8 <HAL_ADC_MspInit+0x138>)
 8001354:	f043 0302 	orr.w	r3, r3, #2
 8001358:	6313      	str	r3, [r2, #48]	; 0x30
 800135a:	4b23      	ldr	r3, [pc, #140]	; (80013e8 <HAL_ADC_MspInit+0x138>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135e:	f003 0302 	and.w	r3, r3, #2
 8001362:	617b      	str	r3, [r7, #20]
 8001364:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = V_OUT_Pin;
 8001366:	2302      	movs	r3, #2
 8001368:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800136a:	2303      	movs	r3, #3
 800136c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136e:	2300      	movs	r3, #0
 8001370:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(V_OUT_GPIO_Port, &GPIO_InitStruct);
 8001372:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001376:	4619      	mov	r1, r3
 8001378:	481c      	ldr	r0, [pc, #112]	; (80013ec <HAL_ADC_MspInit+0x13c>)
 800137a:	f001 f871 	bl	8002460 <HAL_GPIO_Init>
}
 800137e:	e02c      	b.n	80013da <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC3)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a1b      	ldr	r2, [pc, #108]	; (80013f4 <HAL_ADC_MspInit+0x144>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d127      	bne.n	80013da <HAL_ADC_MspInit+0x12a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800138a:	2300      	movs	r3, #0
 800138c:	613b      	str	r3, [r7, #16]
 800138e:	4b16      	ldr	r3, [pc, #88]	; (80013e8 <HAL_ADC_MspInit+0x138>)
 8001390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001392:	4a15      	ldr	r2, [pc, #84]	; (80013e8 <HAL_ADC_MspInit+0x138>)
 8001394:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001398:	6453      	str	r3, [r2, #68]	; 0x44
 800139a:	4b13      	ldr	r3, [pc, #76]	; (80013e8 <HAL_ADC_MspInit+0x138>)
 800139c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800139e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013a2:	613b      	str	r3, [r7, #16]
 80013a4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013a6:	2300      	movs	r3, #0
 80013a8:	60fb      	str	r3, [r7, #12]
 80013aa:	4b0f      	ldr	r3, [pc, #60]	; (80013e8 <HAL_ADC_MspInit+0x138>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ae:	4a0e      	ldr	r2, [pc, #56]	; (80013e8 <HAL_ADC_MspInit+0x138>)
 80013b0:	f043 0304 	orr.w	r3, r3, #4
 80013b4:	6313      	str	r3, [r2, #48]	; 0x30
 80013b6:	4b0c      	ldr	r3, [pc, #48]	; (80013e8 <HAL_ADC_MspInit+0x138>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ba:	f003 0304 	and.w	r3, r3, #4
 80013be:	60fb      	str	r3, [r7, #12]
 80013c0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80013c2:	2301      	movs	r3, #1
 80013c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013c6:	2303      	movs	r3, #3
 80013c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ca:	2300      	movs	r3, #0
 80013cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013d2:	4619      	mov	r1, r3
 80013d4:	4808      	ldr	r0, [pc, #32]	; (80013f8 <HAL_ADC_MspInit+0x148>)
 80013d6:	f001 f843 	bl	8002460 <HAL_GPIO_Init>
}
 80013da:	bf00      	nop
 80013dc:	3738      	adds	r7, #56	; 0x38
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	40012000 	.word	0x40012000
 80013e8:	40023800 	.word	0x40023800
 80013ec:	40020400 	.word	0x40020400
 80013f0:	40012100 	.word	0x40012100
 80013f4:	40012200 	.word	0x40012200
 80013f8:	40020800 	.word	0x40020800

080013fc <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b08c      	sub	sp, #48	; 0x30
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001404:	f107 031c 	add.w	r3, r7, #28
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	605a      	str	r2, [r3, #4]
 800140e:	609a      	str	r2, [r3, #8]
 8001410:	60da      	str	r2, [r3, #12]
 8001412:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a41      	ldr	r2, [pc, #260]	; (8001520 <HAL_SPI_MspInit+0x124>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d12c      	bne.n	8001478 <HAL_SPI_MspInit+0x7c>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800141e:	2300      	movs	r3, #0
 8001420:	61bb      	str	r3, [r7, #24]
 8001422:	4b40      	ldr	r3, [pc, #256]	; (8001524 <HAL_SPI_MspInit+0x128>)
 8001424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001426:	4a3f      	ldr	r2, [pc, #252]	; (8001524 <HAL_SPI_MspInit+0x128>)
 8001428:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800142c:	6453      	str	r3, [r2, #68]	; 0x44
 800142e:	4b3d      	ldr	r3, [pc, #244]	; (8001524 <HAL_SPI_MspInit+0x128>)
 8001430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001432:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001436:	61bb      	str	r3, [r7, #24]
 8001438:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800143a:	2300      	movs	r3, #0
 800143c:	617b      	str	r3, [r7, #20]
 800143e:	4b39      	ldr	r3, [pc, #228]	; (8001524 <HAL_SPI_MspInit+0x128>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001442:	4a38      	ldr	r2, [pc, #224]	; (8001524 <HAL_SPI_MspInit+0x128>)
 8001444:	f043 0301 	orr.w	r3, r3, #1
 8001448:	6313      	str	r3, [r2, #48]	; 0x30
 800144a:	4b36      	ldr	r3, [pc, #216]	; (8001524 <HAL_SPI_MspInit+0x128>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144e:	f003 0301 	and.w	r3, r3, #1
 8001452:	617b      	str	r3, [r7, #20]
 8001454:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001456:	23a0      	movs	r3, #160	; 0xa0
 8001458:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145a:	2302      	movs	r3, #2
 800145c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145e:	2300      	movs	r3, #0
 8001460:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001462:	2303      	movs	r3, #3
 8001464:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001466:	2305      	movs	r3, #5
 8001468:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800146a:	f107 031c 	add.w	r3, r7, #28
 800146e:	4619      	mov	r1, r3
 8001470:	482d      	ldr	r0, [pc, #180]	; (8001528 <HAL_SPI_MspInit+0x12c>)
 8001472:	f000 fff5 	bl	8002460 <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI3_MspInit 1 */

    /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001476:	e04f      	b.n	8001518 <HAL_SPI_MspInit+0x11c>
  else if(hspi->Instance==SPI3)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a2b      	ldr	r2, [pc, #172]	; (800152c <HAL_SPI_MspInit+0x130>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d14a      	bne.n	8001518 <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001482:	2300      	movs	r3, #0
 8001484:	613b      	str	r3, [r7, #16]
 8001486:	4b27      	ldr	r3, [pc, #156]	; (8001524 <HAL_SPI_MspInit+0x128>)
 8001488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148a:	4a26      	ldr	r2, [pc, #152]	; (8001524 <HAL_SPI_MspInit+0x128>)
 800148c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001490:	6413      	str	r3, [r2, #64]	; 0x40
 8001492:	4b24      	ldr	r3, [pc, #144]	; (8001524 <HAL_SPI_MspInit+0x128>)
 8001494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001496:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800149a:	613b      	str	r3, [r7, #16]
 800149c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800149e:	2300      	movs	r3, #0
 80014a0:	60fb      	str	r3, [r7, #12]
 80014a2:	4b20      	ldr	r3, [pc, #128]	; (8001524 <HAL_SPI_MspInit+0x128>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a6:	4a1f      	ldr	r2, [pc, #124]	; (8001524 <HAL_SPI_MspInit+0x128>)
 80014a8:	f043 0304 	orr.w	r3, r3, #4
 80014ac:	6313      	str	r3, [r2, #48]	; 0x30
 80014ae:	4b1d      	ldr	r3, [pc, #116]	; (8001524 <HAL_SPI_MspInit+0x128>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b2:	f003 0304 	and.w	r3, r3, #4
 80014b6:	60fb      	str	r3, [r7, #12]
 80014b8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ba:	2300      	movs	r3, #0
 80014bc:	60bb      	str	r3, [r7, #8]
 80014be:	4b19      	ldr	r3, [pc, #100]	; (8001524 <HAL_SPI_MspInit+0x128>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c2:	4a18      	ldr	r2, [pc, #96]	; (8001524 <HAL_SPI_MspInit+0x128>)
 80014c4:	f043 0302 	orr.w	r3, r3, #2
 80014c8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ca:	4b16      	ldr	r3, [pc, #88]	; (8001524 <HAL_SPI_MspInit+0x128>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ce:	f003 0302 	and.w	r3, r3, #2
 80014d2:	60bb      	str	r3, [r7, #8]
 80014d4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80014d6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80014da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014dc:	2302      	movs	r3, #2
 80014de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e0:	2300      	movs	r3, #0
 80014e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e4:	2303      	movs	r3, #3
 80014e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80014e8:	2306      	movs	r3, #6
 80014ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014ec:	f107 031c 	add.w	r3, r7, #28
 80014f0:	4619      	mov	r1, r3
 80014f2:	480f      	ldr	r0, [pc, #60]	; (8001530 <HAL_SPI_MspInit+0x134>)
 80014f4:	f000 ffb4 	bl	8002460 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80014f8:	2320      	movs	r3, #32
 80014fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fc:	2302      	movs	r3, #2
 80014fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001500:	2300      	movs	r3, #0
 8001502:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001504:	2303      	movs	r3, #3
 8001506:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001508:	2306      	movs	r3, #6
 800150a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800150c:	f107 031c 	add.w	r3, r7, #28
 8001510:	4619      	mov	r1, r3
 8001512:	4808      	ldr	r0, [pc, #32]	; (8001534 <HAL_SPI_MspInit+0x138>)
 8001514:	f000 ffa4 	bl	8002460 <HAL_GPIO_Init>
}
 8001518:	bf00      	nop
 800151a:	3730      	adds	r7, #48	; 0x30
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	40013000 	.word	0x40013000
 8001524:	40023800 	.word	0x40023800
 8001528:	40020000 	.word	0x40020000
 800152c:	40003c00 	.word	0x40003c00
 8001530:	40020800 	.word	0x40020800
 8001534:	40020400 	.word	0x40020400

08001538 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001548:	d115      	bne.n	8001576 <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800154a:	2300      	movs	r3, #0
 800154c:	60fb      	str	r3, [r7, #12]
 800154e:	4b0c      	ldr	r3, [pc, #48]	; (8001580 <HAL_TIM_Base_MspInit+0x48>)
 8001550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001552:	4a0b      	ldr	r2, [pc, #44]	; (8001580 <HAL_TIM_Base_MspInit+0x48>)
 8001554:	f043 0301 	orr.w	r3, r3, #1
 8001558:	6413      	str	r3, [r2, #64]	; 0x40
 800155a:	4b09      	ldr	r3, [pc, #36]	; (8001580 <HAL_TIM_Base_MspInit+0x48>)
 800155c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155e:	f003 0301 	and.w	r3, r3, #1
 8001562:	60fb      	str	r3, [r7, #12]
 8001564:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001566:	2200      	movs	r2, #0
 8001568:	2100      	movs	r1, #0
 800156a:	201c      	movs	r0, #28
 800156c:	f000 ff41 	bl	80023f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001570:	201c      	movs	r0, #28
 8001572:	f000 ff5a 	bl	800242a <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001576:	bf00      	nop
 8001578:	3710      	adds	r7, #16
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	40023800 	.word	0x40023800

08001584 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001584:	b480      	push	{r7}
 8001586:	b085      	sub	sp, #20
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a0b      	ldr	r2, [pc, #44]	; (80015c0 <HAL_TIM_PWM_MspInit+0x3c>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d10d      	bne.n	80015b2 <HAL_TIM_PWM_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM4_MspInit 0 */

    /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001596:	2300      	movs	r3, #0
 8001598:	60fb      	str	r3, [r7, #12]
 800159a:	4b0a      	ldr	r3, [pc, #40]	; (80015c4 <HAL_TIM_PWM_MspInit+0x40>)
 800159c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159e:	4a09      	ldr	r2, [pc, #36]	; (80015c4 <HAL_TIM_PWM_MspInit+0x40>)
 80015a0:	f043 0304 	orr.w	r3, r3, #4
 80015a4:	6413      	str	r3, [r2, #64]	; 0x40
 80015a6:	4b07      	ldr	r3, [pc, #28]	; (80015c4 <HAL_TIM_PWM_MspInit+0x40>)
 80015a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015aa:	f003 0304 	and.w	r3, r3, #4
 80015ae:	60fb      	str	r3, [r7, #12]
 80015b0:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM4_MspInit 1 */

  }

}
 80015b2:	bf00      	nop
 80015b4:	3714      	adds	r7, #20
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	40000800 	.word	0x40000800
 80015c4:	40023800 	.word	0x40023800

080015c8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b088      	sub	sp, #32
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d0:	f107 030c 	add.w	r3, r7, #12
 80015d4:	2200      	movs	r2, #0
 80015d6:	601a      	str	r2, [r3, #0]
 80015d8:	605a      	str	r2, [r3, #4]
 80015da:	609a      	str	r2, [r3, #8]
 80015dc:	60da      	str	r2, [r3, #12]
 80015de:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a12      	ldr	r2, [pc, #72]	; (8001630 <HAL_TIM_MspPostInit+0x68>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d11d      	bne.n	8001626 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM4_MspPostInit 0 */

    /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ea:	2300      	movs	r3, #0
 80015ec:	60bb      	str	r3, [r7, #8]
 80015ee:	4b11      	ldr	r3, [pc, #68]	; (8001634 <HAL_TIM_MspPostInit+0x6c>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f2:	4a10      	ldr	r2, [pc, #64]	; (8001634 <HAL_TIM_MspPostInit+0x6c>)
 80015f4:	f043 0302 	orr.w	r3, r3, #2
 80015f8:	6313      	str	r3, [r2, #48]	; 0x30
 80015fa:	4b0e      	ldr	r3, [pc, #56]	; (8001634 <HAL_TIM_MspPostInit+0x6c>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fe:	f003 0302 	and.w	r3, r3, #2
 8001602:	60bb      	str	r3, [r7, #8]
 8001604:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001606:	2340      	movs	r3, #64	; 0x40
 8001608:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800160a:	2302      	movs	r3, #2
 800160c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160e:	2300      	movs	r3, #0
 8001610:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001612:	2300      	movs	r3, #0
 8001614:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001616:	2302      	movs	r3, #2
 8001618:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800161a:	f107 030c 	add.w	r3, r7, #12
 800161e:	4619      	mov	r1, r3
 8001620:	4805      	ldr	r0, [pc, #20]	; (8001638 <HAL_TIM_MspPostInit+0x70>)
 8001622:	f000 ff1d 	bl	8002460 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspPostInit 1 */

    /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001626:	bf00      	nop
 8001628:	3720      	adds	r7, #32
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	40000800 	.word	0x40000800
 8001634:	40023800 	.word	0x40023800
 8001638:	40020400 	.word	0x40020400

0800163c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b08c      	sub	sp, #48	; 0x30
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001644:	f107 031c 	add.w	r3, r7, #28
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
 800164c:	605a      	str	r2, [r3, #4]
 800164e:	609a      	str	r2, [r3, #8]
 8001650:	60da      	str	r2, [r3, #12]
 8001652:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a42      	ldr	r2, [pc, #264]	; (8001764 <HAL_UART_MspInit+0x128>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d14b      	bne.n	80016f6 <HAL_UART_MspInit+0xba>
  {
    /* USER CODE BEGIN UART5_MspInit 0 */

    /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 800165e:	2300      	movs	r3, #0
 8001660:	61bb      	str	r3, [r7, #24]
 8001662:	4b41      	ldr	r3, [pc, #260]	; (8001768 <HAL_UART_MspInit+0x12c>)
 8001664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001666:	4a40      	ldr	r2, [pc, #256]	; (8001768 <HAL_UART_MspInit+0x12c>)
 8001668:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800166c:	6413      	str	r3, [r2, #64]	; 0x40
 800166e:	4b3e      	ldr	r3, [pc, #248]	; (8001768 <HAL_UART_MspInit+0x12c>)
 8001670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001672:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001676:	61bb      	str	r3, [r7, #24]
 8001678:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800167a:	2300      	movs	r3, #0
 800167c:	617b      	str	r3, [r7, #20]
 800167e:	4b3a      	ldr	r3, [pc, #232]	; (8001768 <HAL_UART_MspInit+0x12c>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001682:	4a39      	ldr	r2, [pc, #228]	; (8001768 <HAL_UART_MspInit+0x12c>)
 8001684:	f043 0304 	orr.w	r3, r3, #4
 8001688:	6313      	str	r3, [r2, #48]	; 0x30
 800168a:	4b37      	ldr	r3, [pc, #220]	; (8001768 <HAL_UART_MspInit+0x12c>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168e:	f003 0304 	and.w	r3, r3, #4
 8001692:	617b      	str	r3, [r7, #20]
 8001694:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001696:	2300      	movs	r3, #0
 8001698:	613b      	str	r3, [r7, #16]
 800169a:	4b33      	ldr	r3, [pc, #204]	; (8001768 <HAL_UART_MspInit+0x12c>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169e:	4a32      	ldr	r2, [pc, #200]	; (8001768 <HAL_UART_MspInit+0x12c>)
 80016a0:	f043 0308 	orr.w	r3, r3, #8
 80016a4:	6313      	str	r3, [r2, #48]	; 0x30
 80016a6:	4b30      	ldr	r3, [pc, #192]	; (8001768 <HAL_UART_MspInit+0x12c>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016aa:	f003 0308 	and.w	r3, r3, #8
 80016ae:	613b      	str	r3, [r7, #16]
 80016b0:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80016b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b8:	2302      	movs	r3, #2
 80016ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016bc:	2300      	movs	r3, #0
 80016be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016c0:	2303      	movs	r3, #3
 80016c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80016c4:	2308      	movs	r3, #8
 80016c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016c8:	f107 031c 	add.w	r3, r7, #28
 80016cc:	4619      	mov	r1, r3
 80016ce:	4827      	ldr	r0, [pc, #156]	; (800176c <HAL_UART_MspInit+0x130>)
 80016d0:	f000 fec6 	bl	8002460 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80016d4:	2304      	movs	r3, #4
 80016d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d8:	2302      	movs	r3, #2
 80016da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016dc:	2300      	movs	r3, #0
 80016de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016e0:	2303      	movs	r3, #3
 80016e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80016e4:	2308      	movs	r3, #8
 80016e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016e8:	f107 031c 	add.w	r3, r7, #28
 80016ec:	4619      	mov	r1, r3
 80016ee:	4820      	ldr	r0, [pc, #128]	; (8001770 <HAL_UART_MspInit+0x134>)
 80016f0:	f000 feb6 	bl	8002460 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART1_MspInit 1 */

    /* USER CODE END USART1_MspInit 1 */
  }

}
 80016f4:	e031      	b.n	800175a <HAL_UART_MspInit+0x11e>
  else if(huart->Instance==USART1)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a1e      	ldr	r2, [pc, #120]	; (8001774 <HAL_UART_MspInit+0x138>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d12c      	bne.n	800175a <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001700:	2300      	movs	r3, #0
 8001702:	60fb      	str	r3, [r7, #12]
 8001704:	4b18      	ldr	r3, [pc, #96]	; (8001768 <HAL_UART_MspInit+0x12c>)
 8001706:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001708:	4a17      	ldr	r2, [pc, #92]	; (8001768 <HAL_UART_MspInit+0x12c>)
 800170a:	f043 0310 	orr.w	r3, r3, #16
 800170e:	6453      	str	r3, [r2, #68]	; 0x44
 8001710:	4b15      	ldr	r3, [pc, #84]	; (8001768 <HAL_UART_MspInit+0x12c>)
 8001712:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001714:	f003 0310 	and.w	r3, r3, #16
 8001718:	60fb      	str	r3, [r7, #12]
 800171a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800171c:	2300      	movs	r3, #0
 800171e:	60bb      	str	r3, [r7, #8]
 8001720:	4b11      	ldr	r3, [pc, #68]	; (8001768 <HAL_UART_MspInit+0x12c>)
 8001722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001724:	4a10      	ldr	r2, [pc, #64]	; (8001768 <HAL_UART_MspInit+0x12c>)
 8001726:	f043 0301 	orr.w	r3, r3, #1
 800172a:	6313      	str	r3, [r2, #48]	; 0x30
 800172c:	4b0e      	ldr	r3, [pc, #56]	; (8001768 <HAL_UART_MspInit+0x12c>)
 800172e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001730:	f003 0301 	and.w	r3, r3, #1
 8001734:	60bb      	str	r3, [r7, #8]
 8001736:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001738:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800173c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800173e:	2302      	movs	r3, #2
 8001740:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001742:	2300      	movs	r3, #0
 8001744:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001746:	2303      	movs	r3, #3
 8001748:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800174a:	2307      	movs	r3, #7
 800174c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800174e:	f107 031c 	add.w	r3, r7, #28
 8001752:	4619      	mov	r1, r3
 8001754:	4808      	ldr	r0, [pc, #32]	; (8001778 <HAL_UART_MspInit+0x13c>)
 8001756:	f000 fe83 	bl	8002460 <HAL_GPIO_Init>
}
 800175a:	bf00      	nop
 800175c:	3730      	adds	r7, #48	; 0x30
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	40005000 	.word	0x40005000
 8001768:	40023800 	.word	0x40023800
 800176c:	40020800 	.word	0x40020800
 8001770:	40020c00 	.word	0x40020c00
 8001774:	40011000 	.word	0x40011000
 8001778:	40020000 	.word	0x40020000

0800177c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001780:	e7fe      	b.n	8001780 <NMI_Handler+0x4>

08001782 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001782:	b480      	push	{r7}
 8001784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001786:	e7fe      	b.n	8001786 <HardFault_Handler+0x4>

08001788 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800178c:	e7fe      	b.n	800178c <MemManage_Handler+0x4>

0800178e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800178e:	b480      	push	{r7}
 8001790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001792:	e7fe      	b.n	8001792 <BusFault_Handler+0x4>

08001794 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001798:	e7fe      	b.n	8001798 <UsageFault_Handler+0x4>

0800179a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800179a:	b480      	push	{r7}
 800179c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800179e:	bf00      	nop
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr

080017a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017ac:	bf00      	nop
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr

080017b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017b6:	b480      	push	{r7}
 80017b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017ba:	bf00      	nop
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr

080017c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017c8:	f000 f928 	bl	8001a1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017cc:	bf00      	nop
 80017ce:	bd80      	pop	{r7, pc}

080017d0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80017d4:	4802      	ldr	r0, [pc, #8]	; (80017e0 <TIM2_IRQHandler+0x10>)
 80017d6:	f002 f885 	bl	80038e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80017da:	bf00      	nop
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	200003cc 	.word	0x200003cc

080017e4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(S_LOW_Pin);
 80017e8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80017ec:	f000 ffee 	bl	80027cc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(V_HIGH_Pin);
 80017f0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80017f4:	f000 ffea 	bl	80027cc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(V_LOW_Pin);
 80017f8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80017fc:	f000 ffe6 	bl	80027cc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(S_HIGH_Pin);
 8001800:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001804:	f000 ffe2 	bl	80027cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001808:	bf00      	nop
 800180a:	bd80      	pop	{r7, pc}

0800180c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b086      	sub	sp, #24
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001814:	4a14      	ldr	r2, [pc, #80]	; (8001868 <_sbrk+0x5c>)
 8001816:	4b15      	ldr	r3, [pc, #84]	; (800186c <_sbrk+0x60>)
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001820:	4b13      	ldr	r3, [pc, #76]	; (8001870 <_sbrk+0x64>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d102      	bne.n	800182e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001828:	4b11      	ldr	r3, [pc, #68]	; (8001870 <_sbrk+0x64>)
 800182a:	4a12      	ldr	r2, [pc, #72]	; (8001874 <_sbrk+0x68>)
 800182c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800182e:	4b10      	ldr	r3, [pc, #64]	; (8001870 <_sbrk+0x64>)
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	4413      	add	r3, r2
 8001836:	693a      	ldr	r2, [r7, #16]
 8001838:	429a      	cmp	r2, r3
 800183a:	d207      	bcs.n	800184c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800183c:	f003 fb3c 	bl	8004eb8 <__errno>
 8001840:	4603      	mov	r3, r0
 8001842:	220c      	movs	r2, #12
 8001844:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001846:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800184a:	e009      	b.n	8001860 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800184c:	4b08      	ldr	r3, [pc, #32]	; (8001870 <_sbrk+0x64>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001852:	4b07      	ldr	r3, [pc, #28]	; (8001870 <_sbrk+0x64>)
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4413      	add	r3, r2
 800185a:	4a05      	ldr	r2, [pc, #20]	; (8001870 <_sbrk+0x64>)
 800185c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800185e:	68fb      	ldr	r3, [r7, #12]
}
 8001860:	4618      	mov	r0, r3
 8001862:	3718      	adds	r7, #24
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	20020000 	.word	0x20020000
 800186c:	00000400 	.word	0x00000400
 8001870:	20000574 	.word	0x20000574
 8001874:	20000590 	.word	0x20000590

08001878 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800187c:	4b06      	ldr	r3, [pc, #24]	; (8001898 <SystemInit+0x20>)
 800187e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001882:	4a05      	ldr	r2, [pc, #20]	; (8001898 <SystemInit+0x20>)
 8001884:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001888:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800188c:	bf00      	nop
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	e000ed00 	.word	0xe000ed00

0800189c <TLE9201_Init>:
#include "main.h"  // Make sure this has your TIM and SPI handles

extern TIM_HandleTypeDef TLE9201_PWM_TIM;

void TLE9201_Init(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
    // Start PWM Timer
    HAL_TIM_PWM_Start(&TLE9201_PWM_TIM, TLE9201_PWM_CHANNEL);
 80018a0:	2100      	movs	r1, #0
 80018a2:	4808      	ldr	r0, [pc, #32]	; (80018c4 <TLE9201_Init+0x28>)
 80018a4:	f001 ff56 	bl	8003754 <HAL_TIM_PWM_Start>

    // Set DIS low to enable output
    HAL_GPIO_WritePin(TLE9201_DIS_GPIO_Port, TLE9201_DIS_Pin, GPIO_PIN_RESET);
 80018a8:	2200      	movs	r2, #0
 80018aa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80018ae:	4806      	ldr	r0, [pc, #24]	; (80018c8 <TLE9201_Init+0x2c>)
 80018b0:	f000 ff72 	bl	8002798 <HAL_GPIO_WritePin>

    // Default direction
    HAL_GPIO_WritePin(TLE9201_DIR_GPIO_Port, TLE9201_DIR_Pin, GPIO_PIN_RESET);
 80018b4:	2200      	movs	r2, #0
 80018b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018ba:	4804      	ldr	r0, [pc, #16]	; (80018cc <TLE9201_Init+0x30>)
 80018bc:	f000 ff6c 	bl	8002798 <HAL_GPIO_WritePin>
}
 80018c0:	bf00      	nop
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	20000414 	.word	0x20000414
 80018c8:	40020800 	.word	0x40020800
 80018cc:	40020400 	.word	0x40020400

080018d0 <TLE9201_SetDirection>:
{
    HAL_GPIO_WritePin(TLE9201_DIS_GPIO_Port, TLE9201_DIS_Pin, GPIO_PIN_SET);
}

void TLE9201_SetDirection(uint8_t dir)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	4603      	mov	r3, r0
 80018d8:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(TLE9201_DIR_GPIO_Port, TLE9201_DIR_Pin, dir ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80018da:	79fb      	ldrb	r3, [r7, #7]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	bf14      	ite	ne
 80018e0:	2301      	movne	r3, #1
 80018e2:	2300      	moveq	r3, #0
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	461a      	mov	r2, r3
 80018e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018ec:	4803      	ldr	r0, [pc, #12]	; (80018fc <TLE9201_SetDirection+0x2c>)
 80018ee:	f000 ff53 	bl	8002798 <HAL_GPIO_WritePin>
}
 80018f2:	bf00      	nop
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	40020400 	.word	0x40020400

08001900 <TLE9201_SetSpeed>:

void TLE9201_SetSpeed(uint8_t duty)
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	4603      	mov	r3, r0
 8001908:	71fb      	strb	r3, [r7, #7]
    // Clamp to 0–255
    if (duty > 255) duty = 255;
    __HAL_TIM_SET_COMPARE(&TLE9201_PWM_TIM, TLE9201_PWM_CHANNEL, duty);
 800190a:	4b05      	ldr	r3, [pc, #20]	; (8001920 <TLE9201_SetSpeed+0x20>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	79fa      	ldrb	r2, [r7, #7]
 8001910:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001912:	bf00      	nop
 8001914:	370c      	adds	r7, #12
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	20000414 	.word	0x20000414

08001924 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001924:	f8df d034 	ldr.w	sp, [pc, #52]	; 800195c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001928:	f7ff ffa6 	bl	8001878 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800192c:	480c      	ldr	r0, [pc, #48]	; (8001960 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800192e:	490d      	ldr	r1, [pc, #52]	; (8001964 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001930:	4a0d      	ldr	r2, [pc, #52]	; (8001968 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001932:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001934:	e002      	b.n	800193c <LoopCopyDataInit>

08001936 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001936:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001938:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800193a:	3304      	adds	r3, #4

0800193c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800193c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800193e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001940:	d3f9      	bcc.n	8001936 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001942:	4a0a      	ldr	r2, [pc, #40]	; (800196c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001944:	4c0a      	ldr	r4, [pc, #40]	; (8001970 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001946:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001948:	e001      	b.n	800194e <LoopFillZerobss>

0800194a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800194a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800194c:	3204      	adds	r2, #4

0800194e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800194e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001950:	d3fb      	bcc.n	800194a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001952:	f003 fab7 	bl	8004ec4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001956:	f7fe ff9b 	bl	8000890 <main>
  bx  lr    
 800195a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800195c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001960:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001964:	20000228 	.word	0x20000228
  ldr r2, =_sidata
 8001968:	08005e28 	.word	0x08005e28
  ldr r2, =_sbss
 800196c:	20000228 	.word	0x20000228
  ldr r4, =_ebss
 8001970:	2000058c 	.word	0x2000058c

08001974 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001974:	e7fe      	b.n	8001974 <ADC_IRQHandler>
	...

08001978 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800197c:	4b0e      	ldr	r3, [pc, #56]	; (80019b8 <HAL_Init+0x40>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a0d      	ldr	r2, [pc, #52]	; (80019b8 <HAL_Init+0x40>)
 8001982:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001986:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001988:	4b0b      	ldr	r3, [pc, #44]	; (80019b8 <HAL_Init+0x40>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a0a      	ldr	r2, [pc, #40]	; (80019b8 <HAL_Init+0x40>)
 800198e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001992:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001994:	4b08      	ldr	r3, [pc, #32]	; (80019b8 <HAL_Init+0x40>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a07      	ldr	r2, [pc, #28]	; (80019b8 <HAL_Init+0x40>)
 800199a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800199e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019a0:	2003      	movs	r0, #3
 80019a2:	f000 fd1b 	bl	80023dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019a6:	200f      	movs	r0, #15
 80019a8:	f000 f808 	bl	80019bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019ac:	f7ff fc58 	bl	8001260 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019b0:	2300      	movs	r3, #0
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	40023c00 	.word	0x40023c00

080019bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019c4:	4b12      	ldr	r3, [pc, #72]	; (8001a10 <HAL_InitTick+0x54>)
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	4b12      	ldr	r3, [pc, #72]	; (8001a14 <HAL_InitTick+0x58>)
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	4619      	mov	r1, r3
 80019ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80019d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80019da:	4618      	mov	r0, r3
 80019dc:	f000 fd33 	bl	8002446 <HAL_SYSTICK_Config>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e00e      	b.n	8001a08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2b0f      	cmp	r3, #15
 80019ee:	d80a      	bhi.n	8001a06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019f0:	2200      	movs	r2, #0
 80019f2:	6879      	ldr	r1, [r7, #4]
 80019f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80019f8:	f000 fcfb 	bl	80023f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019fc:	4a06      	ldr	r2, [pc, #24]	; (8001a18 <HAL_InitTick+0x5c>)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a02:	2300      	movs	r3, #0
 8001a04:	e000      	b.n	8001a08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3708      	adds	r7, #8
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	200001b8 	.word	0x200001b8
 8001a14:	200001c0 	.word	0x200001c0
 8001a18:	200001bc 	.word	0x200001bc

08001a1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a20:	4b06      	ldr	r3, [pc, #24]	; (8001a3c <HAL_IncTick+0x20>)
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	461a      	mov	r2, r3
 8001a26:	4b06      	ldr	r3, [pc, #24]	; (8001a40 <HAL_IncTick+0x24>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4413      	add	r3, r2
 8001a2c:	4a04      	ldr	r2, [pc, #16]	; (8001a40 <HAL_IncTick+0x24>)
 8001a2e:	6013      	str	r3, [r2, #0]
}
 8001a30:	bf00      	nop
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	200001c0 	.word	0x200001c0
 8001a40:	20000578 	.word	0x20000578

08001a44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  return uwTick;
 8001a48:	4b03      	ldr	r3, [pc, #12]	; (8001a58 <HAL_GetTick+0x14>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	20000578 	.word	0x20000578

08001a5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b084      	sub	sp, #16
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a64:	f7ff ffee 	bl	8001a44 <HAL_GetTick>
 8001a68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a74:	d005      	beq.n	8001a82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a76:	4b0a      	ldr	r3, [pc, #40]	; (8001aa0 <HAL_Delay+0x44>)
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	4413      	add	r3, r2
 8001a80:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a82:	bf00      	nop
 8001a84:	f7ff ffde 	bl	8001a44 <HAL_GetTick>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	68fa      	ldr	r2, [r7, #12]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d8f7      	bhi.n	8001a84 <HAL_Delay+0x28>
  {
  }
}
 8001a94:	bf00      	nop
 8001a96:	bf00      	nop
 8001a98:	3710      	adds	r7, #16
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	200001c0 	.word	0x200001c0

08001aa4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b084      	sub	sp, #16
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001aac:	2300      	movs	r3, #0
 8001aae:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d101      	bne.n	8001aba <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e033      	b.n	8001b22 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d109      	bne.n	8001ad6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f7ff fbf4 	bl	80012b0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2200      	movs	r2, #0
 8001acc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ada:	f003 0310 	and.w	r3, r3, #16
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d118      	bne.n	8001b14 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001aea:	f023 0302 	bic.w	r3, r3, #2
 8001aee:	f043 0202 	orr.w	r2, r3, #2
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f000 faa4 	bl	8002044 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2200      	movs	r2, #0
 8001b00:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b06:	f023 0303 	bic.w	r3, r3, #3
 8001b0a:	f043 0201 	orr.w	r2, r3, #1
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	641a      	str	r2, [r3, #64]	; 0x40
 8001b12:	e001      	b.n	8001b18 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001b20:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3710      	adds	r7, #16
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
	...

08001b2c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b085      	sub	sp, #20
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001b34:	2300      	movs	r3, #0
 8001b36:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d101      	bne.n	8001b46 <HAL_ADC_Start+0x1a>
 8001b42:	2302      	movs	r3, #2
 8001b44:	e0b2      	b.n	8001cac <HAL_ADC_Start+0x180>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2201      	movs	r2, #1
 8001b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	f003 0301 	and.w	r3, r3, #1
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d018      	beq.n	8001b8e <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	689a      	ldr	r2, [r3, #8]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f042 0201 	orr.w	r2, r2, #1
 8001b6a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001b6c:	4b52      	ldr	r3, [pc, #328]	; (8001cb8 <HAL_ADC_Start+0x18c>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a52      	ldr	r2, [pc, #328]	; (8001cbc <HAL_ADC_Start+0x190>)
 8001b72:	fba2 2303 	umull	r2, r3, r2, r3
 8001b76:	0c9a      	lsrs	r2, r3, #18
 8001b78:	4613      	mov	r3, r2
 8001b7a:	005b      	lsls	r3, r3, #1
 8001b7c:	4413      	add	r3, r2
 8001b7e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001b80:	e002      	b.n	8001b88 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	3b01      	subs	r3, #1
 8001b86:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d1f9      	bne.n	8001b82 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	f003 0301 	and.w	r3, r3, #1
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d17a      	bne.n	8001c92 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001ba4:	f023 0301 	bic.w	r3, r3, #1
 8001ba8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d007      	beq.n	8001bce <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001bc6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001bda:	d106      	bne.n	8001bea <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001be0:	f023 0206 	bic.w	r2, r3, #6
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	645a      	str	r2, [r3, #68]	; 0x44
 8001be8:	e002      	b.n	8001bf0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2200      	movs	r2, #0
 8001bee:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001bf8:	4b31      	ldr	r3, [pc, #196]	; (8001cc0 <HAL_ADC_Start+0x194>)
 8001bfa:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001c04:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	f003 031f 	and.w	r3, r3, #31
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d12a      	bne.n	8001c68 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a2b      	ldr	r2, [pc, #172]	; (8001cc4 <HAL_ADC_Start+0x198>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d015      	beq.n	8001c48 <HAL_ADC_Start+0x11c>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a29      	ldr	r2, [pc, #164]	; (8001cc8 <HAL_ADC_Start+0x19c>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d105      	bne.n	8001c32 <HAL_ADC_Start+0x106>
 8001c26:	4b26      	ldr	r3, [pc, #152]	; (8001cc0 <HAL_ADC_Start+0x194>)
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	f003 031f 	and.w	r3, r3, #31
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d00a      	beq.n	8001c48 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a25      	ldr	r2, [pc, #148]	; (8001ccc <HAL_ADC_Start+0x1a0>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d136      	bne.n	8001caa <HAL_ADC_Start+0x17e>
 8001c3c:	4b20      	ldr	r3, [pc, #128]	; (8001cc0 <HAL_ADC_Start+0x194>)
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f003 0310 	and.w	r3, r3, #16
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d130      	bne.n	8001caa <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d129      	bne.n	8001caa <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	689a      	ldr	r2, [r3, #8]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001c64:	609a      	str	r2, [r3, #8]
 8001c66:	e020      	b.n	8001caa <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a15      	ldr	r2, [pc, #84]	; (8001cc4 <HAL_ADC_Start+0x198>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d11b      	bne.n	8001caa <HAL_ADC_Start+0x17e>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d114      	bne.n	8001caa <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	689a      	ldr	r2, [r3, #8]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001c8e:	609a      	str	r2, [r3, #8]
 8001c90:	e00b      	b.n	8001caa <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c96:	f043 0210 	orr.w	r2, r3, #16
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ca2:	f043 0201 	orr.w	r2, r3, #1
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001caa:	2300      	movs	r3, #0
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3714      	adds	r7, #20
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr
 8001cb8:	200001b8 	.word	0x200001b8
 8001cbc:	431bde83 	.word	0x431bde83
 8001cc0:	40012300 	.word	0x40012300
 8001cc4:	40012000 	.word	0x40012000
 8001cc8:	40012100 	.word	0x40012100
 8001ccc:	40012200 	.word	0x40012200

08001cd0 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b084      	sub	sp, #16
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
 8001cd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ce8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cec:	d113      	bne.n	8001d16 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001cf8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001cfc:	d10b      	bne.n	8001d16 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d02:	f043 0220 	orr.w	r2, r3, #32
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e063      	b.n	8001dde <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d16:	f7ff fe95 	bl	8001a44 <HAL_GetTick>
 8001d1a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001d1c:	e021      	b.n	8001d62 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d24:	d01d      	beq.n	8001d62 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d007      	beq.n	8001d3c <HAL_ADC_PollForConversion+0x6c>
 8001d2c:	f7ff fe8a 	bl	8001a44 <HAL_GetTick>
 8001d30:	4602      	mov	r2, r0
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	683a      	ldr	r2, [r7, #0]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d212      	bcs.n	8001d62 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 0302 	and.w	r3, r3, #2
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	d00b      	beq.n	8001d62 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4e:	f043 0204 	orr.w	r2, r3, #4
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	e03d      	b.n	8001dde <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 0302 	and.w	r3, r3, #2
 8001d6c:	2b02      	cmp	r3, #2
 8001d6e:	d1d6      	bne.n	8001d1e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f06f 0212 	mvn.w	r2, #18
 8001d78:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d123      	bne.n	8001ddc <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d11f      	bne.n	8001ddc <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001da2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d006      	beq.n	8001db8 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d111      	bne.n	8001ddc <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	641a      	str	r2, [r3, #64]	; 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d105      	bne.n	8001ddc <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd4:	f043 0201 	orr.w	r2, r3, #1
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8001ddc:	2300      	movs	r3, #0
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3710      	adds	r7, #16
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}

08001de6 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001de6:	b480      	push	{r7}
 8001de8:	b083      	sub	sp, #12
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	370c      	adds	r7, #12
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr

08001e00 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b085      	sub	sp, #20
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d101      	bne.n	8001e1c <HAL_ADC_ConfigChannel+0x1c>
 8001e18:	2302      	movs	r3, #2
 8001e1a:	e105      	b.n	8002028 <HAL_ADC_ConfigChannel+0x228>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2201      	movs	r2, #1
 8001e20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	2b09      	cmp	r3, #9
 8001e2a:	d925      	bls.n	8001e78 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	68d9      	ldr	r1, [r3, #12]
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	b29b      	uxth	r3, r3
 8001e38:	461a      	mov	r2, r3
 8001e3a:	4613      	mov	r3, r2
 8001e3c:	005b      	lsls	r3, r3, #1
 8001e3e:	4413      	add	r3, r2
 8001e40:	3b1e      	subs	r3, #30
 8001e42:	2207      	movs	r2, #7
 8001e44:	fa02 f303 	lsl.w	r3, r2, r3
 8001e48:	43da      	mvns	r2, r3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	400a      	ands	r2, r1
 8001e50:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	68d9      	ldr	r1, [r3, #12]
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	689a      	ldr	r2, [r3, #8]
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	b29b      	uxth	r3, r3
 8001e62:	4618      	mov	r0, r3
 8001e64:	4603      	mov	r3, r0
 8001e66:	005b      	lsls	r3, r3, #1
 8001e68:	4403      	add	r3, r0
 8001e6a:	3b1e      	subs	r3, #30
 8001e6c:	409a      	lsls	r2, r3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	430a      	orrs	r2, r1
 8001e74:	60da      	str	r2, [r3, #12]
 8001e76:	e022      	b.n	8001ebe <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	6919      	ldr	r1, [r3, #16]
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	b29b      	uxth	r3, r3
 8001e84:	461a      	mov	r2, r3
 8001e86:	4613      	mov	r3, r2
 8001e88:	005b      	lsls	r3, r3, #1
 8001e8a:	4413      	add	r3, r2
 8001e8c:	2207      	movs	r2, #7
 8001e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e92:	43da      	mvns	r2, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	400a      	ands	r2, r1
 8001e9a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	6919      	ldr	r1, [r3, #16]
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	689a      	ldr	r2, [r3, #8]
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	b29b      	uxth	r3, r3
 8001eac:	4618      	mov	r0, r3
 8001eae:	4603      	mov	r3, r0
 8001eb0:	005b      	lsls	r3, r3, #1
 8001eb2:	4403      	add	r3, r0
 8001eb4:	409a      	lsls	r2, r3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	430a      	orrs	r2, r1
 8001ebc:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	2b06      	cmp	r3, #6
 8001ec4:	d824      	bhi.n	8001f10 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685a      	ldr	r2, [r3, #4]
 8001ed0:	4613      	mov	r3, r2
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	4413      	add	r3, r2
 8001ed6:	3b05      	subs	r3, #5
 8001ed8:	221f      	movs	r2, #31
 8001eda:	fa02 f303 	lsl.w	r3, r2, r3
 8001ede:	43da      	mvns	r2, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	400a      	ands	r2, r1
 8001ee6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	b29b      	uxth	r3, r3
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	685a      	ldr	r2, [r3, #4]
 8001efa:	4613      	mov	r3, r2
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	4413      	add	r3, r2
 8001f00:	3b05      	subs	r3, #5
 8001f02:	fa00 f203 	lsl.w	r2, r0, r3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	430a      	orrs	r2, r1
 8001f0c:	635a      	str	r2, [r3, #52]	; 0x34
 8001f0e:	e04c      	b.n	8001faa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	2b0c      	cmp	r3, #12
 8001f16:	d824      	bhi.n	8001f62 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	685a      	ldr	r2, [r3, #4]
 8001f22:	4613      	mov	r3, r2
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	4413      	add	r3, r2
 8001f28:	3b23      	subs	r3, #35	; 0x23
 8001f2a:	221f      	movs	r2, #31
 8001f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f30:	43da      	mvns	r2, r3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	400a      	ands	r2, r1
 8001f38:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	b29b      	uxth	r3, r3
 8001f46:	4618      	mov	r0, r3
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	685a      	ldr	r2, [r3, #4]
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	4413      	add	r3, r2
 8001f52:	3b23      	subs	r3, #35	; 0x23
 8001f54:	fa00 f203 	lsl.w	r2, r0, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	430a      	orrs	r2, r1
 8001f5e:	631a      	str	r2, [r3, #48]	; 0x30
 8001f60:	e023      	b.n	8001faa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	685a      	ldr	r2, [r3, #4]
 8001f6c:	4613      	mov	r3, r2
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	4413      	add	r3, r2
 8001f72:	3b41      	subs	r3, #65	; 0x41
 8001f74:	221f      	movs	r2, #31
 8001f76:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7a:	43da      	mvns	r2, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	400a      	ands	r2, r1
 8001f82:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	b29b      	uxth	r3, r3
 8001f90:	4618      	mov	r0, r3
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	685a      	ldr	r2, [r3, #4]
 8001f96:	4613      	mov	r3, r2
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	4413      	add	r3, r2
 8001f9c:	3b41      	subs	r3, #65	; 0x41
 8001f9e:	fa00 f203 	lsl.w	r2, r0, r3
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	430a      	orrs	r2, r1
 8001fa8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001faa:	4b22      	ldr	r3, [pc, #136]	; (8002034 <HAL_ADC_ConfigChannel+0x234>)
 8001fac:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a21      	ldr	r2, [pc, #132]	; (8002038 <HAL_ADC_ConfigChannel+0x238>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d109      	bne.n	8001fcc <HAL_ADC_ConfigChannel+0x1cc>
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2b12      	cmp	r3, #18
 8001fbe:	d105      	bne.n	8001fcc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a19      	ldr	r2, [pc, #100]	; (8002038 <HAL_ADC_ConfigChannel+0x238>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d123      	bne.n	800201e <HAL_ADC_ConfigChannel+0x21e>
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	2b10      	cmp	r3, #16
 8001fdc:	d003      	beq.n	8001fe6 <HAL_ADC_ConfigChannel+0x1e6>
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	2b11      	cmp	r3, #17
 8001fe4:	d11b      	bne.n	800201e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	2b10      	cmp	r3, #16
 8001ff8:	d111      	bne.n	800201e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001ffa:	4b10      	ldr	r3, [pc, #64]	; (800203c <HAL_ADC_ConfigChannel+0x23c>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a10      	ldr	r2, [pc, #64]	; (8002040 <HAL_ADC_ConfigChannel+0x240>)
 8002000:	fba2 2303 	umull	r2, r3, r2, r3
 8002004:	0c9a      	lsrs	r2, r3, #18
 8002006:	4613      	mov	r3, r2
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	4413      	add	r3, r2
 800200c:	005b      	lsls	r3, r3, #1
 800200e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002010:	e002      	b.n	8002018 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	3b01      	subs	r3, #1
 8002016:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d1f9      	bne.n	8002012 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2200      	movs	r2, #0
 8002022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8002026:	2300      	movs	r3, #0
}
 8002028:	4618      	mov	r0, r3
 800202a:	3714      	adds	r7, #20
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr
 8002034:	40012300 	.word	0x40012300
 8002038:	40012000 	.word	0x40012000
 800203c:	200001b8 	.word	0x200001b8
 8002040:	431bde83 	.word	0x431bde83

08002044 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002044:	b480      	push	{r7}
 8002046:	b085      	sub	sp, #20
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800204c:	4b79      	ldr	r3, [pc, #484]	; (8002234 <ADC_Init+0x1f0>)
 800204e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	685a      	ldr	r2, [r3, #4]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	431a      	orrs	r2, r3
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	685a      	ldr	r2, [r3, #4]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002078:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	6859      	ldr	r1, [r3, #4]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	691b      	ldr	r3, [r3, #16]
 8002084:	021a      	lsls	r2, r3, #8
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	430a      	orrs	r2, r1
 800208c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	685a      	ldr	r2, [r3, #4]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800209c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	6859      	ldr	r1, [r3, #4]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	689a      	ldr	r2, [r3, #8]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	430a      	orrs	r2, r1
 80020ae:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	689a      	ldr	r2, [r3, #8]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	6899      	ldr	r1, [r3, #8]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	68da      	ldr	r2, [r3, #12]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	430a      	orrs	r2, r1
 80020d0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020d6:	4a58      	ldr	r2, [pc, #352]	; (8002238 <ADC_Init+0x1f4>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d022      	beq.n	8002122 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	689a      	ldr	r2, [r3, #8]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80020ea:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	6899      	ldr	r1, [r3, #8]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	430a      	orrs	r2, r1
 80020fc:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	689a      	ldr	r2, [r3, #8]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800210c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	6899      	ldr	r1, [r3, #8]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	430a      	orrs	r2, r1
 800211e:	609a      	str	r2, [r3, #8]
 8002120:	e00f      	b.n	8002142 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	689a      	ldr	r2, [r3, #8]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002130:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	689a      	ldr	r2, [r3, #8]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002140:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	689a      	ldr	r2, [r3, #8]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f022 0202 	bic.w	r2, r2, #2
 8002150:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	6899      	ldr	r1, [r3, #8]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	7e1b      	ldrb	r3, [r3, #24]
 800215c:	005a      	lsls	r2, r3, #1
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	430a      	orrs	r2, r1
 8002164:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	f893 3020 	ldrb.w	r3, [r3, #32]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d01b      	beq.n	80021a8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	685a      	ldr	r2, [r3, #4]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800217e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	685a      	ldr	r2, [r3, #4]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800218e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	6859      	ldr	r1, [r3, #4]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800219a:	3b01      	subs	r3, #1
 800219c:	035a      	lsls	r2, r3, #13
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	430a      	orrs	r2, r1
 80021a4:	605a      	str	r2, [r3, #4]
 80021a6:	e007      	b.n	80021b8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	685a      	ldr	r2, [r3, #4]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021b6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80021c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	69db      	ldr	r3, [r3, #28]
 80021d2:	3b01      	subs	r3, #1
 80021d4:	051a      	lsls	r2, r3, #20
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	430a      	orrs	r2, r1
 80021dc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	689a      	ldr	r2, [r3, #8]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80021ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	6899      	ldr	r1, [r3, #8]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80021fa:	025a      	lsls	r2, r3, #9
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	430a      	orrs	r2, r1
 8002202:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	689a      	ldr	r2, [r3, #8]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002212:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	6899      	ldr	r1, [r3, #8]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	695b      	ldr	r3, [r3, #20]
 800221e:	029a      	lsls	r2, r3, #10
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	430a      	orrs	r2, r1
 8002226:	609a      	str	r2, [r3, #8]
}
 8002228:	bf00      	nop
 800222a:	3714      	adds	r7, #20
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr
 8002234:	40012300 	.word	0x40012300
 8002238:	0f000001 	.word	0x0f000001

0800223c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800223c:	b480      	push	{r7}
 800223e:	b085      	sub	sp, #20
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	f003 0307 	and.w	r3, r3, #7
 800224a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800224c:	4b0c      	ldr	r3, [pc, #48]	; (8002280 <__NVIC_SetPriorityGrouping+0x44>)
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002252:	68ba      	ldr	r2, [r7, #8]
 8002254:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002258:	4013      	ands	r3, r2
 800225a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002264:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002268:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800226c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800226e:	4a04      	ldr	r2, [pc, #16]	; (8002280 <__NVIC_SetPriorityGrouping+0x44>)
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	60d3      	str	r3, [r2, #12]
}
 8002274:	bf00      	nop
 8002276:	3714      	adds	r7, #20
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr
 8002280:	e000ed00 	.word	0xe000ed00

08002284 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002288:	4b04      	ldr	r3, [pc, #16]	; (800229c <__NVIC_GetPriorityGrouping+0x18>)
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	0a1b      	lsrs	r3, r3, #8
 800228e:	f003 0307 	and.w	r3, r3, #7
}
 8002292:	4618      	mov	r0, r3
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr
 800229c:	e000ed00 	.word	0xe000ed00

080022a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	4603      	mov	r3, r0
 80022a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	db0b      	blt.n	80022ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022b2:	79fb      	ldrb	r3, [r7, #7]
 80022b4:	f003 021f 	and.w	r2, r3, #31
 80022b8:	4907      	ldr	r1, [pc, #28]	; (80022d8 <__NVIC_EnableIRQ+0x38>)
 80022ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022be:	095b      	lsrs	r3, r3, #5
 80022c0:	2001      	movs	r0, #1
 80022c2:	fa00 f202 	lsl.w	r2, r0, r2
 80022c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80022ca:	bf00      	nop
 80022cc:	370c      	adds	r7, #12
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr
 80022d6:	bf00      	nop
 80022d8:	e000e100 	.word	0xe000e100

080022dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	4603      	mov	r3, r0
 80022e4:	6039      	str	r1, [r7, #0]
 80022e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	db0a      	blt.n	8002306 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	b2da      	uxtb	r2, r3
 80022f4:	490c      	ldr	r1, [pc, #48]	; (8002328 <__NVIC_SetPriority+0x4c>)
 80022f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022fa:	0112      	lsls	r2, r2, #4
 80022fc:	b2d2      	uxtb	r2, r2
 80022fe:	440b      	add	r3, r1
 8002300:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002304:	e00a      	b.n	800231c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	b2da      	uxtb	r2, r3
 800230a:	4908      	ldr	r1, [pc, #32]	; (800232c <__NVIC_SetPriority+0x50>)
 800230c:	79fb      	ldrb	r3, [r7, #7]
 800230e:	f003 030f 	and.w	r3, r3, #15
 8002312:	3b04      	subs	r3, #4
 8002314:	0112      	lsls	r2, r2, #4
 8002316:	b2d2      	uxtb	r2, r2
 8002318:	440b      	add	r3, r1
 800231a:	761a      	strb	r2, [r3, #24]
}
 800231c:	bf00      	nop
 800231e:	370c      	adds	r7, #12
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr
 8002328:	e000e100 	.word	0xe000e100
 800232c:	e000ed00 	.word	0xe000ed00

08002330 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002330:	b480      	push	{r7}
 8002332:	b089      	sub	sp, #36	; 0x24
 8002334:	af00      	add	r7, sp, #0
 8002336:	60f8      	str	r0, [r7, #12]
 8002338:	60b9      	str	r1, [r7, #8]
 800233a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	f003 0307 	and.w	r3, r3, #7
 8002342:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	f1c3 0307 	rsb	r3, r3, #7
 800234a:	2b04      	cmp	r3, #4
 800234c:	bf28      	it	cs
 800234e:	2304      	movcs	r3, #4
 8002350:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	3304      	adds	r3, #4
 8002356:	2b06      	cmp	r3, #6
 8002358:	d902      	bls.n	8002360 <NVIC_EncodePriority+0x30>
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	3b03      	subs	r3, #3
 800235e:	e000      	b.n	8002362 <NVIC_EncodePriority+0x32>
 8002360:	2300      	movs	r3, #0
 8002362:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002364:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002368:	69bb      	ldr	r3, [r7, #24]
 800236a:	fa02 f303 	lsl.w	r3, r2, r3
 800236e:	43da      	mvns	r2, r3
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	401a      	ands	r2, r3
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002378:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	fa01 f303 	lsl.w	r3, r1, r3
 8002382:	43d9      	mvns	r1, r3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002388:	4313      	orrs	r3, r2
         );
}
 800238a:	4618      	mov	r0, r3
 800238c:	3724      	adds	r7, #36	; 0x24
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr
	...

08002398 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	3b01      	subs	r3, #1
 80023a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023a8:	d301      	bcc.n	80023ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023aa:	2301      	movs	r3, #1
 80023ac:	e00f      	b.n	80023ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023ae:	4a0a      	ldr	r2, [pc, #40]	; (80023d8 <SysTick_Config+0x40>)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	3b01      	subs	r3, #1
 80023b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023b6:	210f      	movs	r1, #15
 80023b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80023bc:	f7ff ff8e 	bl	80022dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023c0:	4b05      	ldr	r3, [pc, #20]	; (80023d8 <SysTick_Config+0x40>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023c6:	4b04      	ldr	r3, [pc, #16]	; (80023d8 <SysTick_Config+0x40>)
 80023c8:	2207      	movs	r2, #7
 80023ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023cc:	2300      	movs	r3, #0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3708      	adds	r7, #8
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	e000e010 	.word	0xe000e010

080023dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	f7ff ff29 	bl	800223c <__NVIC_SetPriorityGrouping>
}
 80023ea:	bf00      	nop
 80023ec:	3708      	adds	r7, #8
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}

080023f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023f2:	b580      	push	{r7, lr}
 80023f4:	b086      	sub	sp, #24
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	4603      	mov	r3, r0
 80023fa:	60b9      	str	r1, [r7, #8]
 80023fc:	607a      	str	r2, [r7, #4]
 80023fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002400:	2300      	movs	r3, #0
 8002402:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002404:	f7ff ff3e 	bl	8002284 <__NVIC_GetPriorityGrouping>
 8002408:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	68b9      	ldr	r1, [r7, #8]
 800240e:	6978      	ldr	r0, [r7, #20]
 8002410:	f7ff ff8e 	bl	8002330 <NVIC_EncodePriority>
 8002414:	4602      	mov	r2, r0
 8002416:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800241a:	4611      	mov	r1, r2
 800241c:	4618      	mov	r0, r3
 800241e:	f7ff ff5d 	bl	80022dc <__NVIC_SetPriority>
}
 8002422:	bf00      	nop
 8002424:	3718      	adds	r7, #24
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}

0800242a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800242a:	b580      	push	{r7, lr}
 800242c:	b082      	sub	sp, #8
 800242e:	af00      	add	r7, sp, #0
 8002430:	4603      	mov	r3, r0
 8002432:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002434:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002438:	4618      	mov	r0, r3
 800243a:	f7ff ff31 	bl	80022a0 <__NVIC_EnableIRQ>
}
 800243e:	bf00      	nop
 8002440:	3708      	adds	r7, #8
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}

08002446 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002446:	b580      	push	{r7, lr}
 8002448:	b082      	sub	sp, #8
 800244a:	af00      	add	r7, sp, #0
 800244c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f7ff ffa2 	bl	8002398 <SysTick_Config>
 8002454:	4603      	mov	r3, r0
}
 8002456:	4618      	mov	r0, r3
 8002458:	3708      	adds	r7, #8
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
	...

08002460 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002460:	b480      	push	{r7}
 8002462:	b089      	sub	sp, #36	; 0x24
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
 8002468:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800246a:	2300      	movs	r3, #0
 800246c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800246e:	2300      	movs	r3, #0
 8002470:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002472:	2300      	movs	r3, #0
 8002474:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002476:	2300      	movs	r3, #0
 8002478:	61fb      	str	r3, [r7, #28]
 800247a:	e16b      	b.n	8002754 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800247c:	2201      	movs	r2, #1
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	fa02 f303 	lsl.w	r3, r2, r3
 8002484:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	697a      	ldr	r2, [r7, #20]
 800248c:	4013      	ands	r3, r2
 800248e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002490:	693a      	ldr	r2, [r7, #16]
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	429a      	cmp	r2, r3
 8002496:	f040 815a 	bne.w	800274e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	f003 0303 	and.w	r3, r3, #3
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d005      	beq.n	80024b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d130      	bne.n	8002514 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024b8:	69fb      	ldr	r3, [r7, #28]
 80024ba:	005b      	lsls	r3, r3, #1
 80024bc:	2203      	movs	r2, #3
 80024be:	fa02 f303 	lsl.w	r3, r2, r3
 80024c2:	43db      	mvns	r3, r3
 80024c4:	69ba      	ldr	r2, [r7, #24]
 80024c6:	4013      	ands	r3, r2
 80024c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	68da      	ldr	r2, [r3, #12]
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	005b      	lsls	r3, r3, #1
 80024d2:	fa02 f303 	lsl.w	r3, r2, r3
 80024d6:	69ba      	ldr	r2, [r7, #24]
 80024d8:	4313      	orrs	r3, r2
 80024da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	69ba      	ldr	r2, [r7, #24]
 80024e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024e8:	2201      	movs	r2, #1
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	fa02 f303 	lsl.w	r3, r2, r3
 80024f0:	43db      	mvns	r3, r3
 80024f2:	69ba      	ldr	r2, [r7, #24]
 80024f4:	4013      	ands	r3, r2
 80024f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	091b      	lsrs	r3, r3, #4
 80024fe:	f003 0201 	and.w	r2, r3, #1
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	fa02 f303 	lsl.w	r3, r2, r3
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	4313      	orrs	r3, r2
 800250c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	69ba      	ldr	r2, [r7, #24]
 8002512:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f003 0303 	and.w	r3, r3, #3
 800251c:	2b03      	cmp	r3, #3
 800251e:	d017      	beq.n	8002550 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	005b      	lsls	r3, r3, #1
 800252a:	2203      	movs	r2, #3
 800252c:	fa02 f303 	lsl.w	r3, r2, r3
 8002530:	43db      	mvns	r3, r3
 8002532:	69ba      	ldr	r2, [r7, #24]
 8002534:	4013      	ands	r3, r2
 8002536:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	689a      	ldr	r2, [r3, #8]
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	005b      	lsls	r3, r3, #1
 8002540:	fa02 f303 	lsl.w	r3, r2, r3
 8002544:	69ba      	ldr	r2, [r7, #24]
 8002546:	4313      	orrs	r3, r2
 8002548:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	69ba      	ldr	r2, [r7, #24]
 800254e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f003 0303 	and.w	r3, r3, #3
 8002558:	2b02      	cmp	r3, #2
 800255a:	d123      	bne.n	80025a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	08da      	lsrs	r2, r3, #3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	3208      	adds	r2, #8
 8002564:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002568:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	f003 0307 	and.w	r3, r3, #7
 8002570:	009b      	lsls	r3, r3, #2
 8002572:	220f      	movs	r2, #15
 8002574:	fa02 f303 	lsl.w	r3, r2, r3
 8002578:	43db      	mvns	r3, r3
 800257a:	69ba      	ldr	r2, [r7, #24]
 800257c:	4013      	ands	r3, r2
 800257e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	691a      	ldr	r2, [r3, #16]
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	f003 0307 	and.w	r3, r3, #7
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	fa02 f303 	lsl.w	r3, r2, r3
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	4313      	orrs	r3, r2
 8002594:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	08da      	lsrs	r2, r3, #3
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	3208      	adds	r2, #8
 800259e:	69b9      	ldr	r1, [r7, #24]
 80025a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	005b      	lsls	r3, r3, #1
 80025ae:	2203      	movs	r2, #3
 80025b0:	fa02 f303 	lsl.w	r3, r2, r3
 80025b4:	43db      	mvns	r3, r3
 80025b6:	69ba      	ldr	r2, [r7, #24]
 80025b8:	4013      	ands	r3, r2
 80025ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f003 0203 	and.w	r2, r3, #3
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	005b      	lsls	r3, r3, #1
 80025c8:	fa02 f303 	lsl.w	r3, r2, r3
 80025cc:	69ba      	ldr	r2, [r7, #24]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	69ba      	ldr	r2, [r7, #24]
 80025d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	f000 80b4 	beq.w	800274e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025e6:	2300      	movs	r3, #0
 80025e8:	60fb      	str	r3, [r7, #12]
 80025ea:	4b60      	ldr	r3, [pc, #384]	; (800276c <HAL_GPIO_Init+0x30c>)
 80025ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ee:	4a5f      	ldr	r2, [pc, #380]	; (800276c <HAL_GPIO_Init+0x30c>)
 80025f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025f4:	6453      	str	r3, [r2, #68]	; 0x44
 80025f6:	4b5d      	ldr	r3, [pc, #372]	; (800276c <HAL_GPIO_Init+0x30c>)
 80025f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025fe:	60fb      	str	r3, [r7, #12]
 8002600:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002602:	4a5b      	ldr	r2, [pc, #364]	; (8002770 <HAL_GPIO_Init+0x310>)
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	089b      	lsrs	r3, r3, #2
 8002608:	3302      	adds	r3, #2
 800260a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800260e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	f003 0303 	and.w	r3, r3, #3
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	220f      	movs	r2, #15
 800261a:	fa02 f303 	lsl.w	r3, r2, r3
 800261e:	43db      	mvns	r3, r3
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	4013      	ands	r3, r2
 8002624:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4a52      	ldr	r2, [pc, #328]	; (8002774 <HAL_GPIO_Init+0x314>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d02b      	beq.n	8002686 <HAL_GPIO_Init+0x226>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a51      	ldr	r2, [pc, #324]	; (8002778 <HAL_GPIO_Init+0x318>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d025      	beq.n	8002682 <HAL_GPIO_Init+0x222>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4a50      	ldr	r2, [pc, #320]	; (800277c <HAL_GPIO_Init+0x31c>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d01f      	beq.n	800267e <HAL_GPIO_Init+0x21e>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4a4f      	ldr	r2, [pc, #316]	; (8002780 <HAL_GPIO_Init+0x320>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d019      	beq.n	800267a <HAL_GPIO_Init+0x21a>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4a4e      	ldr	r2, [pc, #312]	; (8002784 <HAL_GPIO_Init+0x324>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d013      	beq.n	8002676 <HAL_GPIO_Init+0x216>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4a4d      	ldr	r2, [pc, #308]	; (8002788 <HAL_GPIO_Init+0x328>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d00d      	beq.n	8002672 <HAL_GPIO_Init+0x212>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	4a4c      	ldr	r2, [pc, #304]	; (800278c <HAL_GPIO_Init+0x32c>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d007      	beq.n	800266e <HAL_GPIO_Init+0x20e>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4a4b      	ldr	r2, [pc, #300]	; (8002790 <HAL_GPIO_Init+0x330>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d101      	bne.n	800266a <HAL_GPIO_Init+0x20a>
 8002666:	2307      	movs	r3, #7
 8002668:	e00e      	b.n	8002688 <HAL_GPIO_Init+0x228>
 800266a:	2308      	movs	r3, #8
 800266c:	e00c      	b.n	8002688 <HAL_GPIO_Init+0x228>
 800266e:	2306      	movs	r3, #6
 8002670:	e00a      	b.n	8002688 <HAL_GPIO_Init+0x228>
 8002672:	2305      	movs	r3, #5
 8002674:	e008      	b.n	8002688 <HAL_GPIO_Init+0x228>
 8002676:	2304      	movs	r3, #4
 8002678:	e006      	b.n	8002688 <HAL_GPIO_Init+0x228>
 800267a:	2303      	movs	r3, #3
 800267c:	e004      	b.n	8002688 <HAL_GPIO_Init+0x228>
 800267e:	2302      	movs	r3, #2
 8002680:	e002      	b.n	8002688 <HAL_GPIO_Init+0x228>
 8002682:	2301      	movs	r3, #1
 8002684:	e000      	b.n	8002688 <HAL_GPIO_Init+0x228>
 8002686:	2300      	movs	r3, #0
 8002688:	69fa      	ldr	r2, [r7, #28]
 800268a:	f002 0203 	and.w	r2, r2, #3
 800268e:	0092      	lsls	r2, r2, #2
 8002690:	4093      	lsls	r3, r2
 8002692:	69ba      	ldr	r2, [r7, #24]
 8002694:	4313      	orrs	r3, r2
 8002696:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002698:	4935      	ldr	r1, [pc, #212]	; (8002770 <HAL_GPIO_Init+0x310>)
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	089b      	lsrs	r3, r3, #2
 800269e:	3302      	adds	r3, #2
 80026a0:	69ba      	ldr	r2, [r7, #24]
 80026a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026a6:	4b3b      	ldr	r3, [pc, #236]	; (8002794 <HAL_GPIO_Init+0x334>)
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	43db      	mvns	r3, r3
 80026b0:	69ba      	ldr	r2, [r7, #24]
 80026b2:	4013      	ands	r3, r2
 80026b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d003      	beq.n	80026ca <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80026c2:	69ba      	ldr	r2, [r7, #24]
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	4313      	orrs	r3, r2
 80026c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026ca:	4a32      	ldr	r2, [pc, #200]	; (8002794 <HAL_GPIO_Init+0x334>)
 80026cc:	69bb      	ldr	r3, [r7, #24]
 80026ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026d0:	4b30      	ldr	r3, [pc, #192]	; (8002794 <HAL_GPIO_Init+0x334>)
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	43db      	mvns	r3, r3
 80026da:	69ba      	ldr	r2, [r7, #24]
 80026dc:	4013      	ands	r3, r2
 80026de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d003      	beq.n	80026f4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80026ec:	69ba      	ldr	r2, [r7, #24]
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	4313      	orrs	r3, r2
 80026f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026f4:	4a27      	ldr	r2, [pc, #156]	; (8002794 <HAL_GPIO_Init+0x334>)
 80026f6:	69bb      	ldr	r3, [r7, #24]
 80026f8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80026fa:	4b26      	ldr	r3, [pc, #152]	; (8002794 <HAL_GPIO_Init+0x334>)
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	43db      	mvns	r3, r3
 8002704:	69ba      	ldr	r2, [r7, #24]
 8002706:	4013      	ands	r3, r2
 8002708:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d003      	beq.n	800271e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002716:	69ba      	ldr	r2, [r7, #24]
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	4313      	orrs	r3, r2
 800271c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800271e:	4a1d      	ldr	r2, [pc, #116]	; (8002794 <HAL_GPIO_Init+0x334>)
 8002720:	69bb      	ldr	r3, [r7, #24]
 8002722:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002724:	4b1b      	ldr	r3, [pc, #108]	; (8002794 <HAL_GPIO_Init+0x334>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	43db      	mvns	r3, r3
 800272e:	69ba      	ldr	r2, [r7, #24]
 8002730:	4013      	ands	r3, r2
 8002732:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800273c:	2b00      	cmp	r3, #0
 800273e:	d003      	beq.n	8002748 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002740:	69ba      	ldr	r2, [r7, #24]
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	4313      	orrs	r3, r2
 8002746:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002748:	4a12      	ldr	r2, [pc, #72]	; (8002794 <HAL_GPIO_Init+0x334>)
 800274a:	69bb      	ldr	r3, [r7, #24]
 800274c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	3301      	adds	r3, #1
 8002752:	61fb      	str	r3, [r7, #28]
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	2b0f      	cmp	r3, #15
 8002758:	f67f ae90 	bls.w	800247c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800275c:	bf00      	nop
 800275e:	bf00      	nop
 8002760:	3724      	adds	r7, #36	; 0x24
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop
 800276c:	40023800 	.word	0x40023800
 8002770:	40013800 	.word	0x40013800
 8002774:	40020000 	.word	0x40020000
 8002778:	40020400 	.word	0x40020400
 800277c:	40020800 	.word	0x40020800
 8002780:	40020c00 	.word	0x40020c00
 8002784:	40021000 	.word	0x40021000
 8002788:	40021400 	.word	0x40021400
 800278c:	40021800 	.word	0x40021800
 8002790:	40021c00 	.word	0x40021c00
 8002794:	40013c00 	.word	0x40013c00

08002798 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
 80027a0:	460b      	mov	r3, r1
 80027a2:	807b      	strh	r3, [r7, #2]
 80027a4:	4613      	mov	r3, r2
 80027a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027a8:	787b      	ldrb	r3, [r7, #1]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d003      	beq.n	80027b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027ae:	887a      	ldrh	r2, [r7, #2]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80027b4:	e003      	b.n	80027be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80027b6:	887b      	ldrh	r3, [r7, #2]
 80027b8:	041a      	lsls	r2, r3, #16
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	619a      	str	r2, [r3, #24]
}
 80027be:	bf00      	nop
 80027c0:	370c      	adds	r7, #12
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr
	...

080027cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b082      	sub	sp, #8
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	4603      	mov	r3, r0
 80027d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80027d6:	4b08      	ldr	r3, [pc, #32]	; (80027f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027d8:	695a      	ldr	r2, [r3, #20]
 80027da:	88fb      	ldrh	r3, [r7, #6]
 80027dc:	4013      	ands	r3, r2
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d006      	beq.n	80027f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80027e2:	4a05      	ldr	r2, [pc, #20]	; (80027f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027e4:	88fb      	ldrh	r3, [r7, #6]
 80027e6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80027e8:	88fb      	ldrh	r3, [r7, #6]
 80027ea:	4618      	mov	r0, r3
 80027ec:	f000 f806 	bl	80027fc <HAL_GPIO_EXTI_Callback>
  }
}
 80027f0:	bf00      	nop
 80027f2:	3708      	adds	r7, #8
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	40013c00 	.word	0x40013c00

080027fc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
 8002802:	4603      	mov	r3, r0
 8002804:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002806:	bf00      	nop
 8002808:	370c      	adds	r7, #12
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr
	...

08002814 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b086      	sub	sp, #24
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d101      	bne.n	8002826 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e267      	b.n	8002cf6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0301 	and.w	r3, r3, #1
 800282e:	2b00      	cmp	r3, #0
 8002830:	d075      	beq.n	800291e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002832:	4b88      	ldr	r3, [pc, #544]	; (8002a54 <HAL_RCC_OscConfig+0x240>)
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	f003 030c 	and.w	r3, r3, #12
 800283a:	2b04      	cmp	r3, #4
 800283c:	d00c      	beq.n	8002858 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800283e:	4b85      	ldr	r3, [pc, #532]	; (8002a54 <HAL_RCC_OscConfig+0x240>)
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002846:	2b08      	cmp	r3, #8
 8002848:	d112      	bne.n	8002870 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800284a:	4b82      	ldr	r3, [pc, #520]	; (8002a54 <HAL_RCC_OscConfig+0x240>)
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002852:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002856:	d10b      	bne.n	8002870 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002858:	4b7e      	ldr	r3, [pc, #504]	; (8002a54 <HAL_RCC_OscConfig+0x240>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002860:	2b00      	cmp	r3, #0
 8002862:	d05b      	beq.n	800291c <HAL_RCC_OscConfig+0x108>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d157      	bne.n	800291c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e242      	b.n	8002cf6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002878:	d106      	bne.n	8002888 <HAL_RCC_OscConfig+0x74>
 800287a:	4b76      	ldr	r3, [pc, #472]	; (8002a54 <HAL_RCC_OscConfig+0x240>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a75      	ldr	r2, [pc, #468]	; (8002a54 <HAL_RCC_OscConfig+0x240>)
 8002880:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002884:	6013      	str	r3, [r2, #0]
 8002886:	e01d      	b.n	80028c4 <HAL_RCC_OscConfig+0xb0>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002890:	d10c      	bne.n	80028ac <HAL_RCC_OscConfig+0x98>
 8002892:	4b70      	ldr	r3, [pc, #448]	; (8002a54 <HAL_RCC_OscConfig+0x240>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a6f      	ldr	r2, [pc, #444]	; (8002a54 <HAL_RCC_OscConfig+0x240>)
 8002898:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800289c:	6013      	str	r3, [r2, #0]
 800289e:	4b6d      	ldr	r3, [pc, #436]	; (8002a54 <HAL_RCC_OscConfig+0x240>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a6c      	ldr	r2, [pc, #432]	; (8002a54 <HAL_RCC_OscConfig+0x240>)
 80028a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028a8:	6013      	str	r3, [r2, #0]
 80028aa:	e00b      	b.n	80028c4 <HAL_RCC_OscConfig+0xb0>
 80028ac:	4b69      	ldr	r3, [pc, #420]	; (8002a54 <HAL_RCC_OscConfig+0x240>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a68      	ldr	r2, [pc, #416]	; (8002a54 <HAL_RCC_OscConfig+0x240>)
 80028b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028b6:	6013      	str	r3, [r2, #0]
 80028b8:	4b66      	ldr	r3, [pc, #408]	; (8002a54 <HAL_RCC_OscConfig+0x240>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a65      	ldr	r2, [pc, #404]	; (8002a54 <HAL_RCC_OscConfig+0x240>)
 80028be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d013      	beq.n	80028f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028cc:	f7ff f8ba 	bl	8001a44 <HAL_GetTick>
 80028d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028d2:	e008      	b.n	80028e6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028d4:	f7ff f8b6 	bl	8001a44 <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	2b64      	cmp	r3, #100	; 0x64
 80028e0:	d901      	bls.n	80028e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e207      	b.n	8002cf6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028e6:	4b5b      	ldr	r3, [pc, #364]	; (8002a54 <HAL_RCC_OscConfig+0x240>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d0f0      	beq.n	80028d4 <HAL_RCC_OscConfig+0xc0>
 80028f2:	e014      	b.n	800291e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028f4:	f7ff f8a6 	bl	8001a44 <HAL_GetTick>
 80028f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028fa:	e008      	b.n	800290e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028fc:	f7ff f8a2 	bl	8001a44 <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	2b64      	cmp	r3, #100	; 0x64
 8002908:	d901      	bls.n	800290e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e1f3      	b.n	8002cf6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800290e:	4b51      	ldr	r3, [pc, #324]	; (8002a54 <HAL_RCC_OscConfig+0x240>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d1f0      	bne.n	80028fc <HAL_RCC_OscConfig+0xe8>
 800291a:	e000      	b.n	800291e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800291c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0302 	and.w	r3, r3, #2
 8002926:	2b00      	cmp	r3, #0
 8002928:	d063      	beq.n	80029f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800292a:	4b4a      	ldr	r3, [pc, #296]	; (8002a54 <HAL_RCC_OscConfig+0x240>)
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	f003 030c 	and.w	r3, r3, #12
 8002932:	2b00      	cmp	r3, #0
 8002934:	d00b      	beq.n	800294e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002936:	4b47      	ldr	r3, [pc, #284]	; (8002a54 <HAL_RCC_OscConfig+0x240>)
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800293e:	2b08      	cmp	r3, #8
 8002940:	d11c      	bne.n	800297c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002942:	4b44      	ldr	r3, [pc, #272]	; (8002a54 <HAL_RCC_OscConfig+0x240>)
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d116      	bne.n	800297c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800294e:	4b41      	ldr	r3, [pc, #260]	; (8002a54 <HAL_RCC_OscConfig+0x240>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0302 	and.w	r3, r3, #2
 8002956:	2b00      	cmp	r3, #0
 8002958:	d005      	beq.n	8002966 <HAL_RCC_OscConfig+0x152>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	68db      	ldr	r3, [r3, #12]
 800295e:	2b01      	cmp	r3, #1
 8002960:	d001      	beq.n	8002966 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e1c7      	b.n	8002cf6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002966:	4b3b      	ldr	r3, [pc, #236]	; (8002a54 <HAL_RCC_OscConfig+0x240>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	691b      	ldr	r3, [r3, #16]
 8002972:	00db      	lsls	r3, r3, #3
 8002974:	4937      	ldr	r1, [pc, #220]	; (8002a54 <HAL_RCC_OscConfig+0x240>)
 8002976:	4313      	orrs	r3, r2
 8002978:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800297a:	e03a      	b.n	80029f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d020      	beq.n	80029c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002984:	4b34      	ldr	r3, [pc, #208]	; (8002a58 <HAL_RCC_OscConfig+0x244>)
 8002986:	2201      	movs	r2, #1
 8002988:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800298a:	f7ff f85b 	bl	8001a44 <HAL_GetTick>
 800298e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002990:	e008      	b.n	80029a4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002992:	f7ff f857 	bl	8001a44 <HAL_GetTick>
 8002996:	4602      	mov	r2, r0
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	1ad3      	subs	r3, r2, r3
 800299c:	2b02      	cmp	r3, #2
 800299e:	d901      	bls.n	80029a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80029a0:	2303      	movs	r3, #3
 80029a2:	e1a8      	b.n	8002cf6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029a4:	4b2b      	ldr	r3, [pc, #172]	; (8002a54 <HAL_RCC_OscConfig+0x240>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 0302 	and.w	r3, r3, #2
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d0f0      	beq.n	8002992 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029b0:	4b28      	ldr	r3, [pc, #160]	; (8002a54 <HAL_RCC_OscConfig+0x240>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	691b      	ldr	r3, [r3, #16]
 80029bc:	00db      	lsls	r3, r3, #3
 80029be:	4925      	ldr	r1, [pc, #148]	; (8002a54 <HAL_RCC_OscConfig+0x240>)
 80029c0:	4313      	orrs	r3, r2
 80029c2:	600b      	str	r3, [r1, #0]
 80029c4:	e015      	b.n	80029f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029c6:	4b24      	ldr	r3, [pc, #144]	; (8002a58 <HAL_RCC_OscConfig+0x244>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029cc:	f7ff f83a 	bl	8001a44 <HAL_GetTick>
 80029d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029d2:	e008      	b.n	80029e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029d4:	f7ff f836 	bl	8001a44 <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	2b02      	cmp	r3, #2
 80029e0:	d901      	bls.n	80029e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80029e2:	2303      	movs	r3, #3
 80029e4:	e187      	b.n	8002cf6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029e6:	4b1b      	ldr	r3, [pc, #108]	; (8002a54 <HAL_RCC_OscConfig+0x240>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0302 	and.w	r3, r3, #2
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d1f0      	bne.n	80029d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0308 	and.w	r3, r3, #8
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d036      	beq.n	8002a6c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	695b      	ldr	r3, [r3, #20]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d016      	beq.n	8002a34 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a06:	4b15      	ldr	r3, [pc, #84]	; (8002a5c <HAL_RCC_OscConfig+0x248>)
 8002a08:	2201      	movs	r2, #1
 8002a0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a0c:	f7ff f81a 	bl	8001a44 <HAL_GetTick>
 8002a10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a12:	e008      	b.n	8002a26 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a14:	f7ff f816 	bl	8001a44 <HAL_GetTick>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	2b02      	cmp	r3, #2
 8002a20:	d901      	bls.n	8002a26 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e167      	b.n	8002cf6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a26:	4b0b      	ldr	r3, [pc, #44]	; (8002a54 <HAL_RCC_OscConfig+0x240>)
 8002a28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a2a:	f003 0302 	and.w	r3, r3, #2
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d0f0      	beq.n	8002a14 <HAL_RCC_OscConfig+0x200>
 8002a32:	e01b      	b.n	8002a6c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a34:	4b09      	ldr	r3, [pc, #36]	; (8002a5c <HAL_RCC_OscConfig+0x248>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a3a:	f7ff f803 	bl	8001a44 <HAL_GetTick>
 8002a3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a40:	e00e      	b.n	8002a60 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a42:	f7fe ffff 	bl	8001a44 <HAL_GetTick>
 8002a46:	4602      	mov	r2, r0
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	2b02      	cmp	r3, #2
 8002a4e:	d907      	bls.n	8002a60 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002a50:	2303      	movs	r3, #3
 8002a52:	e150      	b.n	8002cf6 <HAL_RCC_OscConfig+0x4e2>
 8002a54:	40023800 	.word	0x40023800
 8002a58:	42470000 	.word	0x42470000
 8002a5c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a60:	4b88      	ldr	r3, [pc, #544]	; (8002c84 <HAL_RCC_OscConfig+0x470>)
 8002a62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a64:	f003 0302 	and.w	r3, r3, #2
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d1ea      	bne.n	8002a42 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 0304 	and.w	r3, r3, #4
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	f000 8097 	beq.w	8002ba8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a7e:	4b81      	ldr	r3, [pc, #516]	; (8002c84 <HAL_RCC_OscConfig+0x470>)
 8002a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d10f      	bne.n	8002aaa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	60bb      	str	r3, [r7, #8]
 8002a8e:	4b7d      	ldr	r3, [pc, #500]	; (8002c84 <HAL_RCC_OscConfig+0x470>)
 8002a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a92:	4a7c      	ldr	r2, [pc, #496]	; (8002c84 <HAL_RCC_OscConfig+0x470>)
 8002a94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a98:	6413      	str	r3, [r2, #64]	; 0x40
 8002a9a:	4b7a      	ldr	r3, [pc, #488]	; (8002c84 <HAL_RCC_OscConfig+0x470>)
 8002a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aa2:	60bb      	str	r3, [r7, #8]
 8002aa4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aaa:	4b77      	ldr	r3, [pc, #476]	; (8002c88 <HAL_RCC_OscConfig+0x474>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d118      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ab6:	4b74      	ldr	r3, [pc, #464]	; (8002c88 <HAL_RCC_OscConfig+0x474>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a73      	ldr	r2, [pc, #460]	; (8002c88 <HAL_RCC_OscConfig+0x474>)
 8002abc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ac0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ac2:	f7fe ffbf 	bl	8001a44 <HAL_GetTick>
 8002ac6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ac8:	e008      	b.n	8002adc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002aca:	f7fe ffbb 	bl	8001a44 <HAL_GetTick>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	2b02      	cmp	r3, #2
 8002ad6:	d901      	bls.n	8002adc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	e10c      	b.n	8002cf6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002adc:	4b6a      	ldr	r3, [pc, #424]	; (8002c88 <HAL_RCC_OscConfig+0x474>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d0f0      	beq.n	8002aca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d106      	bne.n	8002afe <HAL_RCC_OscConfig+0x2ea>
 8002af0:	4b64      	ldr	r3, [pc, #400]	; (8002c84 <HAL_RCC_OscConfig+0x470>)
 8002af2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002af4:	4a63      	ldr	r2, [pc, #396]	; (8002c84 <HAL_RCC_OscConfig+0x470>)
 8002af6:	f043 0301 	orr.w	r3, r3, #1
 8002afa:	6713      	str	r3, [r2, #112]	; 0x70
 8002afc:	e01c      	b.n	8002b38 <HAL_RCC_OscConfig+0x324>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	2b05      	cmp	r3, #5
 8002b04:	d10c      	bne.n	8002b20 <HAL_RCC_OscConfig+0x30c>
 8002b06:	4b5f      	ldr	r3, [pc, #380]	; (8002c84 <HAL_RCC_OscConfig+0x470>)
 8002b08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b0a:	4a5e      	ldr	r2, [pc, #376]	; (8002c84 <HAL_RCC_OscConfig+0x470>)
 8002b0c:	f043 0304 	orr.w	r3, r3, #4
 8002b10:	6713      	str	r3, [r2, #112]	; 0x70
 8002b12:	4b5c      	ldr	r3, [pc, #368]	; (8002c84 <HAL_RCC_OscConfig+0x470>)
 8002b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b16:	4a5b      	ldr	r2, [pc, #364]	; (8002c84 <HAL_RCC_OscConfig+0x470>)
 8002b18:	f043 0301 	orr.w	r3, r3, #1
 8002b1c:	6713      	str	r3, [r2, #112]	; 0x70
 8002b1e:	e00b      	b.n	8002b38 <HAL_RCC_OscConfig+0x324>
 8002b20:	4b58      	ldr	r3, [pc, #352]	; (8002c84 <HAL_RCC_OscConfig+0x470>)
 8002b22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b24:	4a57      	ldr	r2, [pc, #348]	; (8002c84 <HAL_RCC_OscConfig+0x470>)
 8002b26:	f023 0301 	bic.w	r3, r3, #1
 8002b2a:	6713      	str	r3, [r2, #112]	; 0x70
 8002b2c:	4b55      	ldr	r3, [pc, #340]	; (8002c84 <HAL_RCC_OscConfig+0x470>)
 8002b2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b30:	4a54      	ldr	r2, [pc, #336]	; (8002c84 <HAL_RCC_OscConfig+0x470>)
 8002b32:	f023 0304 	bic.w	r3, r3, #4
 8002b36:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d015      	beq.n	8002b6c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b40:	f7fe ff80 	bl	8001a44 <HAL_GetTick>
 8002b44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b46:	e00a      	b.n	8002b5e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b48:	f7fe ff7c 	bl	8001a44 <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d901      	bls.n	8002b5e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e0cb      	b.n	8002cf6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b5e:	4b49      	ldr	r3, [pc, #292]	; (8002c84 <HAL_RCC_OscConfig+0x470>)
 8002b60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b62:	f003 0302 	and.w	r3, r3, #2
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d0ee      	beq.n	8002b48 <HAL_RCC_OscConfig+0x334>
 8002b6a:	e014      	b.n	8002b96 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b6c:	f7fe ff6a 	bl	8001a44 <HAL_GetTick>
 8002b70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b72:	e00a      	b.n	8002b8a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b74:	f7fe ff66 	bl	8001a44 <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d901      	bls.n	8002b8a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e0b5      	b.n	8002cf6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b8a:	4b3e      	ldr	r3, [pc, #248]	; (8002c84 <HAL_RCC_OscConfig+0x470>)
 8002b8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b8e:	f003 0302 	and.w	r3, r3, #2
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d1ee      	bne.n	8002b74 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002b96:	7dfb      	ldrb	r3, [r7, #23]
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d105      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b9c:	4b39      	ldr	r3, [pc, #228]	; (8002c84 <HAL_RCC_OscConfig+0x470>)
 8002b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba0:	4a38      	ldr	r2, [pc, #224]	; (8002c84 <HAL_RCC_OscConfig+0x470>)
 8002ba2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ba6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	699b      	ldr	r3, [r3, #24]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	f000 80a1 	beq.w	8002cf4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002bb2:	4b34      	ldr	r3, [pc, #208]	; (8002c84 <HAL_RCC_OscConfig+0x470>)
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	f003 030c 	and.w	r3, r3, #12
 8002bba:	2b08      	cmp	r3, #8
 8002bbc:	d05c      	beq.n	8002c78 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	699b      	ldr	r3, [r3, #24]
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	d141      	bne.n	8002c4a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bc6:	4b31      	ldr	r3, [pc, #196]	; (8002c8c <HAL_RCC_OscConfig+0x478>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bcc:	f7fe ff3a 	bl	8001a44 <HAL_GetTick>
 8002bd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bd2:	e008      	b.n	8002be6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bd4:	f7fe ff36 	bl	8001a44 <HAL_GetTick>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	2b02      	cmp	r3, #2
 8002be0:	d901      	bls.n	8002be6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	e087      	b.n	8002cf6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002be6:	4b27      	ldr	r3, [pc, #156]	; (8002c84 <HAL_RCC_OscConfig+0x470>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d1f0      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	69da      	ldr	r2, [r3, #28]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6a1b      	ldr	r3, [r3, #32]
 8002bfa:	431a      	orrs	r2, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c00:	019b      	lsls	r3, r3, #6
 8002c02:	431a      	orrs	r2, r3
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c08:	085b      	lsrs	r3, r3, #1
 8002c0a:	3b01      	subs	r3, #1
 8002c0c:	041b      	lsls	r3, r3, #16
 8002c0e:	431a      	orrs	r2, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c14:	061b      	lsls	r3, r3, #24
 8002c16:	491b      	ldr	r1, [pc, #108]	; (8002c84 <HAL_RCC_OscConfig+0x470>)
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c1c:	4b1b      	ldr	r3, [pc, #108]	; (8002c8c <HAL_RCC_OscConfig+0x478>)
 8002c1e:	2201      	movs	r2, #1
 8002c20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c22:	f7fe ff0f 	bl	8001a44 <HAL_GetTick>
 8002c26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c28:	e008      	b.n	8002c3c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c2a:	f7fe ff0b 	bl	8001a44 <HAL_GetTick>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	2b02      	cmp	r3, #2
 8002c36:	d901      	bls.n	8002c3c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002c38:	2303      	movs	r3, #3
 8002c3a:	e05c      	b.n	8002cf6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c3c:	4b11      	ldr	r3, [pc, #68]	; (8002c84 <HAL_RCC_OscConfig+0x470>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d0f0      	beq.n	8002c2a <HAL_RCC_OscConfig+0x416>
 8002c48:	e054      	b.n	8002cf4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c4a:	4b10      	ldr	r3, [pc, #64]	; (8002c8c <HAL_RCC_OscConfig+0x478>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c50:	f7fe fef8 	bl	8001a44 <HAL_GetTick>
 8002c54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c56:	e008      	b.n	8002c6a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c58:	f7fe fef4 	bl	8001a44 <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d901      	bls.n	8002c6a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e045      	b.n	8002cf6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c6a:	4b06      	ldr	r3, [pc, #24]	; (8002c84 <HAL_RCC_OscConfig+0x470>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d1f0      	bne.n	8002c58 <HAL_RCC_OscConfig+0x444>
 8002c76:	e03d      	b.n	8002cf4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	699b      	ldr	r3, [r3, #24]
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d107      	bne.n	8002c90 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e038      	b.n	8002cf6 <HAL_RCC_OscConfig+0x4e2>
 8002c84:	40023800 	.word	0x40023800
 8002c88:	40007000 	.word	0x40007000
 8002c8c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c90:	4b1b      	ldr	r3, [pc, #108]	; (8002d00 <HAL_RCC_OscConfig+0x4ec>)
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	699b      	ldr	r3, [r3, #24]
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d028      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d121      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d11a      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cba:	68fa      	ldr	r2, [r7, #12]
 8002cbc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002cc6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d111      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cd6:	085b      	lsrs	r3, r3, #1
 8002cd8:	3b01      	subs	r3, #1
 8002cda:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d107      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d001      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e000      	b.n	8002cf6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002cf4:	2300      	movs	r3, #0
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3718      	adds	r7, #24
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	40023800 	.word	0x40023800

08002d04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b084      	sub	sp, #16
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d101      	bne.n	8002d18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e0cc      	b.n	8002eb2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d18:	4b68      	ldr	r3, [pc, #416]	; (8002ebc <HAL_RCC_ClockConfig+0x1b8>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 0307 	and.w	r3, r3, #7
 8002d20:	683a      	ldr	r2, [r7, #0]
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d90c      	bls.n	8002d40 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d26:	4b65      	ldr	r3, [pc, #404]	; (8002ebc <HAL_RCC_ClockConfig+0x1b8>)
 8002d28:	683a      	ldr	r2, [r7, #0]
 8002d2a:	b2d2      	uxtb	r2, r2
 8002d2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d2e:	4b63      	ldr	r3, [pc, #396]	; (8002ebc <HAL_RCC_ClockConfig+0x1b8>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0307 	and.w	r3, r3, #7
 8002d36:	683a      	ldr	r2, [r7, #0]
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d001      	beq.n	8002d40 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e0b8      	b.n	8002eb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0302 	and.w	r3, r3, #2
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d020      	beq.n	8002d8e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0304 	and.w	r3, r3, #4
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d005      	beq.n	8002d64 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d58:	4b59      	ldr	r3, [pc, #356]	; (8002ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	4a58      	ldr	r2, [pc, #352]	; (8002ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d5e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d62:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 0308 	and.w	r3, r3, #8
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d005      	beq.n	8002d7c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d70:	4b53      	ldr	r3, [pc, #332]	; (8002ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	4a52      	ldr	r2, [pc, #328]	; (8002ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d76:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d7a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d7c:	4b50      	ldr	r3, [pc, #320]	; (8002ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	494d      	ldr	r1, [pc, #308]	; (8002ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0301 	and.w	r3, r3, #1
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d044      	beq.n	8002e24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d107      	bne.n	8002db2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002da2:	4b47      	ldr	r3, [pc, #284]	; (8002ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d119      	bne.n	8002de2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e07f      	b.n	8002eb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	d003      	beq.n	8002dc2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002dbe:	2b03      	cmp	r3, #3
 8002dc0:	d107      	bne.n	8002dd2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dc2:	4b3f      	ldr	r3, [pc, #252]	; (8002ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d109      	bne.n	8002de2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e06f      	b.n	8002eb2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dd2:	4b3b      	ldr	r3, [pc, #236]	; (8002ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0302 	and.w	r3, r3, #2
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d101      	bne.n	8002de2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e067      	b.n	8002eb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002de2:	4b37      	ldr	r3, [pc, #220]	; (8002ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	f023 0203 	bic.w	r2, r3, #3
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	4934      	ldr	r1, [pc, #208]	; (8002ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8002df0:	4313      	orrs	r3, r2
 8002df2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002df4:	f7fe fe26 	bl	8001a44 <HAL_GetTick>
 8002df8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dfa:	e00a      	b.n	8002e12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dfc:	f7fe fe22 	bl	8001a44 <HAL_GetTick>
 8002e00:	4602      	mov	r2, r0
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d901      	bls.n	8002e12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	e04f      	b.n	8002eb2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e12:	4b2b      	ldr	r3, [pc, #172]	; (8002ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	f003 020c 	and.w	r2, r3, #12
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d1eb      	bne.n	8002dfc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e24:	4b25      	ldr	r3, [pc, #148]	; (8002ebc <HAL_RCC_ClockConfig+0x1b8>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 0307 	and.w	r3, r3, #7
 8002e2c:	683a      	ldr	r2, [r7, #0]
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d20c      	bcs.n	8002e4c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e32:	4b22      	ldr	r3, [pc, #136]	; (8002ebc <HAL_RCC_ClockConfig+0x1b8>)
 8002e34:	683a      	ldr	r2, [r7, #0]
 8002e36:	b2d2      	uxtb	r2, r2
 8002e38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e3a:	4b20      	ldr	r3, [pc, #128]	; (8002ebc <HAL_RCC_ClockConfig+0x1b8>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0307 	and.w	r3, r3, #7
 8002e42:	683a      	ldr	r2, [r7, #0]
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d001      	beq.n	8002e4c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e032      	b.n	8002eb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0304 	and.w	r3, r3, #4
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d008      	beq.n	8002e6a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e58:	4b19      	ldr	r3, [pc, #100]	; (8002ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	4916      	ldr	r1, [pc, #88]	; (8002ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e66:	4313      	orrs	r3, r2
 8002e68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0308 	and.w	r3, r3, #8
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d009      	beq.n	8002e8a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e76:	4b12      	ldr	r3, [pc, #72]	; (8002ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	691b      	ldr	r3, [r3, #16]
 8002e82:	00db      	lsls	r3, r3, #3
 8002e84:	490e      	ldr	r1, [pc, #56]	; (8002ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e86:	4313      	orrs	r3, r2
 8002e88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e8a:	f000 f821 	bl	8002ed0 <HAL_RCC_GetSysClockFreq>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	4b0b      	ldr	r3, [pc, #44]	; (8002ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	091b      	lsrs	r3, r3, #4
 8002e96:	f003 030f 	and.w	r3, r3, #15
 8002e9a:	490a      	ldr	r1, [pc, #40]	; (8002ec4 <HAL_RCC_ClockConfig+0x1c0>)
 8002e9c:	5ccb      	ldrb	r3, [r1, r3]
 8002e9e:	fa22 f303 	lsr.w	r3, r2, r3
 8002ea2:	4a09      	ldr	r2, [pc, #36]	; (8002ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ea4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002ea6:	4b09      	ldr	r3, [pc, #36]	; (8002ecc <HAL_RCC_ClockConfig+0x1c8>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f7fe fd86 	bl	80019bc <HAL_InitTick>

  return HAL_OK;
 8002eb0:	2300      	movs	r3, #0
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3710      	adds	r7, #16
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	40023c00 	.word	0x40023c00
 8002ec0:	40023800 	.word	0x40023800
 8002ec4:	08005c80 	.word	0x08005c80
 8002ec8:	200001b8 	.word	0x200001b8
 8002ecc:	200001bc 	.word	0x200001bc

08002ed0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ed0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ed4:	b090      	sub	sp, #64	; 0x40
 8002ed6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t pllvco = 0U;
 8002edc:	2300      	movs	r3, #0
 8002ede:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint32_t pllp = 0U;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ee8:	4b59      	ldr	r3, [pc, #356]	; (8003050 <HAL_RCC_GetSysClockFreq+0x180>)
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	f003 030c 	and.w	r3, r3, #12
 8002ef0:	2b08      	cmp	r3, #8
 8002ef2:	d00d      	beq.n	8002f10 <HAL_RCC_GetSysClockFreq+0x40>
 8002ef4:	2b08      	cmp	r3, #8
 8002ef6:	f200 80a1 	bhi.w	800303c <HAL_RCC_GetSysClockFreq+0x16c>
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d002      	beq.n	8002f04 <HAL_RCC_GetSysClockFreq+0x34>
 8002efe:	2b04      	cmp	r3, #4
 8002f00:	d003      	beq.n	8002f0a <HAL_RCC_GetSysClockFreq+0x3a>
 8002f02:	e09b      	b.n	800303c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f04:	4b53      	ldr	r3, [pc, #332]	; (8003054 <HAL_RCC_GetSysClockFreq+0x184>)
 8002f06:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002f08:	e09b      	b.n	8003042 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f0a:	4b53      	ldr	r3, [pc, #332]	; (8003058 <HAL_RCC_GetSysClockFreq+0x188>)
 8002f0c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002f0e:	e098      	b.n	8003042 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f10:	4b4f      	ldr	r3, [pc, #316]	; (8003050 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f18:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f1a:	4b4d      	ldr	r3, [pc, #308]	; (8003050 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d028      	beq.n	8002f78 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f26:	4b4a      	ldr	r3, [pc, #296]	; (8003050 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	099b      	lsrs	r3, r3, #6
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	623b      	str	r3, [r7, #32]
 8002f30:	627a      	str	r2, [r7, #36]	; 0x24
 8002f32:	6a3b      	ldr	r3, [r7, #32]
 8002f34:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002f38:	2100      	movs	r1, #0
 8002f3a:	4b47      	ldr	r3, [pc, #284]	; (8003058 <HAL_RCC_GetSysClockFreq+0x188>)
 8002f3c:	fb03 f201 	mul.w	r2, r3, r1
 8002f40:	2300      	movs	r3, #0
 8002f42:	fb00 f303 	mul.w	r3, r0, r3
 8002f46:	4413      	add	r3, r2
 8002f48:	4a43      	ldr	r2, [pc, #268]	; (8003058 <HAL_RCC_GetSysClockFreq+0x188>)
 8002f4a:	fba0 1202 	umull	r1, r2, r0, r2
 8002f4e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002f50:	460a      	mov	r2, r1
 8002f52:	62ba      	str	r2, [r7, #40]	; 0x28
 8002f54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f56:	4413      	add	r3, r2
 8002f58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	61bb      	str	r3, [r7, #24]
 8002f60:	61fa      	str	r2, [r7, #28]
 8002f62:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f66:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002f6a:	f7fd f989 	bl	8000280 <__aeabi_uldivmod>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	460b      	mov	r3, r1
 8002f72:	4613      	mov	r3, r2
 8002f74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f76:	e053      	b.n	8003020 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f78:	4b35      	ldr	r3, [pc, #212]	; (8003050 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	099b      	lsrs	r3, r3, #6
 8002f7e:	2200      	movs	r2, #0
 8002f80:	613b      	str	r3, [r7, #16]
 8002f82:	617a      	str	r2, [r7, #20]
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002f8a:	f04f 0b00 	mov.w	fp, #0
 8002f8e:	4652      	mov	r2, sl
 8002f90:	465b      	mov	r3, fp
 8002f92:	f04f 0000 	mov.w	r0, #0
 8002f96:	f04f 0100 	mov.w	r1, #0
 8002f9a:	0159      	lsls	r1, r3, #5
 8002f9c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fa0:	0150      	lsls	r0, r2, #5
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	460b      	mov	r3, r1
 8002fa6:	ebb2 080a 	subs.w	r8, r2, sl
 8002faa:	eb63 090b 	sbc.w	r9, r3, fp
 8002fae:	f04f 0200 	mov.w	r2, #0
 8002fb2:	f04f 0300 	mov.w	r3, #0
 8002fb6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002fba:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002fbe:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002fc2:	ebb2 0408 	subs.w	r4, r2, r8
 8002fc6:	eb63 0509 	sbc.w	r5, r3, r9
 8002fca:	f04f 0200 	mov.w	r2, #0
 8002fce:	f04f 0300 	mov.w	r3, #0
 8002fd2:	00eb      	lsls	r3, r5, #3
 8002fd4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002fd8:	00e2      	lsls	r2, r4, #3
 8002fda:	4614      	mov	r4, r2
 8002fdc:	461d      	mov	r5, r3
 8002fde:	eb14 030a 	adds.w	r3, r4, sl
 8002fe2:	603b      	str	r3, [r7, #0]
 8002fe4:	eb45 030b 	adc.w	r3, r5, fp
 8002fe8:	607b      	str	r3, [r7, #4]
 8002fea:	f04f 0200 	mov.w	r2, #0
 8002fee:	f04f 0300 	mov.w	r3, #0
 8002ff2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002ff6:	4629      	mov	r1, r5
 8002ff8:	028b      	lsls	r3, r1, #10
 8002ffa:	4621      	mov	r1, r4
 8002ffc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003000:	4621      	mov	r1, r4
 8003002:	028a      	lsls	r2, r1, #10
 8003004:	4610      	mov	r0, r2
 8003006:	4619      	mov	r1, r3
 8003008:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800300a:	2200      	movs	r2, #0
 800300c:	60bb      	str	r3, [r7, #8]
 800300e:	60fa      	str	r2, [r7, #12]
 8003010:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003014:	f7fd f934 	bl	8000280 <__aeabi_uldivmod>
 8003018:	4602      	mov	r2, r0
 800301a:	460b      	mov	r3, r1
 800301c:	4613      	mov	r3, r2
 800301e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003020:	4b0b      	ldr	r3, [pc, #44]	; (8003050 <HAL_RCC_GetSysClockFreq+0x180>)
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	0c1b      	lsrs	r3, r3, #16
 8003026:	f003 0303 	and.w	r3, r3, #3
 800302a:	3301      	adds	r3, #1
 800302c:	005b      	lsls	r3, r3, #1
 800302e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8003030:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003034:	fbb2 f3f3 	udiv	r3, r2, r3
 8003038:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800303a:	e002      	b.n	8003042 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800303c:	4b05      	ldr	r3, [pc, #20]	; (8003054 <HAL_RCC_GetSysClockFreq+0x184>)
 800303e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003040:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003044:	4618      	mov	r0, r3
 8003046:	3740      	adds	r7, #64	; 0x40
 8003048:	46bd      	mov	sp, r7
 800304a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800304e:	bf00      	nop
 8003050:	40023800 	.word	0x40023800
 8003054:	00f42400 	.word	0x00f42400
 8003058:	017d7840 	.word	0x017d7840

0800305c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800305c:	b480      	push	{r7}
 800305e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003060:	4b03      	ldr	r3, [pc, #12]	; (8003070 <HAL_RCC_GetHCLKFreq+0x14>)
 8003062:	681b      	ldr	r3, [r3, #0]
}
 8003064:	4618      	mov	r0, r3
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr
 800306e:	bf00      	nop
 8003070:	200001b8 	.word	0x200001b8

08003074 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003078:	f7ff fff0 	bl	800305c <HAL_RCC_GetHCLKFreq>
 800307c:	4602      	mov	r2, r0
 800307e:	4b05      	ldr	r3, [pc, #20]	; (8003094 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	0a9b      	lsrs	r3, r3, #10
 8003084:	f003 0307 	and.w	r3, r3, #7
 8003088:	4903      	ldr	r1, [pc, #12]	; (8003098 <HAL_RCC_GetPCLK1Freq+0x24>)
 800308a:	5ccb      	ldrb	r3, [r1, r3]
 800308c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003090:	4618      	mov	r0, r3
 8003092:	bd80      	pop	{r7, pc}
 8003094:	40023800 	.word	0x40023800
 8003098:	08005c90 	.word	0x08005c90

0800309c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80030a0:	f7ff ffdc 	bl	800305c <HAL_RCC_GetHCLKFreq>
 80030a4:	4602      	mov	r2, r0
 80030a6:	4b05      	ldr	r3, [pc, #20]	; (80030bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	0b5b      	lsrs	r3, r3, #13
 80030ac:	f003 0307 	and.w	r3, r3, #7
 80030b0:	4903      	ldr	r1, [pc, #12]	; (80030c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80030b2:	5ccb      	ldrb	r3, [r1, r3]
 80030b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	40023800 	.word	0x40023800
 80030c0:	08005c90 	.word	0x08005c90

080030c4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b082      	sub	sp, #8
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d101      	bne.n	80030d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e07b      	b.n	80031ce <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d108      	bne.n	80030f0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030e6:	d009      	beq.n	80030fc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2200      	movs	r2, #0
 80030ec:	61da      	str	r2, [r3, #28]
 80030ee:	e005      	b.n	80030fc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2200      	movs	r2, #0
 80030f4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2200      	movs	r2, #0
 80030fa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2200      	movs	r2, #0
 8003100:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003108:	b2db      	uxtb	r3, r3
 800310a:	2b00      	cmp	r3, #0
 800310c:	d106      	bne.n	800311c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2200      	movs	r2, #0
 8003112:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f7fe f970 	bl	80013fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2202      	movs	r2, #2
 8003120:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003132:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003144:	431a      	orrs	r2, r3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	68db      	ldr	r3, [r3, #12]
 800314a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800314e:	431a      	orrs	r2, r3
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	691b      	ldr	r3, [r3, #16]
 8003154:	f003 0302 	and.w	r3, r3, #2
 8003158:	431a      	orrs	r2, r3
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	695b      	ldr	r3, [r3, #20]
 800315e:	f003 0301 	and.w	r3, r3, #1
 8003162:	431a      	orrs	r2, r3
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	699b      	ldr	r3, [r3, #24]
 8003168:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800316c:	431a      	orrs	r2, r3
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	69db      	ldr	r3, [r3, #28]
 8003172:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003176:	431a      	orrs	r2, r3
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6a1b      	ldr	r3, [r3, #32]
 800317c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003180:	ea42 0103 	orr.w	r1, r2, r3
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003188:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	430a      	orrs	r2, r1
 8003192:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	699b      	ldr	r3, [r3, #24]
 8003198:	0c1b      	lsrs	r3, r3, #16
 800319a:	f003 0104 	and.w	r1, r3, #4
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a2:	f003 0210 	and.w	r2, r3, #16
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	430a      	orrs	r2, r1
 80031ac:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	69da      	ldr	r2, [r3, #28]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031bc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2200      	movs	r2, #0
 80031c2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2201      	movs	r2, #1
 80031c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80031cc:	2300      	movs	r3, #0
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3708      	adds	r7, #8
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}

080031d6 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031d6:	b580      	push	{r7, lr}
 80031d8:	b088      	sub	sp, #32
 80031da:	af00      	add	r7, sp, #0
 80031dc:	60f8      	str	r0, [r7, #12]
 80031de:	60b9      	str	r1, [r7, #8]
 80031e0:	603b      	str	r3, [r7, #0]
 80031e2:	4613      	mov	r3, r2
 80031e4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80031e6:	f7fe fc2d 	bl	8001a44 <HAL_GetTick>
 80031ea:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80031ec:	88fb      	ldrh	r3, [r7, #6]
 80031ee:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d001      	beq.n	8003200 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80031fc:	2302      	movs	r3, #2
 80031fe:	e12a      	b.n	8003456 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d002      	beq.n	800320c <HAL_SPI_Transmit+0x36>
 8003206:	88fb      	ldrh	r3, [r7, #6]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d101      	bne.n	8003210 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	e122      	b.n	8003456 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003216:	2b01      	cmp	r3, #1
 8003218:	d101      	bne.n	800321e <HAL_SPI_Transmit+0x48>
 800321a:	2302      	movs	r3, #2
 800321c:	e11b      	b.n	8003456 <HAL_SPI_Transmit+0x280>
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2201      	movs	r2, #1
 8003222:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2203      	movs	r2, #3
 800322a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2200      	movs	r2, #0
 8003232:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	68ba      	ldr	r2, [r7, #8]
 8003238:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	88fa      	ldrh	r2, [r7, #6]
 800323e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	88fa      	ldrh	r2, [r7, #6]
 8003244:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2200      	movs	r2, #0
 800324a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2200      	movs	r2, #0
 8003250:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2200      	movs	r2, #0
 8003256:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2200      	movs	r2, #0
 800325c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2200      	movs	r2, #0
 8003262:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800326c:	d10f      	bne.n	800328e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800327c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800328c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003298:	2b40      	cmp	r3, #64	; 0x40
 800329a:	d007      	beq.n	80032ac <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032aa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032b4:	d152      	bne.n	800335c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d002      	beq.n	80032c4 <HAL_SPI_Transmit+0xee>
 80032be:	8b7b      	ldrh	r3, [r7, #26]
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d145      	bne.n	8003350 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c8:	881a      	ldrh	r2, [r3, #0]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d4:	1c9a      	adds	r2, r3, #2
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032de:	b29b      	uxth	r3, r3
 80032e0:	3b01      	subs	r3, #1
 80032e2:	b29a      	uxth	r2, r3
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80032e8:	e032      	b.n	8003350 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	f003 0302 	and.w	r3, r3, #2
 80032f4:	2b02      	cmp	r3, #2
 80032f6:	d112      	bne.n	800331e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032fc:	881a      	ldrh	r2, [r3, #0]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003308:	1c9a      	adds	r2, r3, #2
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003312:	b29b      	uxth	r3, r3
 8003314:	3b01      	subs	r3, #1
 8003316:	b29a      	uxth	r2, r3
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	86da      	strh	r2, [r3, #54]	; 0x36
 800331c:	e018      	b.n	8003350 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800331e:	f7fe fb91 	bl	8001a44 <HAL_GetTick>
 8003322:	4602      	mov	r2, r0
 8003324:	69fb      	ldr	r3, [r7, #28]
 8003326:	1ad3      	subs	r3, r2, r3
 8003328:	683a      	ldr	r2, [r7, #0]
 800332a:	429a      	cmp	r2, r3
 800332c:	d803      	bhi.n	8003336 <HAL_SPI_Transmit+0x160>
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003334:	d102      	bne.n	800333c <HAL_SPI_Transmit+0x166>
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d109      	bne.n	8003350 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2201      	movs	r2, #1
 8003340:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2200      	movs	r2, #0
 8003348:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 800334c:	2303      	movs	r3, #3
 800334e:	e082      	b.n	8003456 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003354:	b29b      	uxth	r3, r3
 8003356:	2b00      	cmp	r3, #0
 8003358:	d1c7      	bne.n	80032ea <HAL_SPI_Transmit+0x114>
 800335a:	e053      	b.n	8003404 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d002      	beq.n	800336a <HAL_SPI_Transmit+0x194>
 8003364:	8b7b      	ldrh	r3, [r7, #26]
 8003366:	2b01      	cmp	r3, #1
 8003368:	d147      	bne.n	80033fa <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	330c      	adds	r3, #12
 8003374:	7812      	ldrb	r2, [r2, #0]
 8003376:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800337c:	1c5a      	adds	r2, r3, #1
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003386:	b29b      	uxth	r3, r3
 8003388:	3b01      	subs	r3, #1
 800338a:	b29a      	uxth	r2, r3
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003390:	e033      	b.n	80033fa <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	f003 0302 	and.w	r3, r3, #2
 800339c:	2b02      	cmp	r3, #2
 800339e:	d113      	bne.n	80033c8 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	330c      	adds	r3, #12
 80033aa:	7812      	ldrb	r2, [r2, #0]
 80033ac:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b2:	1c5a      	adds	r2, r3, #1
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033bc:	b29b      	uxth	r3, r3
 80033be:	3b01      	subs	r3, #1
 80033c0:	b29a      	uxth	r2, r3
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	86da      	strh	r2, [r3, #54]	; 0x36
 80033c6:	e018      	b.n	80033fa <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80033c8:	f7fe fb3c 	bl	8001a44 <HAL_GetTick>
 80033cc:	4602      	mov	r2, r0
 80033ce:	69fb      	ldr	r3, [r7, #28]
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	683a      	ldr	r2, [r7, #0]
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d803      	bhi.n	80033e0 <HAL_SPI_Transmit+0x20a>
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033de:	d102      	bne.n	80033e6 <HAL_SPI_Transmit+0x210>
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d109      	bne.n	80033fa <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2201      	movs	r2, #1
 80033ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2200      	movs	r2, #0
 80033f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 80033f6:	2303      	movs	r3, #3
 80033f8:	e02d      	b.n	8003456 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033fe:	b29b      	uxth	r3, r3
 8003400:	2b00      	cmp	r3, #0
 8003402:	d1c6      	bne.n	8003392 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003404:	69fa      	ldr	r2, [r7, #28]
 8003406:	6839      	ldr	r1, [r7, #0]
 8003408:	68f8      	ldr	r0, [r7, #12]
 800340a:	f000 f8b1 	bl	8003570 <SPI_EndRxTxTransaction>
 800340e:	4603      	mov	r3, r0
 8003410:	2b00      	cmp	r3, #0
 8003412:	d002      	beq.n	800341a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2220      	movs	r2, #32
 8003418:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d10a      	bne.n	8003438 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003422:	2300      	movs	r3, #0
 8003424:	617b      	str	r3, [r7, #20]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	617b      	str	r3, [r7, #20]
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	617b      	str	r3, [r7, #20]
 8003436:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2201      	movs	r2, #1
 800343c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2200      	movs	r2, #0
 8003444:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800344c:	2b00      	cmp	r3, #0
 800344e:	d001      	beq.n	8003454 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e000      	b.n	8003456 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8003454:	2300      	movs	r3, #0
  }
}
 8003456:	4618      	mov	r0, r3
 8003458:	3720      	adds	r7, #32
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
	...

08003460 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b088      	sub	sp, #32
 8003464:	af00      	add	r7, sp, #0
 8003466:	60f8      	str	r0, [r7, #12]
 8003468:	60b9      	str	r1, [r7, #8]
 800346a:	603b      	str	r3, [r7, #0]
 800346c:	4613      	mov	r3, r2
 800346e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003470:	f7fe fae8 	bl	8001a44 <HAL_GetTick>
 8003474:	4602      	mov	r2, r0
 8003476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003478:	1a9b      	subs	r3, r3, r2
 800347a:	683a      	ldr	r2, [r7, #0]
 800347c:	4413      	add	r3, r2
 800347e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003480:	f7fe fae0 	bl	8001a44 <HAL_GetTick>
 8003484:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003486:	4b39      	ldr	r3, [pc, #228]	; (800356c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	015b      	lsls	r3, r3, #5
 800348c:	0d1b      	lsrs	r3, r3, #20
 800348e:	69fa      	ldr	r2, [r7, #28]
 8003490:	fb02 f303 	mul.w	r3, r2, r3
 8003494:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003496:	e055      	b.n	8003544 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800349e:	d051      	beq.n	8003544 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80034a0:	f7fe fad0 	bl	8001a44 <HAL_GetTick>
 80034a4:	4602      	mov	r2, r0
 80034a6:	69bb      	ldr	r3, [r7, #24]
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	69fa      	ldr	r2, [r7, #28]
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d902      	bls.n	80034b6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80034b0:	69fb      	ldr	r3, [r7, #28]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d13d      	bne.n	8003532 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	685a      	ldr	r2, [r3, #4]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80034c4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034ce:	d111      	bne.n	80034f4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034d8:	d004      	beq.n	80034e4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034e2:	d107      	bne.n	80034f4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034f2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034fc:	d10f      	bne.n	800351e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800350c:	601a      	str	r2, [r3, #0]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800351c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2201      	movs	r2, #1
 8003522:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2200      	movs	r2, #0
 800352a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e018      	b.n	8003564 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d102      	bne.n	800353e <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8003538:	2300      	movs	r3, #0
 800353a:	61fb      	str	r3, [r7, #28]
 800353c:	e002      	b.n	8003544 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	3b01      	subs	r3, #1
 8003542:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	689a      	ldr	r2, [r3, #8]
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	4013      	ands	r3, r2
 800354e:	68ba      	ldr	r2, [r7, #8]
 8003550:	429a      	cmp	r2, r3
 8003552:	bf0c      	ite	eq
 8003554:	2301      	moveq	r3, #1
 8003556:	2300      	movne	r3, #0
 8003558:	b2db      	uxtb	r3, r3
 800355a:	461a      	mov	r2, r3
 800355c:	79fb      	ldrb	r3, [r7, #7]
 800355e:	429a      	cmp	r2, r3
 8003560:	d19a      	bne.n	8003498 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8003562:	2300      	movs	r3, #0
}
 8003564:	4618      	mov	r0, r3
 8003566:	3720      	adds	r7, #32
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}
 800356c:	200001b8 	.word	0x200001b8

08003570 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b088      	sub	sp, #32
 8003574:	af02      	add	r7, sp, #8
 8003576:	60f8      	str	r0, [r7, #12]
 8003578:	60b9      	str	r1, [r7, #8]
 800357a:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	9300      	str	r3, [sp, #0]
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	2201      	movs	r2, #1
 8003584:	2102      	movs	r1, #2
 8003586:	68f8      	ldr	r0, [r7, #12]
 8003588:	f7ff ff6a 	bl	8003460 <SPI_WaitFlagStateUntilTimeout>
 800358c:	4603      	mov	r3, r0
 800358e:	2b00      	cmp	r3, #0
 8003590:	d007      	beq.n	80035a2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003596:	f043 0220 	orr.w	r2, r3, #32
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	e032      	b.n	8003608 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80035a2:	4b1b      	ldr	r3, [pc, #108]	; (8003610 <SPI_EndRxTxTransaction+0xa0>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a1b      	ldr	r2, [pc, #108]	; (8003614 <SPI_EndRxTxTransaction+0xa4>)
 80035a8:	fba2 2303 	umull	r2, r3, r2, r3
 80035ac:	0d5b      	lsrs	r3, r3, #21
 80035ae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80035b2:	fb02 f303 	mul.w	r3, r2, r3
 80035b6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80035c0:	d112      	bne.n	80035e8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	9300      	str	r3, [sp, #0]
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	2200      	movs	r2, #0
 80035ca:	2180      	movs	r1, #128	; 0x80
 80035cc:	68f8      	ldr	r0, [r7, #12]
 80035ce:	f7ff ff47 	bl	8003460 <SPI_WaitFlagStateUntilTimeout>
 80035d2:	4603      	mov	r3, r0
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d016      	beq.n	8003606 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035dc:	f043 0220 	orr.w	r2, r3, #32
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80035e4:	2303      	movs	r3, #3
 80035e6:	e00f      	b.n	8003608 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d00a      	beq.n	8003604 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	3b01      	subs	r3, #1
 80035f2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035fe:	2b80      	cmp	r3, #128	; 0x80
 8003600:	d0f2      	beq.n	80035e8 <SPI_EndRxTxTransaction+0x78>
 8003602:	e000      	b.n	8003606 <SPI_EndRxTxTransaction+0x96>
        break;
 8003604:	bf00      	nop
  }

  return HAL_OK;
 8003606:	2300      	movs	r3, #0
}
 8003608:	4618      	mov	r0, r3
 800360a:	3718      	adds	r7, #24
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}
 8003610:	200001b8 	.word	0x200001b8
 8003614:	165e9f81 	.word	0x165e9f81

08003618 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b082      	sub	sp, #8
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d101      	bne.n	800362a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e041      	b.n	80036ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003630:	b2db      	uxtb	r3, r3
 8003632:	2b00      	cmp	r3, #0
 8003634:	d106      	bne.n	8003644 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2200      	movs	r2, #0
 800363a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f7fd ff7a 	bl	8001538 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2202      	movs	r2, #2
 8003648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	3304      	adds	r3, #4
 8003654:	4619      	mov	r1, r3
 8003656:	4610      	mov	r0, r2
 8003658:	f000 fbe6 	bl	8003e28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2201      	movs	r2, #1
 8003660:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2201      	movs	r2, #1
 8003668:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2201      	movs	r2, #1
 8003670:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2201      	movs	r2, #1
 8003678:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2201      	movs	r2, #1
 8003680:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2201      	movs	r2, #1
 8003688:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2201      	movs	r2, #1
 8003690:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2201      	movs	r2, #1
 8003698:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2201      	movs	r2, #1
 80036a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036ac:	2300      	movs	r3, #0
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3708      	adds	r7, #8
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}

080036b6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80036b6:	b580      	push	{r7, lr}
 80036b8:	b082      	sub	sp, #8
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d101      	bne.n	80036c8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e041      	b.n	800374c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d106      	bne.n	80036e2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f7fd ff51 	bl	8001584 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2202      	movs	r2, #2
 80036e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	3304      	adds	r3, #4
 80036f2:	4619      	mov	r1, r3
 80036f4:	4610      	mov	r0, r2
 80036f6:	f000 fb97 	bl	8003e28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2201      	movs	r2, #1
 80036fe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2201      	movs	r2, #1
 8003706:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2201      	movs	r2, #1
 800370e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2201      	movs	r2, #1
 8003716:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2201      	movs	r2, #1
 800371e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2201      	movs	r2, #1
 8003726:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2201      	movs	r2, #1
 800372e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2201      	movs	r2, #1
 8003736:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2201      	movs	r2, #1
 800373e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2201      	movs	r2, #1
 8003746:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800374a:	2300      	movs	r3, #0
}
 800374c:	4618      	mov	r0, r3
 800374e:	3708      	adds	r7, #8
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}

08003754 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
 800375c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d109      	bne.n	8003778 <HAL_TIM_PWM_Start+0x24>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800376a:	b2db      	uxtb	r3, r3
 800376c:	2b01      	cmp	r3, #1
 800376e:	bf14      	ite	ne
 8003770:	2301      	movne	r3, #1
 8003772:	2300      	moveq	r3, #0
 8003774:	b2db      	uxtb	r3, r3
 8003776:	e022      	b.n	80037be <HAL_TIM_PWM_Start+0x6a>
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	2b04      	cmp	r3, #4
 800377c:	d109      	bne.n	8003792 <HAL_TIM_PWM_Start+0x3e>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003784:	b2db      	uxtb	r3, r3
 8003786:	2b01      	cmp	r3, #1
 8003788:	bf14      	ite	ne
 800378a:	2301      	movne	r3, #1
 800378c:	2300      	moveq	r3, #0
 800378e:	b2db      	uxtb	r3, r3
 8003790:	e015      	b.n	80037be <HAL_TIM_PWM_Start+0x6a>
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	2b08      	cmp	r3, #8
 8003796:	d109      	bne.n	80037ac <HAL_TIM_PWM_Start+0x58>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	bf14      	ite	ne
 80037a4:	2301      	movne	r3, #1
 80037a6:	2300      	moveq	r3, #0
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	e008      	b.n	80037be <HAL_TIM_PWM_Start+0x6a>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	bf14      	ite	ne
 80037b8:	2301      	movne	r3, #1
 80037ba:	2300      	moveq	r3, #0
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d001      	beq.n	80037c6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e07c      	b.n	80038c0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d104      	bne.n	80037d6 <HAL_TIM_PWM_Start+0x82>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2202      	movs	r2, #2
 80037d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037d4:	e013      	b.n	80037fe <HAL_TIM_PWM_Start+0xaa>
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	2b04      	cmp	r3, #4
 80037da:	d104      	bne.n	80037e6 <HAL_TIM_PWM_Start+0x92>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2202      	movs	r2, #2
 80037e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037e4:	e00b      	b.n	80037fe <HAL_TIM_PWM_Start+0xaa>
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	2b08      	cmp	r3, #8
 80037ea:	d104      	bne.n	80037f6 <HAL_TIM_PWM_Start+0xa2>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2202      	movs	r2, #2
 80037f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037f4:	e003      	b.n	80037fe <HAL_TIM_PWM_Start+0xaa>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2202      	movs	r2, #2
 80037fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	2201      	movs	r2, #1
 8003804:	6839      	ldr	r1, [r7, #0]
 8003806:	4618      	mov	r0, r3
 8003808:	f000 fdfe 	bl	8004408 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a2d      	ldr	r2, [pc, #180]	; (80038c8 <HAL_TIM_PWM_Start+0x174>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d004      	beq.n	8003820 <HAL_TIM_PWM_Start+0xcc>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a2c      	ldr	r2, [pc, #176]	; (80038cc <HAL_TIM_PWM_Start+0x178>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d101      	bne.n	8003824 <HAL_TIM_PWM_Start+0xd0>
 8003820:	2301      	movs	r3, #1
 8003822:	e000      	b.n	8003826 <HAL_TIM_PWM_Start+0xd2>
 8003824:	2300      	movs	r3, #0
 8003826:	2b00      	cmp	r3, #0
 8003828:	d007      	beq.n	800383a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003838:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a22      	ldr	r2, [pc, #136]	; (80038c8 <HAL_TIM_PWM_Start+0x174>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d022      	beq.n	800388a <HAL_TIM_PWM_Start+0x136>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800384c:	d01d      	beq.n	800388a <HAL_TIM_PWM_Start+0x136>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a1f      	ldr	r2, [pc, #124]	; (80038d0 <HAL_TIM_PWM_Start+0x17c>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d018      	beq.n	800388a <HAL_TIM_PWM_Start+0x136>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a1d      	ldr	r2, [pc, #116]	; (80038d4 <HAL_TIM_PWM_Start+0x180>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d013      	beq.n	800388a <HAL_TIM_PWM_Start+0x136>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a1c      	ldr	r2, [pc, #112]	; (80038d8 <HAL_TIM_PWM_Start+0x184>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d00e      	beq.n	800388a <HAL_TIM_PWM_Start+0x136>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a16      	ldr	r2, [pc, #88]	; (80038cc <HAL_TIM_PWM_Start+0x178>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d009      	beq.n	800388a <HAL_TIM_PWM_Start+0x136>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a18      	ldr	r2, [pc, #96]	; (80038dc <HAL_TIM_PWM_Start+0x188>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d004      	beq.n	800388a <HAL_TIM_PWM_Start+0x136>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a16      	ldr	r2, [pc, #88]	; (80038e0 <HAL_TIM_PWM_Start+0x18c>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d111      	bne.n	80038ae <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	f003 0307 	and.w	r3, r3, #7
 8003894:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2b06      	cmp	r3, #6
 800389a:	d010      	beq.n	80038be <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f042 0201 	orr.w	r2, r2, #1
 80038aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038ac:	e007      	b.n	80038be <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f042 0201 	orr.w	r2, r2, #1
 80038bc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80038be:	2300      	movs	r3, #0
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3710      	adds	r7, #16
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}
 80038c8:	40010000 	.word	0x40010000
 80038cc:	40010400 	.word	0x40010400
 80038d0:	40000400 	.word	0x40000400
 80038d4:	40000800 	.word	0x40000800
 80038d8:	40000c00 	.word	0x40000c00
 80038dc:	40014000 	.word	0x40014000
 80038e0:	40001800 	.word	0x40001800

080038e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b084      	sub	sp, #16
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	68db      	ldr	r3, [r3, #12]
 80038f2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	691b      	ldr	r3, [r3, #16]
 80038fa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	f003 0302 	and.w	r3, r3, #2
 8003902:	2b00      	cmp	r3, #0
 8003904:	d020      	beq.n	8003948 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	f003 0302 	and.w	r3, r3, #2
 800390c:	2b00      	cmp	r3, #0
 800390e:	d01b      	beq.n	8003948 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f06f 0202 	mvn.w	r2, #2
 8003918:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2201      	movs	r2, #1
 800391e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	699b      	ldr	r3, [r3, #24]
 8003926:	f003 0303 	and.w	r3, r3, #3
 800392a:	2b00      	cmp	r3, #0
 800392c:	d003      	beq.n	8003936 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f000 fa5b 	bl	8003dea <HAL_TIM_IC_CaptureCallback>
 8003934:	e005      	b.n	8003942 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f000 fa4d 	bl	8003dd6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	f000 fa5e 	bl	8003dfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2200      	movs	r2, #0
 8003946:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	f003 0304 	and.w	r3, r3, #4
 800394e:	2b00      	cmp	r3, #0
 8003950:	d020      	beq.n	8003994 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	f003 0304 	and.w	r3, r3, #4
 8003958:	2b00      	cmp	r3, #0
 800395a:	d01b      	beq.n	8003994 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f06f 0204 	mvn.w	r2, #4
 8003964:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2202      	movs	r2, #2
 800396a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	699b      	ldr	r3, [r3, #24]
 8003972:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003976:	2b00      	cmp	r3, #0
 8003978:	d003      	beq.n	8003982 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f000 fa35 	bl	8003dea <HAL_TIM_IC_CaptureCallback>
 8003980:	e005      	b.n	800398e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f000 fa27 	bl	8003dd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	f000 fa38 	bl	8003dfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2200      	movs	r2, #0
 8003992:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	f003 0308 	and.w	r3, r3, #8
 800399a:	2b00      	cmp	r3, #0
 800399c:	d020      	beq.n	80039e0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	f003 0308 	and.w	r3, r3, #8
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d01b      	beq.n	80039e0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f06f 0208 	mvn.w	r2, #8
 80039b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2204      	movs	r2, #4
 80039b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	69db      	ldr	r3, [r3, #28]
 80039be:	f003 0303 	and.w	r3, r3, #3
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d003      	beq.n	80039ce <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f000 fa0f 	bl	8003dea <HAL_TIM_IC_CaptureCallback>
 80039cc:	e005      	b.n	80039da <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f000 fa01 	bl	8003dd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	f000 fa12 	bl	8003dfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2200      	movs	r2, #0
 80039de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	f003 0310 	and.w	r3, r3, #16
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d020      	beq.n	8003a2c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	f003 0310 	and.w	r3, r3, #16
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d01b      	beq.n	8003a2c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f06f 0210 	mvn.w	r2, #16
 80039fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2208      	movs	r2, #8
 8003a02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	69db      	ldr	r3, [r3, #28]
 8003a0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d003      	beq.n	8003a1a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f000 f9e9 	bl	8003dea <HAL_TIM_IC_CaptureCallback>
 8003a18:	e005      	b.n	8003a26 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f000 f9db 	bl	8003dd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	f000 f9ec 	bl	8003dfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	f003 0301 	and.w	r3, r3, #1
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d00c      	beq.n	8003a50 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	f003 0301 	and.w	r3, r3, #1
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d007      	beq.n	8003a50 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f06f 0201 	mvn.w	r2, #1
 8003a48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f7fc ff16 	bl	800087c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d00c      	beq.n	8003a74 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d007      	beq.n	8003a74 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003a6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f000 fd76 	bl	8004560 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d00c      	beq.n	8003a98 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d007      	beq.n	8003a98 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003a90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f000 f9bd 	bl	8003e12 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	f003 0320 	and.w	r3, r3, #32
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d00c      	beq.n	8003abc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	f003 0320 	and.w	r3, r3, #32
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d007      	beq.n	8003abc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f06f 0220 	mvn.w	r2, #32
 8003ab4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f000 fd48 	bl	800454c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003abc:	bf00      	nop
 8003abe:	3710      	adds	r7, #16
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}

08003ac4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b086      	sub	sp, #24
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	60f8      	str	r0, [r7, #12]
 8003acc:	60b9      	str	r1, [r7, #8]
 8003ace:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	d101      	bne.n	8003ae2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003ade:	2302      	movs	r3, #2
 8003ae0:	e0ae      	b.n	8003c40 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2b0c      	cmp	r3, #12
 8003aee:	f200 809f 	bhi.w	8003c30 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003af2:	a201      	add	r2, pc, #4	; (adr r2, 8003af8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003af8:	08003b2d 	.word	0x08003b2d
 8003afc:	08003c31 	.word	0x08003c31
 8003b00:	08003c31 	.word	0x08003c31
 8003b04:	08003c31 	.word	0x08003c31
 8003b08:	08003b6d 	.word	0x08003b6d
 8003b0c:	08003c31 	.word	0x08003c31
 8003b10:	08003c31 	.word	0x08003c31
 8003b14:	08003c31 	.word	0x08003c31
 8003b18:	08003baf 	.word	0x08003baf
 8003b1c:	08003c31 	.word	0x08003c31
 8003b20:	08003c31 	.word	0x08003c31
 8003b24:	08003c31 	.word	0x08003c31
 8003b28:	08003bef 	.word	0x08003bef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	68b9      	ldr	r1, [r7, #8]
 8003b32:	4618      	mov	r0, r3
 8003b34:	f000 fa1e 	bl	8003f74 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	699a      	ldr	r2, [r3, #24]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f042 0208 	orr.w	r2, r2, #8
 8003b46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	699a      	ldr	r2, [r3, #24]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f022 0204 	bic.w	r2, r2, #4
 8003b56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	6999      	ldr	r1, [r3, #24]
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	691a      	ldr	r2, [r3, #16]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	430a      	orrs	r2, r1
 8003b68:	619a      	str	r2, [r3, #24]
      break;
 8003b6a:	e064      	b.n	8003c36 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	68b9      	ldr	r1, [r7, #8]
 8003b72:	4618      	mov	r0, r3
 8003b74:	f000 fa6e 	bl	8004054 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	699a      	ldr	r2, [r3, #24]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	699a      	ldr	r2, [r3, #24]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	6999      	ldr	r1, [r3, #24]
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	691b      	ldr	r3, [r3, #16]
 8003ba2:	021a      	lsls	r2, r3, #8
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	430a      	orrs	r2, r1
 8003baa:	619a      	str	r2, [r3, #24]
      break;
 8003bac:	e043      	b.n	8003c36 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	68b9      	ldr	r1, [r7, #8]
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f000 fac3 	bl	8004140 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	69da      	ldr	r2, [r3, #28]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f042 0208 	orr.w	r2, r2, #8
 8003bc8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	69da      	ldr	r2, [r3, #28]
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f022 0204 	bic.w	r2, r2, #4
 8003bd8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	69d9      	ldr	r1, [r3, #28]
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	691a      	ldr	r2, [r3, #16]
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	430a      	orrs	r2, r1
 8003bea:	61da      	str	r2, [r3, #28]
      break;
 8003bec:	e023      	b.n	8003c36 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	68b9      	ldr	r1, [r7, #8]
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f000 fb17 	bl	8004228 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	69da      	ldr	r2, [r3, #28]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	69da      	ldr	r2, [r3, #28]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	69d9      	ldr	r1, [r3, #28]
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	691b      	ldr	r3, [r3, #16]
 8003c24:	021a      	lsls	r2, r3, #8
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	430a      	orrs	r2, r1
 8003c2c:	61da      	str	r2, [r3, #28]
      break;
 8003c2e:	e002      	b.n	8003c36 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	75fb      	strb	r3, [r7, #23]
      break;
 8003c34:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003c3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	3718      	adds	r7, #24
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}

08003c48 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b084      	sub	sp, #16
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
 8003c50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c52:	2300      	movs	r3, #0
 8003c54:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d101      	bne.n	8003c64 <HAL_TIM_ConfigClockSource+0x1c>
 8003c60:	2302      	movs	r3, #2
 8003c62:	e0b4      	b.n	8003dce <HAL_TIM_ConfigClockSource+0x186>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2201      	movs	r2, #1
 8003c68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2202      	movs	r2, #2
 8003c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003c82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c8a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	68ba      	ldr	r2, [r7, #8]
 8003c92:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c9c:	d03e      	beq.n	8003d1c <HAL_TIM_ConfigClockSource+0xd4>
 8003c9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ca2:	f200 8087 	bhi.w	8003db4 <HAL_TIM_ConfigClockSource+0x16c>
 8003ca6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003caa:	f000 8086 	beq.w	8003dba <HAL_TIM_ConfigClockSource+0x172>
 8003cae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cb2:	d87f      	bhi.n	8003db4 <HAL_TIM_ConfigClockSource+0x16c>
 8003cb4:	2b70      	cmp	r3, #112	; 0x70
 8003cb6:	d01a      	beq.n	8003cee <HAL_TIM_ConfigClockSource+0xa6>
 8003cb8:	2b70      	cmp	r3, #112	; 0x70
 8003cba:	d87b      	bhi.n	8003db4 <HAL_TIM_ConfigClockSource+0x16c>
 8003cbc:	2b60      	cmp	r3, #96	; 0x60
 8003cbe:	d050      	beq.n	8003d62 <HAL_TIM_ConfigClockSource+0x11a>
 8003cc0:	2b60      	cmp	r3, #96	; 0x60
 8003cc2:	d877      	bhi.n	8003db4 <HAL_TIM_ConfigClockSource+0x16c>
 8003cc4:	2b50      	cmp	r3, #80	; 0x50
 8003cc6:	d03c      	beq.n	8003d42 <HAL_TIM_ConfigClockSource+0xfa>
 8003cc8:	2b50      	cmp	r3, #80	; 0x50
 8003cca:	d873      	bhi.n	8003db4 <HAL_TIM_ConfigClockSource+0x16c>
 8003ccc:	2b40      	cmp	r3, #64	; 0x40
 8003cce:	d058      	beq.n	8003d82 <HAL_TIM_ConfigClockSource+0x13a>
 8003cd0:	2b40      	cmp	r3, #64	; 0x40
 8003cd2:	d86f      	bhi.n	8003db4 <HAL_TIM_ConfigClockSource+0x16c>
 8003cd4:	2b30      	cmp	r3, #48	; 0x30
 8003cd6:	d064      	beq.n	8003da2 <HAL_TIM_ConfigClockSource+0x15a>
 8003cd8:	2b30      	cmp	r3, #48	; 0x30
 8003cda:	d86b      	bhi.n	8003db4 <HAL_TIM_ConfigClockSource+0x16c>
 8003cdc:	2b20      	cmp	r3, #32
 8003cde:	d060      	beq.n	8003da2 <HAL_TIM_ConfigClockSource+0x15a>
 8003ce0:	2b20      	cmp	r3, #32
 8003ce2:	d867      	bhi.n	8003db4 <HAL_TIM_ConfigClockSource+0x16c>
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d05c      	beq.n	8003da2 <HAL_TIM_ConfigClockSource+0x15a>
 8003ce8:	2b10      	cmp	r3, #16
 8003cea:	d05a      	beq.n	8003da2 <HAL_TIM_ConfigClockSource+0x15a>
 8003cec:	e062      	b.n	8003db4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6818      	ldr	r0, [r3, #0]
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	6899      	ldr	r1, [r3, #8]
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	685a      	ldr	r2, [r3, #4]
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	68db      	ldr	r3, [r3, #12]
 8003cfe:	f000 fb63 	bl	80043c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003d10:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	68ba      	ldr	r2, [r7, #8]
 8003d18:	609a      	str	r2, [r3, #8]
      break;
 8003d1a:	e04f      	b.n	8003dbc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6818      	ldr	r0, [r3, #0]
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	6899      	ldr	r1, [r3, #8]
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	685a      	ldr	r2, [r3, #4]
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	68db      	ldr	r3, [r3, #12]
 8003d2c:	f000 fb4c 	bl	80043c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	689a      	ldr	r2, [r3, #8]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d3e:	609a      	str	r2, [r3, #8]
      break;
 8003d40:	e03c      	b.n	8003dbc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6818      	ldr	r0, [r3, #0]
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	6859      	ldr	r1, [r3, #4]
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	68db      	ldr	r3, [r3, #12]
 8003d4e:	461a      	mov	r2, r3
 8003d50:	f000 fac0 	bl	80042d4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	2150      	movs	r1, #80	; 0x50
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f000 fb19 	bl	8004392 <TIM_ITRx_SetConfig>
      break;
 8003d60:	e02c      	b.n	8003dbc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6818      	ldr	r0, [r3, #0]
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	6859      	ldr	r1, [r3, #4]
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	68db      	ldr	r3, [r3, #12]
 8003d6e:	461a      	mov	r2, r3
 8003d70:	f000 fadf 	bl	8004332 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	2160      	movs	r1, #96	; 0x60
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f000 fb09 	bl	8004392 <TIM_ITRx_SetConfig>
      break;
 8003d80:	e01c      	b.n	8003dbc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6818      	ldr	r0, [r3, #0]
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	6859      	ldr	r1, [r3, #4]
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	68db      	ldr	r3, [r3, #12]
 8003d8e:	461a      	mov	r2, r3
 8003d90:	f000 faa0 	bl	80042d4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	2140      	movs	r1, #64	; 0x40
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f000 faf9 	bl	8004392 <TIM_ITRx_SetConfig>
      break;
 8003da0:	e00c      	b.n	8003dbc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4619      	mov	r1, r3
 8003dac:	4610      	mov	r0, r2
 8003dae:	f000 faf0 	bl	8004392 <TIM_ITRx_SetConfig>
      break;
 8003db2:	e003      	b.n	8003dbc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	73fb      	strb	r3, [r7, #15]
      break;
 8003db8:	e000      	b.n	8003dbc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003dba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003dcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3710      	adds	r7, #16
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}

08003dd6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003dd6:	b480      	push	{r7}
 8003dd8:	b083      	sub	sp, #12
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003dde:	bf00      	nop
 8003de0:	370c      	adds	r7, #12
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr

08003dea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003dea:	b480      	push	{r7}
 8003dec:	b083      	sub	sp, #12
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003df2:	bf00      	nop
 8003df4:	370c      	adds	r7, #12
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr

08003dfe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003dfe:	b480      	push	{r7}
 8003e00:	b083      	sub	sp, #12
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e06:	bf00      	nop
 8003e08:	370c      	adds	r7, #12
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr

08003e12 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e12:	b480      	push	{r7}
 8003e14:	b083      	sub	sp, #12
 8003e16:	af00      	add	r7, sp, #0
 8003e18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e1a:	bf00      	nop
 8003e1c:	370c      	adds	r7, #12
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr
	...

08003e28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b085      	sub	sp, #20
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
 8003e30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	4a43      	ldr	r2, [pc, #268]	; (8003f48 <TIM_Base_SetConfig+0x120>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d013      	beq.n	8003e68 <TIM_Base_SetConfig+0x40>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e46:	d00f      	beq.n	8003e68 <TIM_Base_SetConfig+0x40>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	4a40      	ldr	r2, [pc, #256]	; (8003f4c <TIM_Base_SetConfig+0x124>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d00b      	beq.n	8003e68 <TIM_Base_SetConfig+0x40>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	4a3f      	ldr	r2, [pc, #252]	; (8003f50 <TIM_Base_SetConfig+0x128>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d007      	beq.n	8003e68 <TIM_Base_SetConfig+0x40>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	4a3e      	ldr	r2, [pc, #248]	; (8003f54 <TIM_Base_SetConfig+0x12c>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d003      	beq.n	8003e68 <TIM_Base_SetConfig+0x40>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	4a3d      	ldr	r2, [pc, #244]	; (8003f58 <TIM_Base_SetConfig+0x130>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d108      	bne.n	8003e7a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	68fa      	ldr	r2, [r7, #12]
 8003e76:	4313      	orrs	r3, r2
 8003e78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	4a32      	ldr	r2, [pc, #200]	; (8003f48 <TIM_Base_SetConfig+0x120>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d02b      	beq.n	8003eda <TIM_Base_SetConfig+0xb2>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e88:	d027      	beq.n	8003eda <TIM_Base_SetConfig+0xb2>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	4a2f      	ldr	r2, [pc, #188]	; (8003f4c <TIM_Base_SetConfig+0x124>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d023      	beq.n	8003eda <TIM_Base_SetConfig+0xb2>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	4a2e      	ldr	r2, [pc, #184]	; (8003f50 <TIM_Base_SetConfig+0x128>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d01f      	beq.n	8003eda <TIM_Base_SetConfig+0xb2>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	4a2d      	ldr	r2, [pc, #180]	; (8003f54 <TIM_Base_SetConfig+0x12c>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d01b      	beq.n	8003eda <TIM_Base_SetConfig+0xb2>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4a2c      	ldr	r2, [pc, #176]	; (8003f58 <TIM_Base_SetConfig+0x130>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d017      	beq.n	8003eda <TIM_Base_SetConfig+0xb2>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4a2b      	ldr	r2, [pc, #172]	; (8003f5c <TIM_Base_SetConfig+0x134>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d013      	beq.n	8003eda <TIM_Base_SetConfig+0xb2>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4a2a      	ldr	r2, [pc, #168]	; (8003f60 <TIM_Base_SetConfig+0x138>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d00f      	beq.n	8003eda <TIM_Base_SetConfig+0xb2>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4a29      	ldr	r2, [pc, #164]	; (8003f64 <TIM_Base_SetConfig+0x13c>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d00b      	beq.n	8003eda <TIM_Base_SetConfig+0xb2>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4a28      	ldr	r2, [pc, #160]	; (8003f68 <TIM_Base_SetConfig+0x140>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d007      	beq.n	8003eda <TIM_Base_SetConfig+0xb2>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	4a27      	ldr	r2, [pc, #156]	; (8003f6c <TIM_Base_SetConfig+0x144>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d003      	beq.n	8003eda <TIM_Base_SetConfig+0xb2>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	4a26      	ldr	r2, [pc, #152]	; (8003f70 <TIM_Base_SetConfig+0x148>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d108      	bne.n	8003eec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ee0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	68db      	ldr	r3, [r3, #12]
 8003ee6:	68fa      	ldr	r2, [r7, #12]
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	695b      	ldr	r3, [r3, #20]
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	689a      	ldr	r2, [r3, #8]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	4a0e      	ldr	r2, [pc, #56]	; (8003f48 <TIM_Base_SetConfig+0x120>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d003      	beq.n	8003f1a <TIM_Base_SetConfig+0xf2>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	4a10      	ldr	r2, [pc, #64]	; (8003f58 <TIM_Base_SetConfig+0x130>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d103      	bne.n	8003f22 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	691a      	ldr	r2, [r3, #16]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f043 0204 	orr.w	r2, r3, #4
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2201      	movs	r2, #1
 8003f32:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	68fa      	ldr	r2, [r7, #12]
 8003f38:	601a      	str	r2, [r3, #0]
}
 8003f3a:	bf00      	nop
 8003f3c:	3714      	adds	r7, #20
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f44:	4770      	bx	lr
 8003f46:	bf00      	nop
 8003f48:	40010000 	.word	0x40010000
 8003f4c:	40000400 	.word	0x40000400
 8003f50:	40000800 	.word	0x40000800
 8003f54:	40000c00 	.word	0x40000c00
 8003f58:	40010400 	.word	0x40010400
 8003f5c:	40014000 	.word	0x40014000
 8003f60:	40014400 	.word	0x40014400
 8003f64:	40014800 	.word	0x40014800
 8003f68:	40001800 	.word	0x40001800
 8003f6c:	40001c00 	.word	0x40001c00
 8003f70:	40002000 	.word	0x40002000

08003f74 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b087      	sub	sp, #28
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6a1b      	ldr	r3, [r3, #32]
 8003f82:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6a1b      	ldr	r3, [r3, #32]
 8003f88:	f023 0201 	bic.w	r2, r3, #1
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	699b      	ldr	r3, [r3, #24]
 8003f9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f023 0303 	bic.w	r3, r3, #3
 8003faa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	68fa      	ldr	r2, [r7, #12]
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	f023 0302 	bic.w	r3, r3, #2
 8003fbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	697a      	ldr	r2, [r7, #20]
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	4a20      	ldr	r2, [pc, #128]	; (800404c <TIM_OC1_SetConfig+0xd8>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d003      	beq.n	8003fd8 <TIM_OC1_SetConfig+0x64>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	4a1f      	ldr	r2, [pc, #124]	; (8004050 <TIM_OC1_SetConfig+0xdc>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d10c      	bne.n	8003ff2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	f023 0308 	bic.w	r3, r3, #8
 8003fde:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	68db      	ldr	r3, [r3, #12]
 8003fe4:	697a      	ldr	r2, [r7, #20]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	f023 0304 	bic.w	r3, r3, #4
 8003ff0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	4a15      	ldr	r2, [pc, #84]	; (800404c <TIM_OC1_SetConfig+0xd8>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d003      	beq.n	8004002 <TIM_OC1_SetConfig+0x8e>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	4a14      	ldr	r2, [pc, #80]	; (8004050 <TIM_OC1_SetConfig+0xdc>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d111      	bne.n	8004026 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004008:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004010:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	695b      	ldr	r3, [r3, #20]
 8004016:	693a      	ldr	r2, [r7, #16]
 8004018:	4313      	orrs	r3, r2
 800401a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	699b      	ldr	r3, [r3, #24]
 8004020:	693a      	ldr	r2, [r7, #16]
 8004022:	4313      	orrs	r3, r2
 8004024:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	693a      	ldr	r2, [r7, #16]
 800402a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	68fa      	ldr	r2, [r7, #12]
 8004030:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	685a      	ldr	r2, [r3, #4]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	697a      	ldr	r2, [r7, #20]
 800403e:	621a      	str	r2, [r3, #32]
}
 8004040:	bf00      	nop
 8004042:	371c      	adds	r7, #28
 8004044:	46bd      	mov	sp, r7
 8004046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404a:	4770      	bx	lr
 800404c:	40010000 	.word	0x40010000
 8004050:	40010400 	.word	0x40010400

08004054 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004054:	b480      	push	{r7}
 8004056:	b087      	sub	sp, #28
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6a1b      	ldr	r3, [r3, #32]
 8004062:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6a1b      	ldr	r3, [r3, #32]
 8004068:	f023 0210 	bic.w	r2, r3, #16
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	699b      	ldr	r3, [r3, #24]
 800407a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004082:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800408a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	021b      	lsls	r3, r3, #8
 8004092:	68fa      	ldr	r2, [r7, #12]
 8004094:	4313      	orrs	r3, r2
 8004096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	f023 0320 	bic.w	r3, r3, #32
 800409e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	011b      	lsls	r3, r3, #4
 80040a6:	697a      	ldr	r2, [r7, #20]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	4a22      	ldr	r2, [pc, #136]	; (8004138 <TIM_OC2_SetConfig+0xe4>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d003      	beq.n	80040bc <TIM_OC2_SetConfig+0x68>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	4a21      	ldr	r2, [pc, #132]	; (800413c <TIM_OC2_SetConfig+0xe8>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d10d      	bne.n	80040d8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	011b      	lsls	r3, r3, #4
 80040ca:	697a      	ldr	r2, [r7, #20]
 80040cc:	4313      	orrs	r3, r2
 80040ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040d6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	4a17      	ldr	r2, [pc, #92]	; (8004138 <TIM_OC2_SetConfig+0xe4>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d003      	beq.n	80040e8 <TIM_OC2_SetConfig+0x94>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	4a16      	ldr	r2, [pc, #88]	; (800413c <TIM_OC2_SetConfig+0xe8>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d113      	bne.n	8004110 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80040ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80040f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	695b      	ldr	r3, [r3, #20]
 80040fc:	009b      	lsls	r3, r3, #2
 80040fe:	693a      	ldr	r2, [r7, #16]
 8004100:	4313      	orrs	r3, r2
 8004102:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	699b      	ldr	r3, [r3, #24]
 8004108:	009b      	lsls	r3, r3, #2
 800410a:	693a      	ldr	r2, [r7, #16]
 800410c:	4313      	orrs	r3, r2
 800410e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	693a      	ldr	r2, [r7, #16]
 8004114:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	68fa      	ldr	r2, [r7, #12]
 800411a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	685a      	ldr	r2, [r3, #4]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	697a      	ldr	r2, [r7, #20]
 8004128:	621a      	str	r2, [r3, #32]
}
 800412a:	bf00      	nop
 800412c:	371c      	adds	r7, #28
 800412e:	46bd      	mov	sp, r7
 8004130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004134:	4770      	bx	lr
 8004136:	bf00      	nop
 8004138:	40010000 	.word	0x40010000
 800413c:	40010400 	.word	0x40010400

08004140 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004140:	b480      	push	{r7}
 8004142:	b087      	sub	sp, #28
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
 8004148:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6a1b      	ldr	r3, [r3, #32]
 800414e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6a1b      	ldr	r3, [r3, #32]
 8004154:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	69db      	ldr	r3, [r3, #28]
 8004166:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800416e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	f023 0303 	bic.w	r3, r3, #3
 8004176:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	68fa      	ldr	r2, [r7, #12]
 800417e:	4313      	orrs	r3, r2
 8004180:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004188:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	021b      	lsls	r3, r3, #8
 8004190:	697a      	ldr	r2, [r7, #20]
 8004192:	4313      	orrs	r3, r2
 8004194:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4a21      	ldr	r2, [pc, #132]	; (8004220 <TIM_OC3_SetConfig+0xe0>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d003      	beq.n	80041a6 <TIM_OC3_SetConfig+0x66>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	4a20      	ldr	r2, [pc, #128]	; (8004224 <TIM_OC3_SetConfig+0xe4>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d10d      	bne.n	80041c2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80041ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	68db      	ldr	r3, [r3, #12]
 80041b2:	021b      	lsls	r3, r3, #8
 80041b4:	697a      	ldr	r2, [r7, #20]
 80041b6:	4313      	orrs	r3, r2
 80041b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80041c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	4a16      	ldr	r2, [pc, #88]	; (8004220 <TIM_OC3_SetConfig+0xe0>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d003      	beq.n	80041d2 <TIM_OC3_SetConfig+0x92>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4a15      	ldr	r2, [pc, #84]	; (8004224 <TIM_OC3_SetConfig+0xe4>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d113      	bne.n	80041fa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80041d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80041e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	695b      	ldr	r3, [r3, #20]
 80041e6:	011b      	lsls	r3, r3, #4
 80041e8:	693a      	ldr	r2, [r7, #16]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	699b      	ldr	r3, [r3, #24]
 80041f2:	011b      	lsls	r3, r3, #4
 80041f4:	693a      	ldr	r2, [r7, #16]
 80041f6:	4313      	orrs	r3, r2
 80041f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	693a      	ldr	r2, [r7, #16]
 80041fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	68fa      	ldr	r2, [r7, #12]
 8004204:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	685a      	ldr	r2, [r3, #4]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	697a      	ldr	r2, [r7, #20]
 8004212:	621a      	str	r2, [r3, #32]
}
 8004214:	bf00      	nop
 8004216:	371c      	adds	r7, #28
 8004218:	46bd      	mov	sp, r7
 800421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421e:	4770      	bx	lr
 8004220:	40010000 	.word	0x40010000
 8004224:	40010400 	.word	0x40010400

08004228 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004228:	b480      	push	{r7}
 800422a:	b087      	sub	sp, #28
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
 8004230:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6a1b      	ldr	r3, [r3, #32]
 8004236:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6a1b      	ldr	r3, [r3, #32]
 800423c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	69db      	ldr	r3, [r3, #28]
 800424e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004256:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800425e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	021b      	lsls	r3, r3, #8
 8004266:	68fa      	ldr	r2, [r7, #12]
 8004268:	4313      	orrs	r3, r2
 800426a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004272:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	031b      	lsls	r3, r3, #12
 800427a:	693a      	ldr	r2, [r7, #16]
 800427c:	4313      	orrs	r3, r2
 800427e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	4a12      	ldr	r2, [pc, #72]	; (80042cc <TIM_OC4_SetConfig+0xa4>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d003      	beq.n	8004290 <TIM_OC4_SetConfig+0x68>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	4a11      	ldr	r2, [pc, #68]	; (80042d0 <TIM_OC4_SetConfig+0xa8>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d109      	bne.n	80042a4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004296:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	695b      	ldr	r3, [r3, #20]
 800429c:	019b      	lsls	r3, r3, #6
 800429e:	697a      	ldr	r2, [r7, #20]
 80042a0:	4313      	orrs	r3, r2
 80042a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	697a      	ldr	r2, [r7, #20]
 80042a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	68fa      	ldr	r2, [r7, #12]
 80042ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	685a      	ldr	r2, [r3, #4]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	693a      	ldr	r2, [r7, #16]
 80042bc:	621a      	str	r2, [r3, #32]
}
 80042be:	bf00      	nop
 80042c0:	371c      	adds	r7, #28
 80042c2:	46bd      	mov	sp, r7
 80042c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c8:	4770      	bx	lr
 80042ca:	bf00      	nop
 80042cc:	40010000 	.word	0x40010000
 80042d0:	40010400 	.word	0x40010400

080042d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b087      	sub	sp, #28
 80042d8:	af00      	add	r7, sp, #0
 80042da:	60f8      	str	r0, [r7, #12]
 80042dc:	60b9      	str	r1, [r7, #8]
 80042de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	6a1b      	ldr	r3, [r3, #32]
 80042e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	6a1b      	ldr	r3, [r3, #32]
 80042ea:	f023 0201 	bic.w	r2, r3, #1
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	699b      	ldr	r3, [r3, #24]
 80042f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80042fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	011b      	lsls	r3, r3, #4
 8004304:	693a      	ldr	r2, [r7, #16]
 8004306:	4313      	orrs	r3, r2
 8004308:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	f023 030a 	bic.w	r3, r3, #10
 8004310:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004312:	697a      	ldr	r2, [r7, #20]
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	4313      	orrs	r3, r2
 8004318:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	693a      	ldr	r2, [r7, #16]
 800431e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	697a      	ldr	r2, [r7, #20]
 8004324:	621a      	str	r2, [r3, #32]
}
 8004326:	bf00      	nop
 8004328:	371c      	adds	r7, #28
 800432a:	46bd      	mov	sp, r7
 800432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004330:	4770      	bx	lr

08004332 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004332:	b480      	push	{r7}
 8004334:	b087      	sub	sp, #28
 8004336:	af00      	add	r7, sp, #0
 8004338:	60f8      	str	r0, [r7, #12]
 800433a:	60b9      	str	r1, [r7, #8]
 800433c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	6a1b      	ldr	r3, [r3, #32]
 8004342:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	6a1b      	ldr	r3, [r3, #32]
 8004348:	f023 0210 	bic.w	r2, r3, #16
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	699b      	ldr	r3, [r3, #24]
 8004354:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800435c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	031b      	lsls	r3, r3, #12
 8004362:	693a      	ldr	r2, [r7, #16]
 8004364:	4313      	orrs	r3, r2
 8004366:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800436e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	011b      	lsls	r3, r3, #4
 8004374:	697a      	ldr	r2, [r7, #20]
 8004376:	4313      	orrs	r3, r2
 8004378:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	693a      	ldr	r2, [r7, #16]
 800437e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	697a      	ldr	r2, [r7, #20]
 8004384:	621a      	str	r2, [r3, #32]
}
 8004386:	bf00      	nop
 8004388:	371c      	adds	r7, #28
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr

08004392 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004392:	b480      	push	{r7}
 8004394:	b085      	sub	sp, #20
 8004396:	af00      	add	r7, sp, #0
 8004398:	6078      	str	r0, [r7, #4]
 800439a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80043aa:	683a      	ldr	r2, [r7, #0]
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	4313      	orrs	r3, r2
 80043b0:	f043 0307 	orr.w	r3, r3, #7
 80043b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	68fa      	ldr	r2, [r7, #12]
 80043ba:	609a      	str	r2, [r3, #8]
}
 80043bc:	bf00      	nop
 80043be:	3714      	adds	r7, #20
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr

080043c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b087      	sub	sp, #28
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	60f8      	str	r0, [r7, #12]
 80043d0:	60b9      	str	r1, [r7, #8]
 80043d2:	607a      	str	r2, [r7, #4]
 80043d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80043e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	021a      	lsls	r2, r3, #8
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	431a      	orrs	r2, r3
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	4313      	orrs	r3, r2
 80043f0:	697a      	ldr	r2, [r7, #20]
 80043f2:	4313      	orrs	r3, r2
 80043f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	697a      	ldr	r2, [r7, #20]
 80043fa:	609a      	str	r2, [r3, #8]
}
 80043fc:	bf00      	nop
 80043fe:	371c      	adds	r7, #28
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr

08004408 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004408:	b480      	push	{r7}
 800440a:	b087      	sub	sp, #28
 800440c:	af00      	add	r7, sp, #0
 800440e:	60f8      	str	r0, [r7, #12]
 8004410:	60b9      	str	r1, [r7, #8]
 8004412:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	f003 031f 	and.w	r3, r3, #31
 800441a:	2201      	movs	r2, #1
 800441c:	fa02 f303 	lsl.w	r3, r2, r3
 8004420:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	6a1a      	ldr	r2, [r3, #32]
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	43db      	mvns	r3, r3
 800442a:	401a      	ands	r2, r3
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	6a1a      	ldr	r2, [r3, #32]
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	f003 031f 	and.w	r3, r3, #31
 800443a:	6879      	ldr	r1, [r7, #4]
 800443c:	fa01 f303 	lsl.w	r3, r1, r3
 8004440:	431a      	orrs	r2, r3
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	621a      	str	r2, [r3, #32]
}
 8004446:	bf00      	nop
 8004448:	371c      	adds	r7, #28
 800444a:	46bd      	mov	sp, r7
 800444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004450:	4770      	bx	lr
	...

08004454 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004454:	b480      	push	{r7}
 8004456:	b085      	sub	sp, #20
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
 800445c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004464:	2b01      	cmp	r3, #1
 8004466:	d101      	bne.n	800446c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004468:	2302      	movs	r3, #2
 800446a:	e05a      	b.n	8004522 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2201      	movs	r2, #1
 8004470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2202      	movs	r2, #2
 8004478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004492:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	68fa      	ldr	r2, [r7, #12]
 800449a:	4313      	orrs	r3, r2
 800449c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	68fa      	ldr	r2, [r7, #12]
 80044a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a21      	ldr	r2, [pc, #132]	; (8004530 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d022      	beq.n	80044f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044b8:	d01d      	beq.n	80044f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a1d      	ldr	r2, [pc, #116]	; (8004534 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d018      	beq.n	80044f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a1b      	ldr	r2, [pc, #108]	; (8004538 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d013      	beq.n	80044f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a1a      	ldr	r2, [pc, #104]	; (800453c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d00e      	beq.n	80044f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a18      	ldr	r2, [pc, #96]	; (8004540 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d009      	beq.n	80044f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a17      	ldr	r2, [pc, #92]	; (8004544 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d004      	beq.n	80044f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a15      	ldr	r2, [pc, #84]	; (8004548 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d10c      	bne.n	8004510 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	68ba      	ldr	r2, [r7, #8]
 8004504:	4313      	orrs	r3, r2
 8004506:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	68ba      	ldr	r2, [r7, #8]
 800450e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2201      	movs	r2, #1
 8004514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2200      	movs	r2, #0
 800451c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004520:	2300      	movs	r3, #0
}
 8004522:	4618      	mov	r0, r3
 8004524:	3714      	adds	r7, #20
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr
 800452e:	bf00      	nop
 8004530:	40010000 	.word	0x40010000
 8004534:	40000400 	.word	0x40000400
 8004538:	40000800 	.word	0x40000800
 800453c:	40000c00 	.word	0x40000c00
 8004540:	40010400 	.word	0x40010400
 8004544:	40014000 	.word	0x40014000
 8004548:	40001800 	.word	0x40001800

0800454c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800454c:	b480      	push	{r7}
 800454e:	b083      	sub	sp, #12
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004554:	bf00      	nop
 8004556:	370c      	adds	r7, #12
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr

08004560 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004560:	b480      	push	{r7}
 8004562:	b083      	sub	sp, #12
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004568:	bf00      	nop
 800456a:	370c      	adds	r7, #12
 800456c:	46bd      	mov	sp, r7
 800456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004572:	4770      	bx	lr

08004574 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b082      	sub	sp, #8
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d101      	bne.n	8004586 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	e042      	b.n	800460c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800458c:	b2db      	uxtb	r3, r3
 800458e:	2b00      	cmp	r3, #0
 8004590:	d106      	bne.n	80045a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2200      	movs	r2, #0
 8004596:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f7fd f84e 	bl	800163c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2224      	movs	r2, #36	; 0x24
 80045a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	68da      	ldr	r2, [r3, #12]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80045b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80045b8:	6878      	ldr	r0, [r7, #4]
 80045ba:	f000 fa09 	bl	80049d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	691a      	ldr	r2, [r3, #16]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80045cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	695a      	ldr	r2, [r3, #20]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80045dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	68da      	ldr	r2, [r3, #12]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80045ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2200      	movs	r2, #0
 80045f2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2220      	movs	r2, #32
 80045f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2220      	movs	r2, #32
 8004600:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2200      	movs	r2, #0
 8004608:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800460a:	2300      	movs	r3, #0
}
 800460c:	4618      	mov	r0, r3
 800460e:	3708      	adds	r7, #8
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}

08004614 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b08a      	sub	sp, #40	; 0x28
 8004618:	af02      	add	r7, sp, #8
 800461a:	60f8      	str	r0, [r7, #12]
 800461c:	60b9      	str	r1, [r7, #8]
 800461e:	603b      	str	r3, [r7, #0]
 8004620:	4613      	mov	r3, r2
 8004622:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004624:	2300      	movs	r3, #0
 8004626:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800462e:	b2db      	uxtb	r3, r3
 8004630:	2b20      	cmp	r3, #32
 8004632:	d175      	bne.n	8004720 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d002      	beq.n	8004640 <HAL_UART_Transmit+0x2c>
 800463a:	88fb      	ldrh	r3, [r7, #6]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d101      	bne.n	8004644 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	e06e      	b.n	8004722 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2200      	movs	r2, #0
 8004648:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2221      	movs	r2, #33	; 0x21
 800464e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004652:	f7fd f9f7 	bl	8001a44 <HAL_GetTick>
 8004656:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	88fa      	ldrh	r2, [r7, #6]
 800465c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	88fa      	ldrh	r2, [r7, #6]
 8004662:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800466c:	d108      	bne.n	8004680 <HAL_UART_Transmit+0x6c>
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	691b      	ldr	r3, [r3, #16]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d104      	bne.n	8004680 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004676:	2300      	movs	r3, #0
 8004678:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	61bb      	str	r3, [r7, #24]
 800467e:	e003      	b.n	8004688 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004684:	2300      	movs	r3, #0
 8004686:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004688:	e02e      	b.n	80046e8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	9300      	str	r3, [sp, #0]
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	2200      	movs	r2, #0
 8004692:	2180      	movs	r1, #128	; 0x80
 8004694:	68f8      	ldr	r0, [r7, #12]
 8004696:	f000 f8df 	bl	8004858 <UART_WaitOnFlagUntilTimeout>
 800469a:	4603      	mov	r3, r0
 800469c:	2b00      	cmp	r3, #0
 800469e:	d005      	beq.n	80046ac <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2220      	movs	r2, #32
 80046a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 80046a8:	2303      	movs	r3, #3
 80046aa:	e03a      	b.n	8004722 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80046ac:	69fb      	ldr	r3, [r7, #28]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d10b      	bne.n	80046ca <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80046b2:	69bb      	ldr	r3, [r7, #24]
 80046b4:	881b      	ldrh	r3, [r3, #0]
 80046b6:	461a      	mov	r2, r3
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046c0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80046c2:	69bb      	ldr	r3, [r7, #24]
 80046c4:	3302      	adds	r3, #2
 80046c6:	61bb      	str	r3, [r7, #24]
 80046c8:	e007      	b.n	80046da <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80046ca:	69fb      	ldr	r3, [r7, #28]
 80046cc:	781a      	ldrb	r2, [r3, #0]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80046d4:	69fb      	ldr	r3, [r7, #28]
 80046d6:	3301      	adds	r3, #1
 80046d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80046de:	b29b      	uxth	r3, r3
 80046e0:	3b01      	subs	r3, #1
 80046e2:	b29a      	uxth	r2, r3
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80046ec:	b29b      	uxth	r3, r3
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d1cb      	bne.n	800468a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	9300      	str	r3, [sp, #0]
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	2200      	movs	r2, #0
 80046fa:	2140      	movs	r1, #64	; 0x40
 80046fc:	68f8      	ldr	r0, [r7, #12]
 80046fe:	f000 f8ab 	bl	8004858 <UART_WaitOnFlagUntilTimeout>
 8004702:	4603      	mov	r3, r0
 8004704:	2b00      	cmp	r3, #0
 8004706:	d005      	beq.n	8004714 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2220      	movs	r2, #32
 800470c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8004710:	2303      	movs	r3, #3
 8004712:	e006      	b.n	8004722 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2220      	movs	r2, #32
 8004718:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800471c:	2300      	movs	r3, #0
 800471e:	e000      	b.n	8004722 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004720:	2302      	movs	r3, #2
  }
}
 8004722:	4618      	mov	r0, r3
 8004724:	3720      	adds	r7, #32
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}

0800472a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800472a:	b580      	push	{r7, lr}
 800472c:	b08a      	sub	sp, #40	; 0x28
 800472e:	af02      	add	r7, sp, #8
 8004730:	60f8      	str	r0, [r7, #12]
 8004732:	60b9      	str	r1, [r7, #8]
 8004734:	603b      	str	r3, [r7, #0]
 8004736:	4613      	mov	r3, r2
 8004738:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800473a:	2300      	movs	r3, #0
 800473c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004744:	b2db      	uxtb	r3, r3
 8004746:	2b20      	cmp	r3, #32
 8004748:	f040 8081 	bne.w	800484e <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d002      	beq.n	8004758 <HAL_UART_Receive+0x2e>
 8004752:	88fb      	ldrh	r3, [r7, #6]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d101      	bne.n	800475c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	e079      	b.n	8004850 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2200      	movs	r2, #0
 8004760:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2222      	movs	r2, #34	; 0x22
 8004766:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2200      	movs	r2, #0
 800476e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004770:	f7fd f968 	bl	8001a44 <HAL_GetTick>
 8004774:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	88fa      	ldrh	r2, [r7, #6]
 800477a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	88fa      	ldrh	r2, [r7, #6]
 8004780:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800478a:	d108      	bne.n	800479e <HAL_UART_Receive+0x74>
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	691b      	ldr	r3, [r3, #16]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d104      	bne.n	800479e <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8004794:	2300      	movs	r3, #0
 8004796:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	61bb      	str	r3, [r7, #24]
 800479c:	e003      	b.n	80047a6 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80047a2:	2300      	movs	r3, #0
 80047a4:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80047a6:	e047      	b.n	8004838 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	9300      	str	r3, [sp, #0]
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	2200      	movs	r2, #0
 80047b0:	2120      	movs	r1, #32
 80047b2:	68f8      	ldr	r0, [r7, #12]
 80047b4:	f000 f850 	bl	8004858 <UART_WaitOnFlagUntilTimeout>
 80047b8:	4603      	mov	r3, r0
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d005      	beq.n	80047ca <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2220      	movs	r2, #32
 80047c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        return HAL_TIMEOUT;
 80047c6:	2303      	movs	r3, #3
 80047c8:	e042      	b.n	8004850 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 80047ca:	69fb      	ldr	r3, [r7, #28]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d10c      	bne.n	80047ea <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047dc:	b29a      	uxth	r2, r3
 80047de:	69bb      	ldr	r3, [r7, #24]
 80047e0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80047e2:	69bb      	ldr	r3, [r7, #24]
 80047e4:	3302      	adds	r3, #2
 80047e6:	61bb      	str	r3, [r7, #24]
 80047e8:	e01f      	b.n	800482a <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047f2:	d007      	beq.n	8004804 <HAL_UART_Receive+0xda>
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d10a      	bne.n	8004812 <HAL_UART_Receive+0xe8>
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	691b      	ldr	r3, [r3, #16]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d106      	bne.n	8004812 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	b2da      	uxtb	r2, r3
 800480c:	69fb      	ldr	r3, [r7, #28]
 800480e:	701a      	strb	r2, [r3, #0]
 8004810:	e008      	b.n	8004824 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	b2db      	uxtb	r3, r3
 800481a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800481e:	b2da      	uxtb	r2, r3
 8004820:	69fb      	ldr	r3, [r7, #28]
 8004822:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004824:	69fb      	ldr	r3, [r7, #28]
 8004826:	3301      	adds	r3, #1
 8004828:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800482e:	b29b      	uxth	r3, r3
 8004830:	3b01      	subs	r3, #1
 8004832:	b29a      	uxth	r2, r3
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800483c:	b29b      	uxth	r3, r3
 800483e:	2b00      	cmp	r3, #0
 8004840:	d1b2      	bne.n	80047a8 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2220      	movs	r2, #32
 8004846:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 800484a:	2300      	movs	r3, #0
 800484c:	e000      	b.n	8004850 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 800484e:	2302      	movs	r3, #2
  }
}
 8004850:	4618      	mov	r0, r3
 8004852:	3720      	adds	r7, #32
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}

08004858 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b086      	sub	sp, #24
 800485c:	af00      	add	r7, sp, #0
 800485e:	60f8      	str	r0, [r7, #12]
 8004860:	60b9      	str	r1, [r7, #8]
 8004862:	603b      	str	r3, [r7, #0]
 8004864:	4613      	mov	r3, r2
 8004866:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004868:	e03b      	b.n	80048e2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800486a:	6a3b      	ldr	r3, [r7, #32]
 800486c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004870:	d037      	beq.n	80048e2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004872:	f7fd f8e7 	bl	8001a44 <HAL_GetTick>
 8004876:	4602      	mov	r2, r0
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	1ad3      	subs	r3, r2, r3
 800487c:	6a3a      	ldr	r2, [r7, #32]
 800487e:	429a      	cmp	r2, r3
 8004880:	d302      	bcc.n	8004888 <UART_WaitOnFlagUntilTimeout+0x30>
 8004882:	6a3b      	ldr	r3, [r7, #32]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d101      	bne.n	800488c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004888:	2303      	movs	r3, #3
 800488a:	e03a      	b.n	8004902 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	68db      	ldr	r3, [r3, #12]
 8004892:	f003 0304 	and.w	r3, r3, #4
 8004896:	2b00      	cmp	r3, #0
 8004898:	d023      	beq.n	80048e2 <UART_WaitOnFlagUntilTimeout+0x8a>
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	2b80      	cmp	r3, #128	; 0x80
 800489e:	d020      	beq.n	80048e2 <UART_WaitOnFlagUntilTimeout+0x8a>
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	2b40      	cmp	r3, #64	; 0x40
 80048a4:	d01d      	beq.n	80048e2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 0308 	and.w	r3, r3, #8
 80048b0:	2b08      	cmp	r3, #8
 80048b2:	d116      	bne.n	80048e2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80048b4:	2300      	movs	r3, #0
 80048b6:	617b      	str	r3, [r7, #20]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	617b      	str	r3, [r7, #20]
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	617b      	str	r3, [r7, #20]
 80048c8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80048ca:	68f8      	ldr	r0, [r7, #12]
 80048cc:	f000 f81d 	bl	800490a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2208      	movs	r2, #8
 80048d4:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2200      	movs	r2, #0
 80048da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	e00f      	b.n	8004902 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	681a      	ldr	r2, [r3, #0]
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	4013      	ands	r3, r2
 80048ec:	68ba      	ldr	r2, [r7, #8]
 80048ee:	429a      	cmp	r2, r3
 80048f0:	bf0c      	ite	eq
 80048f2:	2301      	moveq	r3, #1
 80048f4:	2300      	movne	r3, #0
 80048f6:	b2db      	uxtb	r3, r3
 80048f8:	461a      	mov	r2, r3
 80048fa:	79fb      	ldrb	r3, [r7, #7]
 80048fc:	429a      	cmp	r2, r3
 80048fe:	d0b4      	beq.n	800486a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004900:	2300      	movs	r3, #0
}
 8004902:	4618      	mov	r0, r3
 8004904:	3718      	adds	r7, #24
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}

0800490a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800490a:	b480      	push	{r7}
 800490c:	b095      	sub	sp, #84	; 0x54
 800490e:	af00      	add	r7, sp, #0
 8004910:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	330c      	adds	r3, #12
 8004918:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800491a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800491c:	e853 3f00 	ldrex	r3, [r3]
 8004920:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004924:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004928:	64fb      	str	r3, [r7, #76]	; 0x4c
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	330c      	adds	r3, #12
 8004930:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004932:	643a      	str	r2, [r7, #64]	; 0x40
 8004934:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004936:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004938:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800493a:	e841 2300 	strex	r3, r2, [r1]
 800493e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004942:	2b00      	cmp	r3, #0
 8004944:	d1e5      	bne.n	8004912 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	3314      	adds	r3, #20
 800494c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800494e:	6a3b      	ldr	r3, [r7, #32]
 8004950:	e853 3f00 	ldrex	r3, [r3]
 8004954:	61fb      	str	r3, [r7, #28]
   return(result);
 8004956:	69fb      	ldr	r3, [r7, #28]
 8004958:	f023 0301 	bic.w	r3, r3, #1
 800495c:	64bb      	str	r3, [r7, #72]	; 0x48
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	3314      	adds	r3, #20
 8004964:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004966:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004968:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800496a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800496c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800496e:	e841 2300 	strex	r3, r2, [r1]
 8004972:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004976:	2b00      	cmp	r3, #0
 8004978:	d1e5      	bne.n	8004946 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800497e:	2b01      	cmp	r3, #1
 8004980:	d119      	bne.n	80049b6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	330c      	adds	r3, #12
 8004988:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	e853 3f00 	ldrex	r3, [r3]
 8004990:	60bb      	str	r3, [r7, #8]
   return(result);
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	f023 0310 	bic.w	r3, r3, #16
 8004998:	647b      	str	r3, [r7, #68]	; 0x44
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	330c      	adds	r3, #12
 80049a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80049a2:	61ba      	str	r2, [r7, #24]
 80049a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049a6:	6979      	ldr	r1, [r7, #20]
 80049a8:	69ba      	ldr	r2, [r7, #24]
 80049aa:	e841 2300 	strex	r3, r2, [r1]
 80049ae:	613b      	str	r3, [r7, #16]
   return(result);
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d1e5      	bne.n	8004982 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2220      	movs	r2, #32
 80049ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2200      	movs	r2, #0
 80049c2:	631a      	str	r2, [r3, #48]	; 0x30
}
 80049c4:	bf00      	nop
 80049c6:	3754      	adds	r7, #84	; 0x54
 80049c8:	46bd      	mov	sp, r7
 80049ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ce:	4770      	bx	lr

080049d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049d4:	b0c0      	sub	sp, #256	; 0x100
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	691b      	ldr	r3, [r3, #16]
 80049e4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80049e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049ec:	68d9      	ldr	r1, [r3, #12]
 80049ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	ea40 0301 	orr.w	r3, r0, r1
 80049f8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80049fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049fe:	689a      	ldr	r2, [r3, #8]
 8004a00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a04:	691b      	ldr	r3, [r3, #16]
 8004a06:	431a      	orrs	r2, r3
 8004a08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a0c:	695b      	ldr	r3, [r3, #20]
 8004a0e:	431a      	orrs	r2, r3
 8004a10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a14:	69db      	ldr	r3, [r3, #28]
 8004a16:	4313      	orrs	r3, r2
 8004a18:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004a1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	68db      	ldr	r3, [r3, #12]
 8004a24:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004a28:	f021 010c 	bic.w	r1, r1, #12
 8004a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004a36:	430b      	orrs	r3, r1
 8004a38:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004a3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	695b      	ldr	r3, [r3, #20]
 8004a42:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004a46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a4a:	6999      	ldr	r1, [r3, #24]
 8004a4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	ea40 0301 	orr.w	r3, r0, r1
 8004a56:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	4b8f      	ldr	r3, [pc, #572]	; (8004c9c <UART_SetConfig+0x2cc>)
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d005      	beq.n	8004a70 <UART_SetConfig+0xa0>
 8004a64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a68:	681a      	ldr	r2, [r3, #0]
 8004a6a:	4b8d      	ldr	r3, [pc, #564]	; (8004ca0 <UART_SetConfig+0x2d0>)
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d104      	bne.n	8004a7a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004a70:	f7fe fb14 	bl	800309c <HAL_RCC_GetPCLK2Freq>
 8004a74:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004a78:	e003      	b.n	8004a82 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004a7a:	f7fe fafb 	bl	8003074 <HAL_RCC_GetPCLK1Freq>
 8004a7e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a86:	69db      	ldr	r3, [r3, #28]
 8004a88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a8c:	f040 810c 	bne.w	8004ca8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004a90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a94:	2200      	movs	r2, #0
 8004a96:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004a9a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004a9e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004aa2:	4622      	mov	r2, r4
 8004aa4:	462b      	mov	r3, r5
 8004aa6:	1891      	adds	r1, r2, r2
 8004aa8:	65b9      	str	r1, [r7, #88]	; 0x58
 8004aaa:	415b      	adcs	r3, r3
 8004aac:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004aae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004ab2:	4621      	mov	r1, r4
 8004ab4:	eb12 0801 	adds.w	r8, r2, r1
 8004ab8:	4629      	mov	r1, r5
 8004aba:	eb43 0901 	adc.w	r9, r3, r1
 8004abe:	f04f 0200 	mov.w	r2, #0
 8004ac2:	f04f 0300 	mov.w	r3, #0
 8004ac6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004aca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ace:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ad2:	4690      	mov	r8, r2
 8004ad4:	4699      	mov	r9, r3
 8004ad6:	4623      	mov	r3, r4
 8004ad8:	eb18 0303 	adds.w	r3, r8, r3
 8004adc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004ae0:	462b      	mov	r3, r5
 8004ae2:	eb49 0303 	adc.w	r3, r9, r3
 8004ae6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004aea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	2200      	movs	r2, #0
 8004af2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004af6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004afa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004afe:	460b      	mov	r3, r1
 8004b00:	18db      	adds	r3, r3, r3
 8004b02:	653b      	str	r3, [r7, #80]	; 0x50
 8004b04:	4613      	mov	r3, r2
 8004b06:	eb42 0303 	adc.w	r3, r2, r3
 8004b0a:	657b      	str	r3, [r7, #84]	; 0x54
 8004b0c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004b10:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004b14:	f7fb fbb4 	bl	8000280 <__aeabi_uldivmod>
 8004b18:	4602      	mov	r2, r0
 8004b1a:	460b      	mov	r3, r1
 8004b1c:	4b61      	ldr	r3, [pc, #388]	; (8004ca4 <UART_SetConfig+0x2d4>)
 8004b1e:	fba3 2302 	umull	r2, r3, r3, r2
 8004b22:	095b      	lsrs	r3, r3, #5
 8004b24:	011c      	lsls	r4, r3, #4
 8004b26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004b30:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004b34:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004b38:	4642      	mov	r2, r8
 8004b3a:	464b      	mov	r3, r9
 8004b3c:	1891      	adds	r1, r2, r2
 8004b3e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004b40:	415b      	adcs	r3, r3
 8004b42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b44:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004b48:	4641      	mov	r1, r8
 8004b4a:	eb12 0a01 	adds.w	sl, r2, r1
 8004b4e:	4649      	mov	r1, r9
 8004b50:	eb43 0b01 	adc.w	fp, r3, r1
 8004b54:	f04f 0200 	mov.w	r2, #0
 8004b58:	f04f 0300 	mov.w	r3, #0
 8004b5c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004b60:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004b64:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b68:	4692      	mov	sl, r2
 8004b6a:	469b      	mov	fp, r3
 8004b6c:	4643      	mov	r3, r8
 8004b6e:	eb1a 0303 	adds.w	r3, sl, r3
 8004b72:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004b76:	464b      	mov	r3, r9
 8004b78:	eb4b 0303 	adc.w	r3, fp, r3
 8004b7c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	2200      	movs	r2, #0
 8004b88:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004b8c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004b90:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004b94:	460b      	mov	r3, r1
 8004b96:	18db      	adds	r3, r3, r3
 8004b98:	643b      	str	r3, [r7, #64]	; 0x40
 8004b9a:	4613      	mov	r3, r2
 8004b9c:	eb42 0303 	adc.w	r3, r2, r3
 8004ba0:	647b      	str	r3, [r7, #68]	; 0x44
 8004ba2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004ba6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004baa:	f7fb fb69 	bl	8000280 <__aeabi_uldivmod>
 8004bae:	4602      	mov	r2, r0
 8004bb0:	460b      	mov	r3, r1
 8004bb2:	4611      	mov	r1, r2
 8004bb4:	4b3b      	ldr	r3, [pc, #236]	; (8004ca4 <UART_SetConfig+0x2d4>)
 8004bb6:	fba3 2301 	umull	r2, r3, r3, r1
 8004bba:	095b      	lsrs	r3, r3, #5
 8004bbc:	2264      	movs	r2, #100	; 0x64
 8004bbe:	fb02 f303 	mul.w	r3, r2, r3
 8004bc2:	1acb      	subs	r3, r1, r3
 8004bc4:	00db      	lsls	r3, r3, #3
 8004bc6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004bca:	4b36      	ldr	r3, [pc, #216]	; (8004ca4 <UART_SetConfig+0x2d4>)
 8004bcc:	fba3 2302 	umull	r2, r3, r3, r2
 8004bd0:	095b      	lsrs	r3, r3, #5
 8004bd2:	005b      	lsls	r3, r3, #1
 8004bd4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004bd8:	441c      	add	r4, r3
 8004bda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004bde:	2200      	movs	r2, #0
 8004be0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004be4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004be8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004bec:	4642      	mov	r2, r8
 8004bee:	464b      	mov	r3, r9
 8004bf0:	1891      	adds	r1, r2, r2
 8004bf2:	63b9      	str	r1, [r7, #56]	; 0x38
 8004bf4:	415b      	adcs	r3, r3
 8004bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004bf8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004bfc:	4641      	mov	r1, r8
 8004bfe:	1851      	adds	r1, r2, r1
 8004c00:	6339      	str	r1, [r7, #48]	; 0x30
 8004c02:	4649      	mov	r1, r9
 8004c04:	414b      	adcs	r3, r1
 8004c06:	637b      	str	r3, [r7, #52]	; 0x34
 8004c08:	f04f 0200 	mov.w	r2, #0
 8004c0c:	f04f 0300 	mov.w	r3, #0
 8004c10:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004c14:	4659      	mov	r1, fp
 8004c16:	00cb      	lsls	r3, r1, #3
 8004c18:	4651      	mov	r1, sl
 8004c1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c1e:	4651      	mov	r1, sl
 8004c20:	00ca      	lsls	r2, r1, #3
 8004c22:	4610      	mov	r0, r2
 8004c24:	4619      	mov	r1, r3
 8004c26:	4603      	mov	r3, r0
 8004c28:	4642      	mov	r2, r8
 8004c2a:	189b      	adds	r3, r3, r2
 8004c2c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004c30:	464b      	mov	r3, r9
 8004c32:	460a      	mov	r2, r1
 8004c34:	eb42 0303 	adc.w	r3, r2, r3
 8004c38:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004c3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	2200      	movs	r2, #0
 8004c44:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004c48:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004c4c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004c50:	460b      	mov	r3, r1
 8004c52:	18db      	adds	r3, r3, r3
 8004c54:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c56:	4613      	mov	r3, r2
 8004c58:	eb42 0303 	adc.w	r3, r2, r3
 8004c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c5e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004c62:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004c66:	f7fb fb0b 	bl	8000280 <__aeabi_uldivmod>
 8004c6a:	4602      	mov	r2, r0
 8004c6c:	460b      	mov	r3, r1
 8004c6e:	4b0d      	ldr	r3, [pc, #52]	; (8004ca4 <UART_SetConfig+0x2d4>)
 8004c70:	fba3 1302 	umull	r1, r3, r3, r2
 8004c74:	095b      	lsrs	r3, r3, #5
 8004c76:	2164      	movs	r1, #100	; 0x64
 8004c78:	fb01 f303 	mul.w	r3, r1, r3
 8004c7c:	1ad3      	subs	r3, r2, r3
 8004c7e:	00db      	lsls	r3, r3, #3
 8004c80:	3332      	adds	r3, #50	; 0x32
 8004c82:	4a08      	ldr	r2, [pc, #32]	; (8004ca4 <UART_SetConfig+0x2d4>)
 8004c84:	fba2 2303 	umull	r2, r3, r2, r3
 8004c88:	095b      	lsrs	r3, r3, #5
 8004c8a:	f003 0207 	and.w	r2, r3, #7
 8004c8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4422      	add	r2, r4
 8004c96:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004c98:	e105      	b.n	8004ea6 <UART_SetConfig+0x4d6>
 8004c9a:	bf00      	nop
 8004c9c:	40011000 	.word	0x40011000
 8004ca0:	40011400 	.word	0x40011400
 8004ca4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ca8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004cac:	2200      	movs	r2, #0
 8004cae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004cb2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004cb6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004cba:	4642      	mov	r2, r8
 8004cbc:	464b      	mov	r3, r9
 8004cbe:	1891      	adds	r1, r2, r2
 8004cc0:	6239      	str	r1, [r7, #32]
 8004cc2:	415b      	adcs	r3, r3
 8004cc4:	627b      	str	r3, [r7, #36]	; 0x24
 8004cc6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004cca:	4641      	mov	r1, r8
 8004ccc:	1854      	adds	r4, r2, r1
 8004cce:	4649      	mov	r1, r9
 8004cd0:	eb43 0501 	adc.w	r5, r3, r1
 8004cd4:	f04f 0200 	mov.w	r2, #0
 8004cd8:	f04f 0300 	mov.w	r3, #0
 8004cdc:	00eb      	lsls	r3, r5, #3
 8004cde:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ce2:	00e2      	lsls	r2, r4, #3
 8004ce4:	4614      	mov	r4, r2
 8004ce6:	461d      	mov	r5, r3
 8004ce8:	4643      	mov	r3, r8
 8004cea:	18e3      	adds	r3, r4, r3
 8004cec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004cf0:	464b      	mov	r3, r9
 8004cf2:	eb45 0303 	adc.w	r3, r5, r3
 8004cf6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004cfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	2200      	movs	r2, #0
 8004d02:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004d06:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004d0a:	f04f 0200 	mov.w	r2, #0
 8004d0e:	f04f 0300 	mov.w	r3, #0
 8004d12:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004d16:	4629      	mov	r1, r5
 8004d18:	008b      	lsls	r3, r1, #2
 8004d1a:	4621      	mov	r1, r4
 8004d1c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d20:	4621      	mov	r1, r4
 8004d22:	008a      	lsls	r2, r1, #2
 8004d24:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004d28:	f7fb faaa 	bl	8000280 <__aeabi_uldivmod>
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	460b      	mov	r3, r1
 8004d30:	4b60      	ldr	r3, [pc, #384]	; (8004eb4 <UART_SetConfig+0x4e4>)
 8004d32:	fba3 2302 	umull	r2, r3, r3, r2
 8004d36:	095b      	lsrs	r3, r3, #5
 8004d38:	011c      	lsls	r4, r3, #4
 8004d3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d3e:	2200      	movs	r2, #0
 8004d40:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004d44:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004d48:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004d4c:	4642      	mov	r2, r8
 8004d4e:	464b      	mov	r3, r9
 8004d50:	1891      	adds	r1, r2, r2
 8004d52:	61b9      	str	r1, [r7, #24]
 8004d54:	415b      	adcs	r3, r3
 8004d56:	61fb      	str	r3, [r7, #28]
 8004d58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d5c:	4641      	mov	r1, r8
 8004d5e:	1851      	adds	r1, r2, r1
 8004d60:	6139      	str	r1, [r7, #16]
 8004d62:	4649      	mov	r1, r9
 8004d64:	414b      	adcs	r3, r1
 8004d66:	617b      	str	r3, [r7, #20]
 8004d68:	f04f 0200 	mov.w	r2, #0
 8004d6c:	f04f 0300 	mov.w	r3, #0
 8004d70:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d74:	4659      	mov	r1, fp
 8004d76:	00cb      	lsls	r3, r1, #3
 8004d78:	4651      	mov	r1, sl
 8004d7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d7e:	4651      	mov	r1, sl
 8004d80:	00ca      	lsls	r2, r1, #3
 8004d82:	4610      	mov	r0, r2
 8004d84:	4619      	mov	r1, r3
 8004d86:	4603      	mov	r3, r0
 8004d88:	4642      	mov	r2, r8
 8004d8a:	189b      	adds	r3, r3, r2
 8004d8c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004d90:	464b      	mov	r3, r9
 8004d92:	460a      	mov	r2, r1
 8004d94:	eb42 0303 	adc.w	r3, r2, r3
 8004d98:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	2200      	movs	r2, #0
 8004da4:	67bb      	str	r3, [r7, #120]	; 0x78
 8004da6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004da8:	f04f 0200 	mov.w	r2, #0
 8004dac:	f04f 0300 	mov.w	r3, #0
 8004db0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004db4:	4649      	mov	r1, r9
 8004db6:	008b      	lsls	r3, r1, #2
 8004db8:	4641      	mov	r1, r8
 8004dba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004dbe:	4641      	mov	r1, r8
 8004dc0:	008a      	lsls	r2, r1, #2
 8004dc2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004dc6:	f7fb fa5b 	bl	8000280 <__aeabi_uldivmod>
 8004dca:	4602      	mov	r2, r0
 8004dcc:	460b      	mov	r3, r1
 8004dce:	4b39      	ldr	r3, [pc, #228]	; (8004eb4 <UART_SetConfig+0x4e4>)
 8004dd0:	fba3 1302 	umull	r1, r3, r3, r2
 8004dd4:	095b      	lsrs	r3, r3, #5
 8004dd6:	2164      	movs	r1, #100	; 0x64
 8004dd8:	fb01 f303 	mul.w	r3, r1, r3
 8004ddc:	1ad3      	subs	r3, r2, r3
 8004dde:	011b      	lsls	r3, r3, #4
 8004de0:	3332      	adds	r3, #50	; 0x32
 8004de2:	4a34      	ldr	r2, [pc, #208]	; (8004eb4 <UART_SetConfig+0x4e4>)
 8004de4:	fba2 2303 	umull	r2, r3, r2, r3
 8004de8:	095b      	lsrs	r3, r3, #5
 8004dea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004dee:	441c      	add	r4, r3
 8004df0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004df4:	2200      	movs	r2, #0
 8004df6:	673b      	str	r3, [r7, #112]	; 0x70
 8004df8:	677a      	str	r2, [r7, #116]	; 0x74
 8004dfa:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004dfe:	4642      	mov	r2, r8
 8004e00:	464b      	mov	r3, r9
 8004e02:	1891      	adds	r1, r2, r2
 8004e04:	60b9      	str	r1, [r7, #8]
 8004e06:	415b      	adcs	r3, r3
 8004e08:	60fb      	str	r3, [r7, #12]
 8004e0a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004e0e:	4641      	mov	r1, r8
 8004e10:	1851      	adds	r1, r2, r1
 8004e12:	6039      	str	r1, [r7, #0]
 8004e14:	4649      	mov	r1, r9
 8004e16:	414b      	adcs	r3, r1
 8004e18:	607b      	str	r3, [r7, #4]
 8004e1a:	f04f 0200 	mov.w	r2, #0
 8004e1e:	f04f 0300 	mov.w	r3, #0
 8004e22:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004e26:	4659      	mov	r1, fp
 8004e28:	00cb      	lsls	r3, r1, #3
 8004e2a:	4651      	mov	r1, sl
 8004e2c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e30:	4651      	mov	r1, sl
 8004e32:	00ca      	lsls	r2, r1, #3
 8004e34:	4610      	mov	r0, r2
 8004e36:	4619      	mov	r1, r3
 8004e38:	4603      	mov	r3, r0
 8004e3a:	4642      	mov	r2, r8
 8004e3c:	189b      	adds	r3, r3, r2
 8004e3e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e40:	464b      	mov	r3, r9
 8004e42:	460a      	mov	r2, r1
 8004e44:	eb42 0303 	adc.w	r3, r2, r3
 8004e48:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004e4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	2200      	movs	r2, #0
 8004e52:	663b      	str	r3, [r7, #96]	; 0x60
 8004e54:	667a      	str	r2, [r7, #100]	; 0x64
 8004e56:	f04f 0200 	mov.w	r2, #0
 8004e5a:	f04f 0300 	mov.w	r3, #0
 8004e5e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004e62:	4649      	mov	r1, r9
 8004e64:	008b      	lsls	r3, r1, #2
 8004e66:	4641      	mov	r1, r8
 8004e68:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e6c:	4641      	mov	r1, r8
 8004e6e:	008a      	lsls	r2, r1, #2
 8004e70:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004e74:	f7fb fa04 	bl	8000280 <__aeabi_uldivmod>
 8004e78:	4602      	mov	r2, r0
 8004e7a:	460b      	mov	r3, r1
 8004e7c:	4b0d      	ldr	r3, [pc, #52]	; (8004eb4 <UART_SetConfig+0x4e4>)
 8004e7e:	fba3 1302 	umull	r1, r3, r3, r2
 8004e82:	095b      	lsrs	r3, r3, #5
 8004e84:	2164      	movs	r1, #100	; 0x64
 8004e86:	fb01 f303 	mul.w	r3, r1, r3
 8004e8a:	1ad3      	subs	r3, r2, r3
 8004e8c:	011b      	lsls	r3, r3, #4
 8004e8e:	3332      	adds	r3, #50	; 0x32
 8004e90:	4a08      	ldr	r2, [pc, #32]	; (8004eb4 <UART_SetConfig+0x4e4>)
 8004e92:	fba2 2303 	umull	r2, r3, r2, r3
 8004e96:	095b      	lsrs	r3, r3, #5
 8004e98:	f003 020f 	and.w	r2, r3, #15
 8004e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4422      	add	r2, r4
 8004ea4:	609a      	str	r2, [r3, #8]
}
 8004ea6:	bf00      	nop
 8004ea8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004eac:	46bd      	mov	sp, r7
 8004eae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004eb2:	bf00      	nop
 8004eb4:	51eb851f 	.word	0x51eb851f

08004eb8 <__errno>:
 8004eb8:	4b01      	ldr	r3, [pc, #4]	; (8004ec0 <__errno+0x8>)
 8004eba:	6818      	ldr	r0, [r3, #0]
 8004ebc:	4770      	bx	lr
 8004ebe:	bf00      	nop
 8004ec0:	200001c4 	.word	0x200001c4

08004ec4 <__libc_init_array>:
 8004ec4:	b570      	push	{r4, r5, r6, lr}
 8004ec6:	4d0d      	ldr	r5, [pc, #52]	; (8004efc <__libc_init_array+0x38>)
 8004ec8:	4c0d      	ldr	r4, [pc, #52]	; (8004f00 <__libc_init_array+0x3c>)
 8004eca:	1b64      	subs	r4, r4, r5
 8004ecc:	10a4      	asrs	r4, r4, #2
 8004ece:	2600      	movs	r6, #0
 8004ed0:	42a6      	cmp	r6, r4
 8004ed2:	d109      	bne.n	8004ee8 <__libc_init_array+0x24>
 8004ed4:	4d0b      	ldr	r5, [pc, #44]	; (8004f04 <__libc_init_array+0x40>)
 8004ed6:	4c0c      	ldr	r4, [pc, #48]	; (8004f08 <__libc_init_array+0x44>)
 8004ed8:	f000 fe36 	bl	8005b48 <_init>
 8004edc:	1b64      	subs	r4, r4, r5
 8004ede:	10a4      	asrs	r4, r4, #2
 8004ee0:	2600      	movs	r6, #0
 8004ee2:	42a6      	cmp	r6, r4
 8004ee4:	d105      	bne.n	8004ef2 <__libc_init_array+0x2e>
 8004ee6:	bd70      	pop	{r4, r5, r6, pc}
 8004ee8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004eec:	4798      	blx	r3
 8004eee:	3601      	adds	r6, #1
 8004ef0:	e7ee      	b.n	8004ed0 <__libc_init_array+0xc>
 8004ef2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ef6:	4798      	blx	r3
 8004ef8:	3601      	adds	r6, #1
 8004efa:	e7f2      	b.n	8004ee2 <__libc_init_array+0x1e>
 8004efc:	08005e20 	.word	0x08005e20
 8004f00:	08005e20 	.word	0x08005e20
 8004f04:	08005e20 	.word	0x08005e20
 8004f08:	08005e24 	.word	0x08005e24

08004f0c <memset>:
 8004f0c:	4402      	add	r2, r0
 8004f0e:	4603      	mov	r3, r0
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d100      	bne.n	8004f16 <memset+0xa>
 8004f14:	4770      	bx	lr
 8004f16:	f803 1b01 	strb.w	r1, [r3], #1
 8004f1a:	e7f9      	b.n	8004f10 <memset+0x4>

08004f1c <siscanf>:
 8004f1c:	b40e      	push	{r1, r2, r3}
 8004f1e:	b510      	push	{r4, lr}
 8004f20:	b09f      	sub	sp, #124	; 0x7c
 8004f22:	ac21      	add	r4, sp, #132	; 0x84
 8004f24:	f44f 7101 	mov.w	r1, #516	; 0x204
 8004f28:	f854 2b04 	ldr.w	r2, [r4], #4
 8004f2c:	9201      	str	r2, [sp, #4]
 8004f2e:	f8ad 101c 	strh.w	r1, [sp, #28]
 8004f32:	9004      	str	r0, [sp, #16]
 8004f34:	9008      	str	r0, [sp, #32]
 8004f36:	f7fb f94b 	bl	80001d0 <strlen>
 8004f3a:	4b0c      	ldr	r3, [pc, #48]	; (8004f6c <siscanf+0x50>)
 8004f3c:	9005      	str	r0, [sp, #20]
 8004f3e:	9009      	str	r0, [sp, #36]	; 0x24
 8004f40:	930d      	str	r3, [sp, #52]	; 0x34
 8004f42:	480b      	ldr	r0, [pc, #44]	; (8004f70 <siscanf+0x54>)
 8004f44:	9a01      	ldr	r2, [sp, #4]
 8004f46:	6800      	ldr	r0, [r0, #0]
 8004f48:	9403      	str	r4, [sp, #12]
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	9311      	str	r3, [sp, #68]	; 0x44
 8004f4e:	9316      	str	r3, [sp, #88]	; 0x58
 8004f50:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004f54:	f8ad 301e 	strh.w	r3, [sp, #30]
 8004f58:	a904      	add	r1, sp, #16
 8004f5a:	4623      	mov	r3, r4
 8004f5c:	f000 f87c 	bl	8005058 <__ssvfiscanf_r>
 8004f60:	b01f      	add	sp, #124	; 0x7c
 8004f62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f66:	b003      	add	sp, #12
 8004f68:	4770      	bx	lr
 8004f6a:	bf00      	nop
 8004f6c:	08004f75 	.word	0x08004f75
 8004f70:	200001c4 	.word	0x200001c4

08004f74 <__seofread>:
 8004f74:	2000      	movs	r0, #0
 8004f76:	4770      	bx	lr

08004f78 <strstr>:
 8004f78:	780a      	ldrb	r2, [r1, #0]
 8004f7a:	b570      	push	{r4, r5, r6, lr}
 8004f7c:	b96a      	cbnz	r2, 8004f9a <strstr+0x22>
 8004f7e:	bd70      	pop	{r4, r5, r6, pc}
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d109      	bne.n	8004f98 <strstr+0x20>
 8004f84:	460c      	mov	r4, r1
 8004f86:	4605      	mov	r5, r0
 8004f88:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d0f6      	beq.n	8004f7e <strstr+0x6>
 8004f90:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8004f94:	429e      	cmp	r6, r3
 8004f96:	d0f7      	beq.n	8004f88 <strstr+0x10>
 8004f98:	3001      	adds	r0, #1
 8004f9a:	7803      	ldrb	r3, [r0, #0]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d1ef      	bne.n	8004f80 <strstr+0x8>
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	e7ec      	b.n	8004f7e <strstr+0x6>

08004fa4 <_sungetc_r>:
 8004fa4:	b538      	push	{r3, r4, r5, lr}
 8004fa6:	1c4b      	adds	r3, r1, #1
 8004fa8:	4614      	mov	r4, r2
 8004faa:	d103      	bne.n	8004fb4 <_sungetc_r+0x10>
 8004fac:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004fb0:	4628      	mov	r0, r5
 8004fb2:	bd38      	pop	{r3, r4, r5, pc}
 8004fb4:	8993      	ldrh	r3, [r2, #12]
 8004fb6:	f023 0320 	bic.w	r3, r3, #32
 8004fba:	8193      	strh	r3, [r2, #12]
 8004fbc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004fbe:	6852      	ldr	r2, [r2, #4]
 8004fc0:	b2cd      	uxtb	r5, r1
 8004fc2:	b18b      	cbz	r3, 8004fe8 <_sungetc_r+0x44>
 8004fc4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	dd08      	ble.n	8004fdc <_sungetc_r+0x38>
 8004fca:	6823      	ldr	r3, [r4, #0]
 8004fcc:	1e5a      	subs	r2, r3, #1
 8004fce:	6022      	str	r2, [r4, #0]
 8004fd0:	f803 5c01 	strb.w	r5, [r3, #-1]
 8004fd4:	6863      	ldr	r3, [r4, #4]
 8004fd6:	3301      	adds	r3, #1
 8004fd8:	6063      	str	r3, [r4, #4]
 8004fda:	e7e9      	b.n	8004fb0 <_sungetc_r+0xc>
 8004fdc:	4621      	mov	r1, r4
 8004fde:	f000 fc35 	bl	800584c <__submore>
 8004fe2:	2800      	cmp	r0, #0
 8004fe4:	d0f1      	beq.n	8004fca <_sungetc_r+0x26>
 8004fe6:	e7e1      	b.n	8004fac <_sungetc_r+0x8>
 8004fe8:	6921      	ldr	r1, [r4, #16]
 8004fea:	6823      	ldr	r3, [r4, #0]
 8004fec:	b151      	cbz	r1, 8005004 <_sungetc_r+0x60>
 8004fee:	4299      	cmp	r1, r3
 8004ff0:	d208      	bcs.n	8005004 <_sungetc_r+0x60>
 8004ff2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8004ff6:	42a9      	cmp	r1, r5
 8004ff8:	d104      	bne.n	8005004 <_sungetc_r+0x60>
 8004ffa:	3b01      	subs	r3, #1
 8004ffc:	3201      	adds	r2, #1
 8004ffe:	6023      	str	r3, [r4, #0]
 8005000:	6062      	str	r2, [r4, #4]
 8005002:	e7d5      	b.n	8004fb0 <_sungetc_r+0xc>
 8005004:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8005008:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800500c:	6363      	str	r3, [r4, #52]	; 0x34
 800500e:	2303      	movs	r3, #3
 8005010:	63a3      	str	r3, [r4, #56]	; 0x38
 8005012:	4623      	mov	r3, r4
 8005014:	f803 5f46 	strb.w	r5, [r3, #70]!
 8005018:	6023      	str	r3, [r4, #0]
 800501a:	2301      	movs	r3, #1
 800501c:	e7dc      	b.n	8004fd8 <_sungetc_r+0x34>

0800501e <__ssrefill_r>:
 800501e:	b510      	push	{r4, lr}
 8005020:	460c      	mov	r4, r1
 8005022:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8005024:	b169      	cbz	r1, 8005042 <__ssrefill_r+0x24>
 8005026:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800502a:	4299      	cmp	r1, r3
 800502c:	d001      	beq.n	8005032 <__ssrefill_r+0x14>
 800502e:	f000 fc57 	bl	80058e0 <_free_r>
 8005032:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005034:	6063      	str	r3, [r4, #4]
 8005036:	2000      	movs	r0, #0
 8005038:	6360      	str	r0, [r4, #52]	; 0x34
 800503a:	b113      	cbz	r3, 8005042 <__ssrefill_r+0x24>
 800503c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800503e:	6023      	str	r3, [r4, #0]
 8005040:	bd10      	pop	{r4, pc}
 8005042:	6923      	ldr	r3, [r4, #16]
 8005044:	6023      	str	r3, [r4, #0]
 8005046:	2300      	movs	r3, #0
 8005048:	6063      	str	r3, [r4, #4]
 800504a:	89a3      	ldrh	r3, [r4, #12]
 800504c:	f043 0320 	orr.w	r3, r3, #32
 8005050:	81a3      	strh	r3, [r4, #12]
 8005052:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005056:	e7f3      	b.n	8005040 <__ssrefill_r+0x22>

08005058 <__ssvfiscanf_r>:
 8005058:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800505c:	460c      	mov	r4, r1
 800505e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8005062:	2100      	movs	r1, #0
 8005064:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8005068:	49a6      	ldr	r1, [pc, #664]	; (8005304 <__ssvfiscanf_r+0x2ac>)
 800506a:	91a0      	str	r1, [sp, #640]	; 0x280
 800506c:	f10d 0804 	add.w	r8, sp, #4
 8005070:	49a5      	ldr	r1, [pc, #660]	; (8005308 <__ssvfiscanf_r+0x2b0>)
 8005072:	4fa6      	ldr	r7, [pc, #664]	; (800530c <__ssvfiscanf_r+0x2b4>)
 8005074:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8005310 <__ssvfiscanf_r+0x2b8>
 8005078:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800507c:	4606      	mov	r6, r0
 800507e:	91a1      	str	r1, [sp, #644]	; 0x284
 8005080:	9300      	str	r3, [sp, #0]
 8005082:	7813      	ldrb	r3, [r2, #0]
 8005084:	2b00      	cmp	r3, #0
 8005086:	f000 815a 	beq.w	800533e <__ssvfiscanf_r+0x2e6>
 800508a:	5dd9      	ldrb	r1, [r3, r7]
 800508c:	f011 0108 	ands.w	r1, r1, #8
 8005090:	f102 0501 	add.w	r5, r2, #1
 8005094:	d019      	beq.n	80050ca <__ssvfiscanf_r+0x72>
 8005096:	6863      	ldr	r3, [r4, #4]
 8005098:	2b00      	cmp	r3, #0
 800509a:	dd0f      	ble.n	80050bc <__ssvfiscanf_r+0x64>
 800509c:	6823      	ldr	r3, [r4, #0]
 800509e:	781a      	ldrb	r2, [r3, #0]
 80050a0:	5cba      	ldrb	r2, [r7, r2]
 80050a2:	0712      	lsls	r2, r2, #28
 80050a4:	d401      	bmi.n	80050aa <__ssvfiscanf_r+0x52>
 80050a6:	462a      	mov	r2, r5
 80050a8:	e7eb      	b.n	8005082 <__ssvfiscanf_r+0x2a>
 80050aa:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80050ac:	3201      	adds	r2, #1
 80050ae:	9245      	str	r2, [sp, #276]	; 0x114
 80050b0:	6862      	ldr	r2, [r4, #4]
 80050b2:	3301      	adds	r3, #1
 80050b4:	3a01      	subs	r2, #1
 80050b6:	6062      	str	r2, [r4, #4]
 80050b8:	6023      	str	r3, [r4, #0]
 80050ba:	e7ec      	b.n	8005096 <__ssvfiscanf_r+0x3e>
 80050bc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80050be:	4621      	mov	r1, r4
 80050c0:	4630      	mov	r0, r6
 80050c2:	4798      	blx	r3
 80050c4:	2800      	cmp	r0, #0
 80050c6:	d0e9      	beq.n	800509c <__ssvfiscanf_r+0x44>
 80050c8:	e7ed      	b.n	80050a6 <__ssvfiscanf_r+0x4e>
 80050ca:	2b25      	cmp	r3, #37	; 0x25
 80050cc:	d012      	beq.n	80050f4 <__ssvfiscanf_r+0x9c>
 80050ce:	469a      	mov	sl, r3
 80050d0:	6863      	ldr	r3, [r4, #4]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	f340 8091 	ble.w	80051fa <__ssvfiscanf_r+0x1a2>
 80050d8:	6822      	ldr	r2, [r4, #0]
 80050da:	7813      	ldrb	r3, [r2, #0]
 80050dc:	4553      	cmp	r3, sl
 80050de:	f040 812e 	bne.w	800533e <__ssvfiscanf_r+0x2e6>
 80050e2:	6863      	ldr	r3, [r4, #4]
 80050e4:	3b01      	subs	r3, #1
 80050e6:	6063      	str	r3, [r4, #4]
 80050e8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80050ea:	3201      	adds	r2, #1
 80050ec:	3301      	adds	r3, #1
 80050ee:	6022      	str	r2, [r4, #0]
 80050f0:	9345      	str	r3, [sp, #276]	; 0x114
 80050f2:	e7d8      	b.n	80050a6 <__ssvfiscanf_r+0x4e>
 80050f4:	9141      	str	r1, [sp, #260]	; 0x104
 80050f6:	9143      	str	r1, [sp, #268]	; 0x10c
 80050f8:	7853      	ldrb	r3, [r2, #1]
 80050fa:	2b2a      	cmp	r3, #42	; 0x2a
 80050fc:	bf02      	ittt	eq
 80050fe:	2310      	moveq	r3, #16
 8005100:	1c95      	addeq	r5, r2, #2
 8005102:	9341      	streq	r3, [sp, #260]	; 0x104
 8005104:	220a      	movs	r2, #10
 8005106:	46aa      	mov	sl, r5
 8005108:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800510c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8005110:	2b09      	cmp	r3, #9
 8005112:	d91d      	bls.n	8005150 <__ssvfiscanf_r+0xf8>
 8005114:	487e      	ldr	r0, [pc, #504]	; (8005310 <__ssvfiscanf_r+0x2b8>)
 8005116:	2203      	movs	r2, #3
 8005118:	f7fb f862 	bl	80001e0 <memchr>
 800511c:	b140      	cbz	r0, 8005130 <__ssvfiscanf_r+0xd8>
 800511e:	2301      	movs	r3, #1
 8005120:	eba0 0009 	sub.w	r0, r0, r9
 8005124:	fa03 f000 	lsl.w	r0, r3, r0
 8005128:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800512a:	4318      	orrs	r0, r3
 800512c:	9041      	str	r0, [sp, #260]	; 0x104
 800512e:	4655      	mov	r5, sl
 8005130:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005134:	2b78      	cmp	r3, #120	; 0x78
 8005136:	d806      	bhi.n	8005146 <__ssvfiscanf_r+0xee>
 8005138:	2b57      	cmp	r3, #87	; 0x57
 800513a:	d810      	bhi.n	800515e <__ssvfiscanf_r+0x106>
 800513c:	2b25      	cmp	r3, #37	; 0x25
 800513e:	d0c6      	beq.n	80050ce <__ssvfiscanf_r+0x76>
 8005140:	d856      	bhi.n	80051f0 <__ssvfiscanf_r+0x198>
 8005142:	2b00      	cmp	r3, #0
 8005144:	d064      	beq.n	8005210 <__ssvfiscanf_r+0x1b8>
 8005146:	2303      	movs	r3, #3
 8005148:	9347      	str	r3, [sp, #284]	; 0x11c
 800514a:	230a      	movs	r3, #10
 800514c:	9342      	str	r3, [sp, #264]	; 0x108
 800514e:	e071      	b.n	8005234 <__ssvfiscanf_r+0x1dc>
 8005150:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8005152:	fb02 1103 	mla	r1, r2, r3, r1
 8005156:	3930      	subs	r1, #48	; 0x30
 8005158:	9143      	str	r1, [sp, #268]	; 0x10c
 800515a:	4655      	mov	r5, sl
 800515c:	e7d3      	b.n	8005106 <__ssvfiscanf_r+0xae>
 800515e:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8005162:	2a20      	cmp	r2, #32
 8005164:	d8ef      	bhi.n	8005146 <__ssvfiscanf_r+0xee>
 8005166:	a101      	add	r1, pc, #4	; (adr r1, 800516c <__ssvfiscanf_r+0x114>)
 8005168:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800516c:	0800521f 	.word	0x0800521f
 8005170:	08005147 	.word	0x08005147
 8005174:	08005147 	.word	0x08005147
 8005178:	0800527d 	.word	0x0800527d
 800517c:	08005147 	.word	0x08005147
 8005180:	08005147 	.word	0x08005147
 8005184:	08005147 	.word	0x08005147
 8005188:	08005147 	.word	0x08005147
 800518c:	08005147 	.word	0x08005147
 8005190:	08005147 	.word	0x08005147
 8005194:	08005147 	.word	0x08005147
 8005198:	08005293 	.word	0x08005293
 800519c:	08005269 	.word	0x08005269
 80051a0:	080051f7 	.word	0x080051f7
 80051a4:	080051f7 	.word	0x080051f7
 80051a8:	080051f7 	.word	0x080051f7
 80051ac:	08005147 	.word	0x08005147
 80051b0:	0800526d 	.word	0x0800526d
 80051b4:	08005147 	.word	0x08005147
 80051b8:	08005147 	.word	0x08005147
 80051bc:	08005147 	.word	0x08005147
 80051c0:	08005147 	.word	0x08005147
 80051c4:	080052a3 	.word	0x080052a3
 80051c8:	08005275 	.word	0x08005275
 80051cc:	08005217 	.word	0x08005217
 80051d0:	08005147 	.word	0x08005147
 80051d4:	08005147 	.word	0x08005147
 80051d8:	0800529f 	.word	0x0800529f
 80051dc:	08005147 	.word	0x08005147
 80051e0:	08005269 	.word	0x08005269
 80051e4:	08005147 	.word	0x08005147
 80051e8:	08005147 	.word	0x08005147
 80051ec:	0800521f 	.word	0x0800521f
 80051f0:	3b45      	subs	r3, #69	; 0x45
 80051f2:	2b02      	cmp	r3, #2
 80051f4:	d8a7      	bhi.n	8005146 <__ssvfiscanf_r+0xee>
 80051f6:	2305      	movs	r3, #5
 80051f8:	e01b      	b.n	8005232 <__ssvfiscanf_r+0x1da>
 80051fa:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80051fc:	4621      	mov	r1, r4
 80051fe:	4630      	mov	r0, r6
 8005200:	4798      	blx	r3
 8005202:	2800      	cmp	r0, #0
 8005204:	f43f af68 	beq.w	80050d8 <__ssvfiscanf_r+0x80>
 8005208:	9844      	ldr	r0, [sp, #272]	; 0x110
 800520a:	2800      	cmp	r0, #0
 800520c:	f040 808d 	bne.w	800532a <__ssvfiscanf_r+0x2d2>
 8005210:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005214:	e08f      	b.n	8005336 <__ssvfiscanf_r+0x2de>
 8005216:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8005218:	f042 0220 	orr.w	r2, r2, #32
 800521c:	9241      	str	r2, [sp, #260]	; 0x104
 800521e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8005220:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005224:	9241      	str	r2, [sp, #260]	; 0x104
 8005226:	2210      	movs	r2, #16
 8005228:	2b6f      	cmp	r3, #111	; 0x6f
 800522a:	9242      	str	r2, [sp, #264]	; 0x108
 800522c:	bf34      	ite	cc
 800522e:	2303      	movcc	r3, #3
 8005230:	2304      	movcs	r3, #4
 8005232:	9347      	str	r3, [sp, #284]	; 0x11c
 8005234:	6863      	ldr	r3, [r4, #4]
 8005236:	2b00      	cmp	r3, #0
 8005238:	dd42      	ble.n	80052c0 <__ssvfiscanf_r+0x268>
 800523a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800523c:	0659      	lsls	r1, r3, #25
 800523e:	d404      	bmi.n	800524a <__ssvfiscanf_r+0x1f2>
 8005240:	6823      	ldr	r3, [r4, #0]
 8005242:	781a      	ldrb	r2, [r3, #0]
 8005244:	5cba      	ldrb	r2, [r7, r2]
 8005246:	0712      	lsls	r2, r2, #28
 8005248:	d441      	bmi.n	80052ce <__ssvfiscanf_r+0x276>
 800524a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800524c:	2b02      	cmp	r3, #2
 800524e:	dc50      	bgt.n	80052f2 <__ssvfiscanf_r+0x29a>
 8005250:	466b      	mov	r3, sp
 8005252:	4622      	mov	r2, r4
 8005254:	a941      	add	r1, sp, #260	; 0x104
 8005256:	4630      	mov	r0, r6
 8005258:	f000 f876 	bl	8005348 <_scanf_chars>
 800525c:	2801      	cmp	r0, #1
 800525e:	d06e      	beq.n	800533e <__ssvfiscanf_r+0x2e6>
 8005260:	2802      	cmp	r0, #2
 8005262:	f47f af20 	bne.w	80050a6 <__ssvfiscanf_r+0x4e>
 8005266:	e7cf      	b.n	8005208 <__ssvfiscanf_r+0x1b0>
 8005268:	220a      	movs	r2, #10
 800526a:	e7dd      	b.n	8005228 <__ssvfiscanf_r+0x1d0>
 800526c:	2300      	movs	r3, #0
 800526e:	9342      	str	r3, [sp, #264]	; 0x108
 8005270:	2303      	movs	r3, #3
 8005272:	e7de      	b.n	8005232 <__ssvfiscanf_r+0x1da>
 8005274:	2308      	movs	r3, #8
 8005276:	9342      	str	r3, [sp, #264]	; 0x108
 8005278:	2304      	movs	r3, #4
 800527a:	e7da      	b.n	8005232 <__ssvfiscanf_r+0x1da>
 800527c:	4629      	mov	r1, r5
 800527e:	4640      	mov	r0, r8
 8005280:	f000 f9b4 	bl	80055ec <__sccl>
 8005284:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005286:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800528a:	9341      	str	r3, [sp, #260]	; 0x104
 800528c:	4605      	mov	r5, r0
 800528e:	2301      	movs	r3, #1
 8005290:	e7cf      	b.n	8005232 <__ssvfiscanf_r+0x1da>
 8005292:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005294:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005298:	9341      	str	r3, [sp, #260]	; 0x104
 800529a:	2300      	movs	r3, #0
 800529c:	e7c9      	b.n	8005232 <__ssvfiscanf_r+0x1da>
 800529e:	2302      	movs	r3, #2
 80052a0:	e7c7      	b.n	8005232 <__ssvfiscanf_r+0x1da>
 80052a2:	9841      	ldr	r0, [sp, #260]	; 0x104
 80052a4:	06c3      	lsls	r3, r0, #27
 80052a6:	f53f aefe 	bmi.w	80050a6 <__ssvfiscanf_r+0x4e>
 80052aa:	9b00      	ldr	r3, [sp, #0]
 80052ac:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80052ae:	1d19      	adds	r1, r3, #4
 80052b0:	9100      	str	r1, [sp, #0]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f010 0f01 	tst.w	r0, #1
 80052b8:	bf14      	ite	ne
 80052ba:	801a      	strhne	r2, [r3, #0]
 80052bc:	601a      	streq	r2, [r3, #0]
 80052be:	e6f2      	b.n	80050a6 <__ssvfiscanf_r+0x4e>
 80052c0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80052c2:	4621      	mov	r1, r4
 80052c4:	4630      	mov	r0, r6
 80052c6:	4798      	blx	r3
 80052c8:	2800      	cmp	r0, #0
 80052ca:	d0b6      	beq.n	800523a <__ssvfiscanf_r+0x1e2>
 80052cc:	e79c      	b.n	8005208 <__ssvfiscanf_r+0x1b0>
 80052ce:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80052d0:	3201      	adds	r2, #1
 80052d2:	9245      	str	r2, [sp, #276]	; 0x114
 80052d4:	6862      	ldr	r2, [r4, #4]
 80052d6:	3a01      	subs	r2, #1
 80052d8:	2a00      	cmp	r2, #0
 80052da:	6062      	str	r2, [r4, #4]
 80052dc:	dd02      	ble.n	80052e4 <__ssvfiscanf_r+0x28c>
 80052de:	3301      	adds	r3, #1
 80052e0:	6023      	str	r3, [r4, #0]
 80052e2:	e7ad      	b.n	8005240 <__ssvfiscanf_r+0x1e8>
 80052e4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80052e6:	4621      	mov	r1, r4
 80052e8:	4630      	mov	r0, r6
 80052ea:	4798      	blx	r3
 80052ec:	2800      	cmp	r0, #0
 80052ee:	d0a7      	beq.n	8005240 <__ssvfiscanf_r+0x1e8>
 80052f0:	e78a      	b.n	8005208 <__ssvfiscanf_r+0x1b0>
 80052f2:	2b04      	cmp	r3, #4
 80052f4:	dc0e      	bgt.n	8005314 <__ssvfiscanf_r+0x2bc>
 80052f6:	466b      	mov	r3, sp
 80052f8:	4622      	mov	r2, r4
 80052fa:	a941      	add	r1, sp, #260	; 0x104
 80052fc:	4630      	mov	r0, r6
 80052fe:	f000 f87d 	bl	80053fc <_scanf_i>
 8005302:	e7ab      	b.n	800525c <__ssvfiscanf_r+0x204>
 8005304:	08004fa5 	.word	0x08004fa5
 8005308:	0800501f 	.word	0x0800501f
 800530c:	08005cb8 	.word	0x08005cb8
 8005310:	08005c98 	.word	0x08005c98
 8005314:	4b0b      	ldr	r3, [pc, #44]	; (8005344 <__ssvfiscanf_r+0x2ec>)
 8005316:	2b00      	cmp	r3, #0
 8005318:	f43f aec5 	beq.w	80050a6 <__ssvfiscanf_r+0x4e>
 800531c:	466b      	mov	r3, sp
 800531e:	4622      	mov	r2, r4
 8005320:	a941      	add	r1, sp, #260	; 0x104
 8005322:	4630      	mov	r0, r6
 8005324:	f3af 8000 	nop.w
 8005328:	e798      	b.n	800525c <__ssvfiscanf_r+0x204>
 800532a:	89a3      	ldrh	r3, [r4, #12]
 800532c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005330:	bf18      	it	ne
 8005332:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8005336:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800533a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800533e:	9844      	ldr	r0, [sp, #272]	; 0x110
 8005340:	e7f9      	b.n	8005336 <__ssvfiscanf_r+0x2de>
 8005342:	bf00      	nop
 8005344:	00000000 	.word	0x00000000

08005348 <_scanf_chars>:
 8005348:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800534c:	4615      	mov	r5, r2
 800534e:	688a      	ldr	r2, [r1, #8]
 8005350:	4680      	mov	r8, r0
 8005352:	460c      	mov	r4, r1
 8005354:	b932      	cbnz	r2, 8005364 <_scanf_chars+0x1c>
 8005356:	698a      	ldr	r2, [r1, #24]
 8005358:	2a00      	cmp	r2, #0
 800535a:	bf0c      	ite	eq
 800535c:	2201      	moveq	r2, #1
 800535e:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 8005362:	608a      	str	r2, [r1, #8]
 8005364:	6822      	ldr	r2, [r4, #0]
 8005366:	f8df 9090 	ldr.w	r9, [pc, #144]	; 80053f8 <_scanf_chars+0xb0>
 800536a:	06d1      	lsls	r1, r2, #27
 800536c:	bf5f      	itttt	pl
 800536e:	681a      	ldrpl	r2, [r3, #0]
 8005370:	1d11      	addpl	r1, r2, #4
 8005372:	6019      	strpl	r1, [r3, #0]
 8005374:	6816      	ldrpl	r6, [r2, #0]
 8005376:	2700      	movs	r7, #0
 8005378:	69a0      	ldr	r0, [r4, #24]
 800537a:	b188      	cbz	r0, 80053a0 <_scanf_chars+0x58>
 800537c:	2801      	cmp	r0, #1
 800537e:	d107      	bne.n	8005390 <_scanf_chars+0x48>
 8005380:	682a      	ldr	r2, [r5, #0]
 8005382:	7811      	ldrb	r1, [r2, #0]
 8005384:	6962      	ldr	r2, [r4, #20]
 8005386:	5c52      	ldrb	r2, [r2, r1]
 8005388:	b952      	cbnz	r2, 80053a0 <_scanf_chars+0x58>
 800538a:	2f00      	cmp	r7, #0
 800538c:	d031      	beq.n	80053f2 <_scanf_chars+0xaa>
 800538e:	e022      	b.n	80053d6 <_scanf_chars+0x8e>
 8005390:	2802      	cmp	r0, #2
 8005392:	d120      	bne.n	80053d6 <_scanf_chars+0x8e>
 8005394:	682b      	ldr	r3, [r5, #0]
 8005396:	781b      	ldrb	r3, [r3, #0]
 8005398:	f813 3009 	ldrb.w	r3, [r3, r9]
 800539c:	071b      	lsls	r3, r3, #28
 800539e:	d41a      	bmi.n	80053d6 <_scanf_chars+0x8e>
 80053a0:	6823      	ldr	r3, [r4, #0]
 80053a2:	06da      	lsls	r2, r3, #27
 80053a4:	bf5e      	ittt	pl
 80053a6:	682b      	ldrpl	r3, [r5, #0]
 80053a8:	781b      	ldrbpl	r3, [r3, #0]
 80053aa:	f806 3b01 	strbpl.w	r3, [r6], #1
 80053ae:	682a      	ldr	r2, [r5, #0]
 80053b0:	686b      	ldr	r3, [r5, #4]
 80053b2:	3201      	adds	r2, #1
 80053b4:	602a      	str	r2, [r5, #0]
 80053b6:	68a2      	ldr	r2, [r4, #8]
 80053b8:	3b01      	subs	r3, #1
 80053ba:	3a01      	subs	r2, #1
 80053bc:	606b      	str	r3, [r5, #4]
 80053be:	3701      	adds	r7, #1
 80053c0:	60a2      	str	r2, [r4, #8]
 80053c2:	b142      	cbz	r2, 80053d6 <_scanf_chars+0x8e>
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	dcd7      	bgt.n	8005378 <_scanf_chars+0x30>
 80053c8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80053cc:	4629      	mov	r1, r5
 80053ce:	4640      	mov	r0, r8
 80053d0:	4798      	blx	r3
 80053d2:	2800      	cmp	r0, #0
 80053d4:	d0d0      	beq.n	8005378 <_scanf_chars+0x30>
 80053d6:	6823      	ldr	r3, [r4, #0]
 80053d8:	f013 0310 	ands.w	r3, r3, #16
 80053dc:	d105      	bne.n	80053ea <_scanf_chars+0xa2>
 80053de:	68e2      	ldr	r2, [r4, #12]
 80053e0:	3201      	adds	r2, #1
 80053e2:	60e2      	str	r2, [r4, #12]
 80053e4:	69a2      	ldr	r2, [r4, #24]
 80053e6:	b102      	cbz	r2, 80053ea <_scanf_chars+0xa2>
 80053e8:	7033      	strb	r3, [r6, #0]
 80053ea:	6923      	ldr	r3, [r4, #16]
 80053ec:	443b      	add	r3, r7
 80053ee:	6123      	str	r3, [r4, #16]
 80053f0:	2000      	movs	r0, #0
 80053f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80053f6:	bf00      	nop
 80053f8:	08005cb8 	.word	0x08005cb8

080053fc <_scanf_i>:
 80053fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005400:	4698      	mov	r8, r3
 8005402:	4b76      	ldr	r3, [pc, #472]	; (80055dc <_scanf_i+0x1e0>)
 8005404:	460c      	mov	r4, r1
 8005406:	4682      	mov	sl, r0
 8005408:	4616      	mov	r6, r2
 800540a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800540e:	b087      	sub	sp, #28
 8005410:	ab03      	add	r3, sp, #12
 8005412:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005416:	4b72      	ldr	r3, [pc, #456]	; (80055e0 <_scanf_i+0x1e4>)
 8005418:	69a1      	ldr	r1, [r4, #24]
 800541a:	4a72      	ldr	r2, [pc, #456]	; (80055e4 <_scanf_i+0x1e8>)
 800541c:	2903      	cmp	r1, #3
 800541e:	bf18      	it	ne
 8005420:	461a      	movne	r2, r3
 8005422:	68a3      	ldr	r3, [r4, #8]
 8005424:	9201      	str	r2, [sp, #4]
 8005426:	1e5a      	subs	r2, r3, #1
 8005428:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800542c:	bf88      	it	hi
 800542e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005432:	4627      	mov	r7, r4
 8005434:	bf82      	ittt	hi
 8005436:	eb03 0905 	addhi.w	r9, r3, r5
 800543a:	f240 135d 	movwhi	r3, #349	; 0x15d
 800543e:	60a3      	strhi	r3, [r4, #8]
 8005440:	f857 3b1c 	ldr.w	r3, [r7], #28
 8005444:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8005448:	bf98      	it	ls
 800544a:	f04f 0900 	movls.w	r9, #0
 800544e:	6023      	str	r3, [r4, #0]
 8005450:	463d      	mov	r5, r7
 8005452:	f04f 0b00 	mov.w	fp, #0
 8005456:	6831      	ldr	r1, [r6, #0]
 8005458:	ab03      	add	r3, sp, #12
 800545a:	7809      	ldrb	r1, [r1, #0]
 800545c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8005460:	2202      	movs	r2, #2
 8005462:	f7fa febd 	bl	80001e0 <memchr>
 8005466:	b328      	cbz	r0, 80054b4 <_scanf_i+0xb8>
 8005468:	f1bb 0f01 	cmp.w	fp, #1
 800546c:	d159      	bne.n	8005522 <_scanf_i+0x126>
 800546e:	6862      	ldr	r2, [r4, #4]
 8005470:	b92a      	cbnz	r2, 800547e <_scanf_i+0x82>
 8005472:	6822      	ldr	r2, [r4, #0]
 8005474:	2308      	movs	r3, #8
 8005476:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800547a:	6063      	str	r3, [r4, #4]
 800547c:	6022      	str	r2, [r4, #0]
 800547e:	6822      	ldr	r2, [r4, #0]
 8005480:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8005484:	6022      	str	r2, [r4, #0]
 8005486:	68a2      	ldr	r2, [r4, #8]
 8005488:	1e51      	subs	r1, r2, #1
 800548a:	60a1      	str	r1, [r4, #8]
 800548c:	b192      	cbz	r2, 80054b4 <_scanf_i+0xb8>
 800548e:	6832      	ldr	r2, [r6, #0]
 8005490:	1c51      	adds	r1, r2, #1
 8005492:	6031      	str	r1, [r6, #0]
 8005494:	7812      	ldrb	r2, [r2, #0]
 8005496:	f805 2b01 	strb.w	r2, [r5], #1
 800549a:	6872      	ldr	r2, [r6, #4]
 800549c:	3a01      	subs	r2, #1
 800549e:	2a00      	cmp	r2, #0
 80054a0:	6072      	str	r2, [r6, #4]
 80054a2:	dc07      	bgt.n	80054b4 <_scanf_i+0xb8>
 80054a4:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80054a8:	4631      	mov	r1, r6
 80054aa:	4650      	mov	r0, sl
 80054ac:	4790      	blx	r2
 80054ae:	2800      	cmp	r0, #0
 80054b0:	f040 8085 	bne.w	80055be <_scanf_i+0x1c2>
 80054b4:	f10b 0b01 	add.w	fp, fp, #1
 80054b8:	f1bb 0f03 	cmp.w	fp, #3
 80054bc:	d1cb      	bne.n	8005456 <_scanf_i+0x5a>
 80054be:	6863      	ldr	r3, [r4, #4]
 80054c0:	b90b      	cbnz	r3, 80054c6 <_scanf_i+0xca>
 80054c2:	230a      	movs	r3, #10
 80054c4:	6063      	str	r3, [r4, #4]
 80054c6:	6863      	ldr	r3, [r4, #4]
 80054c8:	4947      	ldr	r1, [pc, #284]	; (80055e8 <_scanf_i+0x1ec>)
 80054ca:	6960      	ldr	r0, [r4, #20]
 80054cc:	1ac9      	subs	r1, r1, r3
 80054ce:	f000 f88d 	bl	80055ec <__sccl>
 80054d2:	f04f 0b00 	mov.w	fp, #0
 80054d6:	68a3      	ldr	r3, [r4, #8]
 80054d8:	6822      	ldr	r2, [r4, #0]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d03d      	beq.n	800555a <_scanf_i+0x15e>
 80054de:	6831      	ldr	r1, [r6, #0]
 80054e0:	6960      	ldr	r0, [r4, #20]
 80054e2:	f891 c000 	ldrb.w	ip, [r1]
 80054e6:	f810 000c 	ldrb.w	r0, [r0, ip]
 80054ea:	2800      	cmp	r0, #0
 80054ec:	d035      	beq.n	800555a <_scanf_i+0x15e>
 80054ee:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80054f2:	d124      	bne.n	800553e <_scanf_i+0x142>
 80054f4:	0510      	lsls	r0, r2, #20
 80054f6:	d522      	bpl.n	800553e <_scanf_i+0x142>
 80054f8:	f10b 0b01 	add.w	fp, fp, #1
 80054fc:	f1b9 0f00 	cmp.w	r9, #0
 8005500:	d003      	beq.n	800550a <_scanf_i+0x10e>
 8005502:	3301      	adds	r3, #1
 8005504:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8005508:	60a3      	str	r3, [r4, #8]
 800550a:	6873      	ldr	r3, [r6, #4]
 800550c:	3b01      	subs	r3, #1
 800550e:	2b00      	cmp	r3, #0
 8005510:	6073      	str	r3, [r6, #4]
 8005512:	dd1b      	ble.n	800554c <_scanf_i+0x150>
 8005514:	6833      	ldr	r3, [r6, #0]
 8005516:	3301      	adds	r3, #1
 8005518:	6033      	str	r3, [r6, #0]
 800551a:	68a3      	ldr	r3, [r4, #8]
 800551c:	3b01      	subs	r3, #1
 800551e:	60a3      	str	r3, [r4, #8]
 8005520:	e7d9      	b.n	80054d6 <_scanf_i+0xda>
 8005522:	f1bb 0f02 	cmp.w	fp, #2
 8005526:	d1ae      	bne.n	8005486 <_scanf_i+0x8a>
 8005528:	6822      	ldr	r2, [r4, #0]
 800552a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800552e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8005532:	d1bf      	bne.n	80054b4 <_scanf_i+0xb8>
 8005534:	2310      	movs	r3, #16
 8005536:	6063      	str	r3, [r4, #4]
 8005538:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800553c:	e7a2      	b.n	8005484 <_scanf_i+0x88>
 800553e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8005542:	6022      	str	r2, [r4, #0]
 8005544:	780b      	ldrb	r3, [r1, #0]
 8005546:	f805 3b01 	strb.w	r3, [r5], #1
 800554a:	e7de      	b.n	800550a <_scanf_i+0x10e>
 800554c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005550:	4631      	mov	r1, r6
 8005552:	4650      	mov	r0, sl
 8005554:	4798      	blx	r3
 8005556:	2800      	cmp	r0, #0
 8005558:	d0df      	beq.n	800551a <_scanf_i+0x11e>
 800555a:	6823      	ldr	r3, [r4, #0]
 800555c:	05db      	lsls	r3, r3, #23
 800555e:	d50d      	bpl.n	800557c <_scanf_i+0x180>
 8005560:	42bd      	cmp	r5, r7
 8005562:	d909      	bls.n	8005578 <_scanf_i+0x17c>
 8005564:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8005568:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800556c:	4632      	mov	r2, r6
 800556e:	4650      	mov	r0, sl
 8005570:	4798      	blx	r3
 8005572:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8005576:	464d      	mov	r5, r9
 8005578:	42bd      	cmp	r5, r7
 800557a:	d02d      	beq.n	80055d8 <_scanf_i+0x1dc>
 800557c:	6822      	ldr	r2, [r4, #0]
 800557e:	f012 0210 	ands.w	r2, r2, #16
 8005582:	d113      	bne.n	80055ac <_scanf_i+0x1b0>
 8005584:	702a      	strb	r2, [r5, #0]
 8005586:	6863      	ldr	r3, [r4, #4]
 8005588:	9e01      	ldr	r6, [sp, #4]
 800558a:	4639      	mov	r1, r7
 800558c:	4650      	mov	r0, sl
 800558e:	47b0      	blx	r6
 8005590:	6821      	ldr	r1, [r4, #0]
 8005592:	f8d8 3000 	ldr.w	r3, [r8]
 8005596:	f011 0f20 	tst.w	r1, #32
 800559a:	d013      	beq.n	80055c4 <_scanf_i+0x1c8>
 800559c:	1d1a      	adds	r2, r3, #4
 800559e:	f8c8 2000 	str.w	r2, [r8]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	6018      	str	r0, [r3, #0]
 80055a6:	68e3      	ldr	r3, [r4, #12]
 80055a8:	3301      	adds	r3, #1
 80055aa:	60e3      	str	r3, [r4, #12]
 80055ac:	1bed      	subs	r5, r5, r7
 80055ae:	44ab      	add	fp, r5
 80055b0:	6925      	ldr	r5, [r4, #16]
 80055b2:	445d      	add	r5, fp
 80055b4:	6125      	str	r5, [r4, #16]
 80055b6:	2000      	movs	r0, #0
 80055b8:	b007      	add	sp, #28
 80055ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055be:	f04f 0b00 	mov.w	fp, #0
 80055c2:	e7ca      	b.n	800555a <_scanf_i+0x15e>
 80055c4:	1d1a      	adds	r2, r3, #4
 80055c6:	f8c8 2000 	str.w	r2, [r8]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f011 0f01 	tst.w	r1, #1
 80055d0:	bf14      	ite	ne
 80055d2:	8018      	strhne	r0, [r3, #0]
 80055d4:	6018      	streq	r0, [r3, #0]
 80055d6:	e7e6      	b.n	80055a6 <_scanf_i+0x1aa>
 80055d8:	2001      	movs	r0, #1
 80055da:	e7ed      	b.n	80055b8 <_scanf_i+0x1bc>
 80055dc:	08005c10 	.word	0x08005c10
 80055e0:	08005849 	.word	0x08005849
 80055e4:	08005761 	.word	0x08005761
 80055e8:	08005cb5 	.word	0x08005cb5

080055ec <__sccl>:
 80055ec:	b570      	push	{r4, r5, r6, lr}
 80055ee:	780b      	ldrb	r3, [r1, #0]
 80055f0:	4604      	mov	r4, r0
 80055f2:	2b5e      	cmp	r3, #94	; 0x5e
 80055f4:	bf0b      	itete	eq
 80055f6:	784b      	ldrbeq	r3, [r1, #1]
 80055f8:	1c48      	addne	r0, r1, #1
 80055fa:	1c88      	addeq	r0, r1, #2
 80055fc:	2200      	movne	r2, #0
 80055fe:	bf08      	it	eq
 8005600:	2201      	moveq	r2, #1
 8005602:	1e61      	subs	r1, r4, #1
 8005604:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8005608:	f801 2f01 	strb.w	r2, [r1, #1]!
 800560c:	42a9      	cmp	r1, r5
 800560e:	d1fb      	bne.n	8005608 <__sccl+0x1c>
 8005610:	b90b      	cbnz	r3, 8005616 <__sccl+0x2a>
 8005612:	3801      	subs	r0, #1
 8005614:	bd70      	pop	{r4, r5, r6, pc}
 8005616:	f082 0201 	eor.w	r2, r2, #1
 800561a:	54e2      	strb	r2, [r4, r3]
 800561c:	4605      	mov	r5, r0
 800561e:	4628      	mov	r0, r5
 8005620:	f810 1b01 	ldrb.w	r1, [r0], #1
 8005624:	292d      	cmp	r1, #45	; 0x2d
 8005626:	d006      	beq.n	8005636 <__sccl+0x4a>
 8005628:	295d      	cmp	r1, #93	; 0x5d
 800562a:	d0f3      	beq.n	8005614 <__sccl+0x28>
 800562c:	b909      	cbnz	r1, 8005632 <__sccl+0x46>
 800562e:	4628      	mov	r0, r5
 8005630:	e7f0      	b.n	8005614 <__sccl+0x28>
 8005632:	460b      	mov	r3, r1
 8005634:	e7f1      	b.n	800561a <__sccl+0x2e>
 8005636:	786e      	ldrb	r6, [r5, #1]
 8005638:	2e5d      	cmp	r6, #93	; 0x5d
 800563a:	d0fa      	beq.n	8005632 <__sccl+0x46>
 800563c:	42b3      	cmp	r3, r6
 800563e:	dcf8      	bgt.n	8005632 <__sccl+0x46>
 8005640:	3502      	adds	r5, #2
 8005642:	4619      	mov	r1, r3
 8005644:	3101      	adds	r1, #1
 8005646:	428e      	cmp	r6, r1
 8005648:	5462      	strb	r2, [r4, r1]
 800564a:	dcfb      	bgt.n	8005644 <__sccl+0x58>
 800564c:	1af1      	subs	r1, r6, r3
 800564e:	3901      	subs	r1, #1
 8005650:	1c58      	adds	r0, r3, #1
 8005652:	42b3      	cmp	r3, r6
 8005654:	bfa8      	it	ge
 8005656:	2100      	movge	r1, #0
 8005658:	1843      	adds	r3, r0, r1
 800565a:	e7e0      	b.n	800561e <__sccl+0x32>

0800565c <_strtol_l.constprop.0>:
 800565c:	2b01      	cmp	r3, #1
 800565e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005662:	d001      	beq.n	8005668 <_strtol_l.constprop.0+0xc>
 8005664:	2b24      	cmp	r3, #36	; 0x24
 8005666:	d906      	bls.n	8005676 <_strtol_l.constprop.0+0x1a>
 8005668:	f7ff fc26 	bl	8004eb8 <__errno>
 800566c:	2316      	movs	r3, #22
 800566e:	6003      	str	r3, [r0, #0]
 8005670:	2000      	movs	r0, #0
 8005672:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005676:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800575c <_strtol_l.constprop.0+0x100>
 800567a:	460d      	mov	r5, r1
 800567c:	462e      	mov	r6, r5
 800567e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005682:	f814 700c 	ldrb.w	r7, [r4, ip]
 8005686:	f017 0708 	ands.w	r7, r7, #8
 800568a:	d1f7      	bne.n	800567c <_strtol_l.constprop.0+0x20>
 800568c:	2c2d      	cmp	r4, #45	; 0x2d
 800568e:	d132      	bne.n	80056f6 <_strtol_l.constprop.0+0x9a>
 8005690:	782c      	ldrb	r4, [r5, #0]
 8005692:	2701      	movs	r7, #1
 8005694:	1cb5      	adds	r5, r6, #2
 8005696:	2b00      	cmp	r3, #0
 8005698:	d05b      	beq.n	8005752 <_strtol_l.constprop.0+0xf6>
 800569a:	2b10      	cmp	r3, #16
 800569c:	d109      	bne.n	80056b2 <_strtol_l.constprop.0+0x56>
 800569e:	2c30      	cmp	r4, #48	; 0x30
 80056a0:	d107      	bne.n	80056b2 <_strtol_l.constprop.0+0x56>
 80056a2:	782c      	ldrb	r4, [r5, #0]
 80056a4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80056a8:	2c58      	cmp	r4, #88	; 0x58
 80056aa:	d14d      	bne.n	8005748 <_strtol_l.constprop.0+0xec>
 80056ac:	786c      	ldrb	r4, [r5, #1]
 80056ae:	2310      	movs	r3, #16
 80056b0:	3502      	adds	r5, #2
 80056b2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80056b6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80056ba:	f04f 0c00 	mov.w	ip, #0
 80056be:	fbb8 f9f3 	udiv	r9, r8, r3
 80056c2:	4666      	mov	r6, ip
 80056c4:	fb03 8a19 	mls	sl, r3, r9, r8
 80056c8:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80056cc:	f1be 0f09 	cmp.w	lr, #9
 80056d0:	d816      	bhi.n	8005700 <_strtol_l.constprop.0+0xa4>
 80056d2:	4674      	mov	r4, lr
 80056d4:	42a3      	cmp	r3, r4
 80056d6:	dd24      	ble.n	8005722 <_strtol_l.constprop.0+0xc6>
 80056d8:	f1bc 0f00 	cmp.w	ip, #0
 80056dc:	db1e      	blt.n	800571c <_strtol_l.constprop.0+0xc0>
 80056de:	45b1      	cmp	r9, r6
 80056e0:	d31c      	bcc.n	800571c <_strtol_l.constprop.0+0xc0>
 80056e2:	d101      	bne.n	80056e8 <_strtol_l.constprop.0+0x8c>
 80056e4:	45a2      	cmp	sl, r4
 80056e6:	db19      	blt.n	800571c <_strtol_l.constprop.0+0xc0>
 80056e8:	fb06 4603 	mla	r6, r6, r3, r4
 80056ec:	f04f 0c01 	mov.w	ip, #1
 80056f0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80056f4:	e7e8      	b.n	80056c8 <_strtol_l.constprop.0+0x6c>
 80056f6:	2c2b      	cmp	r4, #43	; 0x2b
 80056f8:	bf04      	itt	eq
 80056fa:	782c      	ldrbeq	r4, [r5, #0]
 80056fc:	1cb5      	addeq	r5, r6, #2
 80056fe:	e7ca      	b.n	8005696 <_strtol_l.constprop.0+0x3a>
 8005700:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8005704:	f1be 0f19 	cmp.w	lr, #25
 8005708:	d801      	bhi.n	800570e <_strtol_l.constprop.0+0xb2>
 800570a:	3c37      	subs	r4, #55	; 0x37
 800570c:	e7e2      	b.n	80056d4 <_strtol_l.constprop.0+0x78>
 800570e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8005712:	f1be 0f19 	cmp.w	lr, #25
 8005716:	d804      	bhi.n	8005722 <_strtol_l.constprop.0+0xc6>
 8005718:	3c57      	subs	r4, #87	; 0x57
 800571a:	e7db      	b.n	80056d4 <_strtol_l.constprop.0+0x78>
 800571c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8005720:	e7e6      	b.n	80056f0 <_strtol_l.constprop.0+0x94>
 8005722:	f1bc 0f00 	cmp.w	ip, #0
 8005726:	da05      	bge.n	8005734 <_strtol_l.constprop.0+0xd8>
 8005728:	2322      	movs	r3, #34	; 0x22
 800572a:	6003      	str	r3, [r0, #0]
 800572c:	4646      	mov	r6, r8
 800572e:	b942      	cbnz	r2, 8005742 <_strtol_l.constprop.0+0xe6>
 8005730:	4630      	mov	r0, r6
 8005732:	e79e      	b.n	8005672 <_strtol_l.constprop.0+0x16>
 8005734:	b107      	cbz	r7, 8005738 <_strtol_l.constprop.0+0xdc>
 8005736:	4276      	negs	r6, r6
 8005738:	2a00      	cmp	r2, #0
 800573a:	d0f9      	beq.n	8005730 <_strtol_l.constprop.0+0xd4>
 800573c:	f1bc 0f00 	cmp.w	ip, #0
 8005740:	d000      	beq.n	8005744 <_strtol_l.constprop.0+0xe8>
 8005742:	1e69      	subs	r1, r5, #1
 8005744:	6011      	str	r1, [r2, #0]
 8005746:	e7f3      	b.n	8005730 <_strtol_l.constprop.0+0xd4>
 8005748:	2430      	movs	r4, #48	; 0x30
 800574a:	2b00      	cmp	r3, #0
 800574c:	d1b1      	bne.n	80056b2 <_strtol_l.constprop.0+0x56>
 800574e:	2308      	movs	r3, #8
 8005750:	e7af      	b.n	80056b2 <_strtol_l.constprop.0+0x56>
 8005752:	2c30      	cmp	r4, #48	; 0x30
 8005754:	d0a5      	beq.n	80056a2 <_strtol_l.constprop.0+0x46>
 8005756:	230a      	movs	r3, #10
 8005758:	e7ab      	b.n	80056b2 <_strtol_l.constprop.0+0x56>
 800575a:	bf00      	nop
 800575c:	08005cb8 	.word	0x08005cb8

08005760 <_strtol_r>:
 8005760:	f7ff bf7c 	b.w	800565c <_strtol_l.constprop.0>

08005764 <_strtoul_l.constprop.0>:
 8005764:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005768:	4f36      	ldr	r7, [pc, #216]	; (8005844 <_strtoul_l.constprop.0+0xe0>)
 800576a:	4686      	mov	lr, r0
 800576c:	460d      	mov	r5, r1
 800576e:	4628      	mov	r0, r5
 8005770:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005774:	5de6      	ldrb	r6, [r4, r7]
 8005776:	f016 0608 	ands.w	r6, r6, #8
 800577a:	d1f8      	bne.n	800576e <_strtoul_l.constprop.0+0xa>
 800577c:	2c2d      	cmp	r4, #45	; 0x2d
 800577e:	d12f      	bne.n	80057e0 <_strtoul_l.constprop.0+0x7c>
 8005780:	782c      	ldrb	r4, [r5, #0]
 8005782:	2601      	movs	r6, #1
 8005784:	1c85      	adds	r5, r0, #2
 8005786:	2b00      	cmp	r3, #0
 8005788:	d057      	beq.n	800583a <_strtoul_l.constprop.0+0xd6>
 800578a:	2b10      	cmp	r3, #16
 800578c:	d109      	bne.n	80057a2 <_strtoul_l.constprop.0+0x3e>
 800578e:	2c30      	cmp	r4, #48	; 0x30
 8005790:	d107      	bne.n	80057a2 <_strtoul_l.constprop.0+0x3e>
 8005792:	7828      	ldrb	r0, [r5, #0]
 8005794:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8005798:	2858      	cmp	r0, #88	; 0x58
 800579a:	d149      	bne.n	8005830 <_strtoul_l.constprop.0+0xcc>
 800579c:	786c      	ldrb	r4, [r5, #1]
 800579e:	2310      	movs	r3, #16
 80057a0:	3502      	adds	r5, #2
 80057a2:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80057a6:	2700      	movs	r7, #0
 80057a8:	fbb8 f8f3 	udiv	r8, r8, r3
 80057ac:	fb03 f908 	mul.w	r9, r3, r8
 80057b0:	ea6f 0909 	mvn.w	r9, r9
 80057b4:	4638      	mov	r0, r7
 80057b6:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80057ba:	f1bc 0f09 	cmp.w	ip, #9
 80057be:	d814      	bhi.n	80057ea <_strtoul_l.constprop.0+0x86>
 80057c0:	4664      	mov	r4, ip
 80057c2:	42a3      	cmp	r3, r4
 80057c4:	dd22      	ble.n	800580c <_strtoul_l.constprop.0+0xa8>
 80057c6:	2f00      	cmp	r7, #0
 80057c8:	db1d      	blt.n	8005806 <_strtoul_l.constprop.0+0xa2>
 80057ca:	4580      	cmp	r8, r0
 80057cc:	d31b      	bcc.n	8005806 <_strtoul_l.constprop.0+0xa2>
 80057ce:	d101      	bne.n	80057d4 <_strtoul_l.constprop.0+0x70>
 80057d0:	45a1      	cmp	r9, r4
 80057d2:	db18      	blt.n	8005806 <_strtoul_l.constprop.0+0xa2>
 80057d4:	fb00 4003 	mla	r0, r0, r3, r4
 80057d8:	2701      	movs	r7, #1
 80057da:	f815 4b01 	ldrb.w	r4, [r5], #1
 80057de:	e7ea      	b.n	80057b6 <_strtoul_l.constprop.0+0x52>
 80057e0:	2c2b      	cmp	r4, #43	; 0x2b
 80057e2:	bf04      	itt	eq
 80057e4:	782c      	ldrbeq	r4, [r5, #0]
 80057e6:	1c85      	addeq	r5, r0, #2
 80057e8:	e7cd      	b.n	8005786 <_strtoul_l.constprop.0+0x22>
 80057ea:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80057ee:	f1bc 0f19 	cmp.w	ip, #25
 80057f2:	d801      	bhi.n	80057f8 <_strtoul_l.constprop.0+0x94>
 80057f4:	3c37      	subs	r4, #55	; 0x37
 80057f6:	e7e4      	b.n	80057c2 <_strtoul_l.constprop.0+0x5e>
 80057f8:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80057fc:	f1bc 0f19 	cmp.w	ip, #25
 8005800:	d804      	bhi.n	800580c <_strtoul_l.constprop.0+0xa8>
 8005802:	3c57      	subs	r4, #87	; 0x57
 8005804:	e7dd      	b.n	80057c2 <_strtoul_l.constprop.0+0x5e>
 8005806:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800580a:	e7e6      	b.n	80057da <_strtoul_l.constprop.0+0x76>
 800580c:	2f00      	cmp	r7, #0
 800580e:	da07      	bge.n	8005820 <_strtoul_l.constprop.0+0xbc>
 8005810:	2322      	movs	r3, #34	; 0x22
 8005812:	f8ce 3000 	str.w	r3, [lr]
 8005816:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800581a:	b932      	cbnz	r2, 800582a <_strtoul_l.constprop.0+0xc6>
 800581c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005820:	b106      	cbz	r6, 8005824 <_strtoul_l.constprop.0+0xc0>
 8005822:	4240      	negs	r0, r0
 8005824:	2a00      	cmp	r2, #0
 8005826:	d0f9      	beq.n	800581c <_strtoul_l.constprop.0+0xb8>
 8005828:	b107      	cbz	r7, 800582c <_strtoul_l.constprop.0+0xc8>
 800582a:	1e69      	subs	r1, r5, #1
 800582c:	6011      	str	r1, [r2, #0]
 800582e:	e7f5      	b.n	800581c <_strtoul_l.constprop.0+0xb8>
 8005830:	2430      	movs	r4, #48	; 0x30
 8005832:	2b00      	cmp	r3, #0
 8005834:	d1b5      	bne.n	80057a2 <_strtoul_l.constprop.0+0x3e>
 8005836:	2308      	movs	r3, #8
 8005838:	e7b3      	b.n	80057a2 <_strtoul_l.constprop.0+0x3e>
 800583a:	2c30      	cmp	r4, #48	; 0x30
 800583c:	d0a9      	beq.n	8005792 <_strtoul_l.constprop.0+0x2e>
 800583e:	230a      	movs	r3, #10
 8005840:	e7af      	b.n	80057a2 <_strtoul_l.constprop.0+0x3e>
 8005842:	bf00      	nop
 8005844:	08005cb8 	.word	0x08005cb8

08005848 <_strtoul_r>:
 8005848:	f7ff bf8c 	b.w	8005764 <_strtoul_l.constprop.0>

0800584c <__submore>:
 800584c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005850:	460c      	mov	r4, r1
 8005852:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8005854:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005858:	4299      	cmp	r1, r3
 800585a:	d11d      	bne.n	8005898 <__submore+0x4c>
 800585c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005860:	f000 f8aa 	bl	80059b8 <_malloc_r>
 8005864:	b918      	cbnz	r0, 800586e <__submore+0x22>
 8005866:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800586a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800586e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005872:	63a3      	str	r3, [r4, #56]	; 0x38
 8005874:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8005878:	6360      	str	r0, [r4, #52]	; 0x34
 800587a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800587e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8005882:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8005886:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800588a:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800588e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8005892:	6020      	str	r0, [r4, #0]
 8005894:	2000      	movs	r0, #0
 8005896:	e7e8      	b.n	800586a <__submore+0x1e>
 8005898:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800589a:	0077      	lsls	r7, r6, #1
 800589c:	463a      	mov	r2, r7
 800589e:	f000 f8ff 	bl	8005aa0 <_realloc_r>
 80058a2:	4605      	mov	r5, r0
 80058a4:	2800      	cmp	r0, #0
 80058a6:	d0de      	beq.n	8005866 <__submore+0x1a>
 80058a8:	eb00 0806 	add.w	r8, r0, r6
 80058ac:	4601      	mov	r1, r0
 80058ae:	4632      	mov	r2, r6
 80058b0:	4640      	mov	r0, r8
 80058b2:	f000 f807 	bl	80058c4 <memcpy>
 80058b6:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80058ba:	f8c4 8000 	str.w	r8, [r4]
 80058be:	e7e9      	b.n	8005894 <__submore+0x48>

080058c0 <__retarget_lock_acquire_recursive>:
 80058c0:	4770      	bx	lr

080058c2 <__retarget_lock_release_recursive>:
 80058c2:	4770      	bx	lr

080058c4 <memcpy>:
 80058c4:	440a      	add	r2, r1
 80058c6:	4291      	cmp	r1, r2
 80058c8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80058cc:	d100      	bne.n	80058d0 <memcpy+0xc>
 80058ce:	4770      	bx	lr
 80058d0:	b510      	push	{r4, lr}
 80058d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80058d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80058da:	4291      	cmp	r1, r2
 80058dc:	d1f9      	bne.n	80058d2 <memcpy+0xe>
 80058de:	bd10      	pop	{r4, pc}

080058e0 <_free_r>:
 80058e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80058e2:	2900      	cmp	r1, #0
 80058e4:	d044      	beq.n	8005970 <_free_r+0x90>
 80058e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80058ea:	9001      	str	r0, [sp, #4]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	f1a1 0404 	sub.w	r4, r1, #4
 80058f2:	bfb8      	it	lt
 80058f4:	18e4      	addlt	r4, r4, r3
 80058f6:	f000 f913 	bl	8005b20 <__malloc_lock>
 80058fa:	4a1e      	ldr	r2, [pc, #120]	; (8005974 <_free_r+0x94>)
 80058fc:	9801      	ldr	r0, [sp, #4]
 80058fe:	6813      	ldr	r3, [r2, #0]
 8005900:	b933      	cbnz	r3, 8005910 <_free_r+0x30>
 8005902:	6063      	str	r3, [r4, #4]
 8005904:	6014      	str	r4, [r2, #0]
 8005906:	b003      	add	sp, #12
 8005908:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800590c:	f000 b90e 	b.w	8005b2c <__malloc_unlock>
 8005910:	42a3      	cmp	r3, r4
 8005912:	d908      	bls.n	8005926 <_free_r+0x46>
 8005914:	6825      	ldr	r5, [r4, #0]
 8005916:	1961      	adds	r1, r4, r5
 8005918:	428b      	cmp	r3, r1
 800591a:	bf01      	itttt	eq
 800591c:	6819      	ldreq	r1, [r3, #0]
 800591e:	685b      	ldreq	r3, [r3, #4]
 8005920:	1949      	addeq	r1, r1, r5
 8005922:	6021      	streq	r1, [r4, #0]
 8005924:	e7ed      	b.n	8005902 <_free_r+0x22>
 8005926:	461a      	mov	r2, r3
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	b10b      	cbz	r3, 8005930 <_free_r+0x50>
 800592c:	42a3      	cmp	r3, r4
 800592e:	d9fa      	bls.n	8005926 <_free_r+0x46>
 8005930:	6811      	ldr	r1, [r2, #0]
 8005932:	1855      	adds	r5, r2, r1
 8005934:	42a5      	cmp	r5, r4
 8005936:	d10b      	bne.n	8005950 <_free_r+0x70>
 8005938:	6824      	ldr	r4, [r4, #0]
 800593a:	4421      	add	r1, r4
 800593c:	1854      	adds	r4, r2, r1
 800593e:	42a3      	cmp	r3, r4
 8005940:	6011      	str	r1, [r2, #0]
 8005942:	d1e0      	bne.n	8005906 <_free_r+0x26>
 8005944:	681c      	ldr	r4, [r3, #0]
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	6053      	str	r3, [r2, #4]
 800594a:	4421      	add	r1, r4
 800594c:	6011      	str	r1, [r2, #0]
 800594e:	e7da      	b.n	8005906 <_free_r+0x26>
 8005950:	d902      	bls.n	8005958 <_free_r+0x78>
 8005952:	230c      	movs	r3, #12
 8005954:	6003      	str	r3, [r0, #0]
 8005956:	e7d6      	b.n	8005906 <_free_r+0x26>
 8005958:	6825      	ldr	r5, [r4, #0]
 800595a:	1961      	adds	r1, r4, r5
 800595c:	428b      	cmp	r3, r1
 800595e:	bf04      	itt	eq
 8005960:	6819      	ldreq	r1, [r3, #0]
 8005962:	685b      	ldreq	r3, [r3, #4]
 8005964:	6063      	str	r3, [r4, #4]
 8005966:	bf04      	itt	eq
 8005968:	1949      	addeq	r1, r1, r5
 800596a:	6021      	streq	r1, [r4, #0]
 800596c:	6054      	str	r4, [r2, #4]
 800596e:	e7ca      	b.n	8005906 <_free_r+0x26>
 8005970:	b003      	add	sp, #12
 8005972:	bd30      	pop	{r4, r5, pc}
 8005974:	20000584 	.word	0x20000584

08005978 <sbrk_aligned>:
 8005978:	b570      	push	{r4, r5, r6, lr}
 800597a:	4e0e      	ldr	r6, [pc, #56]	; (80059b4 <sbrk_aligned+0x3c>)
 800597c:	460c      	mov	r4, r1
 800597e:	6831      	ldr	r1, [r6, #0]
 8005980:	4605      	mov	r5, r0
 8005982:	b911      	cbnz	r1, 800598a <sbrk_aligned+0x12>
 8005984:	f000 f8bc 	bl	8005b00 <_sbrk_r>
 8005988:	6030      	str	r0, [r6, #0]
 800598a:	4621      	mov	r1, r4
 800598c:	4628      	mov	r0, r5
 800598e:	f000 f8b7 	bl	8005b00 <_sbrk_r>
 8005992:	1c43      	adds	r3, r0, #1
 8005994:	d00a      	beq.n	80059ac <sbrk_aligned+0x34>
 8005996:	1cc4      	adds	r4, r0, #3
 8005998:	f024 0403 	bic.w	r4, r4, #3
 800599c:	42a0      	cmp	r0, r4
 800599e:	d007      	beq.n	80059b0 <sbrk_aligned+0x38>
 80059a0:	1a21      	subs	r1, r4, r0
 80059a2:	4628      	mov	r0, r5
 80059a4:	f000 f8ac 	bl	8005b00 <_sbrk_r>
 80059a8:	3001      	adds	r0, #1
 80059aa:	d101      	bne.n	80059b0 <sbrk_aligned+0x38>
 80059ac:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80059b0:	4620      	mov	r0, r4
 80059b2:	bd70      	pop	{r4, r5, r6, pc}
 80059b4:	20000588 	.word	0x20000588

080059b8 <_malloc_r>:
 80059b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059bc:	1ccd      	adds	r5, r1, #3
 80059be:	f025 0503 	bic.w	r5, r5, #3
 80059c2:	3508      	adds	r5, #8
 80059c4:	2d0c      	cmp	r5, #12
 80059c6:	bf38      	it	cc
 80059c8:	250c      	movcc	r5, #12
 80059ca:	2d00      	cmp	r5, #0
 80059cc:	4607      	mov	r7, r0
 80059ce:	db01      	blt.n	80059d4 <_malloc_r+0x1c>
 80059d0:	42a9      	cmp	r1, r5
 80059d2:	d905      	bls.n	80059e0 <_malloc_r+0x28>
 80059d4:	230c      	movs	r3, #12
 80059d6:	603b      	str	r3, [r7, #0]
 80059d8:	2600      	movs	r6, #0
 80059da:	4630      	mov	r0, r6
 80059dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059e0:	4e2e      	ldr	r6, [pc, #184]	; (8005a9c <_malloc_r+0xe4>)
 80059e2:	f000 f89d 	bl	8005b20 <__malloc_lock>
 80059e6:	6833      	ldr	r3, [r6, #0]
 80059e8:	461c      	mov	r4, r3
 80059ea:	bb34      	cbnz	r4, 8005a3a <_malloc_r+0x82>
 80059ec:	4629      	mov	r1, r5
 80059ee:	4638      	mov	r0, r7
 80059f0:	f7ff ffc2 	bl	8005978 <sbrk_aligned>
 80059f4:	1c43      	adds	r3, r0, #1
 80059f6:	4604      	mov	r4, r0
 80059f8:	d14d      	bne.n	8005a96 <_malloc_r+0xde>
 80059fa:	6834      	ldr	r4, [r6, #0]
 80059fc:	4626      	mov	r6, r4
 80059fe:	2e00      	cmp	r6, #0
 8005a00:	d140      	bne.n	8005a84 <_malloc_r+0xcc>
 8005a02:	6823      	ldr	r3, [r4, #0]
 8005a04:	4631      	mov	r1, r6
 8005a06:	4638      	mov	r0, r7
 8005a08:	eb04 0803 	add.w	r8, r4, r3
 8005a0c:	f000 f878 	bl	8005b00 <_sbrk_r>
 8005a10:	4580      	cmp	r8, r0
 8005a12:	d13a      	bne.n	8005a8a <_malloc_r+0xd2>
 8005a14:	6821      	ldr	r1, [r4, #0]
 8005a16:	3503      	adds	r5, #3
 8005a18:	1a6d      	subs	r5, r5, r1
 8005a1a:	f025 0503 	bic.w	r5, r5, #3
 8005a1e:	3508      	adds	r5, #8
 8005a20:	2d0c      	cmp	r5, #12
 8005a22:	bf38      	it	cc
 8005a24:	250c      	movcc	r5, #12
 8005a26:	4629      	mov	r1, r5
 8005a28:	4638      	mov	r0, r7
 8005a2a:	f7ff ffa5 	bl	8005978 <sbrk_aligned>
 8005a2e:	3001      	adds	r0, #1
 8005a30:	d02b      	beq.n	8005a8a <_malloc_r+0xd2>
 8005a32:	6823      	ldr	r3, [r4, #0]
 8005a34:	442b      	add	r3, r5
 8005a36:	6023      	str	r3, [r4, #0]
 8005a38:	e00e      	b.n	8005a58 <_malloc_r+0xa0>
 8005a3a:	6822      	ldr	r2, [r4, #0]
 8005a3c:	1b52      	subs	r2, r2, r5
 8005a3e:	d41e      	bmi.n	8005a7e <_malloc_r+0xc6>
 8005a40:	2a0b      	cmp	r2, #11
 8005a42:	d916      	bls.n	8005a72 <_malloc_r+0xba>
 8005a44:	1961      	adds	r1, r4, r5
 8005a46:	42a3      	cmp	r3, r4
 8005a48:	6025      	str	r5, [r4, #0]
 8005a4a:	bf18      	it	ne
 8005a4c:	6059      	strne	r1, [r3, #4]
 8005a4e:	6863      	ldr	r3, [r4, #4]
 8005a50:	bf08      	it	eq
 8005a52:	6031      	streq	r1, [r6, #0]
 8005a54:	5162      	str	r2, [r4, r5]
 8005a56:	604b      	str	r3, [r1, #4]
 8005a58:	4638      	mov	r0, r7
 8005a5a:	f104 060b 	add.w	r6, r4, #11
 8005a5e:	f000 f865 	bl	8005b2c <__malloc_unlock>
 8005a62:	f026 0607 	bic.w	r6, r6, #7
 8005a66:	1d23      	adds	r3, r4, #4
 8005a68:	1af2      	subs	r2, r6, r3
 8005a6a:	d0b6      	beq.n	80059da <_malloc_r+0x22>
 8005a6c:	1b9b      	subs	r3, r3, r6
 8005a6e:	50a3      	str	r3, [r4, r2]
 8005a70:	e7b3      	b.n	80059da <_malloc_r+0x22>
 8005a72:	6862      	ldr	r2, [r4, #4]
 8005a74:	42a3      	cmp	r3, r4
 8005a76:	bf0c      	ite	eq
 8005a78:	6032      	streq	r2, [r6, #0]
 8005a7a:	605a      	strne	r2, [r3, #4]
 8005a7c:	e7ec      	b.n	8005a58 <_malloc_r+0xa0>
 8005a7e:	4623      	mov	r3, r4
 8005a80:	6864      	ldr	r4, [r4, #4]
 8005a82:	e7b2      	b.n	80059ea <_malloc_r+0x32>
 8005a84:	4634      	mov	r4, r6
 8005a86:	6876      	ldr	r6, [r6, #4]
 8005a88:	e7b9      	b.n	80059fe <_malloc_r+0x46>
 8005a8a:	230c      	movs	r3, #12
 8005a8c:	603b      	str	r3, [r7, #0]
 8005a8e:	4638      	mov	r0, r7
 8005a90:	f000 f84c 	bl	8005b2c <__malloc_unlock>
 8005a94:	e7a1      	b.n	80059da <_malloc_r+0x22>
 8005a96:	6025      	str	r5, [r4, #0]
 8005a98:	e7de      	b.n	8005a58 <_malloc_r+0xa0>
 8005a9a:	bf00      	nop
 8005a9c:	20000584 	.word	0x20000584

08005aa0 <_realloc_r>:
 8005aa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005aa4:	4680      	mov	r8, r0
 8005aa6:	4614      	mov	r4, r2
 8005aa8:	460e      	mov	r6, r1
 8005aaa:	b921      	cbnz	r1, 8005ab6 <_realloc_r+0x16>
 8005aac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ab0:	4611      	mov	r1, r2
 8005ab2:	f7ff bf81 	b.w	80059b8 <_malloc_r>
 8005ab6:	b92a      	cbnz	r2, 8005ac4 <_realloc_r+0x24>
 8005ab8:	f7ff ff12 	bl	80058e0 <_free_r>
 8005abc:	4625      	mov	r5, r4
 8005abe:	4628      	mov	r0, r5
 8005ac0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ac4:	f000 f838 	bl	8005b38 <_malloc_usable_size_r>
 8005ac8:	4284      	cmp	r4, r0
 8005aca:	4607      	mov	r7, r0
 8005acc:	d802      	bhi.n	8005ad4 <_realloc_r+0x34>
 8005ace:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005ad2:	d812      	bhi.n	8005afa <_realloc_r+0x5a>
 8005ad4:	4621      	mov	r1, r4
 8005ad6:	4640      	mov	r0, r8
 8005ad8:	f7ff ff6e 	bl	80059b8 <_malloc_r>
 8005adc:	4605      	mov	r5, r0
 8005ade:	2800      	cmp	r0, #0
 8005ae0:	d0ed      	beq.n	8005abe <_realloc_r+0x1e>
 8005ae2:	42bc      	cmp	r4, r7
 8005ae4:	4622      	mov	r2, r4
 8005ae6:	4631      	mov	r1, r6
 8005ae8:	bf28      	it	cs
 8005aea:	463a      	movcs	r2, r7
 8005aec:	f7ff feea 	bl	80058c4 <memcpy>
 8005af0:	4631      	mov	r1, r6
 8005af2:	4640      	mov	r0, r8
 8005af4:	f7ff fef4 	bl	80058e0 <_free_r>
 8005af8:	e7e1      	b.n	8005abe <_realloc_r+0x1e>
 8005afa:	4635      	mov	r5, r6
 8005afc:	e7df      	b.n	8005abe <_realloc_r+0x1e>
	...

08005b00 <_sbrk_r>:
 8005b00:	b538      	push	{r3, r4, r5, lr}
 8005b02:	4d06      	ldr	r5, [pc, #24]	; (8005b1c <_sbrk_r+0x1c>)
 8005b04:	2300      	movs	r3, #0
 8005b06:	4604      	mov	r4, r0
 8005b08:	4608      	mov	r0, r1
 8005b0a:	602b      	str	r3, [r5, #0]
 8005b0c:	f7fb fe7e 	bl	800180c <_sbrk>
 8005b10:	1c43      	adds	r3, r0, #1
 8005b12:	d102      	bne.n	8005b1a <_sbrk_r+0x1a>
 8005b14:	682b      	ldr	r3, [r5, #0]
 8005b16:	b103      	cbz	r3, 8005b1a <_sbrk_r+0x1a>
 8005b18:	6023      	str	r3, [r4, #0]
 8005b1a:	bd38      	pop	{r3, r4, r5, pc}
 8005b1c:	2000057c 	.word	0x2000057c

08005b20 <__malloc_lock>:
 8005b20:	4801      	ldr	r0, [pc, #4]	; (8005b28 <__malloc_lock+0x8>)
 8005b22:	f7ff becd 	b.w	80058c0 <__retarget_lock_acquire_recursive>
 8005b26:	bf00      	nop
 8005b28:	20000580 	.word	0x20000580

08005b2c <__malloc_unlock>:
 8005b2c:	4801      	ldr	r0, [pc, #4]	; (8005b34 <__malloc_unlock+0x8>)
 8005b2e:	f7ff bec8 	b.w	80058c2 <__retarget_lock_release_recursive>
 8005b32:	bf00      	nop
 8005b34:	20000580 	.word	0x20000580

08005b38 <_malloc_usable_size_r>:
 8005b38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b3c:	1f18      	subs	r0, r3, #4
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	bfbc      	itt	lt
 8005b42:	580b      	ldrlt	r3, [r1, r0]
 8005b44:	18c0      	addlt	r0, r0, r3
 8005b46:	4770      	bx	lr

08005b48 <_init>:
 8005b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b4a:	bf00      	nop
 8005b4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b4e:	bc08      	pop	{r3}
 8005b50:	469e      	mov	lr, r3
 8005b52:	4770      	bx	lr

08005b54 <_fini>:
 8005b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b56:	bf00      	nop
 8005b58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b5a:	bc08      	pop	{r3}
 8005b5c:	469e      	mov	lr, r3
 8005b5e:	4770      	bx	lr
