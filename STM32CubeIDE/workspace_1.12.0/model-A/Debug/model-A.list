
model-A.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000023b8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002540  08002540  00012540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002558  08002558  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002558  08002558  00012558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002560  08002560  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002560  08002560  00012560  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002564  08002564  00012564  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002568  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000002c0  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200002cc  200002cc  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000094bb  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000014b7  00000000  00000000  000294f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000828  00000000  00000000  0002a9b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000007b0  00000000  00000000  0002b1d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d951  00000000  00000000  0002b988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009299  00000000  00000000  000492d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b559e  00000000  00000000  00052572  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00107b10  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000020fc  00000000  00000000  00107b60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002528 	.word	0x08002528

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002528 	.word	0x08002528

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d0:	f000 fd68 	bl	8000fa4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d4:	f000 f816 	bl	8000504 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d8:	f000 fa22 	bl	8000920 <MX_GPIO_Init>
  MX_SPI1_Init();
 80004dc:	f000 f87c 	bl	80005d8 <MX_SPI1_Init>
  MX_SPI2_Init();
 80004e0:	f000 f8b2 	bl	8000648 <MX_SPI2_Init>
  MX_SPI3_Init();
 80004e4:	f000 f8e8 	bl	80006b8 <MX_SPI3_Init>
  MX_UART4_Init();
 80004e8:	f000 f91e 	bl	8000728 <MX_UART4_Init>
  MX_UART5_Init();
 80004ec:	f000 f946 	bl	800077c <MX_UART5_Init>
  MX_USART1_UART_Init();
 80004f0:	f000 f96e 	bl	80007d0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80004f4:	f000 f996 	bl	8000824 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80004f8:	f000 f9be 	bl	8000878 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 80004fc:	f000 f9e6 	bl	80008cc <MX_USART6_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000500:	e7fe      	b.n	8000500 <main+0x34>
	...

08000504 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b094      	sub	sp, #80	; 0x50
 8000508:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800050a:	f107 0320 	add.w	r3, r7, #32
 800050e:	2230      	movs	r2, #48	; 0x30
 8000510:	2100      	movs	r1, #0
 8000512:	4618      	mov	r0, r3
 8000514:	f002 f800 	bl	8002518 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000518:	f107 030c 	add.w	r3, r7, #12
 800051c:	2200      	movs	r2, #0
 800051e:	601a      	str	r2, [r3, #0]
 8000520:	605a      	str	r2, [r3, #4]
 8000522:	609a      	str	r2, [r3, #8]
 8000524:	60da      	str	r2, [r3, #12]
 8000526:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000528:	2300      	movs	r3, #0
 800052a:	60bb      	str	r3, [r7, #8]
 800052c:	4b28      	ldr	r3, [pc, #160]	; (80005d0 <SystemClock_Config+0xcc>)
 800052e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000530:	4a27      	ldr	r2, [pc, #156]	; (80005d0 <SystemClock_Config+0xcc>)
 8000532:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000536:	6413      	str	r3, [r2, #64]	; 0x40
 8000538:	4b25      	ldr	r3, [pc, #148]	; (80005d0 <SystemClock_Config+0xcc>)
 800053a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800053c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000540:	60bb      	str	r3, [r7, #8]
 8000542:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000544:	2300      	movs	r3, #0
 8000546:	607b      	str	r3, [r7, #4]
 8000548:	4b22      	ldr	r3, [pc, #136]	; (80005d4 <SystemClock_Config+0xd0>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	4a21      	ldr	r2, [pc, #132]	; (80005d4 <SystemClock_Config+0xd0>)
 800054e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000552:	6013      	str	r3, [r2, #0]
 8000554:	4b1f      	ldr	r3, [pc, #124]	; (80005d4 <SystemClock_Config+0xd0>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800055c:	607b      	str	r3, [r7, #4]
 800055e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000560:	2302      	movs	r3, #2
 8000562:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000564:	2301      	movs	r3, #1
 8000566:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000568:	2310      	movs	r3, #16
 800056a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800056c:	2302      	movs	r3, #2
 800056e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000570:	2300      	movs	r3, #0
 8000572:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000574:	2308      	movs	r3, #8
 8000576:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000578:	23a8      	movs	r3, #168	; 0xa8
 800057a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800057c:	2302      	movs	r3, #2
 800057e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000580:	2304      	movs	r3, #4
 8000582:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000584:	f107 0320 	add.w	r3, r7, #32
 8000588:	4618      	mov	r0, r3
 800058a:	f000 ffff 	bl	800158c <HAL_RCC_OscConfig>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	d001      	beq.n	8000598 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000594:	f000 fa08 	bl	80009a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000598:	230f      	movs	r3, #15
 800059a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800059c:	2302      	movs	r3, #2
 800059e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a0:	2300      	movs	r3, #0
 80005a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005a4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005ae:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005b0:	f107 030c 	add.w	r3, r7, #12
 80005b4:	2105      	movs	r1, #5
 80005b6:	4618      	mov	r0, r3
 80005b8:	f001 fa60 	bl	8001a7c <HAL_RCC_ClockConfig>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d001      	beq.n	80005c6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80005c2:	f000 f9f1 	bl	80009a8 <Error_Handler>
  }
}
 80005c6:	bf00      	nop
 80005c8:	3750      	adds	r7, #80	; 0x50
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	40023800 	.word	0x40023800
 80005d4:	40007000 	.word	0x40007000

080005d8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80005dc:	4b18      	ldr	r3, [pc, #96]	; (8000640 <MX_SPI1_Init+0x68>)
 80005de:	4a19      	ldr	r2, [pc, #100]	; (8000644 <MX_SPI1_Init+0x6c>)
 80005e0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80005e2:	4b17      	ldr	r3, [pc, #92]	; (8000640 <MX_SPI1_Init+0x68>)
 80005e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80005e8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 80005ea:	4b15      	ldr	r3, [pc, #84]	; (8000640 <MX_SPI1_Init+0x68>)
 80005ec:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80005f0:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80005f2:	4b13      	ldr	r3, [pc, #76]	; (8000640 <MX_SPI1_Init+0x68>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80005f8:	4b11      	ldr	r3, [pc, #68]	; (8000640 <MX_SPI1_Init+0x68>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80005fe:	4b10      	ldr	r3, [pc, #64]	; (8000640 <MX_SPI1_Init+0x68>)
 8000600:	2200      	movs	r2, #0
 8000602:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000604:	4b0e      	ldr	r3, [pc, #56]	; (8000640 <MX_SPI1_Init+0x68>)
 8000606:	f44f 7200 	mov.w	r2, #512	; 0x200
 800060a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800060c:	4b0c      	ldr	r3, [pc, #48]	; (8000640 <MX_SPI1_Init+0x68>)
 800060e:	2200      	movs	r2, #0
 8000610:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000612:	4b0b      	ldr	r3, [pc, #44]	; (8000640 <MX_SPI1_Init+0x68>)
 8000614:	2200      	movs	r2, #0
 8000616:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000618:	4b09      	ldr	r3, [pc, #36]	; (8000640 <MX_SPI1_Init+0x68>)
 800061a:	2200      	movs	r2, #0
 800061c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800061e:	4b08      	ldr	r3, [pc, #32]	; (8000640 <MX_SPI1_Init+0x68>)
 8000620:	2200      	movs	r2, #0
 8000622:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000624:	4b06      	ldr	r3, [pc, #24]	; (8000640 <MX_SPI1_Init+0x68>)
 8000626:	220a      	movs	r2, #10
 8000628:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800062a:	4805      	ldr	r0, [pc, #20]	; (8000640 <MX_SPI1_Init+0x68>)
 800062c:	f001 fc06 	bl	8001e3c <HAL_SPI_Init>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8000636:	f000 f9b7 	bl	80009a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800063a:	bf00      	nop
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	20000028 	.word	0x20000028
 8000644:	40013000 	.word	0x40013000

08000648 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800064c:	4b18      	ldr	r3, [pc, #96]	; (80006b0 <MX_SPI2_Init+0x68>)
 800064e:	4a19      	ldr	r2, [pc, #100]	; (80006b4 <MX_SPI2_Init+0x6c>)
 8000650:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000652:	4b17      	ldr	r3, [pc, #92]	; (80006b0 <MX_SPI2_Init+0x68>)
 8000654:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000658:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 800065a:	4b15      	ldr	r3, [pc, #84]	; (80006b0 <MX_SPI2_Init+0x68>)
 800065c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000660:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000662:	4b13      	ldr	r3, [pc, #76]	; (80006b0 <MX_SPI2_Init+0x68>)
 8000664:	2200      	movs	r2, #0
 8000666:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000668:	4b11      	ldr	r3, [pc, #68]	; (80006b0 <MX_SPI2_Init+0x68>)
 800066a:	2200      	movs	r2, #0
 800066c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800066e:	4b10      	ldr	r3, [pc, #64]	; (80006b0 <MX_SPI2_Init+0x68>)
 8000670:	2200      	movs	r2, #0
 8000672:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000674:	4b0e      	ldr	r3, [pc, #56]	; (80006b0 <MX_SPI2_Init+0x68>)
 8000676:	f44f 7200 	mov.w	r2, #512	; 0x200
 800067a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800067c:	4b0c      	ldr	r3, [pc, #48]	; (80006b0 <MX_SPI2_Init+0x68>)
 800067e:	2200      	movs	r2, #0
 8000680:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000682:	4b0b      	ldr	r3, [pc, #44]	; (80006b0 <MX_SPI2_Init+0x68>)
 8000684:	2200      	movs	r2, #0
 8000686:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000688:	4b09      	ldr	r3, [pc, #36]	; (80006b0 <MX_SPI2_Init+0x68>)
 800068a:	2200      	movs	r2, #0
 800068c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800068e:	4b08      	ldr	r3, [pc, #32]	; (80006b0 <MX_SPI2_Init+0x68>)
 8000690:	2200      	movs	r2, #0
 8000692:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000694:	4b06      	ldr	r3, [pc, #24]	; (80006b0 <MX_SPI2_Init+0x68>)
 8000696:	220a      	movs	r2, #10
 8000698:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800069a:	4805      	ldr	r0, [pc, #20]	; (80006b0 <MX_SPI2_Init+0x68>)
 800069c:	f001 fbce 	bl	8001e3c <HAL_SPI_Init>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 80006a6:	f000 f97f 	bl	80009a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80006aa:	bf00      	nop
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	20000080 	.word	0x20000080
 80006b4:	40003800 	.word	0x40003800

080006b8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80006bc:	4b18      	ldr	r3, [pc, #96]	; (8000720 <MX_SPI3_Init+0x68>)
 80006be:	4a19      	ldr	r2, [pc, #100]	; (8000724 <MX_SPI3_Init+0x6c>)
 80006c0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80006c2:	4b17      	ldr	r3, [pc, #92]	; (8000720 <MX_SPI3_Init+0x68>)
 80006c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006c8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_1LINE;
 80006ca:	4b15      	ldr	r3, [pc, #84]	; (8000720 <MX_SPI3_Init+0x68>)
 80006cc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80006d0:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80006d2:	4b13      	ldr	r3, [pc, #76]	; (8000720 <MX_SPI3_Init+0x68>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006d8:	4b11      	ldr	r3, [pc, #68]	; (8000720 <MX_SPI3_Init+0x68>)
 80006da:	2200      	movs	r2, #0
 80006dc:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006de:	4b10      	ldr	r3, [pc, #64]	; (8000720 <MX_SPI3_Init+0x68>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80006e4:	4b0e      	ldr	r3, [pc, #56]	; (8000720 <MX_SPI3_Init+0x68>)
 80006e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006ea:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006ec:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <MX_SPI3_Init+0x68>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006f2:	4b0b      	ldr	r3, [pc, #44]	; (8000720 <MX_SPI3_Init+0x68>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80006f8:	4b09      	ldr	r3, [pc, #36]	; (8000720 <MX_SPI3_Init+0x68>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006fe:	4b08      	ldr	r3, [pc, #32]	; (8000720 <MX_SPI3_Init+0x68>)
 8000700:	2200      	movs	r2, #0
 8000702:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000704:	4b06      	ldr	r3, [pc, #24]	; (8000720 <MX_SPI3_Init+0x68>)
 8000706:	220a      	movs	r2, #10
 8000708:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800070a:	4805      	ldr	r0, [pc, #20]	; (8000720 <MX_SPI3_Init+0x68>)
 800070c:	f001 fb96 	bl	8001e3c <HAL_SPI_Init>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <MX_SPI3_Init+0x62>
  {
    Error_Handler();
 8000716:	f000 f947 	bl	80009a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800071a:	bf00      	nop
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	200000d8 	.word	0x200000d8
 8000724:	40003c00 	.word	0x40003c00

08000728 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800072c:	4b11      	ldr	r3, [pc, #68]	; (8000774 <MX_UART4_Init+0x4c>)
 800072e:	4a12      	ldr	r2, [pc, #72]	; (8000778 <MX_UART4_Init+0x50>)
 8000730:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000732:	4b10      	ldr	r3, [pc, #64]	; (8000774 <MX_UART4_Init+0x4c>)
 8000734:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000738:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800073a:	4b0e      	ldr	r3, [pc, #56]	; (8000774 <MX_UART4_Init+0x4c>)
 800073c:	2200      	movs	r2, #0
 800073e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000740:	4b0c      	ldr	r3, [pc, #48]	; (8000774 <MX_UART4_Init+0x4c>)
 8000742:	2200      	movs	r2, #0
 8000744:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000746:	4b0b      	ldr	r3, [pc, #44]	; (8000774 <MX_UART4_Init+0x4c>)
 8000748:	2200      	movs	r2, #0
 800074a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800074c:	4b09      	ldr	r3, [pc, #36]	; (8000774 <MX_UART4_Init+0x4c>)
 800074e:	220c      	movs	r2, #12
 8000750:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000752:	4b08      	ldr	r3, [pc, #32]	; (8000774 <MX_UART4_Init+0x4c>)
 8000754:	2200      	movs	r2, #0
 8000756:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000758:	4b06      	ldr	r3, [pc, #24]	; (8000774 <MX_UART4_Init+0x4c>)
 800075a:	2200      	movs	r2, #0
 800075c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800075e:	4805      	ldr	r0, [pc, #20]	; (8000774 <MX_UART4_Init+0x4c>)
 8000760:	f001 fbf5 	bl	8001f4e <HAL_UART_Init>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800076a:	f000 f91d 	bl	80009a8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800076e:	bf00      	nop
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	20000130 	.word	0x20000130
 8000778:	40004c00 	.word	0x40004c00

0800077c <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000780:	4b11      	ldr	r3, [pc, #68]	; (80007c8 <MX_UART5_Init+0x4c>)
 8000782:	4a12      	ldr	r2, [pc, #72]	; (80007cc <MX_UART5_Init+0x50>)
 8000784:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000786:	4b10      	ldr	r3, [pc, #64]	; (80007c8 <MX_UART5_Init+0x4c>)
 8000788:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800078c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800078e:	4b0e      	ldr	r3, [pc, #56]	; (80007c8 <MX_UART5_Init+0x4c>)
 8000790:	2200      	movs	r2, #0
 8000792:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000794:	4b0c      	ldr	r3, [pc, #48]	; (80007c8 <MX_UART5_Init+0x4c>)
 8000796:	2200      	movs	r2, #0
 8000798:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800079a:	4b0b      	ldr	r3, [pc, #44]	; (80007c8 <MX_UART5_Init+0x4c>)
 800079c:	2200      	movs	r2, #0
 800079e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80007a0:	4b09      	ldr	r3, [pc, #36]	; (80007c8 <MX_UART5_Init+0x4c>)
 80007a2:	220c      	movs	r2, #12
 80007a4:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007a6:	4b08      	ldr	r3, [pc, #32]	; (80007c8 <MX_UART5_Init+0x4c>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80007ac:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <MX_UART5_Init+0x4c>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80007b2:	4805      	ldr	r0, [pc, #20]	; (80007c8 <MX_UART5_Init+0x4c>)
 80007b4:	f001 fbcb 	bl	8001f4e <HAL_UART_Init>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 80007be:	f000 f8f3 	bl	80009a8 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	20000174 	.word	0x20000174
 80007cc:	40005000 	.word	0x40005000

080007d0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007d4:	4b11      	ldr	r3, [pc, #68]	; (800081c <MX_USART1_UART_Init+0x4c>)
 80007d6:	4a12      	ldr	r2, [pc, #72]	; (8000820 <MX_USART1_UART_Init+0x50>)
 80007d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007da:	4b10      	ldr	r3, [pc, #64]	; (800081c <MX_USART1_UART_Init+0x4c>)
 80007dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007e2:	4b0e      	ldr	r3, [pc, #56]	; (800081c <MX_USART1_UART_Init+0x4c>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007e8:	4b0c      	ldr	r3, [pc, #48]	; (800081c <MX_USART1_UART_Init+0x4c>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007ee:	4b0b      	ldr	r3, [pc, #44]	; (800081c <MX_USART1_UART_Init+0x4c>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007f4:	4b09      	ldr	r3, [pc, #36]	; (800081c <MX_USART1_UART_Init+0x4c>)
 80007f6:	220c      	movs	r2, #12
 80007f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007fa:	4b08      	ldr	r3, [pc, #32]	; (800081c <MX_USART1_UART_Init+0x4c>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000800:	4b06      	ldr	r3, [pc, #24]	; (800081c <MX_USART1_UART_Init+0x4c>)
 8000802:	2200      	movs	r2, #0
 8000804:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000806:	4805      	ldr	r0, [pc, #20]	; (800081c <MX_USART1_UART_Init+0x4c>)
 8000808:	f001 fba1 	bl	8001f4e <HAL_UART_Init>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000812:	f000 f8c9 	bl	80009a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000816:	bf00      	nop
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	200001b8 	.word	0x200001b8
 8000820:	40011000 	.word	0x40011000

08000824 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000828:	4b11      	ldr	r3, [pc, #68]	; (8000870 <MX_USART2_UART_Init+0x4c>)
 800082a:	4a12      	ldr	r2, [pc, #72]	; (8000874 <MX_USART2_UART_Init+0x50>)
 800082c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800082e:	4b10      	ldr	r3, [pc, #64]	; (8000870 <MX_USART2_UART_Init+0x4c>)
 8000830:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000834:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000836:	4b0e      	ldr	r3, [pc, #56]	; (8000870 <MX_USART2_UART_Init+0x4c>)
 8000838:	2200      	movs	r2, #0
 800083a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800083c:	4b0c      	ldr	r3, [pc, #48]	; (8000870 <MX_USART2_UART_Init+0x4c>)
 800083e:	2200      	movs	r2, #0
 8000840:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000842:	4b0b      	ldr	r3, [pc, #44]	; (8000870 <MX_USART2_UART_Init+0x4c>)
 8000844:	2200      	movs	r2, #0
 8000846:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000848:	4b09      	ldr	r3, [pc, #36]	; (8000870 <MX_USART2_UART_Init+0x4c>)
 800084a:	220c      	movs	r2, #12
 800084c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800084e:	4b08      	ldr	r3, [pc, #32]	; (8000870 <MX_USART2_UART_Init+0x4c>)
 8000850:	2200      	movs	r2, #0
 8000852:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000854:	4b06      	ldr	r3, [pc, #24]	; (8000870 <MX_USART2_UART_Init+0x4c>)
 8000856:	2200      	movs	r2, #0
 8000858:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800085a:	4805      	ldr	r0, [pc, #20]	; (8000870 <MX_USART2_UART_Init+0x4c>)
 800085c:	f001 fb77 	bl	8001f4e <HAL_UART_Init>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000866:	f000 f89f 	bl	80009a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800086a:	bf00      	nop
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	200001fc 	.word	0x200001fc
 8000874:	40004400 	.word	0x40004400

08000878 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800087c:	4b11      	ldr	r3, [pc, #68]	; (80008c4 <MX_USART3_UART_Init+0x4c>)
 800087e:	4a12      	ldr	r2, [pc, #72]	; (80008c8 <MX_USART3_UART_Init+0x50>)
 8000880:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000882:	4b10      	ldr	r3, [pc, #64]	; (80008c4 <MX_USART3_UART_Init+0x4c>)
 8000884:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000888:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800088a:	4b0e      	ldr	r3, [pc, #56]	; (80008c4 <MX_USART3_UART_Init+0x4c>)
 800088c:	2200      	movs	r2, #0
 800088e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000890:	4b0c      	ldr	r3, [pc, #48]	; (80008c4 <MX_USART3_UART_Init+0x4c>)
 8000892:	2200      	movs	r2, #0
 8000894:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000896:	4b0b      	ldr	r3, [pc, #44]	; (80008c4 <MX_USART3_UART_Init+0x4c>)
 8000898:	2200      	movs	r2, #0
 800089a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800089c:	4b09      	ldr	r3, [pc, #36]	; (80008c4 <MX_USART3_UART_Init+0x4c>)
 800089e:	220c      	movs	r2, #12
 80008a0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008a2:	4b08      	ldr	r3, [pc, #32]	; (80008c4 <MX_USART3_UART_Init+0x4c>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008a8:	4b06      	ldr	r3, [pc, #24]	; (80008c4 <MX_USART3_UART_Init+0x4c>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008ae:	4805      	ldr	r0, [pc, #20]	; (80008c4 <MX_USART3_UART_Init+0x4c>)
 80008b0:	f001 fb4d 	bl	8001f4e <HAL_UART_Init>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80008ba:	f000 f875 	bl	80009a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008be:	bf00      	nop
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	20000240 	.word	0x20000240
 80008c8:	40004800 	.word	0x40004800

080008cc <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80008d0:	4b11      	ldr	r3, [pc, #68]	; (8000918 <MX_USART6_UART_Init+0x4c>)
 80008d2:	4a12      	ldr	r2, [pc, #72]	; (800091c <MX_USART6_UART_Init+0x50>)
 80008d4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80008d6:	4b10      	ldr	r3, [pc, #64]	; (8000918 <MX_USART6_UART_Init+0x4c>)
 80008d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008dc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80008de:	4b0e      	ldr	r3, [pc, #56]	; (8000918 <MX_USART6_UART_Init+0x4c>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80008e4:	4b0c      	ldr	r3, [pc, #48]	; (8000918 <MX_USART6_UART_Init+0x4c>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80008ea:	4b0b      	ldr	r3, [pc, #44]	; (8000918 <MX_USART6_UART_Init+0x4c>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80008f0:	4b09      	ldr	r3, [pc, #36]	; (8000918 <MX_USART6_UART_Init+0x4c>)
 80008f2:	220c      	movs	r2, #12
 80008f4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008f6:	4b08      	ldr	r3, [pc, #32]	; (8000918 <MX_USART6_UART_Init+0x4c>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80008fc:	4b06      	ldr	r3, [pc, #24]	; (8000918 <MX_USART6_UART_Init+0x4c>)
 80008fe:	2200      	movs	r2, #0
 8000900:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000902:	4805      	ldr	r0, [pc, #20]	; (8000918 <MX_USART6_UART_Init+0x4c>)
 8000904:	f001 fb23 	bl	8001f4e <HAL_UART_Init>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800090e:	f000 f84b 	bl	80009a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000912:	bf00      	nop
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	20000284 	.word	0x20000284
 800091c:	40011400 	.word	0x40011400

08000920 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000920:	b480      	push	{r7}
 8000922:	b085      	sub	sp, #20
 8000924:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000926:	2300      	movs	r3, #0
 8000928:	60fb      	str	r3, [r7, #12]
 800092a:	4b1e      	ldr	r3, [pc, #120]	; (80009a4 <MX_GPIO_Init+0x84>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	4a1d      	ldr	r2, [pc, #116]	; (80009a4 <MX_GPIO_Init+0x84>)
 8000930:	f043 0304 	orr.w	r3, r3, #4
 8000934:	6313      	str	r3, [r2, #48]	; 0x30
 8000936:	4b1b      	ldr	r3, [pc, #108]	; (80009a4 <MX_GPIO_Init+0x84>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	f003 0304 	and.w	r3, r3, #4
 800093e:	60fb      	str	r3, [r7, #12]
 8000940:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000942:	2300      	movs	r3, #0
 8000944:	60bb      	str	r3, [r7, #8]
 8000946:	4b17      	ldr	r3, [pc, #92]	; (80009a4 <MX_GPIO_Init+0x84>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	4a16      	ldr	r2, [pc, #88]	; (80009a4 <MX_GPIO_Init+0x84>)
 800094c:	f043 0301 	orr.w	r3, r3, #1
 8000950:	6313      	str	r3, [r2, #48]	; 0x30
 8000952:	4b14      	ldr	r3, [pc, #80]	; (80009a4 <MX_GPIO_Init+0x84>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	f003 0301 	and.w	r3, r3, #1
 800095a:	60bb      	str	r3, [r7, #8]
 800095c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800095e:	2300      	movs	r3, #0
 8000960:	607b      	str	r3, [r7, #4]
 8000962:	4b10      	ldr	r3, [pc, #64]	; (80009a4 <MX_GPIO_Init+0x84>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	4a0f      	ldr	r2, [pc, #60]	; (80009a4 <MX_GPIO_Init+0x84>)
 8000968:	f043 0302 	orr.w	r3, r3, #2
 800096c:	6313      	str	r3, [r2, #48]	; 0x30
 800096e:	4b0d      	ldr	r3, [pc, #52]	; (80009a4 <MX_GPIO_Init+0x84>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	f003 0302 	and.w	r3, r3, #2
 8000976:	607b      	str	r3, [r7, #4]
 8000978:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800097a:	2300      	movs	r3, #0
 800097c:	603b      	str	r3, [r7, #0]
 800097e:	4b09      	ldr	r3, [pc, #36]	; (80009a4 <MX_GPIO_Init+0x84>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	4a08      	ldr	r2, [pc, #32]	; (80009a4 <MX_GPIO_Init+0x84>)
 8000984:	f043 0308 	orr.w	r3, r3, #8
 8000988:	6313      	str	r3, [r2, #48]	; 0x30
 800098a:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <MX_GPIO_Init+0x84>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	f003 0308 	and.w	r3, r3, #8
 8000992:	603b      	str	r3, [r7, #0]
 8000994:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000996:	bf00      	nop
 8000998:	3714      	adds	r7, #20
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	40023800 	.word	0x40023800

080009a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009ac:	b672      	cpsid	i
}
 80009ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009b0:	e7fe      	b.n	80009b0 <Error_Handler+0x8>
	...

080009b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	607b      	str	r3, [r7, #4]
 80009be:	4b10      	ldr	r3, [pc, #64]	; (8000a00 <HAL_MspInit+0x4c>)
 80009c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009c2:	4a0f      	ldr	r2, [pc, #60]	; (8000a00 <HAL_MspInit+0x4c>)
 80009c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009c8:	6453      	str	r3, [r2, #68]	; 0x44
 80009ca:	4b0d      	ldr	r3, [pc, #52]	; (8000a00 <HAL_MspInit+0x4c>)
 80009cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009d2:	607b      	str	r3, [r7, #4]
 80009d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	603b      	str	r3, [r7, #0]
 80009da:	4b09      	ldr	r3, [pc, #36]	; (8000a00 <HAL_MspInit+0x4c>)
 80009dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009de:	4a08      	ldr	r2, [pc, #32]	; (8000a00 <HAL_MspInit+0x4c>)
 80009e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009e4:	6413      	str	r3, [r2, #64]	; 0x40
 80009e6:	4b06      	ldr	r3, [pc, #24]	; (8000a00 <HAL_MspInit+0x4c>)
 80009e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ee:	603b      	str	r3, [r7, #0]
 80009f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009f2:	bf00      	nop
 80009f4:	370c      	adds	r7, #12
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop
 8000a00:	40023800 	.word	0x40023800

08000a04 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b090      	sub	sp, #64	; 0x40
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a0c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a10:	2200      	movs	r2, #0
 8000a12:	601a      	str	r2, [r3, #0]
 8000a14:	605a      	str	r2, [r3, #4]
 8000a16:	609a      	str	r2, [r3, #8]
 8000a18:	60da      	str	r2, [r3, #12]
 8000a1a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a6a      	ldr	r2, [pc, #424]	; (8000bcc <HAL_SPI_MspInit+0x1c8>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d12c      	bne.n	8000a80 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a2a:	4b69      	ldr	r3, [pc, #420]	; (8000bd0 <HAL_SPI_MspInit+0x1cc>)
 8000a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a2e:	4a68      	ldr	r2, [pc, #416]	; (8000bd0 <HAL_SPI_MspInit+0x1cc>)
 8000a30:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a34:	6453      	str	r3, [r2, #68]	; 0x44
 8000a36:	4b66      	ldr	r3, [pc, #408]	; (8000bd0 <HAL_SPI_MspInit+0x1cc>)
 8000a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a40:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a42:	2300      	movs	r3, #0
 8000a44:	627b      	str	r3, [r7, #36]	; 0x24
 8000a46:	4b62      	ldr	r3, [pc, #392]	; (8000bd0 <HAL_SPI_MspInit+0x1cc>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	4a61      	ldr	r2, [pc, #388]	; (8000bd0 <HAL_SPI_MspInit+0x1cc>)
 8000a4c:	f043 0301 	orr.w	r3, r3, #1
 8000a50:	6313      	str	r3, [r2, #48]	; 0x30
 8000a52:	4b5f      	ldr	r3, [pc, #380]	; (8000bd0 <HAL_SPI_MspInit+0x1cc>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	f003 0301 	and.w	r3, r3, #1
 8000a5a:	627b      	str	r3, [r7, #36]	; 0x24
 8000a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000a5e:	23a0      	movs	r3, #160	; 0xa0
 8000a60:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a62:	2302      	movs	r3, #2
 8000a64:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a6a:	2303      	movs	r3, #3
 8000a6c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a6e:	2305      	movs	r3, #5
 8000a70:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a72:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a76:	4619      	mov	r1, r3
 8000a78:	4856      	ldr	r0, [pc, #344]	; (8000bd4 <HAL_SPI_MspInit+0x1d0>)
 8000a7a:	f000 fbeb 	bl	8001254 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000a7e:	e0a0      	b.n	8000bc2 <HAL_SPI_MspInit+0x1be>
  else if(hspi->Instance==SPI2)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a54      	ldr	r2, [pc, #336]	; (8000bd8 <HAL_SPI_MspInit+0x1d4>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d14b      	bne.n	8000b22 <HAL_SPI_MspInit+0x11e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	623b      	str	r3, [r7, #32]
 8000a8e:	4b50      	ldr	r3, [pc, #320]	; (8000bd0 <HAL_SPI_MspInit+0x1cc>)
 8000a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a92:	4a4f      	ldr	r2, [pc, #316]	; (8000bd0 <HAL_SPI_MspInit+0x1cc>)
 8000a94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a98:	6413      	str	r3, [r2, #64]	; 0x40
 8000a9a:	4b4d      	ldr	r3, [pc, #308]	; (8000bd0 <HAL_SPI_MspInit+0x1cc>)
 8000a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aa2:	623b      	str	r3, [r7, #32]
 8000aa4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	61fb      	str	r3, [r7, #28]
 8000aaa:	4b49      	ldr	r3, [pc, #292]	; (8000bd0 <HAL_SPI_MspInit+0x1cc>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	4a48      	ldr	r2, [pc, #288]	; (8000bd0 <HAL_SPI_MspInit+0x1cc>)
 8000ab0:	f043 0304 	orr.w	r3, r3, #4
 8000ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab6:	4b46      	ldr	r3, [pc, #280]	; (8000bd0 <HAL_SPI_MspInit+0x1cc>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	f003 0304 	and.w	r3, r3, #4
 8000abe:	61fb      	str	r3, [r7, #28]
 8000ac0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	61bb      	str	r3, [r7, #24]
 8000ac6:	4b42      	ldr	r3, [pc, #264]	; (8000bd0 <HAL_SPI_MspInit+0x1cc>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	4a41      	ldr	r2, [pc, #260]	; (8000bd0 <HAL_SPI_MspInit+0x1cc>)
 8000acc:	f043 0302 	orr.w	r3, r3, #2
 8000ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad2:	4b3f      	ldr	r3, [pc, #252]	; (8000bd0 <HAL_SPI_MspInit+0x1cc>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	f003 0302 	and.w	r3, r3, #2
 8000ada:	61bb      	str	r3, [r7, #24]
 8000adc:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000ade:	2308      	movs	r3, #8
 8000ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae2:	2302      	movs	r3, #2
 8000ae4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aea:	2303      	movs	r3, #3
 8000aec:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000aee:	2305      	movs	r3, #5
 8000af0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000af2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000af6:	4619      	mov	r1, r3
 8000af8:	4838      	ldr	r0, [pc, #224]	; (8000bdc <HAL_SPI_MspInit+0x1d8>)
 8000afa:	f000 fbab 	bl	8001254 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000afe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b02:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b04:	2302      	movs	r3, #2
 8000b06:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b0c:	2303      	movs	r3, #3
 8000b0e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b10:	2305      	movs	r3, #5
 8000b12:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b14:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4831      	ldr	r0, [pc, #196]	; (8000be0 <HAL_SPI_MspInit+0x1dc>)
 8000b1c:	f000 fb9a 	bl	8001254 <HAL_GPIO_Init>
}
 8000b20:	e04f      	b.n	8000bc2 <HAL_SPI_MspInit+0x1be>
  else if(hspi->Instance==SPI3)
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	4a2f      	ldr	r2, [pc, #188]	; (8000be4 <HAL_SPI_MspInit+0x1e0>)
 8000b28:	4293      	cmp	r3, r2
 8000b2a:	d14a      	bne.n	8000bc2 <HAL_SPI_MspInit+0x1be>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	617b      	str	r3, [r7, #20]
 8000b30:	4b27      	ldr	r3, [pc, #156]	; (8000bd0 <HAL_SPI_MspInit+0x1cc>)
 8000b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b34:	4a26      	ldr	r2, [pc, #152]	; (8000bd0 <HAL_SPI_MspInit+0x1cc>)
 8000b36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b3a:	6413      	str	r3, [r2, #64]	; 0x40
 8000b3c:	4b24      	ldr	r3, [pc, #144]	; (8000bd0 <HAL_SPI_MspInit+0x1cc>)
 8000b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b44:	617b      	str	r3, [r7, #20]
 8000b46:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b48:	2300      	movs	r3, #0
 8000b4a:	613b      	str	r3, [r7, #16]
 8000b4c:	4b20      	ldr	r3, [pc, #128]	; (8000bd0 <HAL_SPI_MspInit+0x1cc>)
 8000b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b50:	4a1f      	ldr	r2, [pc, #124]	; (8000bd0 <HAL_SPI_MspInit+0x1cc>)
 8000b52:	f043 0304 	orr.w	r3, r3, #4
 8000b56:	6313      	str	r3, [r2, #48]	; 0x30
 8000b58:	4b1d      	ldr	r3, [pc, #116]	; (8000bd0 <HAL_SPI_MspInit+0x1cc>)
 8000b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5c:	f003 0304 	and.w	r3, r3, #4
 8000b60:	613b      	str	r3, [r7, #16]
 8000b62:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b64:	2300      	movs	r3, #0
 8000b66:	60fb      	str	r3, [r7, #12]
 8000b68:	4b19      	ldr	r3, [pc, #100]	; (8000bd0 <HAL_SPI_MspInit+0x1cc>)
 8000b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6c:	4a18      	ldr	r2, [pc, #96]	; (8000bd0 <HAL_SPI_MspInit+0x1cc>)
 8000b6e:	f043 0302 	orr.w	r3, r3, #2
 8000b72:	6313      	str	r3, [r2, #48]	; 0x30
 8000b74:	4b16      	ldr	r3, [pc, #88]	; (8000bd0 <HAL_SPI_MspInit+0x1cc>)
 8000b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b78:	f003 0302 	and.w	r3, r3, #2
 8000b7c:	60fb      	str	r3, [r7, #12]
 8000b7e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000b80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b84:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b86:	2302      	movs	r3, #2
 8000b88:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b8e:	2303      	movs	r3, #3
 8000b90:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b92:	2306      	movs	r3, #6
 8000b94:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	480f      	ldr	r0, [pc, #60]	; (8000bdc <HAL_SPI_MspInit+0x1d8>)
 8000b9e:	f000 fb59 	bl	8001254 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000ba2:	2320      	movs	r3, #32
 8000ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba6:	2302      	movs	r3, #2
 8000ba8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000baa:	2300      	movs	r3, #0
 8000bac:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bae:	2303      	movs	r3, #3
 8000bb0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000bb2:	2306      	movs	r3, #6
 8000bb4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bb6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bba:	4619      	mov	r1, r3
 8000bbc:	4808      	ldr	r0, [pc, #32]	; (8000be0 <HAL_SPI_MspInit+0x1dc>)
 8000bbe:	f000 fb49 	bl	8001254 <HAL_GPIO_Init>
}
 8000bc2:	bf00      	nop
 8000bc4:	3740      	adds	r7, #64	; 0x40
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	40013000 	.word	0x40013000
 8000bd0:	40023800 	.word	0x40023800
 8000bd4:	40020000 	.word	0x40020000
 8000bd8:	40003800 	.word	0x40003800
 8000bdc:	40020800 	.word	0x40020800
 8000be0:	40020400 	.word	0x40020400
 8000be4:	40003c00 	.word	0x40003c00

08000be8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b094      	sub	sp, #80	; 0x50
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	601a      	str	r2, [r3, #0]
 8000bf8:	605a      	str	r2, [r3, #4]
 8000bfa:	609a      	str	r2, [r3, #8]
 8000bfc:	60da      	str	r2, [r3, #12]
 8000bfe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a8c      	ldr	r2, [pc, #560]	; (8000e38 <HAL_UART_MspInit+0x250>)
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d12c      	bne.n	8000c64 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	63bb      	str	r3, [r7, #56]	; 0x38
 8000c0e:	4b8b      	ldr	r3, [pc, #556]	; (8000e3c <HAL_UART_MspInit+0x254>)
 8000c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c12:	4a8a      	ldr	r2, [pc, #552]	; (8000e3c <HAL_UART_MspInit+0x254>)
 8000c14:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000c18:	6413      	str	r3, [r2, #64]	; 0x40
 8000c1a:	4b88      	ldr	r3, [pc, #544]	; (8000e3c <HAL_UART_MspInit+0x254>)
 8000c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000c22:	63bb      	str	r3, [r7, #56]	; 0x38
 8000c24:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	637b      	str	r3, [r7, #52]	; 0x34
 8000c2a:	4b84      	ldr	r3, [pc, #528]	; (8000e3c <HAL_UART_MspInit+0x254>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2e:	4a83      	ldr	r2, [pc, #524]	; (8000e3c <HAL_UART_MspInit+0x254>)
 8000c30:	f043 0301 	orr.w	r3, r3, #1
 8000c34:	6313      	str	r3, [r2, #48]	; 0x30
 8000c36:	4b81      	ldr	r3, [pc, #516]	; (8000e3c <HAL_UART_MspInit+0x254>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	637b      	str	r3, [r7, #52]	; 0x34
 8000c40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000c42:	2303      	movs	r3, #3
 8000c44:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c46:	2302      	movs	r3, #2
 8000c48:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c4e:	2303      	movs	r3, #3
 8000c50:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000c52:	2308      	movs	r3, #8
 8000c54:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c56:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	4878      	ldr	r0, [pc, #480]	; (8000e40 <HAL_UART_MspInit+0x258>)
 8000c5e:	f000 faf9 	bl	8001254 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8000c62:	e12e      	b.n	8000ec2 <HAL_UART_MspInit+0x2da>
  else if(huart->Instance==UART5)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a76      	ldr	r2, [pc, #472]	; (8000e44 <HAL_UART_MspInit+0x25c>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d14b      	bne.n	8000d06 <HAL_UART_MspInit+0x11e>
    __HAL_RCC_UART5_CLK_ENABLE();
 8000c6e:	2300      	movs	r3, #0
 8000c70:	633b      	str	r3, [r7, #48]	; 0x30
 8000c72:	4b72      	ldr	r3, [pc, #456]	; (8000e3c <HAL_UART_MspInit+0x254>)
 8000c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c76:	4a71      	ldr	r2, [pc, #452]	; (8000e3c <HAL_UART_MspInit+0x254>)
 8000c78:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000c7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c7e:	4b6f      	ldr	r3, [pc, #444]	; (8000e3c <HAL_UART_MspInit+0x254>)
 8000c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c86:	633b      	str	r3, [r7, #48]	; 0x30
 8000c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000c8e:	4b6b      	ldr	r3, [pc, #428]	; (8000e3c <HAL_UART_MspInit+0x254>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c92:	4a6a      	ldr	r2, [pc, #424]	; (8000e3c <HAL_UART_MspInit+0x254>)
 8000c94:	f043 0304 	orr.w	r3, r3, #4
 8000c98:	6313      	str	r3, [r2, #48]	; 0x30
 8000c9a:	4b68      	ldr	r3, [pc, #416]	; (8000e3c <HAL_UART_MspInit+0x254>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9e:	f003 0304 	and.w	r3, r3, #4
 8000ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	62bb      	str	r3, [r7, #40]	; 0x28
 8000caa:	4b64      	ldr	r3, [pc, #400]	; (8000e3c <HAL_UART_MspInit+0x254>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cae:	4a63      	ldr	r2, [pc, #396]	; (8000e3c <HAL_UART_MspInit+0x254>)
 8000cb0:	f043 0308 	orr.w	r3, r3, #8
 8000cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb6:	4b61      	ldr	r3, [pc, #388]	; (8000e3c <HAL_UART_MspInit+0x254>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cba:	f003 0308 	and.w	r3, r3, #8
 8000cbe:	62bb      	str	r3, [r7, #40]	; 0x28
 8000cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000cc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc8:	2302      	movs	r3, #2
 8000cca:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd0:	2303      	movs	r3, #3
 8000cd2:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000cd4:	2308      	movs	r3, #8
 8000cd6:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cd8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000cdc:	4619      	mov	r1, r3
 8000cde:	485a      	ldr	r0, [pc, #360]	; (8000e48 <HAL_UART_MspInit+0x260>)
 8000ce0:	f000 fab8 	bl	8001254 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ce4:	2304      	movs	r3, #4
 8000ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce8:	2302      	movs	r3, #2
 8000cea:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cec:	2300      	movs	r3, #0
 8000cee:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf0:	2303      	movs	r3, #3
 8000cf2:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000cf4:	2308      	movs	r3, #8
 8000cf6:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cf8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	4853      	ldr	r0, [pc, #332]	; (8000e4c <HAL_UART_MspInit+0x264>)
 8000d00:	f000 faa8 	bl	8001254 <HAL_GPIO_Init>
}
 8000d04:	e0dd      	b.n	8000ec2 <HAL_UART_MspInit+0x2da>
  else if(huart->Instance==USART1)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4a51      	ldr	r2, [pc, #324]	; (8000e50 <HAL_UART_MspInit+0x268>)
 8000d0c:	4293      	cmp	r3, r2
 8000d0e:	d12d      	bne.n	8000d6c <HAL_UART_MspInit+0x184>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d10:	2300      	movs	r3, #0
 8000d12:	627b      	str	r3, [r7, #36]	; 0x24
 8000d14:	4b49      	ldr	r3, [pc, #292]	; (8000e3c <HAL_UART_MspInit+0x254>)
 8000d16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d18:	4a48      	ldr	r2, [pc, #288]	; (8000e3c <HAL_UART_MspInit+0x254>)
 8000d1a:	f043 0310 	orr.w	r3, r3, #16
 8000d1e:	6453      	str	r3, [r2, #68]	; 0x44
 8000d20:	4b46      	ldr	r3, [pc, #280]	; (8000e3c <HAL_UART_MspInit+0x254>)
 8000d22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d24:	f003 0310 	and.w	r3, r3, #16
 8000d28:	627b      	str	r3, [r7, #36]	; 0x24
 8000d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	623b      	str	r3, [r7, #32]
 8000d30:	4b42      	ldr	r3, [pc, #264]	; (8000e3c <HAL_UART_MspInit+0x254>)
 8000d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d34:	4a41      	ldr	r2, [pc, #260]	; (8000e3c <HAL_UART_MspInit+0x254>)
 8000d36:	f043 0301 	orr.w	r3, r3, #1
 8000d3a:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3c:	4b3f      	ldr	r3, [pc, #252]	; (8000e3c <HAL_UART_MspInit+0x254>)
 8000d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d40:	f003 0301 	and.w	r3, r3, #1
 8000d44:	623b      	str	r3, [r7, #32]
 8000d46:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000d48:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000d4c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d4e:	2302      	movs	r3, #2
 8000d50:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d52:	2300      	movs	r3, #0
 8000d54:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d56:	2303      	movs	r3, #3
 8000d58:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d5a:	2307      	movs	r3, #7
 8000d5c:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d5e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000d62:	4619      	mov	r1, r3
 8000d64:	4836      	ldr	r0, [pc, #216]	; (8000e40 <HAL_UART_MspInit+0x258>)
 8000d66:	f000 fa75 	bl	8001254 <HAL_GPIO_Init>
}
 8000d6a:	e0aa      	b.n	8000ec2 <HAL_UART_MspInit+0x2da>
  else if(huart->Instance==USART2)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a38      	ldr	r2, [pc, #224]	; (8000e54 <HAL_UART_MspInit+0x26c>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d12c      	bne.n	8000dd0 <HAL_UART_MspInit+0x1e8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d76:	2300      	movs	r3, #0
 8000d78:	61fb      	str	r3, [r7, #28]
 8000d7a:	4b30      	ldr	r3, [pc, #192]	; (8000e3c <HAL_UART_MspInit+0x254>)
 8000d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7e:	4a2f      	ldr	r2, [pc, #188]	; (8000e3c <HAL_UART_MspInit+0x254>)
 8000d80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d84:	6413      	str	r3, [r2, #64]	; 0x40
 8000d86:	4b2d      	ldr	r3, [pc, #180]	; (8000e3c <HAL_UART_MspInit+0x254>)
 8000d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d8e:	61fb      	str	r3, [r7, #28]
 8000d90:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d92:	2300      	movs	r3, #0
 8000d94:	61bb      	str	r3, [r7, #24]
 8000d96:	4b29      	ldr	r3, [pc, #164]	; (8000e3c <HAL_UART_MspInit+0x254>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9a:	4a28      	ldr	r2, [pc, #160]	; (8000e3c <HAL_UART_MspInit+0x254>)
 8000d9c:	f043 0301 	orr.w	r3, r3, #1
 8000da0:	6313      	str	r3, [r2, #48]	; 0x30
 8000da2:	4b26      	ldr	r3, [pc, #152]	; (8000e3c <HAL_UART_MspInit+0x254>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da6:	f003 0301 	and.w	r3, r3, #1
 8000daa:	61bb      	str	r3, [r7, #24]
 8000dac:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000dae:	230c      	movs	r3, #12
 8000db0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db2:	2302      	movs	r3, #2
 8000db4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db6:	2300      	movs	r3, #0
 8000db8:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dba:	2303      	movs	r3, #3
 8000dbc:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000dbe:	2307      	movs	r3, #7
 8000dc0:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	481d      	ldr	r0, [pc, #116]	; (8000e40 <HAL_UART_MspInit+0x258>)
 8000dca:	f000 fa43 	bl	8001254 <HAL_GPIO_Init>
}
 8000dce:	e078      	b.n	8000ec2 <HAL_UART_MspInit+0x2da>
  else if(huart->Instance==USART3)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a20      	ldr	r2, [pc, #128]	; (8000e58 <HAL_UART_MspInit+0x270>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d142      	bne.n	8000e60 <HAL_UART_MspInit+0x278>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000dda:	2300      	movs	r3, #0
 8000ddc:	617b      	str	r3, [r7, #20]
 8000dde:	4b17      	ldr	r3, [pc, #92]	; (8000e3c <HAL_UART_MspInit+0x254>)
 8000de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de2:	4a16      	ldr	r2, [pc, #88]	; (8000e3c <HAL_UART_MspInit+0x254>)
 8000de4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000de8:	6413      	str	r3, [r2, #64]	; 0x40
 8000dea:	4b14      	ldr	r3, [pc, #80]	; (8000e3c <HAL_UART_MspInit+0x254>)
 8000dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000df2:	617b      	str	r3, [r7, #20]
 8000df4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000df6:	2300      	movs	r3, #0
 8000df8:	613b      	str	r3, [r7, #16]
 8000dfa:	4b10      	ldr	r3, [pc, #64]	; (8000e3c <HAL_UART_MspInit+0x254>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfe:	4a0f      	ldr	r2, [pc, #60]	; (8000e3c <HAL_UART_MspInit+0x254>)
 8000e00:	f043 0302 	orr.w	r3, r3, #2
 8000e04:	6313      	str	r3, [r2, #48]	; 0x30
 8000e06:	4b0d      	ldr	r3, [pc, #52]	; (8000e3c <HAL_UART_MspInit+0x254>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0a:	f003 0302 	and.w	r3, r3, #2
 8000e0e:	613b      	str	r3, [r7, #16]
 8000e10:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000e12:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000e16:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e20:	2303      	movs	r3, #3
 8000e22:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e24:	2307      	movs	r3, #7
 8000e26:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e28:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	480b      	ldr	r0, [pc, #44]	; (8000e5c <HAL_UART_MspInit+0x274>)
 8000e30:	f000 fa10 	bl	8001254 <HAL_GPIO_Init>
}
 8000e34:	e045      	b.n	8000ec2 <HAL_UART_MspInit+0x2da>
 8000e36:	bf00      	nop
 8000e38:	40004c00 	.word	0x40004c00
 8000e3c:	40023800 	.word	0x40023800
 8000e40:	40020000 	.word	0x40020000
 8000e44:	40005000 	.word	0x40005000
 8000e48:	40020800 	.word	0x40020800
 8000e4c:	40020c00 	.word	0x40020c00
 8000e50:	40011000 	.word	0x40011000
 8000e54:	40004400 	.word	0x40004400
 8000e58:	40004800 	.word	0x40004800
 8000e5c:	40020400 	.word	0x40020400
  else if(huart->Instance==USART6)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a19      	ldr	r2, [pc, #100]	; (8000ecc <HAL_UART_MspInit+0x2e4>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d12b      	bne.n	8000ec2 <HAL_UART_MspInit+0x2da>
    __HAL_RCC_USART6_CLK_ENABLE();
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	60fb      	str	r3, [r7, #12]
 8000e6e:	4b18      	ldr	r3, [pc, #96]	; (8000ed0 <HAL_UART_MspInit+0x2e8>)
 8000e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e72:	4a17      	ldr	r2, [pc, #92]	; (8000ed0 <HAL_UART_MspInit+0x2e8>)
 8000e74:	f043 0320 	orr.w	r3, r3, #32
 8000e78:	6453      	str	r3, [r2, #68]	; 0x44
 8000e7a:	4b15      	ldr	r3, [pc, #84]	; (8000ed0 <HAL_UART_MspInit+0x2e8>)
 8000e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e7e:	f003 0320 	and.w	r3, r3, #32
 8000e82:	60fb      	str	r3, [r7, #12]
 8000e84:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e86:	2300      	movs	r3, #0
 8000e88:	60bb      	str	r3, [r7, #8]
 8000e8a:	4b11      	ldr	r3, [pc, #68]	; (8000ed0 <HAL_UART_MspInit+0x2e8>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8e:	4a10      	ldr	r2, [pc, #64]	; (8000ed0 <HAL_UART_MspInit+0x2e8>)
 8000e90:	f043 0304 	orr.w	r3, r3, #4
 8000e94:	6313      	str	r3, [r2, #48]	; 0x30
 8000e96:	4b0e      	ldr	r3, [pc, #56]	; (8000ed0 <HAL_UART_MspInit+0x2e8>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9a:	f003 0304 	and.w	r3, r3, #4
 8000e9e:	60bb      	str	r3, [r7, #8]
 8000ea0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ea2:	23c0      	movs	r3, #192	; 0xc0
 8000ea4:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eae:	2303      	movs	r3, #3
 8000eb0:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000eb2:	2308      	movs	r3, #8
 8000eb4:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eb6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4805      	ldr	r0, [pc, #20]	; (8000ed4 <HAL_UART_MspInit+0x2ec>)
 8000ebe:	f000 f9c9 	bl	8001254 <HAL_GPIO_Init>
}
 8000ec2:	bf00      	nop
 8000ec4:	3750      	adds	r7, #80	; 0x50
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	40011400 	.word	0x40011400
 8000ed0:	40023800 	.word	0x40023800
 8000ed4:	40020800 	.word	0x40020800

08000ed8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000edc:	e7fe      	b.n	8000edc <NMI_Handler+0x4>

08000ede <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ede:	b480      	push	{r7}
 8000ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ee2:	e7fe      	b.n	8000ee2 <HardFault_Handler+0x4>

08000ee4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ee8:	e7fe      	b.n	8000ee8 <MemManage_Handler+0x4>

08000eea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eea:	b480      	push	{r7}
 8000eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eee:	e7fe      	b.n	8000eee <BusFault_Handler+0x4>

08000ef0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ef4:	e7fe      	b.n	8000ef4 <UsageFault_Handler+0x4>

08000ef6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ef6:	b480      	push	{r7}
 8000ef8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000efa:	bf00      	nop
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr

08000f04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f08:	bf00      	nop
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr

08000f12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f12:	b480      	push	{r7}
 8000f14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f16:	bf00      	nop
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr

08000f20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f24:	f000 f890 	bl	8001048 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f28:	bf00      	nop
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f30:	4b06      	ldr	r3, [pc, #24]	; (8000f4c <SystemInit+0x20>)
 8000f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f36:	4a05      	ldr	r2, [pc, #20]	; (8000f4c <SystemInit+0x20>)
 8000f38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f40:	bf00      	nop
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	e000ed00 	.word	0xe000ed00

08000f50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000f50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f88 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f54:	480d      	ldr	r0, [pc, #52]	; (8000f8c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f56:	490e      	ldr	r1, [pc, #56]	; (8000f90 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f58:	4a0e      	ldr	r2, [pc, #56]	; (8000f94 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f5c:	e002      	b.n	8000f64 <LoopCopyDataInit>

08000f5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f62:	3304      	adds	r3, #4

08000f64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f68:	d3f9      	bcc.n	8000f5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f6a:	4a0b      	ldr	r2, [pc, #44]	; (8000f98 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f6c:	4c0b      	ldr	r4, [pc, #44]	; (8000f9c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f70:	e001      	b.n	8000f76 <LoopFillZerobss>

08000f72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f74:	3204      	adds	r2, #4

08000f76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f78:	d3fb      	bcc.n	8000f72 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f7a:	f7ff ffd7 	bl	8000f2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f7e:	f001 faa7 	bl	80024d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f82:	f7ff faa3 	bl	80004cc <main>
  bx  lr    
 8000f86:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000f88:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f90:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f94:	08002568 	.word	0x08002568
  ldr r2, =_sbss
 8000f98:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f9c:	200002cc 	.word	0x200002cc

08000fa0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fa0:	e7fe      	b.n	8000fa0 <ADC_IRQHandler>
	...

08000fa4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fa8:	4b0e      	ldr	r3, [pc, #56]	; (8000fe4 <HAL_Init+0x40>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a0d      	ldr	r2, [pc, #52]	; (8000fe4 <HAL_Init+0x40>)
 8000fae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fb2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fb4:	4b0b      	ldr	r3, [pc, #44]	; (8000fe4 <HAL_Init+0x40>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a0a      	ldr	r2, [pc, #40]	; (8000fe4 <HAL_Init+0x40>)
 8000fba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fbe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fc0:	4b08      	ldr	r3, [pc, #32]	; (8000fe4 <HAL_Init+0x40>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a07      	ldr	r2, [pc, #28]	; (8000fe4 <HAL_Init+0x40>)
 8000fc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fcc:	2003      	movs	r0, #3
 8000fce:	f000 f90d 	bl	80011ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fd2:	200f      	movs	r0, #15
 8000fd4:	f000 f808 	bl	8000fe8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fd8:	f7ff fcec 	bl	80009b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fdc:	2300      	movs	r3, #0
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	40023c00 	.word	0x40023c00

08000fe8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ff0:	4b12      	ldr	r3, [pc, #72]	; (800103c <HAL_InitTick+0x54>)
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	4b12      	ldr	r3, [pc, #72]	; (8001040 <HAL_InitTick+0x58>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ffe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001002:	fbb2 f3f3 	udiv	r3, r2, r3
 8001006:	4618      	mov	r0, r3
 8001008:	f000 f917 	bl	800123a <HAL_SYSTICK_Config>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001012:	2301      	movs	r3, #1
 8001014:	e00e      	b.n	8001034 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2b0f      	cmp	r3, #15
 800101a:	d80a      	bhi.n	8001032 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800101c:	2200      	movs	r2, #0
 800101e:	6879      	ldr	r1, [r7, #4]
 8001020:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001024:	f000 f8ed 	bl	8001202 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001028:	4a06      	ldr	r2, [pc, #24]	; (8001044 <HAL_InitTick+0x5c>)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800102e:	2300      	movs	r3, #0
 8001030:	e000      	b.n	8001034 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001032:	2301      	movs	r3, #1
}
 8001034:	4618      	mov	r0, r3
 8001036:	3708      	adds	r7, #8
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	20000000 	.word	0x20000000
 8001040:	20000008 	.word	0x20000008
 8001044:	20000004 	.word	0x20000004

08001048 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800104c:	4b06      	ldr	r3, [pc, #24]	; (8001068 <HAL_IncTick+0x20>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	461a      	mov	r2, r3
 8001052:	4b06      	ldr	r3, [pc, #24]	; (800106c <HAL_IncTick+0x24>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4413      	add	r3, r2
 8001058:	4a04      	ldr	r2, [pc, #16]	; (800106c <HAL_IncTick+0x24>)
 800105a:	6013      	str	r3, [r2, #0]
}
 800105c:	bf00      	nop
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	20000008 	.word	0x20000008
 800106c:	200002c8 	.word	0x200002c8

08001070 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  return uwTick;
 8001074:	4b03      	ldr	r3, [pc, #12]	; (8001084 <HAL_GetTick+0x14>)
 8001076:	681b      	ldr	r3, [r3, #0]
}
 8001078:	4618      	mov	r0, r3
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	200002c8 	.word	0x200002c8

08001088 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001088:	b480      	push	{r7}
 800108a:	b085      	sub	sp, #20
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	f003 0307 	and.w	r3, r3, #7
 8001096:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001098:	4b0c      	ldr	r3, [pc, #48]	; (80010cc <__NVIC_SetPriorityGrouping+0x44>)
 800109a:	68db      	ldr	r3, [r3, #12]
 800109c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800109e:	68ba      	ldr	r2, [r7, #8]
 80010a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010a4:	4013      	ands	r3, r2
 80010a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010ba:	4a04      	ldr	r2, [pc, #16]	; (80010cc <__NVIC_SetPriorityGrouping+0x44>)
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	60d3      	str	r3, [r2, #12]
}
 80010c0:	bf00      	nop
 80010c2:	3714      	adds	r7, #20
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr
 80010cc:	e000ed00 	.word	0xe000ed00

080010d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010d4:	4b04      	ldr	r3, [pc, #16]	; (80010e8 <__NVIC_GetPriorityGrouping+0x18>)
 80010d6:	68db      	ldr	r3, [r3, #12]
 80010d8:	0a1b      	lsrs	r3, r3, #8
 80010da:	f003 0307 	and.w	r3, r3, #7
}
 80010de:	4618      	mov	r0, r3
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr
 80010e8:	e000ed00 	.word	0xe000ed00

080010ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	4603      	mov	r3, r0
 80010f4:	6039      	str	r1, [r7, #0]
 80010f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	db0a      	blt.n	8001116 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	b2da      	uxtb	r2, r3
 8001104:	490c      	ldr	r1, [pc, #48]	; (8001138 <__NVIC_SetPriority+0x4c>)
 8001106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110a:	0112      	lsls	r2, r2, #4
 800110c:	b2d2      	uxtb	r2, r2
 800110e:	440b      	add	r3, r1
 8001110:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001114:	e00a      	b.n	800112c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	b2da      	uxtb	r2, r3
 800111a:	4908      	ldr	r1, [pc, #32]	; (800113c <__NVIC_SetPriority+0x50>)
 800111c:	79fb      	ldrb	r3, [r7, #7]
 800111e:	f003 030f 	and.w	r3, r3, #15
 8001122:	3b04      	subs	r3, #4
 8001124:	0112      	lsls	r2, r2, #4
 8001126:	b2d2      	uxtb	r2, r2
 8001128:	440b      	add	r3, r1
 800112a:	761a      	strb	r2, [r3, #24]
}
 800112c:	bf00      	nop
 800112e:	370c      	adds	r7, #12
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr
 8001138:	e000e100 	.word	0xe000e100
 800113c:	e000ed00 	.word	0xe000ed00

08001140 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001140:	b480      	push	{r7}
 8001142:	b089      	sub	sp, #36	; 0x24
 8001144:	af00      	add	r7, sp, #0
 8001146:	60f8      	str	r0, [r7, #12]
 8001148:	60b9      	str	r1, [r7, #8]
 800114a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	f003 0307 	and.w	r3, r3, #7
 8001152:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001154:	69fb      	ldr	r3, [r7, #28]
 8001156:	f1c3 0307 	rsb	r3, r3, #7
 800115a:	2b04      	cmp	r3, #4
 800115c:	bf28      	it	cs
 800115e:	2304      	movcs	r3, #4
 8001160:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	3304      	adds	r3, #4
 8001166:	2b06      	cmp	r3, #6
 8001168:	d902      	bls.n	8001170 <NVIC_EncodePriority+0x30>
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	3b03      	subs	r3, #3
 800116e:	e000      	b.n	8001172 <NVIC_EncodePriority+0x32>
 8001170:	2300      	movs	r3, #0
 8001172:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001174:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001178:	69bb      	ldr	r3, [r7, #24]
 800117a:	fa02 f303 	lsl.w	r3, r2, r3
 800117e:	43da      	mvns	r2, r3
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	401a      	ands	r2, r3
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001188:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	fa01 f303 	lsl.w	r3, r1, r3
 8001192:	43d9      	mvns	r1, r3
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001198:	4313      	orrs	r3, r2
         );
}
 800119a:	4618      	mov	r0, r3
 800119c:	3724      	adds	r7, #36	; 0x24
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
	...

080011a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	3b01      	subs	r3, #1
 80011b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011b8:	d301      	bcc.n	80011be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011ba:	2301      	movs	r3, #1
 80011bc:	e00f      	b.n	80011de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011be:	4a0a      	ldr	r2, [pc, #40]	; (80011e8 <SysTick_Config+0x40>)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	3b01      	subs	r3, #1
 80011c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011c6:	210f      	movs	r1, #15
 80011c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011cc:	f7ff ff8e 	bl	80010ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011d0:	4b05      	ldr	r3, [pc, #20]	; (80011e8 <SysTick_Config+0x40>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011d6:	4b04      	ldr	r3, [pc, #16]	; (80011e8 <SysTick_Config+0x40>)
 80011d8:	2207      	movs	r2, #7
 80011da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011dc:	2300      	movs	r3, #0
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	e000e010 	.word	0xe000e010

080011ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011f4:	6878      	ldr	r0, [r7, #4]
 80011f6:	f7ff ff47 	bl	8001088 <__NVIC_SetPriorityGrouping>
}
 80011fa:	bf00      	nop
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}

08001202 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001202:	b580      	push	{r7, lr}
 8001204:	b086      	sub	sp, #24
 8001206:	af00      	add	r7, sp, #0
 8001208:	4603      	mov	r3, r0
 800120a:	60b9      	str	r1, [r7, #8]
 800120c:	607a      	str	r2, [r7, #4]
 800120e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001210:	2300      	movs	r3, #0
 8001212:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001214:	f7ff ff5c 	bl	80010d0 <__NVIC_GetPriorityGrouping>
 8001218:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800121a:	687a      	ldr	r2, [r7, #4]
 800121c:	68b9      	ldr	r1, [r7, #8]
 800121e:	6978      	ldr	r0, [r7, #20]
 8001220:	f7ff ff8e 	bl	8001140 <NVIC_EncodePriority>
 8001224:	4602      	mov	r2, r0
 8001226:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800122a:	4611      	mov	r1, r2
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff ff5d 	bl	80010ec <__NVIC_SetPriority>
}
 8001232:	bf00      	nop
 8001234:	3718      	adds	r7, #24
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}

0800123a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800123a:	b580      	push	{r7, lr}
 800123c:	b082      	sub	sp, #8
 800123e:	af00      	add	r7, sp, #0
 8001240:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001242:	6878      	ldr	r0, [r7, #4]
 8001244:	f7ff ffb0 	bl	80011a8 <SysTick_Config>
 8001248:	4603      	mov	r3, r0
}
 800124a:	4618      	mov	r0, r3
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
	...

08001254 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001254:	b480      	push	{r7}
 8001256:	b089      	sub	sp, #36	; 0x24
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800125e:	2300      	movs	r3, #0
 8001260:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001262:	2300      	movs	r3, #0
 8001264:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001266:	2300      	movs	r3, #0
 8001268:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800126a:	2300      	movs	r3, #0
 800126c:	61fb      	str	r3, [r7, #28]
 800126e:	e16b      	b.n	8001548 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001270:	2201      	movs	r2, #1
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	fa02 f303 	lsl.w	r3, r2, r3
 8001278:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	697a      	ldr	r2, [r7, #20]
 8001280:	4013      	ands	r3, r2
 8001282:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001284:	693a      	ldr	r2, [r7, #16]
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	429a      	cmp	r2, r3
 800128a:	f040 815a 	bne.w	8001542 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	f003 0303 	and.w	r3, r3, #3
 8001296:	2b01      	cmp	r3, #1
 8001298:	d005      	beq.n	80012a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012a2:	2b02      	cmp	r3, #2
 80012a4:	d130      	bne.n	8001308 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012ac:	69fb      	ldr	r3, [r7, #28]
 80012ae:	005b      	lsls	r3, r3, #1
 80012b0:	2203      	movs	r2, #3
 80012b2:	fa02 f303 	lsl.w	r3, r2, r3
 80012b6:	43db      	mvns	r3, r3
 80012b8:	69ba      	ldr	r2, [r7, #24]
 80012ba:	4013      	ands	r3, r2
 80012bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	68da      	ldr	r2, [r3, #12]
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	005b      	lsls	r3, r3, #1
 80012c6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ca:	69ba      	ldr	r2, [r7, #24]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	69ba      	ldr	r2, [r7, #24]
 80012d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012dc:	2201      	movs	r2, #1
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	fa02 f303 	lsl.w	r3, r2, r3
 80012e4:	43db      	mvns	r3, r3
 80012e6:	69ba      	ldr	r2, [r7, #24]
 80012e8:	4013      	ands	r3, r2
 80012ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	091b      	lsrs	r3, r3, #4
 80012f2:	f003 0201 	and.w	r2, r3, #1
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	4313      	orrs	r3, r2
 8001300:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f003 0303 	and.w	r3, r3, #3
 8001310:	2b03      	cmp	r3, #3
 8001312:	d017      	beq.n	8001344 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	005b      	lsls	r3, r3, #1
 800131e:	2203      	movs	r2, #3
 8001320:	fa02 f303 	lsl.w	r3, r2, r3
 8001324:	43db      	mvns	r3, r3
 8001326:	69ba      	ldr	r2, [r7, #24]
 8001328:	4013      	ands	r3, r2
 800132a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	689a      	ldr	r2, [r3, #8]
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	005b      	lsls	r3, r3, #1
 8001334:	fa02 f303 	lsl.w	r3, r2, r3
 8001338:	69ba      	ldr	r2, [r7, #24]
 800133a:	4313      	orrs	r3, r2
 800133c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f003 0303 	and.w	r3, r3, #3
 800134c:	2b02      	cmp	r3, #2
 800134e:	d123      	bne.n	8001398 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001350:	69fb      	ldr	r3, [r7, #28]
 8001352:	08da      	lsrs	r2, r3, #3
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	3208      	adds	r2, #8
 8001358:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800135c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	f003 0307 	and.w	r3, r3, #7
 8001364:	009b      	lsls	r3, r3, #2
 8001366:	220f      	movs	r2, #15
 8001368:	fa02 f303 	lsl.w	r3, r2, r3
 800136c:	43db      	mvns	r3, r3
 800136e:	69ba      	ldr	r2, [r7, #24]
 8001370:	4013      	ands	r3, r2
 8001372:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	691a      	ldr	r2, [r3, #16]
 8001378:	69fb      	ldr	r3, [r7, #28]
 800137a:	f003 0307 	and.w	r3, r3, #7
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	fa02 f303 	lsl.w	r3, r2, r3
 8001384:	69ba      	ldr	r2, [r7, #24]
 8001386:	4313      	orrs	r3, r2
 8001388:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	08da      	lsrs	r2, r3, #3
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	3208      	adds	r2, #8
 8001392:	69b9      	ldr	r1, [r7, #24]
 8001394:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	005b      	lsls	r3, r3, #1
 80013a2:	2203      	movs	r2, #3
 80013a4:	fa02 f303 	lsl.w	r3, r2, r3
 80013a8:	43db      	mvns	r3, r3
 80013aa:	69ba      	ldr	r2, [r7, #24]
 80013ac:	4013      	ands	r3, r2
 80013ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f003 0203 	and.w	r2, r3, #3
 80013b8:	69fb      	ldr	r3, [r7, #28]
 80013ba:	005b      	lsls	r3, r3, #1
 80013bc:	fa02 f303 	lsl.w	r3, r2, r3
 80013c0:	69ba      	ldr	r2, [r7, #24]
 80013c2:	4313      	orrs	r3, r2
 80013c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	69ba      	ldr	r2, [r7, #24]
 80013ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	f000 80b4 	beq.w	8001542 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013da:	2300      	movs	r3, #0
 80013dc:	60fb      	str	r3, [r7, #12]
 80013de:	4b60      	ldr	r3, [pc, #384]	; (8001560 <HAL_GPIO_Init+0x30c>)
 80013e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e2:	4a5f      	ldr	r2, [pc, #380]	; (8001560 <HAL_GPIO_Init+0x30c>)
 80013e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013e8:	6453      	str	r3, [r2, #68]	; 0x44
 80013ea:	4b5d      	ldr	r3, [pc, #372]	; (8001560 <HAL_GPIO_Init+0x30c>)
 80013ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013f2:	60fb      	str	r3, [r7, #12]
 80013f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013f6:	4a5b      	ldr	r2, [pc, #364]	; (8001564 <HAL_GPIO_Init+0x310>)
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	089b      	lsrs	r3, r3, #2
 80013fc:	3302      	adds	r3, #2
 80013fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001402:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	f003 0303 	and.w	r3, r3, #3
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	220f      	movs	r2, #15
 800140e:	fa02 f303 	lsl.w	r3, r2, r3
 8001412:	43db      	mvns	r3, r3
 8001414:	69ba      	ldr	r2, [r7, #24]
 8001416:	4013      	ands	r3, r2
 8001418:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4a52      	ldr	r2, [pc, #328]	; (8001568 <HAL_GPIO_Init+0x314>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d02b      	beq.n	800147a <HAL_GPIO_Init+0x226>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4a51      	ldr	r2, [pc, #324]	; (800156c <HAL_GPIO_Init+0x318>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d025      	beq.n	8001476 <HAL_GPIO_Init+0x222>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4a50      	ldr	r2, [pc, #320]	; (8001570 <HAL_GPIO_Init+0x31c>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d01f      	beq.n	8001472 <HAL_GPIO_Init+0x21e>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4a4f      	ldr	r2, [pc, #316]	; (8001574 <HAL_GPIO_Init+0x320>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d019      	beq.n	800146e <HAL_GPIO_Init+0x21a>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4a4e      	ldr	r2, [pc, #312]	; (8001578 <HAL_GPIO_Init+0x324>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d013      	beq.n	800146a <HAL_GPIO_Init+0x216>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4a4d      	ldr	r2, [pc, #308]	; (800157c <HAL_GPIO_Init+0x328>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d00d      	beq.n	8001466 <HAL_GPIO_Init+0x212>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4a4c      	ldr	r2, [pc, #304]	; (8001580 <HAL_GPIO_Init+0x32c>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d007      	beq.n	8001462 <HAL_GPIO_Init+0x20e>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4a4b      	ldr	r2, [pc, #300]	; (8001584 <HAL_GPIO_Init+0x330>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d101      	bne.n	800145e <HAL_GPIO_Init+0x20a>
 800145a:	2307      	movs	r3, #7
 800145c:	e00e      	b.n	800147c <HAL_GPIO_Init+0x228>
 800145e:	2308      	movs	r3, #8
 8001460:	e00c      	b.n	800147c <HAL_GPIO_Init+0x228>
 8001462:	2306      	movs	r3, #6
 8001464:	e00a      	b.n	800147c <HAL_GPIO_Init+0x228>
 8001466:	2305      	movs	r3, #5
 8001468:	e008      	b.n	800147c <HAL_GPIO_Init+0x228>
 800146a:	2304      	movs	r3, #4
 800146c:	e006      	b.n	800147c <HAL_GPIO_Init+0x228>
 800146e:	2303      	movs	r3, #3
 8001470:	e004      	b.n	800147c <HAL_GPIO_Init+0x228>
 8001472:	2302      	movs	r3, #2
 8001474:	e002      	b.n	800147c <HAL_GPIO_Init+0x228>
 8001476:	2301      	movs	r3, #1
 8001478:	e000      	b.n	800147c <HAL_GPIO_Init+0x228>
 800147a:	2300      	movs	r3, #0
 800147c:	69fa      	ldr	r2, [r7, #28]
 800147e:	f002 0203 	and.w	r2, r2, #3
 8001482:	0092      	lsls	r2, r2, #2
 8001484:	4093      	lsls	r3, r2
 8001486:	69ba      	ldr	r2, [r7, #24]
 8001488:	4313      	orrs	r3, r2
 800148a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800148c:	4935      	ldr	r1, [pc, #212]	; (8001564 <HAL_GPIO_Init+0x310>)
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	089b      	lsrs	r3, r3, #2
 8001492:	3302      	adds	r3, #2
 8001494:	69ba      	ldr	r2, [r7, #24]
 8001496:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800149a:	4b3b      	ldr	r3, [pc, #236]	; (8001588 <HAL_GPIO_Init+0x334>)
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	43db      	mvns	r3, r3
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	4013      	ands	r3, r2
 80014a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d003      	beq.n	80014be <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80014b6:	69ba      	ldr	r2, [r7, #24]
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	4313      	orrs	r3, r2
 80014bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014be:	4a32      	ldr	r2, [pc, #200]	; (8001588 <HAL_GPIO_Init+0x334>)
 80014c0:	69bb      	ldr	r3, [r7, #24]
 80014c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014c4:	4b30      	ldr	r3, [pc, #192]	; (8001588 <HAL_GPIO_Init+0x334>)
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	43db      	mvns	r3, r3
 80014ce:	69ba      	ldr	r2, [r7, #24]
 80014d0:	4013      	ands	r3, r2
 80014d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d003      	beq.n	80014e8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80014e0:	69ba      	ldr	r2, [r7, #24]
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	4313      	orrs	r3, r2
 80014e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014e8:	4a27      	ldr	r2, [pc, #156]	; (8001588 <HAL_GPIO_Init+0x334>)
 80014ea:	69bb      	ldr	r3, [r7, #24]
 80014ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014ee:	4b26      	ldr	r3, [pc, #152]	; (8001588 <HAL_GPIO_Init+0x334>)
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	43db      	mvns	r3, r3
 80014f8:	69ba      	ldr	r2, [r7, #24]
 80014fa:	4013      	ands	r3, r2
 80014fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001506:	2b00      	cmp	r3, #0
 8001508:	d003      	beq.n	8001512 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800150a:	69ba      	ldr	r2, [r7, #24]
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	4313      	orrs	r3, r2
 8001510:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001512:	4a1d      	ldr	r2, [pc, #116]	; (8001588 <HAL_GPIO_Init+0x334>)
 8001514:	69bb      	ldr	r3, [r7, #24]
 8001516:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001518:	4b1b      	ldr	r3, [pc, #108]	; (8001588 <HAL_GPIO_Init+0x334>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	43db      	mvns	r3, r3
 8001522:	69ba      	ldr	r2, [r7, #24]
 8001524:	4013      	ands	r3, r2
 8001526:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001530:	2b00      	cmp	r3, #0
 8001532:	d003      	beq.n	800153c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001534:	69ba      	ldr	r2, [r7, #24]
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	4313      	orrs	r3, r2
 800153a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800153c:	4a12      	ldr	r2, [pc, #72]	; (8001588 <HAL_GPIO_Init+0x334>)
 800153e:	69bb      	ldr	r3, [r7, #24]
 8001540:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	3301      	adds	r3, #1
 8001546:	61fb      	str	r3, [r7, #28]
 8001548:	69fb      	ldr	r3, [r7, #28]
 800154a:	2b0f      	cmp	r3, #15
 800154c:	f67f ae90 	bls.w	8001270 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001550:	bf00      	nop
 8001552:	bf00      	nop
 8001554:	3724      	adds	r7, #36	; 0x24
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	40023800 	.word	0x40023800
 8001564:	40013800 	.word	0x40013800
 8001568:	40020000 	.word	0x40020000
 800156c:	40020400 	.word	0x40020400
 8001570:	40020800 	.word	0x40020800
 8001574:	40020c00 	.word	0x40020c00
 8001578:	40021000 	.word	0x40021000
 800157c:	40021400 	.word	0x40021400
 8001580:	40021800 	.word	0x40021800
 8001584:	40021c00 	.word	0x40021c00
 8001588:	40013c00 	.word	0x40013c00

0800158c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b086      	sub	sp, #24
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d101      	bne.n	800159e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	e267      	b.n	8001a6e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 0301 	and.w	r3, r3, #1
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d075      	beq.n	8001696 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015aa:	4b88      	ldr	r3, [pc, #544]	; (80017cc <HAL_RCC_OscConfig+0x240>)
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	f003 030c 	and.w	r3, r3, #12
 80015b2:	2b04      	cmp	r3, #4
 80015b4:	d00c      	beq.n	80015d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015b6:	4b85      	ldr	r3, [pc, #532]	; (80017cc <HAL_RCC_OscConfig+0x240>)
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015be:	2b08      	cmp	r3, #8
 80015c0:	d112      	bne.n	80015e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015c2:	4b82      	ldr	r3, [pc, #520]	; (80017cc <HAL_RCC_OscConfig+0x240>)
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80015ce:	d10b      	bne.n	80015e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015d0:	4b7e      	ldr	r3, [pc, #504]	; (80017cc <HAL_RCC_OscConfig+0x240>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d05b      	beq.n	8001694 <HAL_RCC_OscConfig+0x108>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d157      	bne.n	8001694 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80015e4:	2301      	movs	r3, #1
 80015e6:	e242      	b.n	8001a6e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015f0:	d106      	bne.n	8001600 <HAL_RCC_OscConfig+0x74>
 80015f2:	4b76      	ldr	r3, [pc, #472]	; (80017cc <HAL_RCC_OscConfig+0x240>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a75      	ldr	r2, [pc, #468]	; (80017cc <HAL_RCC_OscConfig+0x240>)
 80015f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015fc:	6013      	str	r3, [r2, #0]
 80015fe:	e01d      	b.n	800163c <HAL_RCC_OscConfig+0xb0>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001608:	d10c      	bne.n	8001624 <HAL_RCC_OscConfig+0x98>
 800160a:	4b70      	ldr	r3, [pc, #448]	; (80017cc <HAL_RCC_OscConfig+0x240>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a6f      	ldr	r2, [pc, #444]	; (80017cc <HAL_RCC_OscConfig+0x240>)
 8001610:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001614:	6013      	str	r3, [r2, #0]
 8001616:	4b6d      	ldr	r3, [pc, #436]	; (80017cc <HAL_RCC_OscConfig+0x240>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a6c      	ldr	r2, [pc, #432]	; (80017cc <HAL_RCC_OscConfig+0x240>)
 800161c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001620:	6013      	str	r3, [r2, #0]
 8001622:	e00b      	b.n	800163c <HAL_RCC_OscConfig+0xb0>
 8001624:	4b69      	ldr	r3, [pc, #420]	; (80017cc <HAL_RCC_OscConfig+0x240>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a68      	ldr	r2, [pc, #416]	; (80017cc <HAL_RCC_OscConfig+0x240>)
 800162a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800162e:	6013      	str	r3, [r2, #0]
 8001630:	4b66      	ldr	r3, [pc, #408]	; (80017cc <HAL_RCC_OscConfig+0x240>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a65      	ldr	r2, [pc, #404]	; (80017cc <HAL_RCC_OscConfig+0x240>)
 8001636:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800163a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d013      	beq.n	800166c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001644:	f7ff fd14 	bl	8001070 <HAL_GetTick>
 8001648:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800164a:	e008      	b.n	800165e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800164c:	f7ff fd10 	bl	8001070 <HAL_GetTick>
 8001650:	4602      	mov	r2, r0
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	2b64      	cmp	r3, #100	; 0x64
 8001658:	d901      	bls.n	800165e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800165a:	2303      	movs	r3, #3
 800165c:	e207      	b.n	8001a6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800165e:	4b5b      	ldr	r3, [pc, #364]	; (80017cc <HAL_RCC_OscConfig+0x240>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001666:	2b00      	cmp	r3, #0
 8001668:	d0f0      	beq.n	800164c <HAL_RCC_OscConfig+0xc0>
 800166a:	e014      	b.n	8001696 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800166c:	f7ff fd00 	bl	8001070 <HAL_GetTick>
 8001670:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001672:	e008      	b.n	8001686 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001674:	f7ff fcfc 	bl	8001070 <HAL_GetTick>
 8001678:	4602      	mov	r2, r0
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	2b64      	cmp	r3, #100	; 0x64
 8001680:	d901      	bls.n	8001686 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e1f3      	b.n	8001a6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001686:	4b51      	ldr	r3, [pc, #324]	; (80017cc <HAL_RCC_OscConfig+0x240>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d1f0      	bne.n	8001674 <HAL_RCC_OscConfig+0xe8>
 8001692:	e000      	b.n	8001696 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001694:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 0302 	and.w	r3, r3, #2
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d063      	beq.n	800176a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016a2:	4b4a      	ldr	r3, [pc, #296]	; (80017cc <HAL_RCC_OscConfig+0x240>)
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	f003 030c 	and.w	r3, r3, #12
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d00b      	beq.n	80016c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016ae:	4b47      	ldr	r3, [pc, #284]	; (80017cc <HAL_RCC_OscConfig+0x240>)
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016b6:	2b08      	cmp	r3, #8
 80016b8:	d11c      	bne.n	80016f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016ba:	4b44      	ldr	r3, [pc, #272]	; (80017cc <HAL_RCC_OscConfig+0x240>)
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d116      	bne.n	80016f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016c6:	4b41      	ldr	r3, [pc, #260]	; (80017cc <HAL_RCC_OscConfig+0x240>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 0302 	and.w	r3, r3, #2
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d005      	beq.n	80016de <HAL_RCC_OscConfig+0x152>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	68db      	ldr	r3, [r3, #12]
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d001      	beq.n	80016de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e1c7      	b.n	8001a6e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016de:	4b3b      	ldr	r3, [pc, #236]	; (80017cc <HAL_RCC_OscConfig+0x240>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	691b      	ldr	r3, [r3, #16]
 80016ea:	00db      	lsls	r3, r3, #3
 80016ec:	4937      	ldr	r1, [pc, #220]	; (80017cc <HAL_RCC_OscConfig+0x240>)
 80016ee:	4313      	orrs	r3, r2
 80016f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016f2:	e03a      	b.n	800176a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d020      	beq.n	800173e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016fc:	4b34      	ldr	r3, [pc, #208]	; (80017d0 <HAL_RCC_OscConfig+0x244>)
 80016fe:	2201      	movs	r2, #1
 8001700:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001702:	f7ff fcb5 	bl	8001070 <HAL_GetTick>
 8001706:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001708:	e008      	b.n	800171c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800170a:	f7ff fcb1 	bl	8001070 <HAL_GetTick>
 800170e:	4602      	mov	r2, r0
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	2b02      	cmp	r3, #2
 8001716:	d901      	bls.n	800171c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001718:	2303      	movs	r3, #3
 800171a:	e1a8      	b.n	8001a6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800171c:	4b2b      	ldr	r3, [pc, #172]	; (80017cc <HAL_RCC_OscConfig+0x240>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f003 0302 	and.w	r3, r3, #2
 8001724:	2b00      	cmp	r3, #0
 8001726:	d0f0      	beq.n	800170a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001728:	4b28      	ldr	r3, [pc, #160]	; (80017cc <HAL_RCC_OscConfig+0x240>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	691b      	ldr	r3, [r3, #16]
 8001734:	00db      	lsls	r3, r3, #3
 8001736:	4925      	ldr	r1, [pc, #148]	; (80017cc <HAL_RCC_OscConfig+0x240>)
 8001738:	4313      	orrs	r3, r2
 800173a:	600b      	str	r3, [r1, #0]
 800173c:	e015      	b.n	800176a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800173e:	4b24      	ldr	r3, [pc, #144]	; (80017d0 <HAL_RCC_OscConfig+0x244>)
 8001740:	2200      	movs	r2, #0
 8001742:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001744:	f7ff fc94 	bl	8001070 <HAL_GetTick>
 8001748:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800174a:	e008      	b.n	800175e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800174c:	f7ff fc90 	bl	8001070 <HAL_GetTick>
 8001750:	4602      	mov	r2, r0
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	2b02      	cmp	r3, #2
 8001758:	d901      	bls.n	800175e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800175a:	2303      	movs	r3, #3
 800175c:	e187      	b.n	8001a6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800175e:	4b1b      	ldr	r3, [pc, #108]	; (80017cc <HAL_RCC_OscConfig+0x240>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 0302 	and.w	r3, r3, #2
 8001766:	2b00      	cmp	r3, #0
 8001768:	d1f0      	bne.n	800174c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 0308 	and.w	r3, r3, #8
 8001772:	2b00      	cmp	r3, #0
 8001774:	d036      	beq.n	80017e4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	695b      	ldr	r3, [r3, #20]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d016      	beq.n	80017ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800177e:	4b15      	ldr	r3, [pc, #84]	; (80017d4 <HAL_RCC_OscConfig+0x248>)
 8001780:	2201      	movs	r2, #1
 8001782:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001784:	f7ff fc74 	bl	8001070 <HAL_GetTick>
 8001788:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800178a:	e008      	b.n	800179e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800178c:	f7ff fc70 	bl	8001070 <HAL_GetTick>
 8001790:	4602      	mov	r2, r0
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	2b02      	cmp	r3, #2
 8001798:	d901      	bls.n	800179e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	e167      	b.n	8001a6e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800179e:	4b0b      	ldr	r3, [pc, #44]	; (80017cc <HAL_RCC_OscConfig+0x240>)
 80017a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017a2:	f003 0302 	and.w	r3, r3, #2
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d0f0      	beq.n	800178c <HAL_RCC_OscConfig+0x200>
 80017aa:	e01b      	b.n	80017e4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017ac:	4b09      	ldr	r3, [pc, #36]	; (80017d4 <HAL_RCC_OscConfig+0x248>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017b2:	f7ff fc5d 	bl	8001070 <HAL_GetTick>
 80017b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017b8:	e00e      	b.n	80017d8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017ba:	f7ff fc59 	bl	8001070 <HAL_GetTick>
 80017be:	4602      	mov	r2, r0
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	1ad3      	subs	r3, r2, r3
 80017c4:	2b02      	cmp	r3, #2
 80017c6:	d907      	bls.n	80017d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80017c8:	2303      	movs	r3, #3
 80017ca:	e150      	b.n	8001a6e <HAL_RCC_OscConfig+0x4e2>
 80017cc:	40023800 	.word	0x40023800
 80017d0:	42470000 	.word	0x42470000
 80017d4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017d8:	4b88      	ldr	r3, [pc, #544]	; (80019fc <HAL_RCC_OscConfig+0x470>)
 80017da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017dc:	f003 0302 	and.w	r3, r3, #2
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d1ea      	bne.n	80017ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f003 0304 	and.w	r3, r3, #4
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	f000 8097 	beq.w	8001920 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017f2:	2300      	movs	r3, #0
 80017f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017f6:	4b81      	ldr	r3, [pc, #516]	; (80019fc <HAL_RCC_OscConfig+0x470>)
 80017f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d10f      	bne.n	8001822 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001802:	2300      	movs	r3, #0
 8001804:	60bb      	str	r3, [r7, #8]
 8001806:	4b7d      	ldr	r3, [pc, #500]	; (80019fc <HAL_RCC_OscConfig+0x470>)
 8001808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180a:	4a7c      	ldr	r2, [pc, #496]	; (80019fc <HAL_RCC_OscConfig+0x470>)
 800180c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001810:	6413      	str	r3, [r2, #64]	; 0x40
 8001812:	4b7a      	ldr	r3, [pc, #488]	; (80019fc <HAL_RCC_OscConfig+0x470>)
 8001814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001816:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800181a:	60bb      	str	r3, [r7, #8]
 800181c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800181e:	2301      	movs	r3, #1
 8001820:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001822:	4b77      	ldr	r3, [pc, #476]	; (8001a00 <HAL_RCC_OscConfig+0x474>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800182a:	2b00      	cmp	r3, #0
 800182c:	d118      	bne.n	8001860 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800182e:	4b74      	ldr	r3, [pc, #464]	; (8001a00 <HAL_RCC_OscConfig+0x474>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a73      	ldr	r2, [pc, #460]	; (8001a00 <HAL_RCC_OscConfig+0x474>)
 8001834:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001838:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800183a:	f7ff fc19 	bl	8001070 <HAL_GetTick>
 800183e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001840:	e008      	b.n	8001854 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001842:	f7ff fc15 	bl	8001070 <HAL_GetTick>
 8001846:	4602      	mov	r2, r0
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	1ad3      	subs	r3, r2, r3
 800184c:	2b02      	cmp	r3, #2
 800184e:	d901      	bls.n	8001854 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001850:	2303      	movs	r3, #3
 8001852:	e10c      	b.n	8001a6e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001854:	4b6a      	ldr	r3, [pc, #424]	; (8001a00 <HAL_RCC_OscConfig+0x474>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800185c:	2b00      	cmp	r3, #0
 800185e:	d0f0      	beq.n	8001842 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	2b01      	cmp	r3, #1
 8001866:	d106      	bne.n	8001876 <HAL_RCC_OscConfig+0x2ea>
 8001868:	4b64      	ldr	r3, [pc, #400]	; (80019fc <HAL_RCC_OscConfig+0x470>)
 800186a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800186c:	4a63      	ldr	r2, [pc, #396]	; (80019fc <HAL_RCC_OscConfig+0x470>)
 800186e:	f043 0301 	orr.w	r3, r3, #1
 8001872:	6713      	str	r3, [r2, #112]	; 0x70
 8001874:	e01c      	b.n	80018b0 <HAL_RCC_OscConfig+0x324>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	2b05      	cmp	r3, #5
 800187c:	d10c      	bne.n	8001898 <HAL_RCC_OscConfig+0x30c>
 800187e:	4b5f      	ldr	r3, [pc, #380]	; (80019fc <HAL_RCC_OscConfig+0x470>)
 8001880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001882:	4a5e      	ldr	r2, [pc, #376]	; (80019fc <HAL_RCC_OscConfig+0x470>)
 8001884:	f043 0304 	orr.w	r3, r3, #4
 8001888:	6713      	str	r3, [r2, #112]	; 0x70
 800188a:	4b5c      	ldr	r3, [pc, #368]	; (80019fc <HAL_RCC_OscConfig+0x470>)
 800188c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800188e:	4a5b      	ldr	r2, [pc, #364]	; (80019fc <HAL_RCC_OscConfig+0x470>)
 8001890:	f043 0301 	orr.w	r3, r3, #1
 8001894:	6713      	str	r3, [r2, #112]	; 0x70
 8001896:	e00b      	b.n	80018b0 <HAL_RCC_OscConfig+0x324>
 8001898:	4b58      	ldr	r3, [pc, #352]	; (80019fc <HAL_RCC_OscConfig+0x470>)
 800189a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800189c:	4a57      	ldr	r2, [pc, #348]	; (80019fc <HAL_RCC_OscConfig+0x470>)
 800189e:	f023 0301 	bic.w	r3, r3, #1
 80018a2:	6713      	str	r3, [r2, #112]	; 0x70
 80018a4:	4b55      	ldr	r3, [pc, #340]	; (80019fc <HAL_RCC_OscConfig+0x470>)
 80018a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018a8:	4a54      	ldr	r2, [pc, #336]	; (80019fc <HAL_RCC_OscConfig+0x470>)
 80018aa:	f023 0304 	bic.w	r3, r3, #4
 80018ae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d015      	beq.n	80018e4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018b8:	f7ff fbda 	bl	8001070 <HAL_GetTick>
 80018bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018be:	e00a      	b.n	80018d6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018c0:	f7ff fbd6 	bl	8001070 <HAL_GetTick>
 80018c4:	4602      	mov	r2, r0
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d901      	bls.n	80018d6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80018d2:	2303      	movs	r3, #3
 80018d4:	e0cb      	b.n	8001a6e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018d6:	4b49      	ldr	r3, [pc, #292]	; (80019fc <HAL_RCC_OscConfig+0x470>)
 80018d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018da:	f003 0302 	and.w	r3, r3, #2
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d0ee      	beq.n	80018c0 <HAL_RCC_OscConfig+0x334>
 80018e2:	e014      	b.n	800190e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018e4:	f7ff fbc4 	bl	8001070 <HAL_GetTick>
 80018e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018ea:	e00a      	b.n	8001902 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018ec:	f7ff fbc0 	bl	8001070 <HAL_GetTick>
 80018f0:	4602      	mov	r2, r0
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d901      	bls.n	8001902 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80018fe:	2303      	movs	r3, #3
 8001900:	e0b5      	b.n	8001a6e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001902:	4b3e      	ldr	r3, [pc, #248]	; (80019fc <HAL_RCC_OscConfig+0x470>)
 8001904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001906:	f003 0302 	and.w	r3, r3, #2
 800190a:	2b00      	cmp	r3, #0
 800190c:	d1ee      	bne.n	80018ec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800190e:	7dfb      	ldrb	r3, [r7, #23]
 8001910:	2b01      	cmp	r3, #1
 8001912:	d105      	bne.n	8001920 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001914:	4b39      	ldr	r3, [pc, #228]	; (80019fc <HAL_RCC_OscConfig+0x470>)
 8001916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001918:	4a38      	ldr	r2, [pc, #224]	; (80019fc <HAL_RCC_OscConfig+0x470>)
 800191a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800191e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	699b      	ldr	r3, [r3, #24]
 8001924:	2b00      	cmp	r3, #0
 8001926:	f000 80a1 	beq.w	8001a6c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800192a:	4b34      	ldr	r3, [pc, #208]	; (80019fc <HAL_RCC_OscConfig+0x470>)
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	f003 030c 	and.w	r3, r3, #12
 8001932:	2b08      	cmp	r3, #8
 8001934:	d05c      	beq.n	80019f0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	699b      	ldr	r3, [r3, #24]
 800193a:	2b02      	cmp	r3, #2
 800193c:	d141      	bne.n	80019c2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800193e:	4b31      	ldr	r3, [pc, #196]	; (8001a04 <HAL_RCC_OscConfig+0x478>)
 8001940:	2200      	movs	r2, #0
 8001942:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001944:	f7ff fb94 	bl	8001070 <HAL_GetTick>
 8001948:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800194a:	e008      	b.n	800195e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800194c:	f7ff fb90 	bl	8001070 <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	2b02      	cmp	r3, #2
 8001958:	d901      	bls.n	800195e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e087      	b.n	8001a6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800195e:	4b27      	ldr	r3, [pc, #156]	; (80019fc <HAL_RCC_OscConfig+0x470>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d1f0      	bne.n	800194c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	69da      	ldr	r2, [r3, #28]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6a1b      	ldr	r3, [r3, #32]
 8001972:	431a      	orrs	r2, r3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001978:	019b      	lsls	r3, r3, #6
 800197a:	431a      	orrs	r2, r3
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001980:	085b      	lsrs	r3, r3, #1
 8001982:	3b01      	subs	r3, #1
 8001984:	041b      	lsls	r3, r3, #16
 8001986:	431a      	orrs	r2, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800198c:	061b      	lsls	r3, r3, #24
 800198e:	491b      	ldr	r1, [pc, #108]	; (80019fc <HAL_RCC_OscConfig+0x470>)
 8001990:	4313      	orrs	r3, r2
 8001992:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001994:	4b1b      	ldr	r3, [pc, #108]	; (8001a04 <HAL_RCC_OscConfig+0x478>)
 8001996:	2201      	movs	r2, #1
 8001998:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800199a:	f7ff fb69 	bl	8001070 <HAL_GetTick>
 800199e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019a0:	e008      	b.n	80019b4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019a2:	f7ff fb65 	bl	8001070 <HAL_GetTick>
 80019a6:	4602      	mov	r2, r0
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	1ad3      	subs	r3, r2, r3
 80019ac:	2b02      	cmp	r3, #2
 80019ae:	d901      	bls.n	80019b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80019b0:	2303      	movs	r3, #3
 80019b2:	e05c      	b.n	8001a6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019b4:	4b11      	ldr	r3, [pc, #68]	; (80019fc <HAL_RCC_OscConfig+0x470>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d0f0      	beq.n	80019a2 <HAL_RCC_OscConfig+0x416>
 80019c0:	e054      	b.n	8001a6c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019c2:	4b10      	ldr	r3, [pc, #64]	; (8001a04 <HAL_RCC_OscConfig+0x478>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019c8:	f7ff fb52 	bl	8001070 <HAL_GetTick>
 80019cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019ce:	e008      	b.n	80019e2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019d0:	f7ff fb4e 	bl	8001070 <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	2b02      	cmp	r3, #2
 80019dc:	d901      	bls.n	80019e2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80019de:	2303      	movs	r3, #3
 80019e0:	e045      	b.n	8001a6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019e2:	4b06      	ldr	r3, [pc, #24]	; (80019fc <HAL_RCC_OscConfig+0x470>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d1f0      	bne.n	80019d0 <HAL_RCC_OscConfig+0x444>
 80019ee:	e03d      	b.n	8001a6c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	699b      	ldr	r3, [r3, #24]
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d107      	bne.n	8001a08 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	e038      	b.n	8001a6e <HAL_RCC_OscConfig+0x4e2>
 80019fc:	40023800 	.word	0x40023800
 8001a00:	40007000 	.word	0x40007000
 8001a04:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a08:	4b1b      	ldr	r3, [pc, #108]	; (8001a78 <HAL_RCC_OscConfig+0x4ec>)
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	699b      	ldr	r3, [r3, #24]
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d028      	beq.n	8001a68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d121      	bne.n	8001a68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	d11a      	bne.n	8001a68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a32:	68fa      	ldr	r2, [r7, #12]
 8001a34:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a38:	4013      	ands	r3, r2
 8001a3a:	687a      	ldr	r2, [r7, #4]
 8001a3c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a3e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d111      	bne.n	8001a68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a4e:	085b      	lsrs	r3, r3, #1
 8001a50:	3b01      	subs	r3, #1
 8001a52:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d107      	bne.n	8001a68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a62:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d001      	beq.n	8001a6c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e000      	b.n	8001a6e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001a6c:	2300      	movs	r3, #0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3718      	adds	r7, #24
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	40023800 	.word	0x40023800

08001a7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b084      	sub	sp, #16
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d101      	bne.n	8001a90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e0cc      	b.n	8001c2a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a90:	4b68      	ldr	r3, [pc, #416]	; (8001c34 <HAL_RCC_ClockConfig+0x1b8>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 0307 	and.w	r3, r3, #7
 8001a98:	683a      	ldr	r2, [r7, #0]
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d90c      	bls.n	8001ab8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a9e:	4b65      	ldr	r3, [pc, #404]	; (8001c34 <HAL_RCC_ClockConfig+0x1b8>)
 8001aa0:	683a      	ldr	r2, [r7, #0]
 8001aa2:	b2d2      	uxtb	r2, r2
 8001aa4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aa6:	4b63      	ldr	r3, [pc, #396]	; (8001c34 <HAL_RCC_ClockConfig+0x1b8>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 0307 	and.w	r3, r3, #7
 8001aae:	683a      	ldr	r2, [r7, #0]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d001      	beq.n	8001ab8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	e0b8      	b.n	8001c2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 0302 	and.w	r3, r3, #2
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d020      	beq.n	8001b06 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 0304 	and.w	r3, r3, #4
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d005      	beq.n	8001adc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ad0:	4b59      	ldr	r3, [pc, #356]	; (8001c38 <HAL_RCC_ClockConfig+0x1bc>)
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	4a58      	ldr	r2, [pc, #352]	; (8001c38 <HAL_RCC_ClockConfig+0x1bc>)
 8001ad6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001ada:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 0308 	and.w	r3, r3, #8
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d005      	beq.n	8001af4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ae8:	4b53      	ldr	r3, [pc, #332]	; (8001c38 <HAL_RCC_ClockConfig+0x1bc>)
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	4a52      	ldr	r2, [pc, #328]	; (8001c38 <HAL_RCC_ClockConfig+0x1bc>)
 8001aee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001af2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001af4:	4b50      	ldr	r3, [pc, #320]	; (8001c38 <HAL_RCC_ClockConfig+0x1bc>)
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	494d      	ldr	r1, [pc, #308]	; (8001c38 <HAL_RCC_ClockConfig+0x1bc>)
 8001b02:	4313      	orrs	r3, r2
 8001b04:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 0301 	and.w	r3, r3, #1
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d044      	beq.n	8001b9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	d107      	bne.n	8001b2a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b1a:	4b47      	ldr	r3, [pc, #284]	; (8001c38 <HAL_RCC_ClockConfig+0x1bc>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d119      	bne.n	8001b5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e07f      	b.n	8001c2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d003      	beq.n	8001b3a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b36:	2b03      	cmp	r3, #3
 8001b38:	d107      	bne.n	8001b4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b3a:	4b3f      	ldr	r3, [pc, #252]	; (8001c38 <HAL_RCC_ClockConfig+0x1bc>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d109      	bne.n	8001b5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e06f      	b.n	8001c2a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b4a:	4b3b      	ldr	r3, [pc, #236]	; (8001c38 <HAL_RCC_ClockConfig+0x1bc>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 0302 	and.w	r3, r3, #2
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d101      	bne.n	8001b5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e067      	b.n	8001c2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b5a:	4b37      	ldr	r3, [pc, #220]	; (8001c38 <HAL_RCC_ClockConfig+0x1bc>)
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	f023 0203 	bic.w	r2, r3, #3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	4934      	ldr	r1, [pc, #208]	; (8001c38 <HAL_RCC_ClockConfig+0x1bc>)
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b6c:	f7ff fa80 	bl	8001070 <HAL_GetTick>
 8001b70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b72:	e00a      	b.n	8001b8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b74:	f7ff fa7c 	bl	8001070 <HAL_GetTick>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d901      	bls.n	8001b8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b86:	2303      	movs	r3, #3
 8001b88:	e04f      	b.n	8001c2a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b8a:	4b2b      	ldr	r3, [pc, #172]	; (8001c38 <HAL_RCC_ClockConfig+0x1bc>)
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	f003 020c 	and.w	r2, r3, #12
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d1eb      	bne.n	8001b74 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b9c:	4b25      	ldr	r3, [pc, #148]	; (8001c34 <HAL_RCC_ClockConfig+0x1b8>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 0307 	and.w	r3, r3, #7
 8001ba4:	683a      	ldr	r2, [r7, #0]
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	d20c      	bcs.n	8001bc4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001baa:	4b22      	ldr	r3, [pc, #136]	; (8001c34 <HAL_RCC_ClockConfig+0x1b8>)
 8001bac:	683a      	ldr	r2, [r7, #0]
 8001bae:	b2d2      	uxtb	r2, r2
 8001bb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bb2:	4b20      	ldr	r3, [pc, #128]	; (8001c34 <HAL_RCC_ClockConfig+0x1b8>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 0307 	and.w	r3, r3, #7
 8001bba:	683a      	ldr	r2, [r7, #0]
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d001      	beq.n	8001bc4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e032      	b.n	8001c2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 0304 	and.w	r3, r3, #4
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d008      	beq.n	8001be2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bd0:	4b19      	ldr	r3, [pc, #100]	; (8001c38 <HAL_RCC_ClockConfig+0x1bc>)
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	4916      	ldr	r1, [pc, #88]	; (8001c38 <HAL_RCC_ClockConfig+0x1bc>)
 8001bde:	4313      	orrs	r3, r2
 8001be0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0308 	and.w	r3, r3, #8
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d009      	beq.n	8001c02 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bee:	4b12      	ldr	r3, [pc, #72]	; (8001c38 <HAL_RCC_ClockConfig+0x1bc>)
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	691b      	ldr	r3, [r3, #16]
 8001bfa:	00db      	lsls	r3, r3, #3
 8001bfc:	490e      	ldr	r1, [pc, #56]	; (8001c38 <HAL_RCC_ClockConfig+0x1bc>)
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c02:	f000 f821 	bl	8001c48 <HAL_RCC_GetSysClockFreq>
 8001c06:	4602      	mov	r2, r0
 8001c08:	4b0b      	ldr	r3, [pc, #44]	; (8001c38 <HAL_RCC_ClockConfig+0x1bc>)
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	091b      	lsrs	r3, r3, #4
 8001c0e:	f003 030f 	and.w	r3, r3, #15
 8001c12:	490a      	ldr	r1, [pc, #40]	; (8001c3c <HAL_RCC_ClockConfig+0x1c0>)
 8001c14:	5ccb      	ldrb	r3, [r1, r3]
 8001c16:	fa22 f303 	lsr.w	r3, r2, r3
 8001c1a:	4a09      	ldr	r2, [pc, #36]	; (8001c40 <HAL_RCC_ClockConfig+0x1c4>)
 8001c1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001c1e:	4b09      	ldr	r3, [pc, #36]	; (8001c44 <HAL_RCC_ClockConfig+0x1c8>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4618      	mov	r0, r3
 8001c24:	f7ff f9e0 	bl	8000fe8 <HAL_InitTick>

  return HAL_OK;
 8001c28:	2300      	movs	r3, #0
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3710      	adds	r7, #16
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	40023c00 	.word	0x40023c00
 8001c38:	40023800 	.word	0x40023800
 8001c3c:	08002540 	.word	0x08002540
 8001c40:	20000000 	.word	0x20000000
 8001c44:	20000004 	.word	0x20000004

08001c48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c4c:	b090      	sub	sp, #64	; 0x40
 8001c4e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001c50:	2300      	movs	r3, #0
 8001c52:	637b      	str	r3, [r7, #52]	; 0x34
 8001c54:	2300      	movs	r3, #0
 8001c56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c58:	2300      	movs	r3, #0
 8001c5a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c60:	4b59      	ldr	r3, [pc, #356]	; (8001dc8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	f003 030c 	and.w	r3, r3, #12
 8001c68:	2b08      	cmp	r3, #8
 8001c6a:	d00d      	beq.n	8001c88 <HAL_RCC_GetSysClockFreq+0x40>
 8001c6c:	2b08      	cmp	r3, #8
 8001c6e:	f200 80a1 	bhi.w	8001db4 <HAL_RCC_GetSysClockFreq+0x16c>
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d002      	beq.n	8001c7c <HAL_RCC_GetSysClockFreq+0x34>
 8001c76:	2b04      	cmp	r3, #4
 8001c78:	d003      	beq.n	8001c82 <HAL_RCC_GetSysClockFreq+0x3a>
 8001c7a:	e09b      	b.n	8001db4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c7c:	4b53      	ldr	r3, [pc, #332]	; (8001dcc <HAL_RCC_GetSysClockFreq+0x184>)
 8001c7e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001c80:	e09b      	b.n	8001dba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c82:	4b53      	ldr	r3, [pc, #332]	; (8001dd0 <HAL_RCC_GetSysClockFreq+0x188>)
 8001c84:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001c86:	e098      	b.n	8001dba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c88:	4b4f      	ldr	r3, [pc, #316]	; (8001dc8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c90:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c92:	4b4d      	ldr	r3, [pc, #308]	; (8001dc8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d028      	beq.n	8001cf0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c9e:	4b4a      	ldr	r3, [pc, #296]	; (8001dc8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	099b      	lsrs	r3, r3, #6
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	623b      	str	r3, [r7, #32]
 8001ca8:	627a      	str	r2, [r7, #36]	; 0x24
 8001caa:	6a3b      	ldr	r3, [r7, #32]
 8001cac:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001cb0:	2100      	movs	r1, #0
 8001cb2:	4b47      	ldr	r3, [pc, #284]	; (8001dd0 <HAL_RCC_GetSysClockFreq+0x188>)
 8001cb4:	fb03 f201 	mul.w	r2, r3, r1
 8001cb8:	2300      	movs	r3, #0
 8001cba:	fb00 f303 	mul.w	r3, r0, r3
 8001cbe:	4413      	add	r3, r2
 8001cc0:	4a43      	ldr	r2, [pc, #268]	; (8001dd0 <HAL_RCC_GetSysClockFreq+0x188>)
 8001cc2:	fba0 1202 	umull	r1, r2, r0, r2
 8001cc6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001cc8:	460a      	mov	r2, r1
 8001cca:	62ba      	str	r2, [r7, #40]	; 0x28
 8001ccc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001cce:	4413      	add	r3, r2
 8001cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	61bb      	str	r3, [r7, #24]
 8001cd8:	61fa      	str	r2, [r7, #28]
 8001cda:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001cde:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001ce2:	f7fe fa71 	bl	80001c8 <__aeabi_uldivmod>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	460b      	mov	r3, r1
 8001cea:	4613      	mov	r3, r2
 8001cec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001cee:	e053      	b.n	8001d98 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cf0:	4b35      	ldr	r3, [pc, #212]	; (8001dc8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	099b      	lsrs	r3, r3, #6
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	613b      	str	r3, [r7, #16]
 8001cfa:	617a      	str	r2, [r7, #20]
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001d02:	f04f 0b00 	mov.w	fp, #0
 8001d06:	4652      	mov	r2, sl
 8001d08:	465b      	mov	r3, fp
 8001d0a:	f04f 0000 	mov.w	r0, #0
 8001d0e:	f04f 0100 	mov.w	r1, #0
 8001d12:	0159      	lsls	r1, r3, #5
 8001d14:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d18:	0150      	lsls	r0, r2, #5
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	460b      	mov	r3, r1
 8001d1e:	ebb2 080a 	subs.w	r8, r2, sl
 8001d22:	eb63 090b 	sbc.w	r9, r3, fp
 8001d26:	f04f 0200 	mov.w	r2, #0
 8001d2a:	f04f 0300 	mov.w	r3, #0
 8001d2e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001d32:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001d36:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001d3a:	ebb2 0408 	subs.w	r4, r2, r8
 8001d3e:	eb63 0509 	sbc.w	r5, r3, r9
 8001d42:	f04f 0200 	mov.w	r2, #0
 8001d46:	f04f 0300 	mov.w	r3, #0
 8001d4a:	00eb      	lsls	r3, r5, #3
 8001d4c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d50:	00e2      	lsls	r2, r4, #3
 8001d52:	4614      	mov	r4, r2
 8001d54:	461d      	mov	r5, r3
 8001d56:	eb14 030a 	adds.w	r3, r4, sl
 8001d5a:	603b      	str	r3, [r7, #0]
 8001d5c:	eb45 030b 	adc.w	r3, r5, fp
 8001d60:	607b      	str	r3, [r7, #4]
 8001d62:	f04f 0200 	mov.w	r2, #0
 8001d66:	f04f 0300 	mov.w	r3, #0
 8001d6a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d6e:	4629      	mov	r1, r5
 8001d70:	028b      	lsls	r3, r1, #10
 8001d72:	4621      	mov	r1, r4
 8001d74:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d78:	4621      	mov	r1, r4
 8001d7a:	028a      	lsls	r2, r1, #10
 8001d7c:	4610      	mov	r0, r2
 8001d7e:	4619      	mov	r1, r3
 8001d80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d82:	2200      	movs	r2, #0
 8001d84:	60bb      	str	r3, [r7, #8]
 8001d86:	60fa      	str	r2, [r7, #12]
 8001d88:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001d8c:	f7fe fa1c 	bl	80001c8 <__aeabi_uldivmod>
 8001d90:	4602      	mov	r2, r0
 8001d92:	460b      	mov	r3, r1
 8001d94:	4613      	mov	r3, r2
 8001d96:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001d98:	4b0b      	ldr	r3, [pc, #44]	; (8001dc8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	0c1b      	lsrs	r3, r3, #16
 8001d9e:	f003 0303 	and.w	r3, r3, #3
 8001da2:	3301      	adds	r3, #1
 8001da4:	005b      	lsls	r3, r3, #1
 8001da6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001da8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dac:	fbb2 f3f3 	udiv	r3, r2, r3
 8001db0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001db2:	e002      	b.n	8001dba <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001db4:	4b05      	ldr	r3, [pc, #20]	; (8001dcc <HAL_RCC_GetSysClockFreq+0x184>)
 8001db6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001db8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3740      	adds	r7, #64	; 0x40
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001dc6:	bf00      	nop
 8001dc8:	40023800 	.word	0x40023800
 8001dcc:	00f42400 	.word	0x00f42400
 8001dd0:	017d7840 	.word	0x017d7840

08001dd4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001dd8:	4b03      	ldr	r3, [pc, #12]	; (8001de8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001dda:	681b      	ldr	r3, [r3, #0]
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop
 8001de8:	20000000 	.word	0x20000000

08001dec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001df0:	f7ff fff0 	bl	8001dd4 <HAL_RCC_GetHCLKFreq>
 8001df4:	4602      	mov	r2, r0
 8001df6:	4b05      	ldr	r3, [pc, #20]	; (8001e0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	0a9b      	lsrs	r3, r3, #10
 8001dfc:	f003 0307 	and.w	r3, r3, #7
 8001e00:	4903      	ldr	r1, [pc, #12]	; (8001e10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e02:	5ccb      	ldrb	r3, [r1, r3]
 8001e04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	40023800 	.word	0x40023800
 8001e10:	08002550 	.word	0x08002550

08001e14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001e18:	f7ff ffdc 	bl	8001dd4 <HAL_RCC_GetHCLKFreq>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	4b05      	ldr	r3, [pc, #20]	; (8001e34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	0b5b      	lsrs	r3, r3, #13
 8001e24:	f003 0307 	and.w	r3, r3, #7
 8001e28:	4903      	ldr	r1, [pc, #12]	; (8001e38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e2a:	5ccb      	ldrb	r3, [r1, r3]
 8001e2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	40023800 	.word	0x40023800
 8001e38:	08002550 	.word	0x08002550

08001e3c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d101      	bne.n	8001e4e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e07b      	b.n	8001f46 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d108      	bne.n	8001e68 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001e5e:	d009      	beq.n	8001e74 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2200      	movs	r2, #0
 8001e64:	61da      	str	r2, [r3, #28]
 8001e66:	e005      	b.n	8001e74 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2200      	movs	r2, #0
 8001e72:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2200      	movs	r2, #0
 8001e78:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d106      	bne.n	8001e94 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f7fe fdb8 	bl	8000a04 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2202      	movs	r2, #2
 8001e98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001eaa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001ebc:	431a      	orrs	r2, r3
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	68db      	ldr	r3, [r3, #12]
 8001ec2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ec6:	431a      	orrs	r2, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	691b      	ldr	r3, [r3, #16]
 8001ecc:	f003 0302 	and.w	r3, r3, #2
 8001ed0:	431a      	orrs	r2, r3
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	695b      	ldr	r3, [r3, #20]
 8001ed6:	f003 0301 	and.w	r3, r3, #1
 8001eda:	431a      	orrs	r2, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	699b      	ldr	r3, [r3, #24]
 8001ee0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ee4:	431a      	orrs	r2, r3
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	69db      	ldr	r3, [r3, #28]
 8001eea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001eee:	431a      	orrs	r2, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6a1b      	ldr	r3, [r3, #32]
 8001ef4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ef8:	ea42 0103 	orr.w	r1, r2, r3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f00:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	430a      	orrs	r2, r1
 8001f0a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	699b      	ldr	r3, [r3, #24]
 8001f10:	0c1b      	lsrs	r3, r3, #16
 8001f12:	f003 0104 	and.w	r1, r3, #4
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1a:	f003 0210 	and.w	r2, r3, #16
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	430a      	orrs	r2, r1
 8001f24:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	69da      	ldr	r2, [r3, #28]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f34:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2201      	movs	r2, #1
 8001f40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001f44:	2300      	movs	r3, #0
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3708      	adds	r7, #8
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}

08001f4e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f4e:	b580      	push	{r7, lr}
 8001f50:	b082      	sub	sp, #8
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d101      	bne.n	8001f60 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e03f      	b.n	8001fe0 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d106      	bne.n	8001f7a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f7fe fe37 	bl	8000be8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2224      	movs	r2, #36	; 0x24
 8001f7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	68da      	ldr	r2, [r3, #12]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f90:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f000 f828 	bl	8001fe8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	691a      	ldr	r2, [r3, #16]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001fa6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	695a      	ldr	r2, [r3, #20]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001fb6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	68da      	ldr	r2, [r3, #12]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001fc6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2220      	movs	r2, #32
 8001fd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2220      	movs	r2, #32
 8001fda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001fde:	2300      	movs	r3, #0
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3708      	adds	r7, #8
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}

08001fe8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001fe8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001fec:	b0c0      	sub	sp, #256	; 0x100
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001ff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	691b      	ldr	r3, [r3, #16]
 8001ffc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002000:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002004:	68d9      	ldr	r1, [r3, #12]
 8002006:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	ea40 0301 	orr.w	r3, r0, r1
 8002010:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002012:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002016:	689a      	ldr	r2, [r3, #8]
 8002018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800201c:	691b      	ldr	r3, [r3, #16]
 800201e:	431a      	orrs	r2, r3
 8002020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002024:	695b      	ldr	r3, [r3, #20]
 8002026:	431a      	orrs	r2, r3
 8002028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800202c:	69db      	ldr	r3, [r3, #28]
 800202e:	4313      	orrs	r3, r2
 8002030:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002040:	f021 010c 	bic.w	r1, r1, #12
 8002044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800204e:	430b      	orrs	r3, r1
 8002050:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002052:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	695b      	ldr	r3, [r3, #20]
 800205a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800205e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002062:	6999      	ldr	r1, [r3, #24]
 8002064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	ea40 0301 	orr.w	r3, r0, r1
 800206e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002070:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	4b8f      	ldr	r3, [pc, #572]	; (80022b4 <UART_SetConfig+0x2cc>)
 8002078:	429a      	cmp	r2, r3
 800207a:	d005      	beq.n	8002088 <UART_SetConfig+0xa0>
 800207c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	4b8d      	ldr	r3, [pc, #564]	; (80022b8 <UART_SetConfig+0x2d0>)
 8002084:	429a      	cmp	r2, r3
 8002086:	d104      	bne.n	8002092 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002088:	f7ff fec4 	bl	8001e14 <HAL_RCC_GetPCLK2Freq>
 800208c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002090:	e003      	b.n	800209a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002092:	f7ff feab 	bl	8001dec <HAL_RCC_GetPCLK1Freq>
 8002096:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800209a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800209e:	69db      	ldr	r3, [r3, #28]
 80020a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020a4:	f040 810c 	bne.w	80022c0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80020a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80020ac:	2200      	movs	r2, #0
 80020ae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80020b2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80020b6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80020ba:	4622      	mov	r2, r4
 80020bc:	462b      	mov	r3, r5
 80020be:	1891      	adds	r1, r2, r2
 80020c0:	65b9      	str	r1, [r7, #88]	; 0x58
 80020c2:	415b      	adcs	r3, r3
 80020c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80020c6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80020ca:	4621      	mov	r1, r4
 80020cc:	eb12 0801 	adds.w	r8, r2, r1
 80020d0:	4629      	mov	r1, r5
 80020d2:	eb43 0901 	adc.w	r9, r3, r1
 80020d6:	f04f 0200 	mov.w	r2, #0
 80020da:	f04f 0300 	mov.w	r3, #0
 80020de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80020e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80020e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80020ea:	4690      	mov	r8, r2
 80020ec:	4699      	mov	r9, r3
 80020ee:	4623      	mov	r3, r4
 80020f0:	eb18 0303 	adds.w	r3, r8, r3
 80020f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80020f8:	462b      	mov	r3, r5
 80020fa:	eb49 0303 	adc.w	r3, r9, r3
 80020fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002102:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	2200      	movs	r2, #0
 800210a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800210e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002112:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002116:	460b      	mov	r3, r1
 8002118:	18db      	adds	r3, r3, r3
 800211a:	653b      	str	r3, [r7, #80]	; 0x50
 800211c:	4613      	mov	r3, r2
 800211e:	eb42 0303 	adc.w	r3, r2, r3
 8002122:	657b      	str	r3, [r7, #84]	; 0x54
 8002124:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002128:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800212c:	f7fe f84c 	bl	80001c8 <__aeabi_uldivmod>
 8002130:	4602      	mov	r2, r0
 8002132:	460b      	mov	r3, r1
 8002134:	4b61      	ldr	r3, [pc, #388]	; (80022bc <UART_SetConfig+0x2d4>)
 8002136:	fba3 2302 	umull	r2, r3, r3, r2
 800213a:	095b      	lsrs	r3, r3, #5
 800213c:	011c      	lsls	r4, r3, #4
 800213e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002142:	2200      	movs	r2, #0
 8002144:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002148:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800214c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002150:	4642      	mov	r2, r8
 8002152:	464b      	mov	r3, r9
 8002154:	1891      	adds	r1, r2, r2
 8002156:	64b9      	str	r1, [r7, #72]	; 0x48
 8002158:	415b      	adcs	r3, r3
 800215a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800215c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002160:	4641      	mov	r1, r8
 8002162:	eb12 0a01 	adds.w	sl, r2, r1
 8002166:	4649      	mov	r1, r9
 8002168:	eb43 0b01 	adc.w	fp, r3, r1
 800216c:	f04f 0200 	mov.w	r2, #0
 8002170:	f04f 0300 	mov.w	r3, #0
 8002174:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002178:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800217c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002180:	4692      	mov	sl, r2
 8002182:	469b      	mov	fp, r3
 8002184:	4643      	mov	r3, r8
 8002186:	eb1a 0303 	adds.w	r3, sl, r3
 800218a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800218e:	464b      	mov	r3, r9
 8002190:	eb4b 0303 	adc.w	r3, fp, r3
 8002194:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	2200      	movs	r2, #0
 80021a0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80021a4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80021a8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80021ac:	460b      	mov	r3, r1
 80021ae:	18db      	adds	r3, r3, r3
 80021b0:	643b      	str	r3, [r7, #64]	; 0x40
 80021b2:	4613      	mov	r3, r2
 80021b4:	eb42 0303 	adc.w	r3, r2, r3
 80021b8:	647b      	str	r3, [r7, #68]	; 0x44
 80021ba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80021be:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80021c2:	f7fe f801 	bl	80001c8 <__aeabi_uldivmod>
 80021c6:	4602      	mov	r2, r0
 80021c8:	460b      	mov	r3, r1
 80021ca:	4611      	mov	r1, r2
 80021cc:	4b3b      	ldr	r3, [pc, #236]	; (80022bc <UART_SetConfig+0x2d4>)
 80021ce:	fba3 2301 	umull	r2, r3, r3, r1
 80021d2:	095b      	lsrs	r3, r3, #5
 80021d4:	2264      	movs	r2, #100	; 0x64
 80021d6:	fb02 f303 	mul.w	r3, r2, r3
 80021da:	1acb      	subs	r3, r1, r3
 80021dc:	00db      	lsls	r3, r3, #3
 80021de:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80021e2:	4b36      	ldr	r3, [pc, #216]	; (80022bc <UART_SetConfig+0x2d4>)
 80021e4:	fba3 2302 	umull	r2, r3, r3, r2
 80021e8:	095b      	lsrs	r3, r3, #5
 80021ea:	005b      	lsls	r3, r3, #1
 80021ec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80021f0:	441c      	add	r4, r3
 80021f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80021f6:	2200      	movs	r2, #0
 80021f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80021fc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002200:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002204:	4642      	mov	r2, r8
 8002206:	464b      	mov	r3, r9
 8002208:	1891      	adds	r1, r2, r2
 800220a:	63b9      	str	r1, [r7, #56]	; 0x38
 800220c:	415b      	adcs	r3, r3
 800220e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002210:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002214:	4641      	mov	r1, r8
 8002216:	1851      	adds	r1, r2, r1
 8002218:	6339      	str	r1, [r7, #48]	; 0x30
 800221a:	4649      	mov	r1, r9
 800221c:	414b      	adcs	r3, r1
 800221e:	637b      	str	r3, [r7, #52]	; 0x34
 8002220:	f04f 0200 	mov.w	r2, #0
 8002224:	f04f 0300 	mov.w	r3, #0
 8002228:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800222c:	4659      	mov	r1, fp
 800222e:	00cb      	lsls	r3, r1, #3
 8002230:	4651      	mov	r1, sl
 8002232:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002236:	4651      	mov	r1, sl
 8002238:	00ca      	lsls	r2, r1, #3
 800223a:	4610      	mov	r0, r2
 800223c:	4619      	mov	r1, r3
 800223e:	4603      	mov	r3, r0
 8002240:	4642      	mov	r2, r8
 8002242:	189b      	adds	r3, r3, r2
 8002244:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002248:	464b      	mov	r3, r9
 800224a:	460a      	mov	r2, r1
 800224c:	eb42 0303 	adc.w	r3, r2, r3
 8002250:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002254:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	2200      	movs	r2, #0
 800225c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002260:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002264:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002268:	460b      	mov	r3, r1
 800226a:	18db      	adds	r3, r3, r3
 800226c:	62bb      	str	r3, [r7, #40]	; 0x28
 800226e:	4613      	mov	r3, r2
 8002270:	eb42 0303 	adc.w	r3, r2, r3
 8002274:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002276:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800227a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800227e:	f7fd ffa3 	bl	80001c8 <__aeabi_uldivmod>
 8002282:	4602      	mov	r2, r0
 8002284:	460b      	mov	r3, r1
 8002286:	4b0d      	ldr	r3, [pc, #52]	; (80022bc <UART_SetConfig+0x2d4>)
 8002288:	fba3 1302 	umull	r1, r3, r3, r2
 800228c:	095b      	lsrs	r3, r3, #5
 800228e:	2164      	movs	r1, #100	; 0x64
 8002290:	fb01 f303 	mul.w	r3, r1, r3
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	00db      	lsls	r3, r3, #3
 8002298:	3332      	adds	r3, #50	; 0x32
 800229a:	4a08      	ldr	r2, [pc, #32]	; (80022bc <UART_SetConfig+0x2d4>)
 800229c:	fba2 2303 	umull	r2, r3, r2, r3
 80022a0:	095b      	lsrs	r3, r3, #5
 80022a2:	f003 0207 	and.w	r2, r3, #7
 80022a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4422      	add	r2, r4
 80022ae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80022b0:	e105      	b.n	80024be <UART_SetConfig+0x4d6>
 80022b2:	bf00      	nop
 80022b4:	40011000 	.word	0x40011000
 80022b8:	40011400 	.word	0x40011400
 80022bc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80022c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80022c4:	2200      	movs	r2, #0
 80022c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80022ca:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80022ce:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80022d2:	4642      	mov	r2, r8
 80022d4:	464b      	mov	r3, r9
 80022d6:	1891      	adds	r1, r2, r2
 80022d8:	6239      	str	r1, [r7, #32]
 80022da:	415b      	adcs	r3, r3
 80022dc:	627b      	str	r3, [r7, #36]	; 0x24
 80022de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80022e2:	4641      	mov	r1, r8
 80022e4:	1854      	adds	r4, r2, r1
 80022e6:	4649      	mov	r1, r9
 80022e8:	eb43 0501 	adc.w	r5, r3, r1
 80022ec:	f04f 0200 	mov.w	r2, #0
 80022f0:	f04f 0300 	mov.w	r3, #0
 80022f4:	00eb      	lsls	r3, r5, #3
 80022f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80022fa:	00e2      	lsls	r2, r4, #3
 80022fc:	4614      	mov	r4, r2
 80022fe:	461d      	mov	r5, r3
 8002300:	4643      	mov	r3, r8
 8002302:	18e3      	adds	r3, r4, r3
 8002304:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002308:	464b      	mov	r3, r9
 800230a:	eb45 0303 	adc.w	r3, r5, r3
 800230e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002312:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	2200      	movs	r2, #0
 800231a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800231e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002322:	f04f 0200 	mov.w	r2, #0
 8002326:	f04f 0300 	mov.w	r3, #0
 800232a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800232e:	4629      	mov	r1, r5
 8002330:	008b      	lsls	r3, r1, #2
 8002332:	4621      	mov	r1, r4
 8002334:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002338:	4621      	mov	r1, r4
 800233a:	008a      	lsls	r2, r1, #2
 800233c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002340:	f7fd ff42 	bl	80001c8 <__aeabi_uldivmod>
 8002344:	4602      	mov	r2, r0
 8002346:	460b      	mov	r3, r1
 8002348:	4b60      	ldr	r3, [pc, #384]	; (80024cc <UART_SetConfig+0x4e4>)
 800234a:	fba3 2302 	umull	r2, r3, r3, r2
 800234e:	095b      	lsrs	r3, r3, #5
 8002350:	011c      	lsls	r4, r3, #4
 8002352:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002356:	2200      	movs	r2, #0
 8002358:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800235c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002360:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002364:	4642      	mov	r2, r8
 8002366:	464b      	mov	r3, r9
 8002368:	1891      	adds	r1, r2, r2
 800236a:	61b9      	str	r1, [r7, #24]
 800236c:	415b      	adcs	r3, r3
 800236e:	61fb      	str	r3, [r7, #28]
 8002370:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002374:	4641      	mov	r1, r8
 8002376:	1851      	adds	r1, r2, r1
 8002378:	6139      	str	r1, [r7, #16]
 800237a:	4649      	mov	r1, r9
 800237c:	414b      	adcs	r3, r1
 800237e:	617b      	str	r3, [r7, #20]
 8002380:	f04f 0200 	mov.w	r2, #0
 8002384:	f04f 0300 	mov.w	r3, #0
 8002388:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800238c:	4659      	mov	r1, fp
 800238e:	00cb      	lsls	r3, r1, #3
 8002390:	4651      	mov	r1, sl
 8002392:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002396:	4651      	mov	r1, sl
 8002398:	00ca      	lsls	r2, r1, #3
 800239a:	4610      	mov	r0, r2
 800239c:	4619      	mov	r1, r3
 800239e:	4603      	mov	r3, r0
 80023a0:	4642      	mov	r2, r8
 80023a2:	189b      	adds	r3, r3, r2
 80023a4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80023a8:	464b      	mov	r3, r9
 80023aa:	460a      	mov	r2, r1
 80023ac:	eb42 0303 	adc.w	r3, r2, r3
 80023b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80023b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	2200      	movs	r2, #0
 80023bc:	67bb      	str	r3, [r7, #120]	; 0x78
 80023be:	67fa      	str	r2, [r7, #124]	; 0x7c
 80023c0:	f04f 0200 	mov.w	r2, #0
 80023c4:	f04f 0300 	mov.w	r3, #0
 80023c8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80023cc:	4649      	mov	r1, r9
 80023ce:	008b      	lsls	r3, r1, #2
 80023d0:	4641      	mov	r1, r8
 80023d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80023d6:	4641      	mov	r1, r8
 80023d8:	008a      	lsls	r2, r1, #2
 80023da:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80023de:	f7fd fef3 	bl	80001c8 <__aeabi_uldivmod>
 80023e2:	4602      	mov	r2, r0
 80023e4:	460b      	mov	r3, r1
 80023e6:	4b39      	ldr	r3, [pc, #228]	; (80024cc <UART_SetConfig+0x4e4>)
 80023e8:	fba3 1302 	umull	r1, r3, r3, r2
 80023ec:	095b      	lsrs	r3, r3, #5
 80023ee:	2164      	movs	r1, #100	; 0x64
 80023f0:	fb01 f303 	mul.w	r3, r1, r3
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	011b      	lsls	r3, r3, #4
 80023f8:	3332      	adds	r3, #50	; 0x32
 80023fa:	4a34      	ldr	r2, [pc, #208]	; (80024cc <UART_SetConfig+0x4e4>)
 80023fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002400:	095b      	lsrs	r3, r3, #5
 8002402:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002406:	441c      	add	r4, r3
 8002408:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800240c:	2200      	movs	r2, #0
 800240e:	673b      	str	r3, [r7, #112]	; 0x70
 8002410:	677a      	str	r2, [r7, #116]	; 0x74
 8002412:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002416:	4642      	mov	r2, r8
 8002418:	464b      	mov	r3, r9
 800241a:	1891      	adds	r1, r2, r2
 800241c:	60b9      	str	r1, [r7, #8]
 800241e:	415b      	adcs	r3, r3
 8002420:	60fb      	str	r3, [r7, #12]
 8002422:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002426:	4641      	mov	r1, r8
 8002428:	1851      	adds	r1, r2, r1
 800242a:	6039      	str	r1, [r7, #0]
 800242c:	4649      	mov	r1, r9
 800242e:	414b      	adcs	r3, r1
 8002430:	607b      	str	r3, [r7, #4]
 8002432:	f04f 0200 	mov.w	r2, #0
 8002436:	f04f 0300 	mov.w	r3, #0
 800243a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800243e:	4659      	mov	r1, fp
 8002440:	00cb      	lsls	r3, r1, #3
 8002442:	4651      	mov	r1, sl
 8002444:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002448:	4651      	mov	r1, sl
 800244a:	00ca      	lsls	r2, r1, #3
 800244c:	4610      	mov	r0, r2
 800244e:	4619      	mov	r1, r3
 8002450:	4603      	mov	r3, r0
 8002452:	4642      	mov	r2, r8
 8002454:	189b      	adds	r3, r3, r2
 8002456:	66bb      	str	r3, [r7, #104]	; 0x68
 8002458:	464b      	mov	r3, r9
 800245a:	460a      	mov	r2, r1
 800245c:	eb42 0303 	adc.w	r3, r2, r3
 8002460:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002462:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	2200      	movs	r2, #0
 800246a:	663b      	str	r3, [r7, #96]	; 0x60
 800246c:	667a      	str	r2, [r7, #100]	; 0x64
 800246e:	f04f 0200 	mov.w	r2, #0
 8002472:	f04f 0300 	mov.w	r3, #0
 8002476:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800247a:	4649      	mov	r1, r9
 800247c:	008b      	lsls	r3, r1, #2
 800247e:	4641      	mov	r1, r8
 8002480:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002484:	4641      	mov	r1, r8
 8002486:	008a      	lsls	r2, r1, #2
 8002488:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800248c:	f7fd fe9c 	bl	80001c8 <__aeabi_uldivmod>
 8002490:	4602      	mov	r2, r0
 8002492:	460b      	mov	r3, r1
 8002494:	4b0d      	ldr	r3, [pc, #52]	; (80024cc <UART_SetConfig+0x4e4>)
 8002496:	fba3 1302 	umull	r1, r3, r3, r2
 800249a:	095b      	lsrs	r3, r3, #5
 800249c:	2164      	movs	r1, #100	; 0x64
 800249e:	fb01 f303 	mul.w	r3, r1, r3
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	011b      	lsls	r3, r3, #4
 80024a6:	3332      	adds	r3, #50	; 0x32
 80024a8:	4a08      	ldr	r2, [pc, #32]	; (80024cc <UART_SetConfig+0x4e4>)
 80024aa:	fba2 2303 	umull	r2, r3, r2, r3
 80024ae:	095b      	lsrs	r3, r3, #5
 80024b0:	f003 020f 	and.w	r2, r3, #15
 80024b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4422      	add	r2, r4
 80024bc:	609a      	str	r2, [r3, #8]
}
 80024be:	bf00      	nop
 80024c0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80024c4:	46bd      	mov	sp, r7
 80024c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80024ca:	bf00      	nop
 80024cc:	51eb851f 	.word	0x51eb851f

080024d0 <__libc_init_array>:
 80024d0:	b570      	push	{r4, r5, r6, lr}
 80024d2:	4d0d      	ldr	r5, [pc, #52]	; (8002508 <__libc_init_array+0x38>)
 80024d4:	4c0d      	ldr	r4, [pc, #52]	; (800250c <__libc_init_array+0x3c>)
 80024d6:	1b64      	subs	r4, r4, r5
 80024d8:	10a4      	asrs	r4, r4, #2
 80024da:	2600      	movs	r6, #0
 80024dc:	42a6      	cmp	r6, r4
 80024de:	d109      	bne.n	80024f4 <__libc_init_array+0x24>
 80024e0:	4d0b      	ldr	r5, [pc, #44]	; (8002510 <__libc_init_array+0x40>)
 80024e2:	4c0c      	ldr	r4, [pc, #48]	; (8002514 <__libc_init_array+0x44>)
 80024e4:	f000 f820 	bl	8002528 <_init>
 80024e8:	1b64      	subs	r4, r4, r5
 80024ea:	10a4      	asrs	r4, r4, #2
 80024ec:	2600      	movs	r6, #0
 80024ee:	42a6      	cmp	r6, r4
 80024f0:	d105      	bne.n	80024fe <__libc_init_array+0x2e>
 80024f2:	bd70      	pop	{r4, r5, r6, pc}
 80024f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80024f8:	4798      	blx	r3
 80024fa:	3601      	adds	r6, #1
 80024fc:	e7ee      	b.n	80024dc <__libc_init_array+0xc>
 80024fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8002502:	4798      	blx	r3
 8002504:	3601      	adds	r6, #1
 8002506:	e7f2      	b.n	80024ee <__libc_init_array+0x1e>
 8002508:	08002560 	.word	0x08002560
 800250c:	08002560 	.word	0x08002560
 8002510:	08002560 	.word	0x08002560
 8002514:	08002564 	.word	0x08002564

08002518 <memset>:
 8002518:	4402      	add	r2, r0
 800251a:	4603      	mov	r3, r0
 800251c:	4293      	cmp	r3, r2
 800251e:	d100      	bne.n	8002522 <memset+0xa>
 8002520:	4770      	bx	lr
 8002522:	f803 1b01 	strb.w	r1, [r3], #1
 8002526:	e7f9      	b.n	800251c <memset+0x4>

08002528 <_init>:
 8002528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800252a:	bf00      	nop
 800252c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800252e:	bc08      	pop	{r3}
 8002530:	469e      	mov	lr, r3
 8002532:	4770      	bx	lr

08002534 <_fini>:
 8002534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002536:	bf00      	nop
 8002538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800253a:	bc08      	pop	{r3}
 800253c:	469e      	mov	lr, r3
 800253e:	4770      	bx	lr
