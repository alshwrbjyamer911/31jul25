
V1_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001a28  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000230  08001b34  08001b34  00002b34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001d64  08001d64  00003010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08001d64  08001d64  00003010  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08001d64  08001d64  00003010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001d64  08001d64  00002d64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001d68  08001d68  00002d68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08001d6c  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000047c  20000010  08001d7c  00003010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000048c  08001d7c  0000348c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00003010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006504  00000000  00000000  00003039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000158d  00000000  00000000  0000953d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006f0  00000000  00000000  0000aad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000530  00000000  00000000  0000b1c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016541  00000000  00000000  0000b6f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000804c  00000000  00000000  00021c31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007f32c  00000000  00000000  00029c7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a8fa9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001b4c  00000000  00000000  000a8fec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000aab38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	08001b1c 	.word	0x08001b1c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	08001b1c 	.word	0x08001b1c

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fb4c 	bl	80007ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f81c 	bl	8000190 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f894 	bl	8000284 <MX_GPIO_Init>
  MX_SPI1_Init();
 800015c:	f000 f85a 	bl	8000214 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  SH1106_Init();
 8000160:	f000 f904 	bl	800036c <SH1106_Init>

      // Set normal orientation
      SH1106_Orientation(LCD_ORIENT_NORMAL);
 8000164:	2000      	movs	r0, #0
 8000166:	f000 f9a3 	bl	80004b0 <SH1106_Orientation>

      // 1?? Draw fullscreen bitmap
      LCD_DrawBitmapFullscreen(gImage_Image_BMP);
 800016a:	4808      	ldr	r0, [pc, #32]	@ (800018c <main+0x40>)
 800016c:	f000 fa62 	bl	8000634 <LCD_DrawBitmapFullscreen>
      SH1106_Flush();
 8000170:	f000 f9ee 	bl	8000550 <SH1106_Flush>

      HAL_Delay(2000); // 2 seconds
 8000174:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000178:	f000 fb9a 	bl	80008b0 <HAL_Delay>

      // 2?? Clear display
      SH1106_Fill(0x00);
 800017c:	2000      	movs	r0, #0
 800017e:	f000 fa3f 	bl	8000600 <SH1106_Fill>
      SH1106_Flush();
 8000182:	f000 f9e5 	bl	8000550 <SH1106_Flush>
//
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000186:	bf00      	nop
 8000188:	e7fd      	b.n	8000186 <main+0x3a>
 800018a:	bf00      	nop
 800018c:	08001b38 	.word	0x08001b38

08000190 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000190:	b580      	push	{r7, lr}
 8000192:	b090      	sub	sp, #64	@ 0x40
 8000194:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000196:	f107 0318 	add.w	r3, r7, #24
 800019a:	2228      	movs	r2, #40	@ 0x28
 800019c:	2100      	movs	r1, #0
 800019e:	4618      	mov	r0, r3
 80001a0:	f001 fc81 	bl	8001aa6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001a4:	1d3b      	adds	r3, r7, #4
 80001a6:	2200      	movs	r2, #0
 80001a8:	601a      	str	r2, [r3, #0]
 80001aa:	605a      	str	r2, [r3, #4]
 80001ac:	609a      	str	r2, [r3, #8]
 80001ae:	60da      	str	r2, [r3, #12]
 80001b0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001b2:	2302      	movs	r3, #2
 80001b4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001b6:	2301      	movs	r3, #1
 80001b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001ba:	2310      	movs	r3, #16
 80001bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001be:	2302      	movs	r3, #2
 80001c0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80001c2:	2300      	movs	r3, #0
 80001c4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80001c6:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 80001ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001cc:	f107 0318 	add.w	r3, r7, #24
 80001d0:	4618      	mov	r0, r3
 80001d2:	f000 fe09 	bl	8000de8 <HAL_RCC_OscConfig>
 80001d6:	4603      	mov	r3, r0
 80001d8:	2b00      	cmp	r3, #0
 80001da:	d001      	beq.n	80001e0 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80001dc:	f000 f884 	bl	80002e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001e0:	230f      	movs	r3, #15
 80001e2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001e4:	2302      	movs	r3, #2
 80001e6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001e8:	2300      	movs	r3, #0
 80001ea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001ec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80001f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001f2:	2300      	movs	r3, #0
 80001f4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001f6:	1d3b      	adds	r3, r7, #4
 80001f8:	2102      	movs	r1, #2
 80001fa:	4618      	mov	r0, r3
 80001fc:	f001 f876 	bl	80012ec <HAL_RCC_ClockConfig>
 8000200:	4603      	mov	r3, r0
 8000202:	2b00      	cmp	r3, #0
 8000204:	d001      	beq.n	800020a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000206:	f000 f86f 	bl	80002e8 <Error_Handler>
  }
}
 800020a:	bf00      	nop
 800020c:	3740      	adds	r7, #64	@ 0x40
 800020e:	46bd      	mov	sp, r7
 8000210:	bd80      	pop	{r7, pc}
	...

08000214 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000218:	4b18      	ldr	r3, [pc, #96]	@ (800027c <MX_SPI1_Init+0x68>)
 800021a:	4a19      	ldr	r2, [pc, #100]	@ (8000280 <MX_SPI1_Init+0x6c>)
 800021c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800021e:	4b17      	ldr	r3, [pc, #92]	@ (800027c <MX_SPI1_Init+0x68>)
 8000220:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000224:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8000226:	4b15      	ldr	r3, [pc, #84]	@ (800027c <MX_SPI1_Init+0x68>)
 8000228:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800022c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800022e:	4b13      	ldr	r3, [pc, #76]	@ (800027c <MX_SPI1_Init+0x68>)
 8000230:	2200      	movs	r2, #0
 8000232:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000234:	4b11      	ldr	r3, [pc, #68]	@ (800027c <MX_SPI1_Init+0x68>)
 8000236:	2200      	movs	r2, #0
 8000238:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800023a:	4b10      	ldr	r3, [pc, #64]	@ (800027c <MX_SPI1_Init+0x68>)
 800023c:	2200      	movs	r2, #0
 800023e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000240:	4b0e      	ldr	r3, [pc, #56]	@ (800027c <MX_SPI1_Init+0x68>)
 8000242:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000246:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000248:	4b0c      	ldr	r3, [pc, #48]	@ (800027c <MX_SPI1_Init+0x68>)
 800024a:	2208      	movs	r2, #8
 800024c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800024e:	4b0b      	ldr	r3, [pc, #44]	@ (800027c <MX_SPI1_Init+0x68>)
 8000250:	2200      	movs	r2, #0
 8000252:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000254:	4b09      	ldr	r3, [pc, #36]	@ (800027c <MX_SPI1_Init+0x68>)
 8000256:	2200      	movs	r2, #0
 8000258:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800025a:	4b08      	ldr	r3, [pc, #32]	@ (800027c <MX_SPI1_Init+0x68>)
 800025c:	2200      	movs	r2, #0
 800025e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000260:	4b06      	ldr	r3, [pc, #24]	@ (800027c <MX_SPI1_Init+0x68>)
 8000262:	220a      	movs	r2, #10
 8000264:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000266:	4805      	ldr	r0, [pc, #20]	@ (800027c <MX_SPI1_Init+0x68>)
 8000268:	f001 f99c 	bl	80015a4 <HAL_SPI_Init>
 800026c:	4603      	mov	r3, r0
 800026e:	2b00      	cmp	r3, #0
 8000270:	d001      	beq.n	8000276 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8000272:	f000 f839 	bl	80002e8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000276:	bf00      	nop
 8000278:	bd80      	pop	{r7, pc}
 800027a:	bf00      	nop
 800027c:	2000002c 	.word	0x2000002c
 8000280:	40013000 	.word	0x40013000

08000284 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	b086      	sub	sp, #24
 8000288:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800028a:	f107 0308 	add.w	r3, r7, #8
 800028e:	2200      	movs	r2, #0
 8000290:	601a      	str	r2, [r3, #0]
 8000292:	605a      	str	r2, [r3, #4]
 8000294:	609a      	str	r2, [r3, #8]
 8000296:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000298:	4b11      	ldr	r3, [pc, #68]	@ (80002e0 <MX_GPIO_Init+0x5c>)
 800029a:	699b      	ldr	r3, [r3, #24]
 800029c:	4a10      	ldr	r2, [pc, #64]	@ (80002e0 <MX_GPIO_Init+0x5c>)
 800029e:	f043 0304 	orr.w	r3, r3, #4
 80002a2:	6193      	str	r3, [r2, #24]
 80002a4:	4b0e      	ldr	r3, [pc, #56]	@ (80002e0 <MX_GPIO_Init+0x5c>)
 80002a6:	699b      	ldr	r3, [r3, #24]
 80002a8:	f003 0304 	and.w	r3, r3, #4
 80002ac:	607b      	str	r3, [r7, #4]
 80002ae:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 80002b0:	2200      	movs	r2, #0
 80002b2:	210c      	movs	r1, #12
 80002b4:	480b      	ldr	r0, [pc, #44]	@ (80002e4 <MX_GPIO_Init+0x60>)
 80002b6:	f000 fd7f 	bl	8000db8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80002ba:	230c      	movs	r3, #12
 80002bc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002be:	2301      	movs	r3, #1
 80002c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002c2:	2300      	movs	r3, #0
 80002c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002c6:	2302      	movs	r3, #2
 80002c8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002ca:	f107 0308 	add.w	r3, r7, #8
 80002ce:	4619      	mov	r1, r3
 80002d0:	4804      	ldr	r0, [pc, #16]	@ (80002e4 <MX_GPIO_Init+0x60>)
 80002d2:	f000 fbf5 	bl	8000ac0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80002d6:	bf00      	nop
 80002d8:	3718      	adds	r7, #24
 80002da:	46bd      	mov	sp, r7
 80002dc:	bd80      	pop	{r7, pc}
 80002de:	bf00      	nop
 80002e0:	40021000 	.word	0x40021000
 80002e4:	40010800 	.word	0x40010800

080002e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80002e8:	b480      	push	{r7}
 80002ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002ec:	b672      	cpsid	i
}
 80002ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80002f0:	bf00      	nop
 80002f2:	e7fd      	b.n	80002f0 <Error_Handler+0x8>

080002f4 <SH1106_cmd>:


// Send single byte command to display
// input:
//   cmd - display command
static void SH1106_cmd(uint8_t cmd) {
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b084      	sub	sp, #16
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	4603      	mov	r3, r0
 80002fc:	71fb      	strb	r3, [r7, #7]
	// Deassert DC pin -> command transmit
	SH1106_DC_L();
 80002fe:	2200      	movs	r2, #0
 8000300:	2108      	movs	r1, #8
 8000302:	4808      	ldr	r0, [pc, #32]	@ (8000324 <SH1106_cmd+0x30>)
 8000304:	f000 fd58 	bl	8000db8 <HAL_GPIO_WritePin>

	// Send command to display
	uint8_t command = cmd;
 8000308:	79fb      	ldrb	r3, [r7, #7]
 800030a:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit ( &SH1106_SPI_PORT,  &command, 1, 20) ;
 800030c:	f107 010f 	add.w	r1, r7, #15
 8000310:	2314      	movs	r3, #20
 8000312:	2201      	movs	r2, #1
 8000314:	4804      	ldr	r0, [pc, #16]	@ (8000328 <SH1106_cmd+0x34>)
 8000316:	f001 f9c9 	bl	80016ac <HAL_SPI_Transmit>
}
 800031a:	bf00      	nop
 800031c:	3710      	adds	r7, #16
 800031e:	46bd      	mov	sp, r7
 8000320:	bd80      	pop	{r7, pc}
 8000322:	bf00      	nop
 8000324:	40010800 	.word	0x40010800
 8000328:	2000002c 	.word	0x2000002c

0800032c <SH1106_cmd_double>:

// Send double byte command to display
// input:
//   cmd1 - first byte of double-byte command
//   cmd2 - second byte of double-byte command
static void SH1106_cmd_double(uint8_t cmd1, uint8_t cmd2) {
 800032c:	b580      	push	{r7, lr}
 800032e:	b084      	sub	sp, #16
 8000330:	af00      	add	r7, sp, #0
 8000332:	4603      	mov	r3, r0
 8000334:	460a      	mov	r2, r1
 8000336:	71fb      	strb	r3, [r7, #7]
 8000338:	4613      	mov	r3, r2
 800033a:	71bb      	strb	r3, [r7, #6]
	// Deassert DC pin -> command transmit
	SH1106_DC_L();
 800033c:	2200      	movs	r2, #0
 800033e:	2108      	movs	r1, #8
 8000340:	4808      	ldr	r0, [pc, #32]	@ (8000364 <SH1106_cmd_double+0x38>)
 8000342:	f000 fd39 	bl	8000db8 <HAL_GPIO_WritePin>

	// Send double byte command to display
	uint8_t command[2];
	command[0] = cmd1;
 8000346:	79fb      	ldrb	r3, [r7, #7]
 8000348:	733b      	strb	r3, [r7, #12]
	command[1] = cmd2;
 800034a:	79bb      	ldrb	r3, [r7, #6]
 800034c:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit ( &SH1106_SPI_PORT,  command, 2, 20) ;
 800034e:	f107 010c 	add.w	r1, r7, #12
 8000352:	2314      	movs	r3, #20
 8000354:	2202      	movs	r2, #2
 8000356:	4804      	ldr	r0, [pc, #16]	@ (8000368 <SH1106_cmd_double+0x3c>)
 8000358:	f001 f9a8 	bl	80016ac <HAL_SPI_Transmit>

}
 800035c:	bf00      	nop
 800035e:	3710      	adds	r7, #16
 8000360:	46bd      	mov	sp, r7
 8000362:	bd80      	pop	{r7, pc}
 8000364:	40010800 	.word	0x40010800
 8000368:	2000002c 	.word	0x2000002c

0800036c <SH1106_Init>:
}
*/

// Initialize SPI peripheral and SH1106 display
// note: SPI peripheral must be initialized before
void SH1106_Init(void) {
 800036c:	b580      	push	{r7, lr}
 800036e:	b082      	sub	sp, #8
 8000370:	af00      	add	r7, sp, #0
	// Hardware display reset
	SH1106_CS_H();
 8000372:	2201      	movs	r2, #1
 8000374:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000378:	482b      	ldr	r0, [pc, #172]	@ (8000428 <SH1106_Init+0xbc>)
 800037a:	f000 fd1d 	bl	8000db8 <HAL_GPIO_WritePin>
	SH1106_RST_L();
 800037e:	2200      	movs	r2, #0
 8000380:	2104      	movs	r1, #4
 8000382:	482a      	ldr	r0, [pc, #168]	@ (800042c <SH1106_Init+0xc0>)
 8000384:	f000 fd18 	bl	8000db8 <HAL_GPIO_WritePin>
	SH1106_RST_H();
 8000388:	2201      	movs	r2, #1
 800038a:	2104      	movs	r1, #4
 800038c:	4827      	ldr	r0, [pc, #156]	@ (800042c <SH1106_Init+0xc0>)
 800038e:	f000 fd13 	bl	8000db8 <HAL_GPIO_WritePin>
	SH1106_CS_L();
 8000392:	2200      	movs	r2, #0
 8000394:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000398:	4823      	ldr	r0, [pc, #140]	@ (8000428 <SH1106_Init+0xbc>)
 800039a:	f000 fd0d 	bl	8000db8 <HAL_GPIO_WritePin>

	// Initial display configuration

	// Set multiplex ratio (visible lines)
	SH1106_cmd_double(SH1106_CMD_SETMUX,0x3F); // 64MUX
 800039e:	213f      	movs	r1, #63	@ 0x3f
 80003a0:	20a8      	movs	r0, #168	@ 0xa8
 80003a2:	f7ff ffc3 	bl	800032c <SH1106_cmd_double>

	// Set display offset (offset of first line from the top of display)
	SH1106_cmd_double(SH1106_CMD_SETOFFS,0x00); // Offset: 0
 80003a6:	2100      	movs	r1, #0
 80003a8:	20d3      	movs	r0, #211	@ 0xd3
 80003aa:	f7ff ffbf 	bl	800032c <SH1106_cmd_double>

	// Set display start line (first line displayed)
	SH1106_cmd(SH1106_CMD_STARTLINE | 0x00); // Start line: 0
 80003ae:	2040      	movs	r0, #64	@ 0x40
 80003b0:	f7ff ffa0 	bl	80002f4 <SH1106_cmd>

	// Set segment re-map (X coordinate)
	SH1106_cmd(SH1106_CMD_SEG_NORM);
 80003b4:	20a0      	movs	r0, #160	@ 0xa0
 80003b6:	f7ff ff9d 	bl	80002f4 <SH1106_cmd>

	// Set COM output scan direction (Y coordinate)
	SH1106_cmd(SH1106_CMD_COM_NORM);
 80003ba:	20c0      	movs	r0, #192	@ 0xc0
 80003bc:	f7ff ff9a 	bl	80002f4 <SH1106_cmd>
	// Set COM pins hardware configuration
	// bit[4]: reset - sequential COM pin configuration
	//         set   - alternative COM pin configuration (reset value)
	// bit[5]: reset - disable COM left/right remap (reset value)
	//         set   - enable COM left/right remap
	SH1106_cmd_double(SH1106_CMD_COM_HW,0x12);
 80003c0:	2112      	movs	r1, #18
 80003c2:	20da      	movs	r0, #218	@ 0xda
 80003c4:	f7ff ffb2 	bl	800032c <SH1106_cmd_double>

	uint8_t dis_charge = 0x00;
 80003c8:	2300      	movs	r3, #0
 80003ca:	71fb      	strb	r3, [r7, #7]
	uint8_t pre_charge = 0x00;
 80003cc:	2300      	movs	r3, #0
 80003ce:	71bb      	strb	r3, [r7, #6]

	SH1106_cmd_double(SH1106_CMD_CHARGE, dis_charge | (pre_charge << 4));
 80003d0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80003d4:	011b      	lsls	r3, r3, #4
 80003d6:	b25a      	sxtb	r2, r3
 80003d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003dc:	4313      	orrs	r3, r2
 80003de:	b25b      	sxtb	r3, r3
 80003e0:	b2db      	uxtb	r3, r3
 80003e2:	4619      	mov	r1, r3
 80003e4:	2022      	movs	r0, #34	@ 0x22
 80003e6:	f7ff ffa1 	bl	800032c <SH1106_cmd_double>

	// Set contrast control
	SH1106_cmd_double(SH1106_CMD_CONTRAST, 0x0F); // Contrast: middle level
 80003ea:	210f      	movs	r1, #15
 80003ec:	2081      	movs	r0, #129	@ 0x81
 80003ee:	f7ff ff9d 	bl	800032c <SH1106_cmd_double>

	SH1106_cmd(0x30);
 80003f2:	2030      	movs	r0, #48	@ 0x30
 80003f4:	f7ff ff7e 	bl	80002f4 <SH1106_cmd>

	// Disable entire display ON
	SH1106_cmd(SH1106_CMD_EDOFF); // Display follows RAM content
 80003f8:	20a4      	movs	r0, #164	@ 0xa4
 80003fa:	f7ff ff7b 	bl	80002f4 <SH1106_cmd>

	// Disable display inversion
	SH1106_cmd(SH1106_CMD_INV_OFF); // Normal display mode
 80003fe:	20a6      	movs	r0, #166	@ 0xa6
 8000400:	f7ff ff78 	bl	80002f4 <SH1106_cmd>
	// bits[3:0] defines the divide ratio of the display clocks (bits[3:0] + 1)
	// bits[7:4] set the oscillator frequency (Fosc), frequency increases with the value of these bits
	// 0xF0 value gives maximum frequency (maximum Fosc without divider)
	// 0x0F value gives minimum frequency (minimum Fosc divided by 16)
	// The higher display frequency decreases image flickering but increases current consumption and vice versa
	SH1106_cmd_double(SH1106_CMD_CLOCKDIV,0xF0);
 8000404:	21f0      	movs	r1, #240	@ 0xf0
 8000406:	20d5      	movs	r0, #213	@ 0xd5
 8000408:	f7ff ff90 	bl	800032c <SH1106_cmd_double>

	// Display ON
	SH1106_cmd(SH1106_CMD_DISP_ON); // Display enabled
 800040c:	20af      	movs	r0, #175	@ 0xaf
 800040e:	f7ff ff71 	bl	80002f4 <SH1106_cmd>

	// Assert CS pin
	SH1106_CS_H();
 8000412:	2201      	movs	r2, #1
 8000414:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000418:	4803      	ldr	r0, [pc, #12]	@ (8000428 <SH1106_Init+0xbc>)
 800041a:	f000 fccd 	bl	8000db8 <HAL_GPIO_WritePin>
}
 800041e:	bf00      	nop
 8000420:	3708      	adds	r7, #8
 8000422:	46bd      	mov	sp, r7
 8000424:	bd80      	pop	{r7, pc}
 8000426:	bf00      	nop
 8000428:	40010c00 	.word	0x40010c00
 800042c:	40010800 	.word	0x40010800

08000430 <SH1106_SetXDir>:
// Set X coordinate mapping (normal or mirrored)
// input:
//   x_map - new mapping of X coordinate (one of LCD_INVERT_XXX values)
// note: LCD_INVERT_OFF means normal SEG scan direction
// note: new setting will only affect subsequent data output
void SH1106_SetXDir(uint8_t x_map) {
 8000430:	b580      	push	{r7, lr}
 8000432:	b082      	sub	sp, #8
 8000434:	af00      	add	r7, sp, #0
 8000436:	4603      	mov	r3, r0
 8000438:	71fb      	strb	r3, [r7, #7]
	SH1106_CS_L();
 800043a:	2200      	movs	r2, #0
 800043c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000440:	480a      	ldr	r0, [pc, #40]	@ (800046c <SH1106_SetXDir+0x3c>)
 8000442:	f000 fcb9 	bl	8000db8 <HAL_GPIO_WritePin>
	SH1106_cmd(x_map ? SH1106_CMD_SEG_INV : SH1106_CMD_SEG_NORM);
 8000446:	79fb      	ldrb	r3, [r7, #7]
 8000448:	2b00      	cmp	r3, #0
 800044a:	d001      	beq.n	8000450 <SH1106_SetXDir+0x20>
 800044c:	23a1      	movs	r3, #161	@ 0xa1
 800044e:	e000      	b.n	8000452 <SH1106_SetXDir+0x22>
 8000450:	23a0      	movs	r3, #160	@ 0xa0
 8000452:	4618      	mov	r0, r3
 8000454:	f7ff ff4e 	bl	80002f4 <SH1106_cmd>
	SH1106_CS_H();
 8000458:	2201      	movs	r2, #1
 800045a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800045e:	4803      	ldr	r0, [pc, #12]	@ (800046c <SH1106_SetXDir+0x3c>)
 8000460:	f000 fcaa 	bl	8000db8 <HAL_GPIO_WritePin>
}
 8000464:	bf00      	nop
 8000466:	3708      	adds	r7, #8
 8000468:	46bd      	mov	sp, r7
 800046a:	bd80      	pop	{r7, pc}
 800046c:	40010c00 	.word	0x40010c00

08000470 <SH1106_SetYDir>:
// Set Y coordinate mapping (normal or mirrored)
// input:
//   y_map - new mapping of Y coordinate (one of LCD_INVERT_XXX values)
// note: LCD_INVERT_OFF means normal COM scan direction
// note: new setting flip screen image immediately
void SH1106_SetYDir(uint8_t y_map) {
 8000470:	b580      	push	{r7, lr}
 8000472:	b082      	sub	sp, #8
 8000474:	af00      	add	r7, sp, #0
 8000476:	4603      	mov	r3, r0
 8000478:	71fb      	strb	r3, [r7, #7]
	SH1106_CS_L();
 800047a:	2200      	movs	r2, #0
 800047c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000480:	480a      	ldr	r0, [pc, #40]	@ (80004ac <SH1106_SetYDir+0x3c>)
 8000482:	f000 fc99 	bl	8000db8 <HAL_GPIO_WritePin>
	SH1106_cmd(y_map ? SH1106_CMD_COM_INV : SH1106_CMD_COM_NORM);
 8000486:	79fb      	ldrb	r3, [r7, #7]
 8000488:	2b00      	cmp	r3, #0
 800048a:	d001      	beq.n	8000490 <SH1106_SetYDir+0x20>
 800048c:	23c8      	movs	r3, #200	@ 0xc8
 800048e:	e000      	b.n	8000492 <SH1106_SetYDir+0x22>
 8000490:	23c0      	movs	r3, #192	@ 0xc0
 8000492:	4618      	mov	r0, r3
 8000494:	f7ff ff2e 	bl	80002f4 <SH1106_cmd>
	SH1106_CS_H();
 8000498:	2201      	movs	r2, #1
 800049a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800049e:	4803      	ldr	r0, [pc, #12]	@ (80004ac <SH1106_SetYDir+0x3c>)
 80004a0:	f000 fc8a 	bl	8000db8 <HAL_GPIO_WritePin>
}
 80004a4:	bf00      	nop
 80004a6:	3708      	adds	r7, #8
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bd80      	pop	{r7, pc}
 80004ac:	40010c00 	.word	0x40010c00

080004b0 <SH1106_Orientation>:
// Set display orientation
// input:
//   orientation - new display orientation (one of LCD_ORIENT_XXX values)
// note: normal orientation is FPC on top of COG
// note: this setting specifies an orientation of display, not orientation of image
void SH1106_Orientation(uint8_t orientation) {
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b082      	sub	sp, #8
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	4603      	mov	r3, r0
 80004b8:	71fb      	strb	r3, [r7, #7]
	// Configure display SEG/COM scan direction
	switch(orientation) {
 80004ba:	79fb      	ldrb	r3, [r7, #7]
 80004bc:	2b03      	cmp	r3, #3
 80004be:	d020      	beq.n	8000502 <SH1106_Orientation+0x52>
 80004c0:	2b03      	cmp	r3, #3
 80004c2:	dc2b      	bgt.n	800051c <SH1106_Orientation+0x6c>
 80004c4:	2b01      	cmp	r3, #1
 80004c6:	d002      	beq.n	80004ce <SH1106_Orientation+0x1e>
 80004c8:	2b02      	cmp	r3, #2
 80004ca:	d00d      	beq.n	80004e8 <SH1106_Orientation+0x38>
 80004cc:	e026      	b.n	800051c <SH1106_Orientation+0x6c>
		case LCD_ORIENT_CW:
			// Clockwise rotation
			scr_width  = SCR_H;
 80004ce:	4b1d      	ldr	r3, [pc, #116]	@ (8000544 <SH1106_Orientation+0x94>)
 80004d0:	2240      	movs	r2, #64	@ 0x40
 80004d2:	801a      	strh	r2, [r3, #0]
			scr_height = SCR_W;
 80004d4:	4b1c      	ldr	r3, [pc, #112]	@ (8000548 <SH1106_Orientation+0x98>)
 80004d6:	2280      	movs	r2, #128	@ 0x80
 80004d8:	801a      	strh	r2, [r3, #0]
			SH1106_SetXDir(LCD_INVERT_ON);
 80004da:	2001      	movs	r0, #1
 80004dc:	f7ff ffa8 	bl	8000430 <SH1106_SetXDir>
			SH1106_SetYDir(LCD_INVERT_OFF);
 80004e0:	2000      	movs	r0, #0
 80004e2:	f7ff ffc5 	bl	8000470 <SH1106_SetYDir>
			break;
 80004e6:	e026      	b.n	8000536 <SH1106_Orientation+0x86>
		case LCD_ORIENT_CCW:
			// Counter-clockwise rotation
			scr_width  = SCR_H;
 80004e8:	4b16      	ldr	r3, [pc, #88]	@ (8000544 <SH1106_Orientation+0x94>)
 80004ea:	2240      	movs	r2, #64	@ 0x40
 80004ec:	801a      	strh	r2, [r3, #0]
			scr_height = SCR_W;
 80004ee:	4b16      	ldr	r3, [pc, #88]	@ (8000548 <SH1106_Orientation+0x98>)
 80004f0:	2280      	movs	r2, #128	@ 0x80
 80004f2:	801a      	strh	r2, [r3, #0]
			SH1106_SetXDir(LCD_INVERT_OFF);
 80004f4:	2000      	movs	r0, #0
 80004f6:	f7ff ff9b 	bl	8000430 <SH1106_SetXDir>
			SH1106_SetYDir(LCD_INVERT_ON);
 80004fa:	2001      	movs	r0, #1
 80004fc:	f7ff ffb8 	bl	8000470 <SH1106_SetYDir>
			break;
 8000500:	e019      	b.n	8000536 <SH1106_Orientation+0x86>
		case LCD_ORIENT_180:
			// 180 degree rotation
			scr_width  = SCR_W;
 8000502:	4b10      	ldr	r3, [pc, #64]	@ (8000544 <SH1106_Orientation+0x94>)
 8000504:	2280      	movs	r2, #128	@ 0x80
 8000506:	801a      	strh	r2, [r3, #0]
			scr_height = SCR_H;
 8000508:	4b0f      	ldr	r3, [pc, #60]	@ (8000548 <SH1106_Orientation+0x98>)
 800050a:	2240      	movs	r2, #64	@ 0x40
 800050c:	801a      	strh	r2, [r3, #0]
			SH1106_SetXDir(LCD_INVERT_OFF);
 800050e:	2000      	movs	r0, #0
 8000510:	f7ff ff8e 	bl	8000430 <SH1106_SetXDir>
			SH1106_SetYDir(LCD_INVERT_OFF);
 8000514:	2000      	movs	r0, #0
 8000516:	f7ff ffab 	bl	8000470 <SH1106_SetYDir>
			break;
 800051a:	e00c      	b.n	8000536 <SH1106_Orientation+0x86>
		default:
			// Normal orientation
			scr_width  = SCR_W;
 800051c:	4b09      	ldr	r3, [pc, #36]	@ (8000544 <SH1106_Orientation+0x94>)
 800051e:	2280      	movs	r2, #128	@ 0x80
 8000520:	801a      	strh	r2, [r3, #0]
			scr_height = SCR_H;
 8000522:	4b09      	ldr	r3, [pc, #36]	@ (8000548 <SH1106_Orientation+0x98>)
 8000524:	2240      	movs	r2, #64	@ 0x40
 8000526:	801a      	strh	r2, [r3, #0]
			SH1106_SetXDir(LCD_INVERT_ON);
 8000528:	2001      	movs	r0, #1
 800052a:	f7ff ff81 	bl	8000430 <SH1106_SetXDir>
			SH1106_SetYDir(LCD_INVERT_ON);
 800052e:	2001      	movs	r0, #1
 8000530:	f7ff ff9e 	bl	8000470 <SH1106_SetYDir>
			break;
 8000534:	bf00      	nop
	}

	// Store orientation
	scr_orientation = orientation;
 8000536:	4a05      	ldr	r2, [pc, #20]	@ (800054c <SH1106_Orientation+0x9c>)
 8000538:	79fb      	ldrb	r3, [r7, #7]
 800053a:	7013      	strb	r3, [r2, #0]
}
 800053c:	bf00      	nop
 800053e:	3708      	adds	r7, #8
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}
 8000544:	20000000 	.word	0x20000000
 8000548:	20000002 	.word	0x20000002
 800054c:	20000084 	.word	0x20000084

08000550 <SH1106_Flush>:


// Send vRAM buffer into display

void SH1106_Flush(void) {
 8000550:	b590      	push	{r4, r7, lr}
 8000552:	b085      	sub	sp, #20
 8000554:	af00      	add	r7, sp, #0

	SH1106_CS_L();
 8000556:	2200      	movs	r2, #0
 8000558:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800055c:	4823      	ldr	r0, [pc, #140]	@ (80005ec <SH1106_Flush+0x9c>)
 800055e:	f000 fc2b 	bl	8000db8 <HAL_GPIO_WritePin>
	SH1106_DC_L();
 8000562:	2200      	movs	r2, #0
 8000564:	2108      	movs	r1, #8
 8000566:	4822      	ldr	r0, [pc, #136]	@ (80005f0 <SH1106_Flush+0xa0>)
 8000568:	f000 fc26 	bl	8000db8 <HAL_GPIO_WritePin>

	const uint32_t bits_h = SCR_H >> 3;
 800056c:	2308      	movs	r3, #8
 800056e:	60fb      	str	r3, [r7, #12]

	uint8_t ram_pointer[] = {
 8000570:	4a20      	ldr	r2, [pc, #128]	@ (80005f4 <SH1106_Flush+0xa4>)
 8000572:	463b      	mov	r3, r7
 8000574:	6812      	ldr	r2, [r2, #0]
 8000576:	4611      	mov	r1, r2
 8000578:	8019      	strh	r1, [r3, #0]
 800057a:	3302      	adds	r3, #2
 800057c:	0c12      	lsrs	r2, r2, #16
 800057e:	701a      	strb	r2, [r3, #0]
		SH1106_CMD_COL_LOW | 0x02,
		SH1106_CMD_COL_HIGH,
		0
	};

	uint8_t* page_addr = &ram_pointer[2];
 8000580:	463b      	mov	r3, r7
 8000582:	3302      	adds	r3, #2
 8000584:	60bb      	str	r3, [r7, #8]

	for (register uint32_t page = 0; page < bits_h; ++page)
 8000586:	2400      	movs	r4, #0
 8000588:	e022      	b.n	80005d0 <SH1106_Flush+0x80>
	{
		(*page_addr) = SH1106_CMD_PAGE_ADDR | page;
 800058a:	b2e3      	uxtb	r3, r4
 800058c:	f063 034f 	orn	r3, r3, #79	@ 0x4f
 8000590:	b2da      	uxtb	r2, r3
 8000592:	68bb      	ldr	r3, [r7, #8]
 8000594:	701a      	strb	r2, [r3, #0]

		HAL_SPI_Transmit(&SH1106_SPI_PORT,(uint8_t *)ram_pointer,sizeof(ram_pointer),1000);
 8000596:	4639      	mov	r1, r7
 8000598:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800059c:	2203      	movs	r2, #3
 800059e:	4816      	ldr	r0, [pc, #88]	@ (80005f8 <SH1106_Flush+0xa8>)
 80005a0:	f001 f884 	bl	80016ac <HAL_SPI_Transmit>

		uint8_t* vram = &vRAM[page * SCR_W];
 80005a4:	01e3      	lsls	r3, r4, #7
 80005a6:	4a15      	ldr	r2, [pc, #84]	@ (80005fc <SH1106_Flush+0xac>)
 80005a8:	4413      	add	r3, r2
 80005aa:	607b      	str	r3, [r7, #4]

		SH1106_DC_H();
 80005ac:	2201      	movs	r2, #1
 80005ae:	2108      	movs	r1, #8
 80005b0:	480f      	ldr	r0, [pc, #60]	@ (80005f0 <SH1106_Flush+0xa0>)
 80005b2:	f000 fc01 	bl	8000db8 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&SH1106_SPI_PORT,vram, SCR_W, 1000);
 80005b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005ba:	2280      	movs	r2, #128	@ 0x80
 80005bc:	6879      	ldr	r1, [r7, #4]
 80005be:	480e      	ldr	r0, [pc, #56]	@ (80005f8 <SH1106_Flush+0xa8>)
 80005c0:	f001 f874 	bl	80016ac <HAL_SPI_Transmit>

		SH1106_DC_L();
 80005c4:	2200      	movs	r2, #0
 80005c6:	2108      	movs	r1, #8
 80005c8:	4809      	ldr	r0, [pc, #36]	@ (80005f0 <SH1106_Flush+0xa0>)
 80005ca:	f000 fbf5 	bl	8000db8 <HAL_GPIO_WritePin>
	for (register uint32_t page = 0; page < bits_h; ++page)
 80005ce:	3401      	adds	r4, #1
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	429c      	cmp	r4, r3
 80005d4:	d3d9      	bcc.n	800058a <SH1106_Flush+0x3a>
	}

	SH1106_CS_H();
 80005d6:	2201      	movs	r2, #1
 80005d8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80005dc:	4803      	ldr	r0, [pc, #12]	@ (80005ec <SH1106_Flush+0x9c>)
 80005de:	f000 fbeb 	bl	8000db8 <HAL_GPIO_WritePin>
}
 80005e2:	bf00      	nop
 80005e4:	3714      	adds	r7, #20
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd90      	pop	{r4, r7, pc}
 80005ea:	bf00      	nop
 80005ec:	40010c00 	.word	0x40010c00
 80005f0:	40010800 	.word	0x40010800
 80005f4:	08001b34 	.word	0x08001b34
 80005f8:	2000002c 	.word	0x2000002c
 80005fc:	20000088 	.word	0x20000088

08000600 <SH1106_Fill>:

// Fill vRAM memory with specified pattern
// input:
//   pattern - byte to fill vRAM buffer
void SH1106_Fill(uint8_t pattern) {
 8000600:	b480      	push	{r7}
 8000602:	b085      	sub	sp, #20
 8000604:	af00      	add	r7, sp, #0
 8000606:	4603      	mov	r3, r0
 8000608:	71fb      	strb	r3, [r7, #7]
	uint16_t i;

	for (i = (SCR_W * SCR_H) >> 3; i--; ) {
 800060a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800060e:	81fb      	strh	r3, [r7, #14]
 8000610:	e003      	b.n	800061a <SH1106_Fill+0x1a>
		vRAM[i] = pattern;
 8000612:	89fb      	ldrh	r3, [r7, #14]
 8000614:	4906      	ldr	r1, [pc, #24]	@ (8000630 <SH1106_Fill+0x30>)
 8000616:	79fa      	ldrb	r2, [r7, #7]
 8000618:	54ca      	strb	r2, [r1, r3]
	for (i = (SCR_W * SCR_H) >> 3; i--; ) {
 800061a:	89fb      	ldrh	r3, [r7, #14]
 800061c:	1e5a      	subs	r2, r3, #1
 800061e:	81fa      	strh	r2, [r7, #14]
 8000620:	2b00      	cmp	r3, #0
 8000622:	d1f6      	bne.n	8000612 <SH1106_Fill+0x12>
	}
}
 8000624:	bf00      	nop
 8000626:	bf00      	nop
 8000628:	3714      	adds	r7, #20
 800062a:	46bd      	mov	sp, r7
 800062c:	bc80      	pop	{r7}
 800062e:	4770      	bx	lr
 8000630:	20000088 	.word	0x20000088

08000634 <LCD_DrawBitmapFullscreen>:
		pY += 8;
	}
}

void LCD_DrawBitmapFullscreen(const uint8_t* pBMP)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
	memcpy(vRAM, pBMP, (SCR_W * SCR_H) >> 3);
 800063c:	4a06      	ldr	r2, [pc, #24]	@ (8000658 <LCD_DrawBitmapFullscreen+0x24>)
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	4610      	mov	r0, r2
 8000642:	4619      	mov	r1, r3
 8000644:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000648:	461a      	mov	r2, r3
 800064a:	f001 fa59 	bl	8001b00 <memcpy>
}
 800064e:	bf00      	nop
 8000650:	3708      	adds	r7, #8
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	20000088 	.word	0x20000088

0800065c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800065c:	b480      	push	{r7}
 800065e:	b085      	sub	sp, #20
 8000660:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000662:	4b15      	ldr	r3, [pc, #84]	@ (80006b8 <HAL_MspInit+0x5c>)
 8000664:	699b      	ldr	r3, [r3, #24]
 8000666:	4a14      	ldr	r2, [pc, #80]	@ (80006b8 <HAL_MspInit+0x5c>)
 8000668:	f043 0301 	orr.w	r3, r3, #1
 800066c:	6193      	str	r3, [r2, #24]
 800066e:	4b12      	ldr	r3, [pc, #72]	@ (80006b8 <HAL_MspInit+0x5c>)
 8000670:	699b      	ldr	r3, [r3, #24]
 8000672:	f003 0301 	and.w	r3, r3, #1
 8000676:	60bb      	str	r3, [r7, #8]
 8000678:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800067a:	4b0f      	ldr	r3, [pc, #60]	@ (80006b8 <HAL_MspInit+0x5c>)
 800067c:	69db      	ldr	r3, [r3, #28]
 800067e:	4a0e      	ldr	r2, [pc, #56]	@ (80006b8 <HAL_MspInit+0x5c>)
 8000680:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000684:	61d3      	str	r3, [r2, #28]
 8000686:	4b0c      	ldr	r3, [pc, #48]	@ (80006b8 <HAL_MspInit+0x5c>)
 8000688:	69db      	ldr	r3, [r3, #28]
 800068a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800068e:	607b      	str	r3, [r7, #4]
 8000690:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000692:	4b0a      	ldr	r3, [pc, #40]	@ (80006bc <HAL_MspInit+0x60>)
 8000694:	685b      	ldr	r3, [r3, #4]
 8000696:	60fb      	str	r3, [r7, #12]
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800069e:	60fb      	str	r3, [r7, #12]
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80006a6:	60fb      	str	r3, [r7, #12]
 80006a8:	4a04      	ldr	r2, [pc, #16]	@ (80006bc <HAL_MspInit+0x60>)
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006ae:	bf00      	nop
 80006b0:	3714      	adds	r7, #20
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bc80      	pop	{r7}
 80006b6:	4770      	bx	lr
 80006b8:	40021000 	.word	0x40021000
 80006bc:	40010000 	.word	0x40010000

080006c0 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b088      	sub	sp, #32
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c8:	f107 0310 	add.w	r3, r7, #16
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
 80006d0:	605a      	str	r2, [r3, #4]
 80006d2:	609a      	str	r2, [r3, #8]
 80006d4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	4a15      	ldr	r2, [pc, #84]	@ (8000730 <HAL_SPI_MspInit+0x70>)
 80006dc:	4293      	cmp	r3, r2
 80006de:	d123      	bne.n	8000728 <HAL_SPI_MspInit+0x68>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80006e0:	4b14      	ldr	r3, [pc, #80]	@ (8000734 <HAL_SPI_MspInit+0x74>)
 80006e2:	699b      	ldr	r3, [r3, #24]
 80006e4:	4a13      	ldr	r2, [pc, #76]	@ (8000734 <HAL_SPI_MspInit+0x74>)
 80006e6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80006ea:	6193      	str	r3, [r2, #24]
 80006ec:	4b11      	ldr	r3, [pc, #68]	@ (8000734 <HAL_SPI_MspInit+0x74>)
 80006ee:	699b      	ldr	r3, [r3, #24]
 80006f0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80006f4:	60fb      	str	r3, [r7, #12]
 80006f6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f8:	4b0e      	ldr	r3, [pc, #56]	@ (8000734 <HAL_SPI_MspInit+0x74>)
 80006fa:	699b      	ldr	r3, [r3, #24]
 80006fc:	4a0d      	ldr	r2, [pc, #52]	@ (8000734 <HAL_SPI_MspInit+0x74>)
 80006fe:	f043 0304 	orr.w	r3, r3, #4
 8000702:	6193      	str	r3, [r2, #24]
 8000704:	4b0b      	ldr	r3, [pc, #44]	@ (8000734 <HAL_SPI_MspInit+0x74>)
 8000706:	699b      	ldr	r3, [r3, #24]
 8000708:	f003 0304 	and.w	r3, r3, #4
 800070c:	60bb      	str	r3, [r7, #8]
 800070e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8000710:	23b0      	movs	r3, #176	@ 0xb0
 8000712:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000714:	2302      	movs	r3, #2
 8000716:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000718:	2303      	movs	r3, #3
 800071a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800071c:	f107 0310 	add.w	r3, r7, #16
 8000720:	4619      	mov	r1, r3
 8000722:	4805      	ldr	r0, [pc, #20]	@ (8000738 <HAL_SPI_MspInit+0x78>)
 8000724:	f000 f9cc 	bl	8000ac0 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000728:	bf00      	nop
 800072a:	3720      	adds	r7, #32
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	40013000 	.word	0x40013000
 8000734:	40021000 	.word	0x40021000
 8000738:	40010800 	.word	0x40010800

0800073c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000740:	bf00      	nop
 8000742:	e7fd      	b.n	8000740 <NMI_Handler+0x4>

08000744 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000748:	bf00      	nop
 800074a:	e7fd      	b.n	8000748 <HardFault_Handler+0x4>

0800074c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000750:	bf00      	nop
 8000752:	e7fd      	b.n	8000750 <MemManage_Handler+0x4>

08000754 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000758:	bf00      	nop
 800075a:	e7fd      	b.n	8000758 <BusFault_Handler+0x4>

0800075c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000760:	bf00      	nop
 8000762:	e7fd      	b.n	8000760 <UsageFault_Handler+0x4>

08000764 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000768:	bf00      	nop
 800076a:	46bd      	mov	sp, r7
 800076c:	bc80      	pop	{r7}
 800076e:	4770      	bx	lr

08000770 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000774:	bf00      	nop
 8000776:	46bd      	mov	sp, r7
 8000778:	bc80      	pop	{r7}
 800077a:	4770      	bx	lr

0800077c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000780:	bf00      	nop
 8000782:	46bd      	mov	sp, r7
 8000784:	bc80      	pop	{r7}
 8000786:	4770      	bx	lr

08000788 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800078c:	f000 f874 	bl	8000878 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000790:	bf00      	nop
 8000792:	bd80      	pop	{r7, pc}

08000794 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000798:	bf00      	nop
 800079a:	46bd      	mov	sp, r7
 800079c:	bc80      	pop	{r7}
 800079e:	4770      	bx	lr

080007a0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80007a0:	f7ff fff8 	bl	8000794 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007a4:	480b      	ldr	r0, [pc, #44]	@ (80007d4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80007a6:	490c      	ldr	r1, [pc, #48]	@ (80007d8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80007a8:	4a0c      	ldr	r2, [pc, #48]	@ (80007dc <LoopFillZerobss+0x16>)
  movs r3, #0
 80007aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007ac:	e002      	b.n	80007b4 <LoopCopyDataInit>

080007ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007b2:	3304      	adds	r3, #4

080007b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007b8:	d3f9      	bcc.n	80007ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007ba:	4a09      	ldr	r2, [pc, #36]	@ (80007e0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80007bc:	4c09      	ldr	r4, [pc, #36]	@ (80007e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80007be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007c0:	e001      	b.n	80007c6 <LoopFillZerobss>

080007c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007c4:	3204      	adds	r2, #4

080007c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007c8:	d3fb      	bcc.n	80007c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007ca:	f001 f975 	bl	8001ab8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007ce:	f7ff fcbd 	bl	800014c <main>
  bx lr
 80007d2:	4770      	bx	lr
  ldr r0, =_sdata
 80007d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007d8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80007dc:	08001d6c 	.word	0x08001d6c
  ldr r2, =_sbss
 80007e0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80007e4:	2000048c 	.word	0x2000048c

080007e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007e8:	e7fe      	b.n	80007e8 <ADC1_2_IRQHandler>
	...

080007ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007f0:	4b08      	ldr	r3, [pc, #32]	@ (8000814 <HAL_Init+0x28>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4a07      	ldr	r2, [pc, #28]	@ (8000814 <HAL_Init+0x28>)
 80007f6:	f043 0310 	orr.w	r3, r3, #16
 80007fa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007fc:	2003      	movs	r0, #3
 80007fe:	f000 f92b 	bl	8000a58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000802:	200f      	movs	r0, #15
 8000804:	f000 f808 	bl	8000818 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000808:	f7ff ff28 	bl	800065c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800080c:	2300      	movs	r3, #0
}
 800080e:	4618      	mov	r0, r3
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	40022000 	.word	0x40022000

08000818 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000820:	4b12      	ldr	r3, [pc, #72]	@ (800086c <HAL_InitTick+0x54>)
 8000822:	681a      	ldr	r2, [r3, #0]
 8000824:	4b12      	ldr	r3, [pc, #72]	@ (8000870 <HAL_InitTick+0x58>)
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	4619      	mov	r1, r3
 800082a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800082e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000832:	fbb2 f3f3 	udiv	r3, r2, r3
 8000836:	4618      	mov	r0, r3
 8000838:	f000 f935 	bl	8000aa6 <HAL_SYSTICK_Config>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000842:	2301      	movs	r3, #1
 8000844:	e00e      	b.n	8000864 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	2b0f      	cmp	r3, #15
 800084a:	d80a      	bhi.n	8000862 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800084c:	2200      	movs	r2, #0
 800084e:	6879      	ldr	r1, [r7, #4]
 8000850:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000854:	f000 f90b 	bl	8000a6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000858:	4a06      	ldr	r2, [pc, #24]	@ (8000874 <HAL_InitTick+0x5c>)
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800085e:	2300      	movs	r3, #0
 8000860:	e000      	b.n	8000864 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000862:	2301      	movs	r3, #1
}
 8000864:	4618      	mov	r0, r3
 8000866:	3708      	adds	r7, #8
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	20000004 	.word	0x20000004
 8000870:	2000000c 	.word	0x2000000c
 8000874:	20000008 	.word	0x20000008

08000878 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800087c:	4b05      	ldr	r3, [pc, #20]	@ (8000894 <HAL_IncTick+0x1c>)
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	461a      	mov	r2, r3
 8000882:	4b05      	ldr	r3, [pc, #20]	@ (8000898 <HAL_IncTick+0x20>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	4413      	add	r3, r2
 8000888:	4a03      	ldr	r2, [pc, #12]	@ (8000898 <HAL_IncTick+0x20>)
 800088a:	6013      	str	r3, [r2, #0]
}
 800088c:	bf00      	nop
 800088e:	46bd      	mov	sp, r7
 8000890:	bc80      	pop	{r7}
 8000892:	4770      	bx	lr
 8000894:	2000000c 	.word	0x2000000c
 8000898:	20000488 	.word	0x20000488

0800089c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  return uwTick;
 80008a0:	4b02      	ldr	r3, [pc, #8]	@ (80008ac <HAL_GetTick+0x10>)
 80008a2:	681b      	ldr	r3, [r3, #0]
}
 80008a4:	4618      	mov	r0, r3
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bc80      	pop	{r7}
 80008aa:	4770      	bx	lr
 80008ac:	20000488 	.word	0x20000488

080008b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b084      	sub	sp, #16
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008b8:	f7ff fff0 	bl	800089c <HAL_GetTick>
 80008bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80008c8:	d005      	beq.n	80008d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008ca:	4b0a      	ldr	r3, [pc, #40]	@ (80008f4 <HAL_Delay+0x44>)
 80008cc:	781b      	ldrb	r3, [r3, #0]
 80008ce:	461a      	mov	r2, r3
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	4413      	add	r3, r2
 80008d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80008d6:	bf00      	nop
 80008d8:	f7ff ffe0 	bl	800089c <HAL_GetTick>
 80008dc:	4602      	mov	r2, r0
 80008de:	68bb      	ldr	r3, [r7, #8]
 80008e0:	1ad3      	subs	r3, r2, r3
 80008e2:	68fa      	ldr	r2, [r7, #12]
 80008e4:	429a      	cmp	r2, r3
 80008e6:	d8f7      	bhi.n	80008d8 <HAL_Delay+0x28>
  {
  }
}
 80008e8:	bf00      	nop
 80008ea:	bf00      	nop
 80008ec:	3710      	adds	r7, #16
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	2000000c 	.word	0x2000000c

080008f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b085      	sub	sp, #20
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	f003 0307 	and.w	r3, r3, #7
 8000906:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000908:	4b0c      	ldr	r3, [pc, #48]	@ (800093c <__NVIC_SetPriorityGrouping+0x44>)
 800090a:	68db      	ldr	r3, [r3, #12]
 800090c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800090e:	68ba      	ldr	r2, [r7, #8]
 8000910:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000914:	4013      	ands	r3, r2
 8000916:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800091c:	68bb      	ldr	r3, [r7, #8]
 800091e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000920:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000924:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000928:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800092a:	4a04      	ldr	r2, [pc, #16]	@ (800093c <__NVIC_SetPriorityGrouping+0x44>)
 800092c:	68bb      	ldr	r3, [r7, #8]
 800092e:	60d3      	str	r3, [r2, #12]
}
 8000930:	bf00      	nop
 8000932:	3714      	adds	r7, #20
 8000934:	46bd      	mov	sp, r7
 8000936:	bc80      	pop	{r7}
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop
 800093c:	e000ed00 	.word	0xe000ed00

08000940 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000944:	4b04      	ldr	r3, [pc, #16]	@ (8000958 <__NVIC_GetPriorityGrouping+0x18>)
 8000946:	68db      	ldr	r3, [r3, #12]
 8000948:	0a1b      	lsrs	r3, r3, #8
 800094a:	f003 0307 	and.w	r3, r3, #7
}
 800094e:	4618      	mov	r0, r3
 8000950:	46bd      	mov	sp, r7
 8000952:	bc80      	pop	{r7}
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop
 8000958:	e000ed00 	.word	0xe000ed00

0800095c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800095c:	b480      	push	{r7}
 800095e:	b083      	sub	sp, #12
 8000960:	af00      	add	r7, sp, #0
 8000962:	4603      	mov	r3, r0
 8000964:	6039      	str	r1, [r7, #0]
 8000966:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000968:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800096c:	2b00      	cmp	r3, #0
 800096e:	db0a      	blt.n	8000986 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	b2da      	uxtb	r2, r3
 8000974:	490c      	ldr	r1, [pc, #48]	@ (80009a8 <__NVIC_SetPriority+0x4c>)
 8000976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800097a:	0112      	lsls	r2, r2, #4
 800097c:	b2d2      	uxtb	r2, r2
 800097e:	440b      	add	r3, r1
 8000980:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000984:	e00a      	b.n	800099c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	b2da      	uxtb	r2, r3
 800098a:	4908      	ldr	r1, [pc, #32]	@ (80009ac <__NVIC_SetPriority+0x50>)
 800098c:	79fb      	ldrb	r3, [r7, #7]
 800098e:	f003 030f 	and.w	r3, r3, #15
 8000992:	3b04      	subs	r3, #4
 8000994:	0112      	lsls	r2, r2, #4
 8000996:	b2d2      	uxtb	r2, r2
 8000998:	440b      	add	r3, r1
 800099a:	761a      	strb	r2, [r3, #24]
}
 800099c:	bf00      	nop
 800099e:	370c      	adds	r7, #12
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bc80      	pop	{r7}
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	e000e100 	.word	0xe000e100
 80009ac:	e000ed00 	.word	0xe000ed00

080009b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b089      	sub	sp, #36	@ 0x24
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	60f8      	str	r0, [r7, #12]
 80009b8:	60b9      	str	r1, [r7, #8]
 80009ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	f003 0307 	and.w	r3, r3, #7
 80009c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009c4:	69fb      	ldr	r3, [r7, #28]
 80009c6:	f1c3 0307 	rsb	r3, r3, #7
 80009ca:	2b04      	cmp	r3, #4
 80009cc:	bf28      	it	cs
 80009ce:	2304      	movcs	r3, #4
 80009d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009d2:	69fb      	ldr	r3, [r7, #28]
 80009d4:	3304      	adds	r3, #4
 80009d6:	2b06      	cmp	r3, #6
 80009d8:	d902      	bls.n	80009e0 <NVIC_EncodePriority+0x30>
 80009da:	69fb      	ldr	r3, [r7, #28]
 80009dc:	3b03      	subs	r3, #3
 80009de:	e000      	b.n	80009e2 <NVIC_EncodePriority+0x32>
 80009e0:	2300      	movs	r3, #0
 80009e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009e4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80009e8:	69bb      	ldr	r3, [r7, #24]
 80009ea:	fa02 f303 	lsl.w	r3, r2, r3
 80009ee:	43da      	mvns	r2, r3
 80009f0:	68bb      	ldr	r3, [r7, #8]
 80009f2:	401a      	ands	r2, r3
 80009f4:	697b      	ldr	r3, [r7, #20]
 80009f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009f8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80009fc:	697b      	ldr	r3, [r7, #20]
 80009fe:	fa01 f303 	lsl.w	r3, r1, r3
 8000a02:	43d9      	mvns	r1, r3
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a08:	4313      	orrs	r3, r2
         );
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	3724      	adds	r7, #36	@ 0x24
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bc80      	pop	{r7}
 8000a12:	4770      	bx	lr

08000a14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	3b01      	subs	r3, #1
 8000a20:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000a24:	d301      	bcc.n	8000a2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a26:	2301      	movs	r3, #1
 8000a28:	e00f      	b.n	8000a4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a2a:	4a0a      	ldr	r2, [pc, #40]	@ (8000a54 <SysTick_Config+0x40>)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	3b01      	subs	r3, #1
 8000a30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a32:	210f      	movs	r1, #15
 8000a34:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a38:	f7ff ff90 	bl	800095c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a3c:	4b05      	ldr	r3, [pc, #20]	@ (8000a54 <SysTick_Config+0x40>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a42:	4b04      	ldr	r3, [pc, #16]	@ (8000a54 <SysTick_Config+0x40>)
 8000a44:	2207      	movs	r2, #7
 8000a46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a48:	2300      	movs	r3, #0
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	3708      	adds	r7, #8
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	e000e010 	.word	0xe000e010

08000a58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a60:	6878      	ldr	r0, [r7, #4]
 8000a62:	f7ff ff49 	bl	80008f8 <__NVIC_SetPriorityGrouping>
}
 8000a66:	bf00      	nop
 8000a68:	3708      	adds	r7, #8
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}

08000a6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a6e:	b580      	push	{r7, lr}
 8000a70:	b086      	sub	sp, #24
 8000a72:	af00      	add	r7, sp, #0
 8000a74:	4603      	mov	r3, r0
 8000a76:	60b9      	str	r1, [r7, #8]
 8000a78:	607a      	str	r2, [r7, #4]
 8000a7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a80:	f7ff ff5e 	bl	8000940 <__NVIC_GetPriorityGrouping>
 8000a84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a86:	687a      	ldr	r2, [r7, #4]
 8000a88:	68b9      	ldr	r1, [r7, #8]
 8000a8a:	6978      	ldr	r0, [r7, #20]
 8000a8c:	f7ff ff90 	bl	80009b0 <NVIC_EncodePriority>
 8000a90:	4602      	mov	r2, r0
 8000a92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a96:	4611      	mov	r1, r2
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f7ff ff5f 	bl	800095c <__NVIC_SetPriority>
}
 8000a9e:	bf00      	nop
 8000aa0:	3718      	adds	r7, #24
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}

08000aa6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000aa6:	b580      	push	{r7, lr}
 8000aa8:	b082      	sub	sp, #8
 8000aaa:	af00      	add	r7, sp, #0
 8000aac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000aae:	6878      	ldr	r0, [r7, #4]
 8000ab0:	f7ff ffb0 	bl	8000a14 <SysTick_Config>
 8000ab4:	4603      	mov	r3, r0
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	3708      	adds	r7, #8
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
	...

08000ac0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b08b      	sub	sp, #44	@ 0x2c
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
 8000ac8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000aca:	2300      	movs	r3, #0
 8000acc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ad2:	e161      	b.n	8000d98 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8000adc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	69fa      	ldr	r2, [r7, #28]
 8000ae4:	4013      	ands	r3, r2
 8000ae6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000ae8:	69ba      	ldr	r2, [r7, #24]
 8000aea:	69fb      	ldr	r3, [r7, #28]
 8000aec:	429a      	cmp	r2, r3
 8000aee:	f040 8150 	bne.w	8000d92 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	685b      	ldr	r3, [r3, #4]
 8000af6:	4a97      	ldr	r2, [pc, #604]	@ (8000d54 <HAL_GPIO_Init+0x294>)
 8000af8:	4293      	cmp	r3, r2
 8000afa:	d05e      	beq.n	8000bba <HAL_GPIO_Init+0xfa>
 8000afc:	4a95      	ldr	r2, [pc, #596]	@ (8000d54 <HAL_GPIO_Init+0x294>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d875      	bhi.n	8000bee <HAL_GPIO_Init+0x12e>
 8000b02:	4a95      	ldr	r2, [pc, #596]	@ (8000d58 <HAL_GPIO_Init+0x298>)
 8000b04:	4293      	cmp	r3, r2
 8000b06:	d058      	beq.n	8000bba <HAL_GPIO_Init+0xfa>
 8000b08:	4a93      	ldr	r2, [pc, #588]	@ (8000d58 <HAL_GPIO_Init+0x298>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d86f      	bhi.n	8000bee <HAL_GPIO_Init+0x12e>
 8000b0e:	4a93      	ldr	r2, [pc, #588]	@ (8000d5c <HAL_GPIO_Init+0x29c>)
 8000b10:	4293      	cmp	r3, r2
 8000b12:	d052      	beq.n	8000bba <HAL_GPIO_Init+0xfa>
 8000b14:	4a91      	ldr	r2, [pc, #580]	@ (8000d5c <HAL_GPIO_Init+0x29c>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d869      	bhi.n	8000bee <HAL_GPIO_Init+0x12e>
 8000b1a:	4a91      	ldr	r2, [pc, #580]	@ (8000d60 <HAL_GPIO_Init+0x2a0>)
 8000b1c:	4293      	cmp	r3, r2
 8000b1e:	d04c      	beq.n	8000bba <HAL_GPIO_Init+0xfa>
 8000b20:	4a8f      	ldr	r2, [pc, #572]	@ (8000d60 <HAL_GPIO_Init+0x2a0>)
 8000b22:	4293      	cmp	r3, r2
 8000b24:	d863      	bhi.n	8000bee <HAL_GPIO_Init+0x12e>
 8000b26:	4a8f      	ldr	r2, [pc, #572]	@ (8000d64 <HAL_GPIO_Init+0x2a4>)
 8000b28:	4293      	cmp	r3, r2
 8000b2a:	d046      	beq.n	8000bba <HAL_GPIO_Init+0xfa>
 8000b2c:	4a8d      	ldr	r2, [pc, #564]	@ (8000d64 <HAL_GPIO_Init+0x2a4>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d85d      	bhi.n	8000bee <HAL_GPIO_Init+0x12e>
 8000b32:	2b12      	cmp	r3, #18
 8000b34:	d82a      	bhi.n	8000b8c <HAL_GPIO_Init+0xcc>
 8000b36:	2b12      	cmp	r3, #18
 8000b38:	d859      	bhi.n	8000bee <HAL_GPIO_Init+0x12e>
 8000b3a:	a201      	add	r2, pc, #4	@ (adr r2, 8000b40 <HAL_GPIO_Init+0x80>)
 8000b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b40:	08000bbb 	.word	0x08000bbb
 8000b44:	08000b95 	.word	0x08000b95
 8000b48:	08000ba7 	.word	0x08000ba7
 8000b4c:	08000be9 	.word	0x08000be9
 8000b50:	08000bef 	.word	0x08000bef
 8000b54:	08000bef 	.word	0x08000bef
 8000b58:	08000bef 	.word	0x08000bef
 8000b5c:	08000bef 	.word	0x08000bef
 8000b60:	08000bef 	.word	0x08000bef
 8000b64:	08000bef 	.word	0x08000bef
 8000b68:	08000bef 	.word	0x08000bef
 8000b6c:	08000bef 	.word	0x08000bef
 8000b70:	08000bef 	.word	0x08000bef
 8000b74:	08000bef 	.word	0x08000bef
 8000b78:	08000bef 	.word	0x08000bef
 8000b7c:	08000bef 	.word	0x08000bef
 8000b80:	08000bef 	.word	0x08000bef
 8000b84:	08000b9d 	.word	0x08000b9d
 8000b88:	08000bb1 	.word	0x08000bb1
 8000b8c:	4a76      	ldr	r2, [pc, #472]	@ (8000d68 <HAL_GPIO_Init+0x2a8>)
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	d013      	beq.n	8000bba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000b92:	e02c      	b.n	8000bee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	68db      	ldr	r3, [r3, #12]
 8000b98:	623b      	str	r3, [r7, #32]
          break;
 8000b9a:	e029      	b.n	8000bf0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	68db      	ldr	r3, [r3, #12]
 8000ba0:	3304      	adds	r3, #4
 8000ba2:	623b      	str	r3, [r7, #32]
          break;
 8000ba4:	e024      	b.n	8000bf0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	68db      	ldr	r3, [r3, #12]
 8000baa:	3308      	adds	r3, #8
 8000bac:	623b      	str	r3, [r7, #32]
          break;
 8000bae:	e01f      	b.n	8000bf0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	68db      	ldr	r3, [r3, #12]
 8000bb4:	330c      	adds	r3, #12
 8000bb6:	623b      	str	r3, [r7, #32]
          break;
 8000bb8:	e01a      	b.n	8000bf0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	689b      	ldr	r3, [r3, #8]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d102      	bne.n	8000bc8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000bc2:	2304      	movs	r3, #4
 8000bc4:	623b      	str	r3, [r7, #32]
          break;
 8000bc6:	e013      	b.n	8000bf0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	689b      	ldr	r3, [r3, #8]
 8000bcc:	2b01      	cmp	r3, #1
 8000bce:	d105      	bne.n	8000bdc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000bd0:	2308      	movs	r3, #8
 8000bd2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	69fa      	ldr	r2, [r7, #28]
 8000bd8:	611a      	str	r2, [r3, #16]
          break;
 8000bda:	e009      	b.n	8000bf0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000bdc:	2308      	movs	r3, #8
 8000bde:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	69fa      	ldr	r2, [r7, #28]
 8000be4:	615a      	str	r2, [r3, #20]
          break;
 8000be6:	e003      	b.n	8000bf0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000be8:	2300      	movs	r3, #0
 8000bea:	623b      	str	r3, [r7, #32]
          break;
 8000bec:	e000      	b.n	8000bf0 <HAL_GPIO_Init+0x130>
          break;
 8000bee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000bf0:	69bb      	ldr	r3, [r7, #24]
 8000bf2:	2bff      	cmp	r3, #255	@ 0xff
 8000bf4:	d801      	bhi.n	8000bfa <HAL_GPIO_Init+0x13a>
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	e001      	b.n	8000bfe <HAL_GPIO_Init+0x13e>
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	3304      	adds	r3, #4
 8000bfe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c00:	69bb      	ldr	r3, [r7, #24]
 8000c02:	2bff      	cmp	r3, #255	@ 0xff
 8000c04:	d802      	bhi.n	8000c0c <HAL_GPIO_Init+0x14c>
 8000c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c08:	009b      	lsls	r3, r3, #2
 8000c0a:	e002      	b.n	8000c12 <HAL_GPIO_Init+0x152>
 8000c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c0e:	3b08      	subs	r3, #8
 8000c10:	009b      	lsls	r3, r3, #2
 8000c12:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	681a      	ldr	r2, [r3, #0]
 8000c18:	210f      	movs	r1, #15
 8000c1a:	693b      	ldr	r3, [r7, #16]
 8000c1c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c20:	43db      	mvns	r3, r3
 8000c22:	401a      	ands	r2, r3
 8000c24:	6a39      	ldr	r1, [r7, #32]
 8000c26:	693b      	ldr	r3, [r7, #16]
 8000c28:	fa01 f303 	lsl.w	r3, r1, r3
 8000c2c:	431a      	orrs	r2, r3
 8000c2e:	697b      	ldr	r3, [r7, #20]
 8000c30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	685b      	ldr	r3, [r3, #4]
 8000c36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	f000 80a9 	beq.w	8000d92 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c40:	4b4a      	ldr	r3, [pc, #296]	@ (8000d6c <HAL_GPIO_Init+0x2ac>)
 8000c42:	699b      	ldr	r3, [r3, #24]
 8000c44:	4a49      	ldr	r2, [pc, #292]	@ (8000d6c <HAL_GPIO_Init+0x2ac>)
 8000c46:	f043 0301 	orr.w	r3, r3, #1
 8000c4a:	6193      	str	r3, [r2, #24]
 8000c4c:	4b47      	ldr	r3, [pc, #284]	@ (8000d6c <HAL_GPIO_Init+0x2ac>)
 8000c4e:	699b      	ldr	r3, [r3, #24]
 8000c50:	f003 0301 	and.w	r3, r3, #1
 8000c54:	60bb      	str	r3, [r7, #8]
 8000c56:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000c58:	4a45      	ldr	r2, [pc, #276]	@ (8000d70 <HAL_GPIO_Init+0x2b0>)
 8000c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c5c:	089b      	lsrs	r3, r3, #2
 8000c5e:	3302      	adds	r3, #2
 8000c60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c64:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c68:	f003 0303 	and.w	r3, r3, #3
 8000c6c:	009b      	lsls	r3, r3, #2
 8000c6e:	220f      	movs	r2, #15
 8000c70:	fa02 f303 	lsl.w	r3, r2, r3
 8000c74:	43db      	mvns	r3, r3
 8000c76:	68fa      	ldr	r2, [r7, #12]
 8000c78:	4013      	ands	r3, r2
 8000c7a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	4a3d      	ldr	r2, [pc, #244]	@ (8000d74 <HAL_GPIO_Init+0x2b4>)
 8000c80:	4293      	cmp	r3, r2
 8000c82:	d00d      	beq.n	8000ca0 <HAL_GPIO_Init+0x1e0>
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	4a3c      	ldr	r2, [pc, #240]	@ (8000d78 <HAL_GPIO_Init+0x2b8>)
 8000c88:	4293      	cmp	r3, r2
 8000c8a:	d007      	beq.n	8000c9c <HAL_GPIO_Init+0x1dc>
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	4a3b      	ldr	r2, [pc, #236]	@ (8000d7c <HAL_GPIO_Init+0x2bc>)
 8000c90:	4293      	cmp	r3, r2
 8000c92:	d101      	bne.n	8000c98 <HAL_GPIO_Init+0x1d8>
 8000c94:	2302      	movs	r3, #2
 8000c96:	e004      	b.n	8000ca2 <HAL_GPIO_Init+0x1e2>
 8000c98:	2303      	movs	r3, #3
 8000c9a:	e002      	b.n	8000ca2 <HAL_GPIO_Init+0x1e2>
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	e000      	b.n	8000ca2 <HAL_GPIO_Init+0x1e2>
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000ca4:	f002 0203 	and.w	r2, r2, #3
 8000ca8:	0092      	lsls	r2, r2, #2
 8000caa:	4093      	lsls	r3, r2
 8000cac:	68fa      	ldr	r2, [r7, #12]
 8000cae:	4313      	orrs	r3, r2
 8000cb0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000cb2:	492f      	ldr	r1, [pc, #188]	@ (8000d70 <HAL_GPIO_Init+0x2b0>)
 8000cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cb6:	089b      	lsrs	r3, r3, #2
 8000cb8:	3302      	adds	r3, #2
 8000cba:	68fa      	ldr	r2, [r7, #12]
 8000cbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d006      	beq.n	8000cda <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000ccc:	4b2c      	ldr	r3, [pc, #176]	@ (8000d80 <HAL_GPIO_Init+0x2c0>)
 8000cce:	689a      	ldr	r2, [r3, #8]
 8000cd0:	492b      	ldr	r1, [pc, #172]	@ (8000d80 <HAL_GPIO_Init+0x2c0>)
 8000cd2:	69bb      	ldr	r3, [r7, #24]
 8000cd4:	4313      	orrs	r3, r2
 8000cd6:	608b      	str	r3, [r1, #8]
 8000cd8:	e006      	b.n	8000ce8 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000cda:	4b29      	ldr	r3, [pc, #164]	@ (8000d80 <HAL_GPIO_Init+0x2c0>)
 8000cdc:	689a      	ldr	r2, [r3, #8]
 8000cde:	69bb      	ldr	r3, [r7, #24]
 8000ce0:	43db      	mvns	r3, r3
 8000ce2:	4927      	ldr	r1, [pc, #156]	@ (8000d80 <HAL_GPIO_Init+0x2c0>)
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d006      	beq.n	8000d02 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000cf4:	4b22      	ldr	r3, [pc, #136]	@ (8000d80 <HAL_GPIO_Init+0x2c0>)
 8000cf6:	68da      	ldr	r2, [r3, #12]
 8000cf8:	4921      	ldr	r1, [pc, #132]	@ (8000d80 <HAL_GPIO_Init+0x2c0>)
 8000cfa:	69bb      	ldr	r3, [r7, #24]
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	60cb      	str	r3, [r1, #12]
 8000d00:	e006      	b.n	8000d10 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d02:	4b1f      	ldr	r3, [pc, #124]	@ (8000d80 <HAL_GPIO_Init+0x2c0>)
 8000d04:	68da      	ldr	r2, [r3, #12]
 8000d06:	69bb      	ldr	r3, [r7, #24]
 8000d08:	43db      	mvns	r3, r3
 8000d0a:	491d      	ldr	r1, [pc, #116]	@ (8000d80 <HAL_GPIO_Init+0x2c0>)
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d006      	beq.n	8000d2a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000d1c:	4b18      	ldr	r3, [pc, #96]	@ (8000d80 <HAL_GPIO_Init+0x2c0>)
 8000d1e:	685a      	ldr	r2, [r3, #4]
 8000d20:	4917      	ldr	r1, [pc, #92]	@ (8000d80 <HAL_GPIO_Init+0x2c0>)
 8000d22:	69bb      	ldr	r3, [r7, #24]
 8000d24:	4313      	orrs	r3, r2
 8000d26:	604b      	str	r3, [r1, #4]
 8000d28:	e006      	b.n	8000d38 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d2a:	4b15      	ldr	r3, [pc, #84]	@ (8000d80 <HAL_GPIO_Init+0x2c0>)
 8000d2c:	685a      	ldr	r2, [r3, #4]
 8000d2e:	69bb      	ldr	r3, [r7, #24]
 8000d30:	43db      	mvns	r3, r3
 8000d32:	4913      	ldr	r1, [pc, #76]	@ (8000d80 <HAL_GPIO_Init+0x2c0>)
 8000d34:	4013      	ands	r3, r2
 8000d36:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d01f      	beq.n	8000d84 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d44:	4b0e      	ldr	r3, [pc, #56]	@ (8000d80 <HAL_GPIO_Init+0x2c0>)
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	490d      	ldr	r1, [pc, #52]	@ (8000d80 <HAL_GPIO_Init+0x2c0>)
 8000d4a:	69bb      	ldr	r3, [r7, #24]
 8000d4c:	4313      	orrs	r3, r2
 8000d4e:	600b      	str	r3, [r1, #0]
 8000d50:	e01f      	b.n	8000d92 <HAL_GPIO_Init+0x2d2>
 8000d52:	bf00      	nop
 8000d54:	10320000 	.word	0x10320000
 8000d58:	10310000 	.word	0x10310000
 8000d5c:	10220000 	.word	0x10220000
 8000d60:	10210000 	.word	0x10210000
 8000d64:	10120000 	.word	0x10120000
 8000d68:	10110000 	.word	0x10110000
 8000d6c:	40021000 	.word	0x40021000
 8000d70:	40010000 	.word	0x40010000
 8000d74:	40010800 	.word	0x40010800
 8000d78:	40010c00 	.word	0x40010c00
 8000d7c:	40011000 	.word	0x40011000
 8000d80:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d84:	4b0b      	ldr	r3, [pc, #44]	@ (8000db4 <HAL_GPIO_Init+0x2f4>)
 8000d86:	681a      	ldr	r2, [r3, #0]
 8000d88:	69bb      	ldr	r3, [r7, #24]
 8000d8a:	43db      	mvns	r3, r3
 8000d8c:	4909      	ldr	r1, [pc, #36]	@ (8000db4 <HAL_GPIO_Init+0x2f4>)
 8000d8e:	4013      	ands	r3, r2
 8000d90:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d94:	3301      	adds	r3, #1
 8000d96:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	681a      	ldr	r2, [r3, #0]
 8000d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d9e:	fa22 f303 	lsr.w	r3, r2, r3
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	f47f ae96 	bne.w	8000ad4 <HAL_GPIO_Init+0x14>
  }
}
 8000da8:	bf00      	nop
 8000daa:	bf00      	nop
 8000dac:	372c      	adds	r7, #44	@ 0x2c
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bc80      	pop	{r7}
 8000db2:	4770      	bx	lr
 8000db4:	40010400 	.word	0x40010400

08000db8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
 8000dc0:	460b      	mov	r3, r1
 8000dc2:	807b      	strh	r3, [r7, #2]
 8000dc4:	4613      	mov	r3, r2
 8000dc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000dc8:	787b      	ldrb	r3, [r7, #1]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d003      	beq.n	8000dd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000dce:	887a      	ldrh	r2, [r7, #2]
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000dd4:	e003      	b.n	8000dde <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000dd6:	887b      	ldrh	r3, [r7, #2]
 8000dd8:	041a      	lsls	r2, r3, #16
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	611a      	str	r2, [r3, #16]
}
 8000dde:	bf00      	nop
 8000de0:	370c      	adds	r7, #12
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bc80      	pop	{r7}
 8000de6:	4770      	bx	lr

08000de8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b086      	sub	sp, #24
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d101      	bne.n	8000dfa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000df6:	2301      	movs	r3, #1
 8000df8:	e272      	b.n	80012e0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f003 0301 	and.w	r3, r3, #1
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	f000 8087 	beq.w	8000f16 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e08:	4b92      	ldr	r3, [pc, #584]	@ (8001054 <HAL_RCC_OscConfig+0x26c>)
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	f003 030c 	and.w	r3, r3, #12
 8000e10:	2b04      	cmp	r3, #4
 8000e12:	d00c      	beq.n	8000e2e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e14:	4b8f      	ldr	r3, [pc, #572]	@ (8001054 <HAL_RCC_OscConfig+0x26c>)
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	f003 030c 	and.w	r3, r3, #12
 8000e1c:	2b08      	cmp	r3, #8
 8000e1e:	d112      	bne.n	8000e46 <HAL_RCC_OscConfig+0x5e>
 8000e20:	4b8c      	ldr	r3, [pc, #560]	@ (8001054 <HAL_RCC_OscConfig+0x26c>)
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000e2c:	d10b      	bne.n	8000e46 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e2e:	4b89      	ldr	r3, [pc, #548]	@ (8001054 <HAL_RCC_OscConfig+0x26c>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d06c      	beq.n	8000f14 <HAL_RCC_OscConfig+0x12c>
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d168      	bne.n	8000f14 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000e42:	2301      	movs	r3, #1
 8000e44:	e24c      	b.n	80012e0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000e4e:	d106      	bne.n	8000e5e <HAL_RCC_OscConfig+0x76>
 8000e50:	4b80      	ldr	r3, [pc, #512]	@ (8001054 <HAL_RCC_OscConfig+0x26c>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a7f      	ldr	r2, [pc, #508]	@ (8001054 <HAL_RCC_OscConfig+0x26c>)
 8000e56:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e5a:	6013      	str	r3, [r2, #0]
 8000e5c:	e02e      	b.n	8000ebc <HAL_RCC_OscConfig+0xd4>
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d10c      	bne.n	8000e80 <HAL_RCC_OscConfig+0x98>
 8000e66:	4b7b      	ldr	r3, [pc, #492]	@ (8001054 <HAL_RCC_OscConfig+0x26c>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4a7a      	ldr	r2, [pc, #488]	@ (8001054 <HAL_RCC_OscConfig+0x26c>)
 8000e6c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000e70:	6013      	str	r3, [r2, #0]
 8000e72:	4b78      	ldr	r3, [pc, #480]	@ (8001054 <HAL_RCC_OscConfig+0x26c>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4a77      	ldr	r2, [pc, #476]	@ (8001054 <HAL_RCC_OscConfig+0x26c>)
 8000e78:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e7c:	6013      	str	r3, [r2, #0]
 8000e7e:	e01d      	b.n	8000ebc <HAL_RCC_OscConfig+0xd4>
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000e88:	d10c      	bne.n	8000ea4 <HAL_RCC_OscConfig+0xbc>
 8000e8a:	4b72      	ldr	r3, [pc, #456]	@ (8001054 <HAL_RCC_OscConfig+0x26c>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4a71      	ldr	r2, [pc, #452]	@ (8001054 <HAL_RCC_OscConfig+0x26c>)
 8000e90:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e94:	6013      	str	r3, [r2, #0]
 8000e96:	4b6f      	ldr	r3, [pc, #444]	@ (8001054 <HAL_RCC_OscConfig+0x26c>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4a6e      	ldr	r2, [pc, #440]	@ (8001054 <HAL_RCC_OscConfig+0x26c>)
 8000e9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ea0:	6013      	str	r3, [r2, #0]
 8000ea2:	e00b      	b.n	8000ebc <HAL_RCC_OscConfig+0xd4>
 8000ea4:	4b6b      	ldr	r3, [pc, #428]	@ (8001054 <HAL_RCC_OscConfig+0x26c>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a6a      	ldr	r2, [pc, #424]	@ (8001054 <HAL_RCC_OscConfig+0x26c>)
 8000eaa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000eae:	6013      	str	r3, [r2, #0]
 8000eb0:	4b68      	ldr	r3, [pc, #416]	@ (8001054 <HAL_RCC_OscConfig+0x26c>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a67      	ldr	r2, [pc, #412]	@ (8001054 <HAL_RCC_OscConfig+0x26c>)
 8000eb6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000eba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d013      	beq.n	8000eec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ec4:	f7ff fcea 	bl	800089c <HAL_GetTick>
 8000ec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000eca:	e008      	b.n	8000ede <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ecc:	f7ff fce6 	bl	800089c <HAL_GetTick>
 8000ed0:	4602      	mov	r2, r0
 8000ed2:	693b      	ldr	r3, [r7, #16]
 8000ed4:	1ad3      	subs	r3, r2, r3
 8000ed6:	2b64      	cmp	r3, #100	@ 0x64
 8000ed8:	d901      	bls.n	8000ede <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000eda:	2303      	movs	r3, #3
 8000edc:	e200      	b.n	80012e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ede:	4b5d      	ldr	r3, [pc, #372]	@ (8001054 <HAL_RCC_OscConfig+0x26c>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d0f0      	beq.n	8000ecc <HAL_RCC_OscConfig+0xe4>
 8000eea:	e014      	b.n	8000f16 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eec:	f7ff fcd6 	bl	800089c <HAL_GetTick>
 8000ef0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ef2:	e008      	b.n	8000f06 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ef4:	f7ff fcd2 	bl	800089c <HAL_GetTick>
 8000ef8:	4602      	mov	r2, r0
 8000efa:	693b      	ldr	r3, [r7, #16]
 8000efc:	1ad3      	subs	r3, r2, r3
 8000efe:	2b64      	cmp	r3, #100	@ 0x64
 8000f00:	d901      	bls.n	8000f06 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000f02:	2303      	movs	r3, #3
 8000f04:	e1ec      	b.n	80012e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f06:	4b53      	ldr	r3, [pc, #332]	@ (8001054 <HAL_RCC_OscConfig+0x26c>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d1f0      	bne.n	8000ef4 <HAL_RCC_OscConfig+0x10c>
 8000f12:	e000      	b.n	8000f16 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f003 0302 	and.w	r3, r3, #2
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d063      	beq.n	8000fea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f22:	4b4c      	ldr	r3, [pc, #304]	@ (8001054 <HAL_RCC_OscConfig+0x26c>)
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	f003 030c 	and.w	r3, r3, #12
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d00b      	beq.n	8000f46 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000f2e:	4b49      	ldr	r3, [pc, #292]	@ (8001054 <HAL_RCC_OscConfig+0x26c>)
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	f003 030c 	and.w	r3, r3, #12
 8000f36:	2b08      	cmp	r3, #8
 8000f38:	d11c      	bne.n	8000f74 <HAL_RCC_OscConfig+0x18c>
 8000f3a:	4b46      	ldr	r3, [pc, #280]	@ (8001054 <HAL_RCC_OscConfig+0x26c>)
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d116      	bne.n	8000f74 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f46:	4b43      	ldr	r3, [pc, #268]	@ (8001054 <HAL_RCC_OscConfig+0x26c>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f003 0302 	and.w	r3, r3, #2
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d005      	beq.n	8000f5e <HAL_RCC_OscConfig+0x176>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	691b      	ldr	r3, [r3, #16]
 8000f56:	2b01      	cmp	r3, #1
 8000f58:	d001      	beq.n	8000f5e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	e1c0      	b.n	80012e0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f5e:	4b3d      	ldr	r3, [pc, #244]	@ (8001054 <HAL_RCC_OscConfig+0x26c>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	695b      	ldr	r3, [r3, #20]
 8000f6a:	00db      	lsls	r3, r3, #3
 8000f6c:	4939      	ldr	r1, [pc, #228]	@ (8001054 <HAL_RCC_OscConfig+0x26c>)
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f72:	e03a      	b.n	8000fea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	691b      	ldr	r3, [r3, #16]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d020      	beq.n	8000fbe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f7c:	4b36      	ldr	r3, [pc, #216]	@ (8001058 <HAL_RCC_OscConfig+0x270>)
 8000f7e:	2201      	movs	r2, #1
 8000f80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f82:	f7ff fc8b 	bl	800089c <HAL_GetTick>
 8000f86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f88:	e008      	b.n	8000f9c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f8a:	f7ff fc87 	bl	800089c <HAL_GetTick>
 8000f8e:	4602      	mov	r2, r0
 8000f90:	693b      	ldr	r3, [r7, #16]
 8000f92:	1ad3      	subs	r3, r2, r3
 8000f94:	2b02      	cmp	r3, #2
 8000f96:	d901      	bls.n	8000f9c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000f98:	2303      	movs	r3, #3
 8000f9a:	e1a1      	b.n	80012e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f9c:	4b2d      	ldr	r3, [pc, #180]	@ (8001054 <HAL_RCC_OscConfig+0x26c>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f003 0302 	and.w	r3, r3, #2
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d0f0      	beq.n	8000f8a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fa8:	4b2a      	ldr	r3, [pc, #168]	@ (8001054 <HAL_RCC_OscConfig+0x26c>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	695b      	ldr	r3, [r3, #20]
 8000fb4:	00db      	lsls	r3, r3, #3
 8000fb6:	4927      	ldr	r1, [pc, #156]	@ (8001054 <HAL_RCC_OscConfig+0x26c>)
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	600b      	str	r3, [r1, #0]
 8000fbc:	e015      	b.n	8000fea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000fbe:	4b26      	ldr	r3, [pc, #152]	@ (8001058 <HAL_RCC_OscConfig+0x270>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fc4:	f7ff fc6a 	bl	800089c <HAL_GetTick>
 8000fc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fca:	e008      	b.n	8000fde <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fcc:	f7ff fc66 	bl	800089c <HAL_GetTick>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	693b      	ldr	r3, [r7, #16]
 8000fd4:	1ad3      	subs	r3, r2, r3
 8000fd6:	2b02      	cmp	r3, #2
 8000fd8:	d901      	bls.n	8000fde <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000fda:	2303      	movs	r3, #3
 8000fdc:	e180      	b.n	80012e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fde:	4b1d      	ldr	r3, [pc, #116]	@ (8001054 <HAL_RCC_OscConfig+0x26c>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f003 0302 	and.w	r3, r3, #2
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d1f0      	bne.n	8000fcc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f003 0308 	and.w	r3, r3, #8
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d03a      	beq.n	800106c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	699b      	ldr	r3, [r3, #24]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d019      	beq.n	8001032 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000ffe:	4b17      	ldr	r3, [pc, #92]	@ (800105c <HAL_RCC_OscConfig+0x274>)
 8001000:	2201      	movs	r2, #1
 8001002:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001004:	f7ff fc4a 	bl	800089c <HAL_GetTick>
 8001008:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800100a:	e008      	b.n	800101e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800100c:	f7ff fc46 	bl	800089c <HAL_GetTick>
 8001010:	4602      	mov	r2, r0
 8001012:	693b      	ldr	r3, [r7, #16]
 8001014:	1ad3      	subs	r3, r2, r3
 8001016:	2b02      	cmp	r3, #2
 8001018:	d901      	bls.n	800101e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800101a:	2303      	movs	r3, #3
 800101c:	e160      	b.n	80012e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800101e:	4b0d      	ldr	r3, [pc, #52]	@ (8001054 <HAL_RCC_OscConfig+0x26c>)
 8001020:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001022:	f003 0302 	and.w	r3, r3, #2
 8001026:	2b00      	cmp	r3, #0
 8001028:	d0f0      	beq.n	800100c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800102a:	2001      	movs	r0, #1
 800102c:	f000 fa9c 	bl	8001568 <RCC_Delay>
 8001030:	e01c      	b.n	800106c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001032:	4b0a      	ldr	r3, [pc, #40]	@ (800105c <HAL_RCC_OscConfig+0x274>)
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001038:	f7ff fc30 	bl	800089c <HAL_GetTick>
 800103c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800103e:	e00f      	b.n	8001060 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001040:	f7ff fc2c 	bl	800089c <HAL_GetTick>
 8001044:	4602      	mov	r2, r0
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	1ad3      	subs	r3, r2, r3
 800104a:	2b02      	cmp	r3, #2
 800104c:	d908      	bls.n	8001060 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800104e:	2303      	movs	r3, #3
 8001050:	e146      	b.n	80012e0 <HAL_RCC_OscConfig+0x4f8>
 8001052:	bf00      	nop
 8001054:	40021000 	.word	0x40021000
 8001058:	42420000 	.word	0x42420000
 800105c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001060:	4b92      	ldr	r3, [pc, #584]	@ (80012ac <HAL_RCC_OscConfig+0x4c4>)
 8001062:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001064:	f003 0302 	and.w	r3, r3, #2
 8001068:	2b00      	cmp	r3, #0
 800106a:	d1e9      	bne.n	8001040 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f003 0304 	and.w	r3, r3, #4
 8001074:	2b00      	cmp	r3, #0
 8001076:	f000 80a6 	beq.w	80011c6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800107a:	2300      	movs	r3, #0
 800107c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800107e:	4b8b      	ldr	r3, [pc, #556]	@ (80012ac <HAL_RCC_OscConfig+0x4c4>)
 8001080:	69db      	ldr	r3, [r3, #28]
 8001082:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001086:	2b00      	cmp	r3, #0
 8001088:	d10d      	bne.n	80010a6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800108a:	4b88      	ldr	r3, [pc, #544]	@ (80012ac <HAL_RCC_OscConfig+0x4c4>)
 800108c:	69db      	ldr	r3, [r3, #28]
 800108e:	4a87      	ldr	r2, [pc, #540]	@ (80012ac <HAL_RCC_OscConfig+0x4c4>)
 8001090:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001094:	61d3      	str	r3, [r2, #28]
 8001096:	4b85      	ldr	r3, [pc, #532]	@ (80012ac <HAL_RCC_OscConfig+0x4c4>)
 8001098:	69db      	ldr	r3, [r3, #28]
 800109a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800109e:	60bb      	str	r3, [r7, #8]
 80010a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80010a2:	2301      	movs	r3, #1
 80010a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010a6:	4b82      	ldr	r3, [pc, #520]	@ (80012b0 <HAL_RCC_OscConfig+0x4c8>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d118      	bne.n	80010e4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80010b2:	4b7f      	ldr	r3, [pc, #508]	@ (80012b0 <HAL_RCC_OscConfig+0x4c8>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4a7e      	ldr	r2, [pc, #504]	@ (80012b0 <HAL_RCC_OscConfig+0x4c8>)
 80010b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80010be:	f7ff fbed 	bl	800089c <HAL_GetTick>
 80010c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010c4:	e008      	b.n	80010d8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010c6:	f7ff fbe9 	bl	800089c <HAL_GetTick>
 80010ca:	4602      	mov	r2, r0
 80010cc:	693b      	ldr	r3, [r7, #16]
 80010ce:	1ad3      	subs	r3, r2, r3
 80010d0:	2b64      	cmp	r3, #100	@ 0x64
 80010d2:	d901      	bls.n	80010d8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80010d4:	2303      	movs	r3, #3
 80010d6:	e103      	b.n	80012e0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010d8:	4b75      	ldr	r3, [pc, #468]	@ (80012b0 <HAL_RCC_OscConfig+0x4c8>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d0f0      	beq.n	80010c6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	68db      	ldr	r3, [r3, #12]
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d106      	bne.n	80010fa <HAL_RCC_OscConfig+0x312>
 80010ec:	4b6f      	ldr	r3, [pc, #444]	@ (80012ac <HAL_RCC_OscConfig+0x4c4>)
 80010ee:	6a1b      	ldr	r3, [r3, #32]
 80010f0:	4a6e      	ldr	r2, [pc, #440]	@ (80012ac <HAL_RCC_OscConfig+0x4c4>)
 80010f2:	f043 0301 	orr.w	r3, r3, #1
 80010f6:	6213      	str	r3, [r2, #32]
 80010f8:	e02d      	b.n	8001156 <HAL_RCC_OscConfig+0x36e>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	68db      	ldr	r3, [r3, #12]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d10c      	bne.n	800111c <HAL_RCC_OscConfig+0x334>
 8001102:	4b6a      	ldr	r3, [pc, #424]	@ (80012ac <HAL_RCC_OscConfig+0x4c4>)
 8001104:	6a1b      	ldr	r3, [r3, #32]
 8001106:	4a69      	ldr	r2, [pc, #420]	@ (80012ac <HAL_RCC_OscConfig+0x4c4>)
 8001108:	f023 0301 	bic.w	r3, r3, #1
 800110c:	6213      	str	r3, [r2, #32]
 800110e:	4b67      	ldr	r3, [pc, #412]	@ (80012ac <HAL_RCC_OscConfig+0x4c4>)
 8001110:	6a1b      	ldr	r3, [r3, #32]
 8001112:	4a66      	ldr	r2, [pc, #408]	@ (80012ac <HAL_RCC_OscConfig+0x4c4>)
 8001114:	f023 0304 	bic.w	r3, r3, #4
 8001118:	6213      	str	r3, [r2, #32]
 800111a:	e01c      	b.n	8001156 <HAL_RCC_OscConfig+0x36e>
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	2b05      	cmp	r3, #5
 8001122:	d10c      	bne.n	800113e <HAL_RCC_OscConfig+0x356>
 8001124:	4b61      	ldr	r3, [pc, #388]	@ (80012ac <HAL_RCC_OscConfig+0x4c4>)
 8001126:	6a1b      	ldr	r3, [r3, #32]
 8001128:	4a60      	ldr	r2, [pc, #384]	@ (80012ac <HAL_RCC_OscConfig+0x4c4>)
 800112a:	f043 0304 	orr.w	r3, r3, #4
 800112e:	6213      	str	r3, [r2, #32]
 8001130:	4b5e      	ldr	r3, [pc, #376]	@ (80012ac <HAL_RCC_OscConfig+0x4c4>)
 8001132:	6a1b      	ldr	r3, [r3, #32]
 8001134:	4a5d      	ldr	r2, [pc, #372]	@ (80012ac <HAL_RCC_OscConfig+0x4c4>)
 8001136:	f043 0301 	orr.w	r3, r3, #1
 800113a:	6213      	str	r3, [r2, #32]
 800113c:	e00b      	b.n	8001156 <HAL_RCC_OscConfig+0x36e>
 800113e:	4b5b      	ldr	r3, [pc, #364]	@ (80012ac <HAL_RCC_OscConfig+0x4c4>)
 8001140:	6a1b      	ldr	r3, [r3, #32]
 8001142:	4a5a      	ldr	r2, [pc, #360]	@ (80012ac <HAL_RCC_OscConfig+0x4c4>)
 8001144:	f023 0301 	bic.w	r3, r3, #1
 8001148:	6213      	str	r3, [r2, #32]
 800114a:	4b58      	ldr	r3, [pc, #352]	@ (80012ac <HAL_RCC_OscConfig+0x4c4>)
 800114c:	6a1b      	ldr	r3, [r3, #32]
 800114e:	4a57      	ldr	r2, [pc, #348]	@ (80012ac <HAL_RCC_OscConfig+0x4c4>)
 8001150:	f023 0304 	bic.w	r3, r3, #4
 8001154:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	68db      	ldr	r3, [r3, #12]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d015      	beq.n	800118a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800115e:	f7ff fb9d 	bl	800089c <HAL_GetTick>
 8001162:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001164:	e00a      	b.n	800117c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001166:	f7ff fb99 	bl	800089c <HAL_GetTick>
 800116a:	4602      	mov	r2, r0
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	1ad3      	subs	r3, r2, r3
 8001170:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001174:	4293      	cmp	r3, r2
 8001176:	d901      	bls.n	800117c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001178:	2303      	movs	r3, #3
 800117a:	e0b1      	b.n	80012e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800117c:	4b4b      	ldr	r3, [pc, #300]	@ (80012ac <HAL_RCC_OscConfig+0x4c4>)
 800117e:	6a1b      	ldr	r3, [r3, #32]
 8001180:	f003 0302 	and.w	r3, r3, #2
 8001184:	2b00      	cmp	r3, #0
 8001186:	d0ee      	beq.n	8001166 <HAL_RCC_OscConfig+0x37e>
 8001188:	e014      	b.n	80011b4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800118a:	f7ff fb87 	bl	800089c <HAL_GetTick>
 800118e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001190:	e00a      	b.n	80011a8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001192:	f7ff fb83 	bl	800089c <HAL_GetTick>
 8001196:	4602      	mov	r2, r0
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	1ad3      	subs	r3, r2, r3
 800119c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d901      	bls.n	80011a8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80011a4:	2303      	movs	r3, #3
 80011a6:	e09b      	b.n	80012e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011a8:	4b40      	ldr	r3, [pc, #256]	@ (80012ac <HAL_RCC_OscConfig+0x4c4>)
 80011aa:	6a1b      	ldr	r3, [r3, #32]
 80011ac:	f003 0302 	and.w	r3, r3, #2
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d1ee      	bne.n	8001192 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80011b4:	7dfb      	ldrb	r3, [r7, #23]
 80011b6:	2b01      	cmp	r3, #1
 80011b8:	d105      	bne.n	80011c6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011ba:	4b3c      	ldr	r3, [pc, #240]	@ (80012ac <HAL_RCC_OscConfig+0x4c4>)
 80011bc:	69db      	ldr	r3, [r3, #28]
 80011be:	4a3b      	ldr	r2, [pc, #236]	@ (80012ac <HAL_RCC_OscConfig+0x4c4>)
 80011c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80011c4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	69db      	ldr	r3, [r3, #28]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	f000 8087 	beq.w	80012de <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80011d0:	4b36      	ldr	r3, [pc, #216]	@ (80012ac <HAL_RCC_OscConfig+0x4c4>)
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f003 030c 	and.w	r3, r3, #12
 80011d8:	2b08      	cmp	r3, #8
 80011da:	d061      	beq.n	80012a0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	69db      	ldr	r3, [r3, #28]
 80011e0:	2b02      	cmp	r3, #2
 80011e2:	d146      	bne.n	8001272 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011e4:	4b33      	ldr	r3, [pc, #204]	@ (80012b4 <HAL_RCC_OscConfig+0x4cc>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011ea:	f7ff fb57 	bl	800089c <HAL_GetTick>
 80011ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011f0:	e008      	b.n	8001204 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011f2:	f7ff fb53 	bl	800089c <HAL_GetTick>
 80011f6:	4602      	mov	r2, r0
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	1ad3      	subs	r3, r2, r3
 80011fc:	2b02      	cmp	r3, #2
 80011fe:	d901      	bls.n	8001204 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001200:	2303      	movs	r3, #3
 8001202:	e06d      	b.n	80012e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001204:	4b29      	ldr	r3, [pc, #164]	@ (80012ac <HAL_RCC_OscConfig+0x4c4>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800120c:	2b00      	cmp	r3, #0
 800120e:	d1f0      	bne.n	80011f2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6a1b      	ldr	r3, [r3, #32]
 8001214:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001218:	d108      	bne.n	800122c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800121a:	4b24      	ldr	r3, [pc, #144]	@ (80012ac <HAL_RCC_OscConfig+0x4c4>)
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	689b      	ldr	r3, [r3, #8]
 8001226:	4921      	ldr	r1, [pc, #132]	@ (80012ac <HAL_RCC_OscConfig+0x4c4>)
 8001228:	4313      	orrs	r3, r2
 800122a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800122c:	4b1f      	ldr	r3, [pc, #124]	@ (80012ac <HAL_RCC_OscConfig+0x4c4>)
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6a19      	ldr	r1, [r3, #32]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800123c:	430b      	orrs	r3, r1
 800123e:	491b      	ldr	r1, [pc, #108]	@ (80012ac <HAL_RCC_OscConfig+0x4c4>)
 8001240:	4313      	orrs	r3, r2
 8001242:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001244:	4b1b      	ldr	r3, [pc, #108]	@ (80012b4 <HAL_RCC_OscConfig+0x4cc>)
 8001246:	2201      	movs	r2, #1
 8001248:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800124a:	f7ff fb27 	bl	800089c <HAL_GetTick>
 800124e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001250:	e008      	b.n	8001264 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001252:	f7ff fb23 	bl	800089c <HAL_GetTick>
 8001256:	4602      	mov	r2, r0
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	1ad3      	subs	r3, r2, r3
 800125c:	2b02      	cmp	r3, #2
 800125e:	d901      	bls.n	8001264 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001260:	2303      	movs	r3, #3
 8001262:	e03d      	b.n	80012e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001264:	4b11      	ldr	r3, [pc, #68]	@ (80012ac <HAL_RCC_OscConfig+0x4c4>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800126c:	2b00      	cmp	r3, #0
 800126e:	d0f0      	beq.n	8001252 <HAL_RCC_OscConfig+0x46a>
 8001270:	e035      	b.n	80012de <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001272:	4b10      	ldr	r3, [pc, #64]	@ (80012b4 <HAL_RCC_OscConfig+0x4cc>)
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001278:	f7ff fb10 	bl	800089c <HAL_GetTick>
 800127c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800127e:	e008      	b.n	8001292 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001280:	f7ff fb0c 	bl	800089c <HAL_GetTick>
 8001284:	4602      	mov	r2, r0
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	2b02      	cmp	r3, #2
 800128c:	d901      	bls.n	8001292 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800128e:	2303      	movs	r3, #3
 8001290:	e026      	b.n	80012e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001292:	4b06      	ldr	r3, [pc, #24]	@ (80012ac <HAL_RCC_OscConfig+0x4c4>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800129a:	2b00      	cmp	r3, #0
 800129c:	d1f0      	bne.n	8001280 <HAL_RCC_OscConfig+0x498>
 800129e:	e01e      	b.n	80012de <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	69db      	ldr	r3, [r3, #28]
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	d107      	bne.n	80012b8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80012a8:	2301      	movs	r3, #1
 80012aa:	e019      	b.n	80012e0 <HAL_RCC_OscConfig+0x4f8>
 80012ac:	40021000 	.word	0x40021000
 80012b0:	40007000 	.word	0x40007000
 80012b4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80012b8:	4b0b      	ldr	r3, [pc, #44]	@ (80012e8 <HAL_RCC_OscConfig+0x500>)
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6a1b      	ldr	r3, [r3, #32]
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d106      	bne.n	80012da <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012d6:	429a      	cmp	r2, r3
 80012d8:	d001      	beq.n	80012de <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	e000      	b.n	80012e0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80012de:	2300      	movs	r3, #0
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	3718      	adds	r7, #24
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	40021000 	.word	0x40021000

080012ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b084      	sub	sp, #16
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d101      	bne.n	8001300 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80012fc:	2301      	movs	r3, #1
 80012fe:	e0d0      	b.n	80014a2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001300:	4b6a      	ldr	r3, [pc, #424]	@ (80014ac <HAL_RCC_ClockConfig+0x1c0>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f003 0307 	and.w	r3, r3, #7
 8001308:	683a      	ldr	r2, [r7, #0]
 800130a:	429a      	cmp	r2, r3
 800130c:	d910      	bls.n	8001330 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800130e:	4b67      	ldr	r3, [pc, #412]	@ (80014ac <HAL_RCC_ClockConfig+0x1c0>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f023 0207 	bic.w	r2, r3, #7
 8001316:	4965      	ldr	r1, [pc, #404]	@ (80014ac <HAL_RCC_ClockConfig+0x1c0>)
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	4313      	orrs	r3, r2
 800131c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800131e:	4b63      	ldr	r3, [pc, #396]	@ (80014ac <HAL_RCC_ClockConfig+0x1c0>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f003 0307 	and.w	r3, r3, #7
 8001326:	683a      	ldr	r2, [r7, #0]
 8001328:	429a      	cmp	r2, r3
 800132a:	d001      	beq.n	8001330 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800132c:	2301      	movs	r3, #1
 800132e:	e0b8      	b.n	80014a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f003 0302 	and.w	r3, r3, #2
 8001338:	2b00      	cmp	r3, #0
 800133a:	d020      	beq.n	800137e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f003 0304 	and.w	r3, r3, #4
 8001344:	2b00      	cmp	r3, #0
 8001346:	d005      	beq.n	8001354 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001348:	4b59      	ldr	r3, [pc, #356]	@ (80014b0 <HAL_RCC_ClockConfig+0x1c4>)
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	4a58      	ldr	r2, [pc, #352]	@ (80014b0 <HAL_RCC_ClockConfig+0x1c4>)
 800134e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001352:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f003 0308 	and.w	r3, r3, #8
 800135c:	2b00      	cmp	r3, #0
 800135e:	d005      	beq.n	800136c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001360:	4b53      	ldr	r3, [pc, #332]	@ (80014b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	4a52      	ldr	r2, [pc, #328]	@ (80014b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001366:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800136a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800136c:	4b50      	ldr	r3, [pc, #320]	@ (80014b0 <HAL_RCC_ClockConfig+0x1c4>)
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	689b      	ldr	r3, [r3, #8]
 8001378:	494d      	ldr	r1, [pc, #308]	@ (80014b0 <HAL_RCC_ClockConfig+0x1c4>)
 800137a:	4313      	orrs	r3, r2
 800137c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f003 0301 	and.w	r3, r3, #1
 8001386:	2b00      	cmp	r3, #0
 8001388:	d040      	beq.n	800140c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	2b01      	cmp	r3, #1
 8001390:	d107      	bne.n	80013a2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001392:	4b47      	ldr	r3, [pc, #284]	@ (80014b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800139a:	2b00      	cmp	r3, #0
 800139c:	d115      	bne.n	80013ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	e07f      	b.n	80014a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	2b02      	cmp	r3, #2
 80013a8:	d107      	bne.n	80013ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013aa:	4b41      	ldr	r3, [pc, #260]	@ (80014b0 <HAL_RCC_ClockConfig+0x1c4>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d109      	bne.n	80013ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e073      	b.n	80014a2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013ba:	4b3d      	ldr	r3, [pc, #244]	@ (80014b0 <HAL_RCC_ClockConfig+0x1c4>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f003 0302 	and.w	r3, r3, #2
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d101      	bne.n	80013ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	e06b      	b.n	80014a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80013ca:	4b39      	ldr	r3, [pc, #228]	@ (80014b0 <HAL_RCC_ClockConfig+0x1c4>)
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	f023 0203 	bic.w	r2, r3, #3
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	4936      	ldr	r1, [pc, #216]	@ (80014b0 <HAL_RCC_ClockConfig+0x1c4>)
 80013d8:	4313      	orrs	r3, r2
 80013da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80013dc:	f7ff fa5e 	bl	800089c <HAL_GetTick>
 80013e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013e2:	e00a      	b.n	80013fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013e4:	f7ff fa5a 	bl	800089c <HAL_GetTick>
 80013e8:	4602      	mov	r2, r0
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d901      	bls.n	80013fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80013f6:	2303      	movs	r3, #3
 80013f8:	e053      	b.n	80014a2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013fa:	4b2d      	ldr	r3, [pc, #180]	@ (80014b0 <HAL_RCC_ClockConfig+0x1c4>)
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	f003 020c 	and.w	r2, r3, #12
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	429a      	cmp	r2, r3
 800140a:	d1eb      	bne.n	80013e4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800140c:	4b27      	ldr	r3, [pc, #156]	@ (80014ac <HAL_RCC_ClockConfig+0x1c0>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f003 0307 	and.w	r3, r3, #7
 8001414:	683a      	ldr	r2, [r7, #0]
 8001416:	429a      	cmp	r2, r3
 8001418:	d210      	bcs.n	800143c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800141a:	4b24      	ldr	r3, [pc, #144]	@ (80014ac <HAL_RCC_ClockConfig+0x1c0>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f023 0207 	bic.w	r2, r3, #7
 8001422:	4922      	ldr	r1, [pc, #136]	@ (80014ac <HAL_RCC_ClockConfig+0x1c0>)
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	4313      	orrs	r3, r2
 8001428:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800142a:	4b20      	ldr	r3, [pc, #128]	@ (80014ac <HAL_RCC_ClockConfig+0x1c0>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f003 0307 	and.w	r3, r3, #7
 8001432:	683a      	ldr	r2, [r7, #0]
 8001434:	429a      	cmp	r2, r3
 8001436:	d001      	beq.n	800143c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001438:	2301      	movs	r3, #1
 800143a:	e032      	b.n	80014a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f003 0304 	and.w	r3, r3, #4
 8001444:	2b00      	cmp	r3, #0
 8001446:	d008      	beq.n	800145a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001448:	4b19      	ldr	r3, [pc, #100]	@ (80014b0 <HAL_RCC_ClockConfig+0x1c4>)
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	4916      	ldr	r1, [pc, #88]	@ (80014b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001456:	4313      	orrs	r3, r2
 8001458:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f003 0308 	and.w	r3, r3, #8
 8001462:	2b00      	cmp	r3, #0
 8001464:	d009      	beq.n	800147a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001466:	4b12      	ldr	r3, [pc, #72]	@ (80014b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	691b      	ldr	r3, [r3, #16]
 8001472:	00db      	lsls	r3, r3, #3
 8001474:	490e      	ldr	r1, [pc, #56]	@ (80014b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001476:	4313      	orrs	r3, r2
 8001478:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800147a:	f000 f821 	bl	80014c0 <HAL_RCC_GetSysClockFreq>
 800147e:	4602      	mov	r2, r0
 8001480:	4b0b      	ldr	r3, [pc, #44]	@ (80014b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	091b      	lsrs	r3, r3, #4
 8001486:	f003 030f 	and.w	r3, r3, #15
 800148a:	490a      	ldr	r1, [pc, #40]	@ (80014b4 <HAL_RCC_ClockConfig+0x1c8>)
 800148c:	5ccb      	ldrb	r3, [r1, r3]
 800148e:	fa22 f303 	lsr.w	r3, r2, r3
 8001492:	4a09      	ldr	r2, [pc, #36]	@ (80014b8 <HAL_RCC_ClockConfig+0x1cc>)
 8001494:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001496:	4b09      	ldr	r3, [pc, #36]	@ (80014bc <HAL_RCC_ClockConfig+0x1d0>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4618      	mov	r0, r3
 800149c:	f7ff f9bc 	bl	8000818 <HAL_InitTick>

  return HAL_OK;
 80014a0:	2300      	movs	r3, #0
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3710      	adds	r7, #16
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	40022000 	.word	0x40022000
 80014b0:	40021000 	.word	0x40021000
 80014b4:	08001d40 	.word	0x08001d40
 80014b8:	20000004 	.word	0x20000004
 80014bc:	20000008 	.word	0x20000008

080014c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b087      	sub	sp, #28
 80014c4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80014c6:	2300      	movs	r3, #0
 80014c8:	60fb      	str	r3, [r7, #12]
 80014ca:	2300      	movs	r3, #0
 80014cc:	60bb      	str	r3, [r7, #8]
 80014ce:	2300      	movs	r3, #0
 80014d0:	617b      	str	r3, [r7, #20]
 80014d2:	2300      	movs	r3, #0
 80014d4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80014d6:	2300      	movs	r3, #0
 80014d8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80014da:	4b1e      	ldr	r3, [pc, #120]	@ (8001554 <HAL_RCC_GetSysClockFreq+0x94>)
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	f003 030c 	and.w	r3, r3, #12
 80014e6:	2b04      	cmp	r3, #4
 80014e8:	d002      	beq.n	80014f0 <HAL_RCC_GetSysClockFreq+0x30>
 80014ea:	2b08      	cmp	r3, #8
 80014ec:	d003      	beq.n	80014f6 <HAL_RCC_GetSysClockFreq+0x36>
 80014ee:	e027      	b.n	8001540 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80014f0:	4b19      	ldr	r3, [pc, #100]	@ (8001558 <HAL_RCC_GetSysClockFreq+0x98>)
 80014f2:	613b      	str	r3, [r7, #16]
      break;
 80014f4:	e027      	b.n	8001546 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	0c9b      	lsrs	r3, r3, #18
 80014fa:	f003 030f 	and.w	r3, r3, #15
 80014fe:	4a17      	ldr	r2, [pc, #92]	@ (800155c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001500:	5cd3      	ldrb	r3, [r2, r3]
 8001502:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800150a:	2b00      	cmp	r3, #0
 800150c:	d010      	beq.n	8001530 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800150e:	4b11      	ldr	r3, [pc, #68]	@ (8001554 <HAL_RCC_GetSysClockFreq+0x94>)
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	0c5b      	lsrs	r3, r3, #17
 8001514:	f003 0301 	and.w	r3, r3, #1
 8001518:	4a11      	ldr	r2, [pc, #68]	@ (8001560 <HAL_RCC_GetSysClockFreq+0xa0>)
 800151a:	5cd3      	ldrb	r3, [r2, r3]
 800151c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	4a0d      	ldr	r2, [pc, #52]	@ (8001558 <HAL_RCC_GetSysClockFreq+0x98>)
 8001522:	fb03 f202 	mul.w	r2, r3, r2
 8001526:	68bb      	ldr	r3, [r7, #8]
 8001528:	fbb2 f3f3 	udiv	r3, r2, r3
 800152c:	617b      	str	r3, [r7, #20]
 800152e:	e004      	b.n	800153a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	4a0c      	ldr	r2, [pc, #48]	@ (8001564 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001534:	fb02 f303 	mul.w	r3, r2, r3
 8001538:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	613b      	str	r3, [r7, #16]
      break;
 800153e:	e002      	b.n	8001546 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001540:	4b05      	ldr	r3, [pc, #20]	@ (8001558 <HAL_RCC_GetSysClockFreq+0x98>)
 8001542:	613b      	str	r3, [r7, #16]
      break;
 8001544:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001546:	693b      	ldr	r3, [r7, #16]
}
 8001548:	4618      	mov	r0, r3
 800154a:	371c      	adds	r7, #28
 800154c:	46bd      	mov	sp, r7
 800154e:	bc80      	pop	{r7}
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	40021000 	.word	0x40021000
 8001558:	007a1200 	.word	0x007a1200
 800155c:	08001d50 	.word	0x08001d50
 8001560:	08001d60 	.word	0x08001d60
 8001564:	003d0900 	.word	0x003d0900

08001568 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001568:	b480      	push	{r7}
 800156a:	b085      	sub	sp, #20
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001570:	4b0a      	ldr	r3, [pc, #40]	@ (800159c <RCC_Delay+0x34>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a0a      	ldr	r2, [pc, #40]	@ (80015a0 <RCC_Delay+0x38>)
 8001576:	fba2 2303 	umull	r2, r3, r2, r3
 800157a:	0a5b      	lsrs	r3, r3, #9
 800157c:	687a      	ldr	r2, [r7, #4]
 800157e:	fb02 f303 	mul.w	r3, r2, r3
 8001582:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001584:	bf00      	nop
  }
  while (Delay --);
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	1e5a      	subs	r2, r3, #1
 800158a:	60fa      	str	r2, [r7, #12]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d1f9      	bne.n	8001584 <RCC_Delay+0x1c>
}
 8001590:	bf00      	nop
 8001592:	bf00      	nop
 8001594:	3714      	adds	r7, #20
 8001596:	46bd      	mov	sp, r7
 8001598:	bc80      	pop	{r7}
 800159a:	4770      	bx	lr
 800159c:	20000004 	.word	0x20000004
 80015a0:	10624dd3 	.word	0x10624dd3

080015a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d101      	bne.n	80015b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e076      	b.n	80016a4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d108      	bne.n	80015d0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80015c6:	d009      	beq.n	80015dc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2200      	movs	r2, #0
 80015cc:	61da      	str	r2, [r3, #28]
 80015ce:	e005      	b.n	80015dc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2200      	movs	r2, #0
 80015d4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2200      	movs	r2, #0
 80015da:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2200      	movs	r2, #0
 80015e0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d106      	bne.n	80015fc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2200      	movs	r2, #0
 80015f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f7ff f862 	bl	80006c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2202      	movs	r2, #2
 8001600:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001612:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001624:	431a      	orrs	r2, r3
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	68db      	ldr	r3, [r3, #12]
 800162a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800162e:	431a      	orrs	r2, r3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	691b      	ldr	r3, [r3, #16]
 8001634:	f003 0302 	and.w	r3, r3, #2
 8001638:	431a      	orrs	r2, r3
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	695b      	ldr	r3, [r3, #20]
 800163e:	f003 0301 	and.w	r3, r3, #1
 8001642:	431a      	orrs	r2, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	699b      	ldr	r3, [r3, #24]
 8001648:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800164c:	431a      	orrs	r2, r3
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	69db      	ldr	r3, [r3, #28]
 8001652:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001656:	431a      	orrs	r2, r3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6a1b      	ldr	r3, [r3, #32]
 800165c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001660:	ea42 0103 	orr.w	r1, r2, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001668:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	430a      	orrs	r2, r1
 8001672:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	699b      	ldr	r3, [r3, #24]
 8001678:	0c1a      	lsrs	r2, r3, #16
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f002 0204 	and.w	r2, r2, #4
 8001682:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	69da      	ldr	r2, [r3, #28]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001692:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2200      	movs	r2, #0
 8001698:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2201      	movs	r2, #1
 800169e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80016a2:	2300      	movs	r3, #0
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	3708      	adds	r7, #8
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}

080016ac <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b088      	sub	sp, #32
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	60f8      	str	r0, [r7, #12]
 80016b4:	60b9      	str	r1, [r7, #8]
 80016b6:	603b      	str	r3, [r7, #0]
 80016b8:	4613      	mov	r3, r2
 80016ba:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80016bc:	f7ff f8ee 	bl	800089c <HAL_GetTick>
 80016c0:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80016c2:	88fb      	ldrh	r3, [r7, #6]
 80016c4:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d001      	beq.n	80016d6 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80016d2:	2302      	movs	r3, #2
 80016d4:	e12a      	b.n	800192c <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80016d6:	68bb      	ldr	r3, [r7, #8]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d002      	beq.n	80016e2 <HAL_SPI_Transmit+0x36>
 80016dc:	88fb      	ldrh	r3, [r7, #6]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d101      	bne.n	80016e6 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e122      	b.n	800192c <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d101      	bne.n	80016f4 <HAL_SPI_Transmit+0x48>
 80016f0:	2302      	movs	r3, #2
 80016f2:	e11b      	b.n	800192c <HAL_SPI_Transmit+0x280>
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	2201      	movs	r2, #1
 80016f8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	2203      	movs	r2, #3
 8001700:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	2200      	movs	r2, #0
 8001708:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	68ba      	ldr	r2, [r7, #8]
 800170e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	88fa      	ldrh	r2, [r7, #6]
 8001714:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	88fa      	ldrh	r2, [r7, #6]
 800171a:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	2200      	movs	r2, #0
 8001720:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	2200      	movs	r2, #0
 8001726:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	2200      	movs	r2, #0
 800172c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	2200      	movs	r2, #0
 8001732:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	2200      	movs	r2, #0
 8001738:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001742:	d10f      	bne.n	8001764 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001752:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001762:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800176e:	2b40      	cmp	r3, #64	@ 0x40
 8001770:	d007      	beq.n	8001782 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001780:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	68db      	ldr	r3, [r3, #12]
 8001786:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800178a:	d152      	bne.n	8001832 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d002      	beq.n	800179a <HAL_SPI_Transmit+0xee>
 8001794:	8b7b      	ldrh	r3, [r7, #26]
 8001796:	2b01      	cmp	r3, #1
 8001798:	d145      	bne.n	8001826 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800179e:	881a      	ldrh	r2, [r3, #0]
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017aa:	1c9a      	adds	r2, r3, #2
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80017b4:	b29b      	uxth	r3, r3
 80017b6:	3b01      	subs	r3, #1
 80017b8:	b29a      	uxth	r2, r3
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80017be:	e032      	b.n	8001826 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	f003 0302 	and.w	r3, r3, #2
 80017ca:	2b02      	cmp	r3, #2
 80017cc:	d112      	bne.n	80017f4 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017d2:	881a      	ldrh	r2, [r3, #0]
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017de:	1c9a      	adds	r2, r3, #2
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80017e8:	b29b      	uxth	r3, r3
 80017ea:	3b01      	subs	r3, #1
 80017ec:	b29a      	uxth	r2, r3
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	86da      	strh	r2, [r3, #54]	@ 0x36
 80017f2:	e018      	b.n	8001826 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80017f4:	f7ff f852 	bl	800089c <HAL_GetTick>
 80017f8:	4602      	mov	r2, r0
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	683a      	ldr	r2, [r7, #0]
 8001800:	429a      	cmp	r2, r3
 8001802:	d803      	bhi.n	800180c <HAL_SPI_Transmit+0x160>
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800180a:	d102      	bne.n	8001812 <HAL_SPI_Transmit+0x166>
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d109      	bne.n	8001826 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	2201      	movs	r2, #1
 8001816:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	2200      	movs	r2, #0
 800181e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8001822:	2303      	movs	r3, #3
 8001824:	e082      	b.n	800192c <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800182a:	b29b      	uxth	r3, r3
 800182c:	2b00      	cmp	r3, #0
 800182e:	d1c7      	bne.n	80017c0 <HAL_SPI_Transmit+0x114>
 8001830:	e053      	b.n	80018da <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d002      	beq.n	8001840 <HAL_SPI_Transmit+0x194>
 800183a:	8b7b      	ldrh	r3, [r7, #26]
 800183c:	2b01      	cmp	r3, #1
 800183e:	d147      	bne.n	80018d0 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	330c      	adds	r3, #12
 800184a:	7812      	ldrb	r2, [r2, #0]
 800184c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001852:	1c5a      	adds	r2, r3, #1
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800185c:	b29b      	uxth	r3, r3
 800185e:	3b01      	subs	r3, #1
 8001860:	b29a      	uxth	r2, r3
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001866:	e033      	b.n	80018d0 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	f003 0302 	and.w	r3, r3, #2
 8001872:	2b02      	cmp	r3, #2
 8001874:	d113      	bne.n	800189e <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	330c      	adds	r3, #12
 8001880:	7812      	ldrb	r2, [r2, #0]
 8001882:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001888:	1c5a      	adds	r2, r3, #1
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001892:	b29b      	uxth	r3, r3
 8001894:	3b01      	subs	r3, #1
 8001896:	b29a      	uxth	r2, r3
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800189c:	e018      	b.n	80018d0 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800189e:	f7fe fffd 	bl	800089c <HAL_GetTick>
 80018a2:	4602      	mov	r2, r0
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	683a      	ldr	r2, [r7, #0]
 80018aa:	429a      	cmp	r2, r3
 80018ac:	d803      	bhi.n	80018b6 <HAL_SPI_Transmit+0x20a>
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80018b4:	d102      	bne.n	80018bc <HAL_SPI_Transmit+0x210>
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d109      	bne.n	80018d0 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	2201      	movs	r2, #1
 80018c0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	2200      	movs	r2, #0
 80018c8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80018cc:	2303      	movs	r3, #3
 80018ce:	e02d      	b.n	800192c <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80018d4:	b29b      	uxth	r3, r3
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d1c6      	bne.n	8001868 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80018da:	69fa      	ldr	r2, [r7, #28]
 80018dc:	6839      	ldr	r1, [r7, #0]
 80018de:	68f8      	ldr	r0, [r7, #12]
 80018e0:	f000 f8b0 	bl	8001a44 <SPI_EndRxTxTransaction>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d002      	beq.n	80018f0 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	2220      	movs	r2, #32
 80018ee:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d10a      	bne.n	800190e <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80018f8:	2300      	movs	r3, #0
 80018fa:	617b      	str	r3, [r7, #20]
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	68db      	ldr	r3, [r3, #12]
 8001902:	617b      	str	r3, [r7, #20]
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	617b      	str	r3, [r7, #20]
 800190c:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	2201      	movs	r2, #1
 8001912:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	2200      	movs	r2, #0
 800191a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e000      	b.n	800192c <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800192a:	2300      	movs	r3, #0
  }
}
 800192c:	4618      	mov	r0, r3
 800192e:	3720      	adds	r7, #32
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}

08001934 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b088      	sub	sp, #32
 8001938:	af00      	add	r7, sp, #0
 800193a:	60f8      	str	r0, [r7, #12]
 800193c:	60b9      	str	r1, [r7, #8]
 800193e:	603b      	str	r3, [r7, #0]
 8001940:	4613      	mov	r3, r2
 8001942:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001944:	f7fe ffaa 	bl	800089c <HAL_GetTick>
 8001948:	4602      	mov	r2, r0
 800194a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800194c:	1a9b      	subs	r3, r3, r2
 800194e:	683a      	ldr	r2, [r7, #0]
 8001950:	4413      	add	r3, r2
 8001952:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001954:	f7fe ffa2 	bl	800089c <HAL_GetTick>
 8001958:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800195a:	4b39      	ldr	r3, [pc, #228]	@ (8001a40 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	015b      	lsls	r3, r3, #5
 8001960:	0d1b      	lsrs	r3, r3, #20
 8001962:	69fa      	ldr	r2, [r7, #28]
 8001964:	fb02 f303 	mul.w	r3, r2, r3
 8001968:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800196a:	e054      	b.n	8001a16 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001972:	d050      	beq.n	8001a16 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001974:	f7fe ff92 	bl	800089c <HAL_GetTick>
 8001978:	4602      	mov	r2, r0
 800197a:	69bb      	ldr	r3, [r7, #24]
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	69fa      	ldr	r2, [r7, #28]
 8001980:	429a      	cmp	r2, r3
 8001982:	d902      	bls.n	800198a <SPI_WaitFlagStateUntilTimeout+0x56>
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d13d      	bne.n	8001a06 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	685a      	ldr	r2, [r3, #4]
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8001998:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80019a2:	d111      	bne.n	80019c8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80019ac:	d004      	beq.n	80019b8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80019b6:	d107      	bne.n	80019c8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80019c6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80019d0:	d10f      	bne.n	80019f2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80019e0:	601a      	str	r2, [r3, #0]
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80019f0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	2201      	movs	r2, #1
 80019f6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	2200      	movs	r2, #0
 80019fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8001a02:	2303      	movs	r3, #3
 8001a04:	e017      	b.n	8001a36 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d101      	bne.n	8001a10 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	3b01      	subs	r3, #1
 8001a14:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	689a      	ldr	r2, [r3, #8]
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	4013      	ands	r3, r2
 8001a20:	68ba      	ldr	r2, [r7, #8]
 8001a22:	429a      	cmp	r2, r3
 8001a24:	bf0c      	ite	eq
 8001a26:	2301      	moveq	r3, #1
 8001a28:	2300      	movne	r3, #0
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	79fb      	ldrb	r3, [r7, #7]
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d19b      	bne.n	800196c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8001a34:	2300      	movs	r3, #0
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3720      	adds	r7, #32
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	20000004 	.word	0x20000004

08001a44 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b086      	sub	sp, #24
 8001a48:	af02      	add	r7, sp, #8
 8001a4a:	60f8      	str	r0, [r7, #12]
 8001a4c:	60b9      	str	r1, [r7, #8]
 8001a4e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	9300      	str	r3, [sp, #0]
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	2201      	movs	r2, #1
 8001a58:	2102      	movs	r1, #2
 8001a5a:	68f8      	ldr	r0, [r7, #12]
 8001a5c:	f7ff ff6a 	bl	8001934 <SPI_WaitFlagStateUntilTimeout>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d007      	beq.n	8001a76 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a6a:	f043 0220 	orr.w	r2, r3, #32
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8001a72:	2303      	movs	r3, #3
 8001a74:	e013      	b.n	8001a9e <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	9300      	str	r3, [sp, #0]
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	2180      	movs	r1, #128	@ 0x80
 8001a80:	68f8      	ldr	r0, [r7, #12]
 8001a82:	f7ff ff57 	bl	8001934 <SPI_WaitFlagStateUntilTimeout>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d007      	beq.n	8001a9c <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a90:	f043 0220 	orr.w	r2, r3, #32
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8001a98:	2303      	movs	r3, #3
 8001a9a:	e000      	b.n	8001a9e <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8001a9c:	2300      	movs	r3, #0
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3710      	adds	r7, #16
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}

08001aa6 <memset>:
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	4402      	add	r2, r0
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d100      	bne.n	8001ab0 <memset+0xa>
 8001aae:	4770      	bx	lr
 8001ab0:	f803 1b01 	strb.w	r1, [r3], #1
 8001ab4:	e7f9      	b.n	8001aaa <memset+0x4>
	...

08001ab8 <__libc_init_array>:
 8001ab8:	b570      	push	{r4, r5, r6, lr}
 8001aba:	2600      	movs	r6, #0
 8001abc:	4d0c      	ldr	r5, [pc, #48]	@ (8001af0 <__libc_init_array+0x38>)
 8001abe:	4c0d      	ldr	r4, [pc, #52]	@ (8001af4 <__libc_init_array+0x3c>)
 8001ac0:	1b64      	subs	r4, r4, r5
 8001ac2:	10a4      	asrs	r4, r4, #2
 8001ac4:	42a6      	cmp	r6, r4
 8001ac6:	d109      	bne.n	8001adc <__libc_init_array+0x24>
 8001ac8:	f000 f828 	bl	8001b1c <_init>
 8001acc:	2600      	movs	r6, #0
 8001ace:	4d0a      	ldr	r5, [pc, #40]	@ (8001af8 <__libc_init_array+0x40>)
 8001ad0:	4c0a      	ldr	r4, [pc, #40]	@ (8001afc <__libc_init_array+0x44>)
 8001ad2:	1b64      	subs	r4, r4, r5
 8001ad4:	10a4      	asrs	r4, r4, #2
 8001ad6:	42a6      	cmp	r6, r4
 8001ad8:	d105      	bne.n	8001ae6 <__libc_init_array+0x2e>
 8001ada:	bd70      	pop	{r4, r5, r6, pc}
 8001adc:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ae0:	4798      	blx	r3
 8001ae2:	3601      	adds	r6, #1
 8001ae4:	e7ee      	b.n	8001ac4 <__libc_init_array+0xc>
 8001ae6:	f855 3b04 	ldr.w	r3, [r5], #4
 8001aea:	4798      	blx	r3
 8001aec:	3601      	adds	r6, #1
 8001aee:	e7f2      	b.n	8001ad6 <__libc_init_array+0x1e>
 8001af0:	08001d64 	.word	0x08001d64
 8001af4:	08001d64 	.word	0x08001d64
 8001af8:	08001d64 	.word	0x08001d64
 8001afc:	08001d68 	.word	0x08001d68

08001b00 <memcpy>:
 8001b00:	440a      	add	r2, r1
 8001b02:	4291      	cmp	r1, r2
 8001b04:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8001b08:	d100      	bne.n	8001b0c <memcpy+0xc>
 8001b0a:	4770      	bx	lr
 8001b0c:	b510      	push	{r4, lr}
 8001b0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001b12:	4291      	cmp	r1, r2
 8001b14:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001b18:	d1f9      	bne.n	8001b0e <memcpy+0xe>
 8001b1a:	bd10      	pop	{r4, pc}

08001b1c <_init>:
 8001b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b1e:	bf00      	nop
 8001b20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b22:	bc08      	pop	{r3}
 8001b24:	469e      	mov	lr, r3
 8001b26:	4770      	bx	lr

08001b28 <_fini>:
 8001b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b2a:	bf00      	nop
 8001b2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b2e:	bc08      	pop	{r3}
 8001b30:	469e      	mov	lr, r3
 8001b32:	4770      	bx	lr
