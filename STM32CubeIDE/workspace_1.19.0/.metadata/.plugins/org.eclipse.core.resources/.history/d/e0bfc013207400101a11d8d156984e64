/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "ILI9341_STM32_DRIVER.h"
#include "ILI9341_GFX.h"
#include "stdio.h"
#include "stdlib.h"
#include "Corrected_U8_Image.h"
#include "ryrl898.h"
#include "stopwatch.h"
#include "allpic.h"

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */
/* Battery & Sensor Parameters */
#define BATTERY_CAPACITY_AH       2.5f       // 2500 mAh
#define ADC_VREF_VOLTAGE          3.3f       // Reference voltage of ADC
#define ADC_RESOLUTION            4096.0f    // 12-bit ADC
#define VCC_VOLTAGE               3.3f       // ACS712 supply voltage
#define ACS712_SENSITIVITY        0.100f     // V/A for ACS712-20A (100 mV/A)
#define ACS712_OFFSET_VOLTAGE     (VCC_VOLTAGE/2.0f) // zero current voltage
#define TIM2_TICK_PERIOD_S        1.0f       // Timer callback period in seconds

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
// #define Total_Cap 2.5           //2500mAh
// #define Vcc 3.3                 //3.6 Max
// #define ACS712_Sensitivity 0.1  //100 mV/A
// #define ADC_Vref 3.3          // max 3.6v
// #define ADC_Resolution 4096  //12-bit Regitser


/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

SPI_HandleTypeDef hspi1;
DMA_HandleTypeDef hdma_spi1_tx;

TIM_HandleTypeDef htim2;

UART_HandleTypeDef huart5;
UART_HandleTypeDef huart1;

uint16_t counter_exti4 =0;

uint8_t mins_stopwatch = 0;
uint8_t sec_stopwatch = 0 ;
uint8_t stopwatch_screen_flag=0;

uint8_t soc_joky; //This Variable will receive the updated Jokey soc sent by the Jokey system via LoRa.

uint8_t soc_rc;
float ACS712_Current;
float ACS712_Voltage;
char timer_text[7];
char soc_rc_text[3];
char soc_joky_text[3];
char soc_str[10];


/* USER CODE BEGIN PV */
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_DMA_Init(void);
static void MX_SPI1_Init(void);
static void MX_TIM2_Init(void);
static void MX_UART5_Init(void);
static void MX_USART1_UART_Init(void);
static void MX_ADC1_Init(void);
static void MX_ADC2_Init(void);
void Display_LCD_UI(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
    if(GPIO_Pin == GPIO_PIN_0)  // Check which pin triggered the EXTI
    {
    	//HAL_NVIC_DisableIRQ(EXTI0_IRQn);  // Disable EXTI Line 0 interrupt

        // Your EXTI handling code here
        //do somthing
        //HAL_NVIC_EnableIRQ(EXTI0_IRQn);

    }
    else if(GPIO_Pin == GPIO_PIN_1){


    }
    else if(GPIO_Pin == GPIO_PIN_4){
    HAL_NVIC_DisableIRQ(EXTI4_IRQn);
        HAL_Delay(600);
        if(!HAL_GPIO_ReadPin(STOP_WATCH_GPIO_Port, STOP_WATCH_Pin)){
            counter_exti4 = 0; mins_stopwatch = 0; sec_stopwatch = 0; stopwatch_screen_flag = 0;
            // ILI9341_DrawText("00 : 00", FONT3, 90 , 260, WHITE, BLACK);
            ILI9341_DrawText("00:00", FONT4, 100, 280, WHITE, BLACK);              // Timer text

        }
    	counter_exti4++;
    	if((counter_exti4%2) == 0){
    		stopwatch_screen_flag=0;
    	}

    	else{
    		stopwatch_screen_flag=1;
    	}


    	//        //do somthing
    	//        // Your EXTI ha
        HAL_NVIC_EnableIRQ(EXTI4_IRQn);
    }
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
    if(htim->Instance == TIM2)
    {
        // Stopwatch update
        if(stopwatch_screen_flag == 1)
        {
            sec_stopwatch++;
            if(sec_stopwatch == 60) { sec_stopwatch = 0; mins_stopwatch++; }
            // if(mins_stopwatch == 90) { sec_stopwatch = 0; stopwatch_screen_flag = 0; }

            // sprintf(timer_text,"%d : %d", mins_stopwatch, sec_stopwatch);
            sprintf(timer_text,"%02d : %02d", mins_stopwatch, sec_stopwatch);
            ILI9341_DrawText((const char*)timer_text, FONT4, 100, 280, WHITE, BLACK); 
            // ILI9341_DrawText((const char*)timer_text, FONT3, 90 , 260, WHITE, BLACK);
        }

        // Battery SOC calculation
        static float Remain_Cap = BATTERY_CAPACITY_AH; // assume full at boot
        static uint8_t soc_rc_temp = 255;              // force first update
        static uint8_t soc_joky_temp = 255;

        // Read current from ADC
        HAL_ADC_Start(&hadc1);
        HAL_ADC_PollForConversion(&hadc1, 10);
        uint16_t adc_val = HAL_ADC_GetValue(&hadc1);
        HAL_ADC_Stop(&hadc1);

        ACS712_Voltage = ((adc_val * ADC_VREF_VOLTAGE) / ADC_RESOLUTION);
        ACS712_Current = (ACS712_Voltage - ACS712_OFFSET_VOLTAGE) / ACS712_SENSITIVITY;

        // Integrate current to calculate remaining capacity (Ah)
        float delta_Ah = ACS712_Current * (TIM2_TICK_PERIOD_S / 3600.0f);
        Remain_Cap += delta_Ah;

        // Clamp capacity
        if(Remain_Cap > BATTERY_CAPACITY_AH) Remain_Cap = BATTERY_CAPACITY_AH;
        if(Remain_Cap < 0.0f) Remain_Cap = 0.0f;

        soc_rc = (Remain_Cap / BATTERY_CAPACITY_AH) * 100.0f;

        // Update SOC display if changed
        if((uint8_t)soc_rc != soc_rc_temp)
        {
            sprintf(soc_rc_text, "%d", (uint8_t)soc_rc);
            ILI9341_DrawText((const char*)soc_rc_text, FONT3, 60 ,100, WHITE, BLACK);
            soc_rc_temp = (uint8_t)soc_rc;
            sprintf(soc_str, "%d%%", soc_rc);
            ILI9341_DrawText((const char*)soc_str, FONT3, 70 ,100, WHITE, BLACK);
            if(soc_rc < 10){
                
                ILI9341_DrawImageAt((const uint8_t*)_less10, 20, 50, 30, 60);                                    // Battery icon

            }
            else if(soc_rc >= 20 && soc_rc < 35){
                ILI9341_DrawImageAt((const uint8_t*)_20, 20, 50, 30, 60);                                    // Battery icon
            }
            else if(soc_rc >= 35 && soc_rc < 50){
                ILI9341_DrawImageAt((const uint8_t*)_35, 20, 50, 30, 60);                                    // Battery icon
            }
            else if(soc_rc >= 50 && soc_rc < 65){
                ILI9341_DrawImageAt((const uint8_t*)_50, 20, 50, 30, 60);                                    // Battery icon
            }
            else if(soc_rc >= 65 && soc_rc < 85){
                ILI9341_DrawImageAt((const uint8_t*)_65, 20, 50, 30, 60);                                    // Battery icon
            }
            else if(soc_rc >= 85 && soc_rc < 100){
                ILI9341_DrawImageAt((const uint8_t*)_85, 20, 50, 30, 60);                                    // Battery icon
            }
            else if(soc_rc >= 100){
                ILI9341_DrawImageAt((const uint8_t*)_100, 20, 50, 30, 60);                                   // Battery icon
            }

        // Update Jokey SOC display if changed
        if(soc_joky != soc_joky_temp)
        {
          soc_joky_temp = soc_joky;
            // sprintf(soc_joky_text, "%d", soc_joky);
            sprintf(soc_joky_text, "%d%%", soc_joky);
            ILI9341_DrawText((const char*)soc_joky_text, FONT3, 180 ,100, WHITE, BLACK);
            //<<==================================================================>>//
            if(soc_joky < 10){

                ILI9341_DrawImageAt((const uint8_t*)_less10, 20, 50, 30, 60);                                    // Battery icon

            }
            else if(soc_joky >= 20 && soc_joky < 35){
                ILI9341_DrawImageAt((const uint8_t*)_20, 20, 50, 30, 60);                                    // Battery icon
            }
            else if(soc_joky >= 35 && soc_joky < 50){
                ILI9341_DrawImageAt((const uint8_t*)_35, 20, 50, 30, 60);                                    // Battery icon
            }
            else if(soc_joky >= 50 && soc_joky < 65){
                ILI9341_DrawImageAt((const uint8_t*)_50, 20, 50, 30, 60);                                    // Battery icon
            }
            else if(soc_joky >= 65 && soc_joky < 85){
                ILI9341_DrawImageAt((const uint8_t*)_65, 20, 50, 30, 60);                                    // Battery icon
            }
            else if(soc_joky >= 85 && soc_joky < 100){
                ILI9341_DrawImageAt((const uint8_t*)_85, 20, 50, 30, 60);                                    // Battery icon
            }
            else if(soc_joky >= 100){
                ILI9341_DrawImageAt((const uint8_t*)_100, 20, 50, 30, 60);                                   // Battery icon
            }
            
        }
    }
}
}


/* USER CODE END 0 */



/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_SPI1_Init();
  MX_TIM2_Init();
  MX_UART5_Init();
  MX_USART1_UART_Init();
  MX_ADC1_Init();
  MX_ADC2_Init();
  /* USER CODE BEGIN 2 */
      ILI9341_Init();
      HAL_Delay(100);
    Display_LCD_UI();
      HAL_TIM_Base_Start_IT(&htim2); // Start TIM2 interrupts

  /* USER CODE END 2 */
  uint32_t cont_count=0;
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	//code in background the lora and controllers in the poll mode

     /* USER CODE END WHILE */
	  if((!HAL_GPIO_ReadPin(CONT_GPIO_Port, CONT_Pin)) ||(!HAL_GPIO_ReadPin(DISC_GPIO_Port, DISC_Pin)) ){
		  if(!HAL_GPIO_ReadPin(CONT_GPIO_Port, CONT_Pin)){
			  if(cont_count%2==0){
			  lora_send_char((uint8_t)'c');
			  HAL_Delay(1000);}
			  else {
				  lora_send_char((uint8_t)"0");
				  HAL_Delay(1000);
			  }
			  cont_count++;

		  }
		  if(!HAL_GPIO_ReadPin(DISC_GPIO_Port, DISC_Pin)){
			  lora_send_char((uint8_t)"d");
			  HAL_Delay(1000);
		  }

	  }

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

void Display_LCD_UI(void)
{
    // Clear screen
    ILI9341_FillScreen(BLACK);

    // === TOP BAR ===
    ILI9341_DrawText("AMER 1", FONT3, 10, 10, RED, BLACK);                   // Top-left code
    ILI9341_DrawImageAt((const uint8_t*)_4, 210, 10, 20, 20);                                      // Top-right signal icon

    // === BATTERY 1 (Left) ===
    ILI9341_DrawImageAt((const uint8_t*)_less10, 20, 50, 30, 60);                                    // Battery icon
    ILI9341_DrawText("100%", FONT4, 70, 70, WHITE, BLACK);                 // Battery percentage
//    ILI9341_DrawText("SOC_RC", FONT3, 20, 30, WHITE, BLACK);             // Device name

    // === BATTERY 2 (Right) ===
    ILI9341_DrawImageAt((const uint8_t*)_85, 140, 50, 30, 60);                                   // Battery icon
    ILI9341_DrawText("100%", FONT4, 190, 70, WHITE, BLACK);                // Battery percentage
//    ILI9341_DrawText("ROBOT ", FONT3, 140, 30, WHITE, BLACK);          // Device name

    // === DIVIDER ===
//    ILI9341_DrawHLine(0, 220, 240, WHITE);                                          // Horizontal line
//    ILI9341_DrawHLine(0, 221, 240, WHITE);                                          // Horizontal line
//    ILI9341_DrawHLine(0, 222, 240, WHITE);                                          // Horizontal line
//    ILI9341_DrawHLine(0, 222, 240, WHITE);                                          // Horizontal line

    // === STOPWATCH AREA ===
    ILI9341_DrawText("STOP-WATCH", FONT3, 75, 260, WHITE, BLACK);         // Label
    ILI9341_DrawText("00:00", FONT4, 100, 280, WHITE, BLACK);              // Timer text
    ILI9341_DrawImageAt((const uint8_t*)stopwatch, 95, 180, 50, 60);                                   // Stopwatch icon

}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 168;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};

  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.ScanConvMode = DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 1;
  hadc1.Init.DMAContinuousRequests = DISABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}

/**
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};

  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
  hadc2.Init.ScanConvMode = DISABLE;
  hadc2.Init.ContinuousConvMode = DISABLE;
  hadc2.Init.DiscontinuousConvMode = DISABLE;
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc2.Init.NbrOfConversion = 1;
  hadc2.Init.DMAContinuousRequests = DISABLE;
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}

/**
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 10;
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}

/**
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 16800-1;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 10000-1;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}

/**
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{

  /* USER CODE BEGIN UART5_Init 0 */

  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
  huart5.Init.BaudRate = 9600;
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
  huart5.Init.StopBits = UART_STOPBITS_1;
  huart5.Init.Parity = UART_PARITY_NONE;
  huart5.Init.Mode = UART_MODE_TX_RX;
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart5) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}

/**
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_DC_Pin|LCD_RST_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);

  /*Configure GPIO pins : CONT_Pin DISC_Pin */
  GPIO_InitStruct.Pin = CONT_Pin|DISC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pin : STOP_WATCH_Pin */
  GPIO_InitStruct.Pin = STOP_WATCH_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(STOP_WATCH_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : LCD_DC_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin|LCD_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pin : LCD_CS_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
#ifdef USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
