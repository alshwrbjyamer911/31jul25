
rcmodela.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000618c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000098e4  0800631c  0800631c  0000731c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fc00  0800fc00  00011068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800fc00  0800fc00  00010c00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fc08  0800fc08  00011068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fc08  0800fc08  00010c08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800fc0c  0800fc0c  00010c0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0800fc10  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00011068  2**0
                  CONTENTS
 10 .bss          000003dc  20000068  20000068  00011068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000444  20000444  00011068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00011068  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001200a  00000000  00000000  00011098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000293f  00000000  00000000  000230a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001108  00000000  00000000  000259e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000217f4  00000000  00000000  00026af0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013371  00000000  00000000  000482e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cf95a  00000000  00000000  0005b655  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012afaf  2**0
                  CONTENTS, READONLY
 20 .debug_rnglists 00000d51  00000000  00000000  0012aff2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004ca0  00000000  00000000  0012bd44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  001309e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006304 	.word	0x08006304

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08006304 	.word	0x08006304

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <DelayUs>:
#include "ILI9341_STM32_DRIVER.h"
#include "ILI9341_GFX.h"

/* imprecise small delay */
__STATIC_INLINE void DelayUs(volatile uint32_t us)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
	us *= (SystemCoreClock / 1000000);
 80005b4:	4b0b      	ldr	r3, [pc, #44]	@ (80005e4 <DelayUs+0x38>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	4a0b      	ldr	r2, [pc, #44]	@ (80005e8 <DelayUs+0x3c>)
 80005ba:	fba2 2303 	umull	r2, r3, r2, r3
 80005be:	0c9b      	lsrs	r3, r3, #18
 80005c0:	687a      	ldr	r2, [r7, #4]
 80005c2:	fb02 f303 	mul.w	r3, r2, r3
 80005c6:	607b      	str	r3, [r7, #4]
	while (us--);
 80005c8:	bf00      	nop
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	1e5a      	subs	r2, r3, #1
 80005ce:	607a      	str	r2, [r7, #4]
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d1fa      	bne.n	80005ca <DelayUs+0x1e>
}
 80005d4:	bf00      	nop
 80005d6:	bf00      	nop
 80005d8:	370c      	adds	r7, #12
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	2000000c 	.word	0x2000000c
 80005e8:	431bde83 	.word	0x431bde83

080005ec <ILI9341_DrawChar>:

	ILI9341_DrawRectangle(X0True, Y0True, xLen, yLen, color);
}

void ILI9341_DrawChar(char ch, const uint8_t font[], uint16_t X, uint16_t Y, uint16_t color, uint16_t bgcolor)
{
 80005ec:	b590      	push	{r4, r7, lr}
 80005ee:	b08d      	sub	sp, #52	@ 0x34
 80005f0:	af02      	add	r7, sp, #8
 80005f2:	60b9      	str	r1, [r7, #8]
 80005f4:	4611      	mov	r1, r2
 80005f6:	461a      	mov	r2, r3
 80005f8:	4603      	mov	r3, r0
 80005fa:	73fb      	strb	r3, [r7, #15]
 80005fc:	460b      	mov	r3, r1
 80005fe:	81bb      	strh	r3, [r7, #12]
 8000600:	4613      	mov	r3, r2
 8000602:	80fb      	strh	r3, [r7, #6]
	if ((ch < 31) || (ch > 127)) return;
 8000604:	7bfb      	ldrb	r3, [r7, #15]
 8000606:	2b1e      	cmp	r3, #30
 8000608:	d964      	bls.n	80006d4 <ILI9341_DrawChar+0xe8>
 800060a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800060e:	2b00      	cmp	r3, #0
 8000610:	db60      	blt.n	80006d4 <ILI9341_DrawChar+0xe8>

	uint8_t fOffset, fWidth, fHeight, fBPL;
	uint8_t *tempChar;

	fOffset = font[0];
 8000612:	68bb      	ldr	r3, [r7, #8]
 8000614:	781b      	ldrb	r3, [r3, #0]
 8000616:	77fb      	strb	r3, [r7, #31]
	fWidth = font[1];
 8000618:	68bb      	ldr	r3, [r7, #8]
 800061a:	3301      	adds	r3, #1
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	77bb      	strb	r3, [r7, #30]
	fHeight = font[2];
 8000620:	68bb      	ldr	r3, [r7, #8]
 8000622:	3302      	adds	r3, #2
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	777b      	strb	r3, [r7, #29]
	fBPL = font[3];
 8000628:	68bb      	ldr	r3, [r7, #8]
 800062a:	3303      	adds	r3, #3
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	773b      	strb	r3, [r7, #28]

	tempChar = (uint8_t*)&font[((ch - 0x20) * fOffset) + 4]; /* Current Character = Meta + (Character Index * Offset) */
 8000630:	7bfb      	ldrb	r3, [r7, #15]
 8000632:	3b20      	subs	r3, #32
 8000634:	7ffa      	ldrb	r2, [r7, #31]
 8000636:	fb02 f303 	mul.w	r3, r2, r3
 800063a:	3304      	adds	r3, #4
 800063c:	68ba      	ldr	r2, [r7, #8]
 800063e:	4413      	add	r3, r2
 8000640:	61bb      	str	r3, [r7, #24]

	/* Clear background first */
	ILI9341_DrawRectangle(X, Y, fWidth, fHeight, bgcolor);
 8000642:	7fbb      	ldrb	r3, [r7, #30]
 8000644:	b29a      	uxth	r2, r3
 8000646:	7f7b      	ldrb	r3, [r7, #29]
 8000648:	b29c      	uxth	r4, r3
 800064a:	88f9      	ldrh	r1, [r7, #6]
 800064c:	89b8      	ldrh	r0, [r7, #12]
 800064e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8000650:	9300      	str	r3, [sp, #0]
 8000652:	4623      	mov	r3, r4
 8000654:	f000 fc82 	bl	8000f5c <ILI9341_DrawRectangle>

	for (int j=0; j < fHeight; j++)
 8000658:	2300      	movs	r3, #0
 800065a:	627b      	str	r3, [r7, #36]	@ 0x24
 800065c:	e035      	b.n	80006ca <ILI9341_DrawChar+0xde>
	{
		for (int i=0; i < fWidth; i++)
 800065e:	2300      	movs	r3, #0
 8000660:	623b      	str	r3, [r7, #32]
 8000662:	e02b      	b.n	80006bc <ILI9341_DrawChar+0xd0>
		{
			uint8_t z =  tempChar[fBPL * i + ((j & 0xF8) >> 3) + 1]; /* (j & 0xF8) >> 3, increase one by 8-bits */
 8000664:	7f3b      	ldrb	r3, [r7, #28]
 8000666:	6a3a      	ldr	r2, [r7, #32]
 8000668:	fb03 f202 	mul.w	r2, r3, r2
 800066c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800066e:	10db      	asrs	r3, r3, #3
 8000670:	f003 031f 	and.w	r3, r3, #31
 8000674:	4413      	add	r3, r2
 8000676:	3301      	adds	r3, #1
 8000678:	69ba      	ldr	r2, [r7, #24]
 800067a:	4413      	add	r3, r2
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	75fb      	strb	r3, [r7, #23]
			uint8_t b = 1 << (j & 0x07);
 8000680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000682:	f003 0307 	and.w	r3, r3, #7
 8000686:	2201      	movs	r2, #1
 8000688:	fa02 f303 	lsl.w	r3, r2, r3
 800068c:	75bb      	strb	r3, [r7, #22]
			if (( z & b ) != 0x00)
 800068e:	7dfa      	ldrb	r2, [r7, #23]
 8000690:	7dbb      	ldrb	r3, [r7, #22]
 8000692:	4013      	ands	r3, r2
 8000694:	b2db      	uxtb	r3, r3
 8000696:	2b00      	cmp	r3, #0
 8000698:	d00d      	beq.n	80006b6 <ILI9341_DrawChar+0xca>
			{
				ILI9341_DrawPixel(X+i, Y+j, color);
 800069a:	6a3b      	ldr	r3, [r7, #32]
 800069c:	b29a      	uxth	r2, r3
 800069e:	89bb      	ldrh	r3, [r7, #12]
 80006a0:	4413      	add	r3, r2
 80006a2:	b298      	uxth	r0, r3
 80006a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006a6:	b29a      	uxth	r2, r3
 80006a8:	88fb      	ldrh	r3, [r7, #6]
 80006aa:	4413      	add	r3, r2
 80006ac:	b29b      	uxth	r3, r3
 80006ae:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 80006b0:	4619      	mov	r1, r3
 80006b2:	f000 fbed 	bl	8000e90 <ILI9341_DrawPixel>
		for (int i=0; i < fWidth; i++)
 80006b6:	6a3b      	ldr	r3, [r7, #32]
 80006b8:	3301      	adds	r3, #1
 80006ba:	623b      	str	r3, [r7, #32]
 80006bc:	7fbb      	ldrb	r3, [r7, #30]
 80006be:	6a3a      	ldr	r2, [r7, #32]
 80006c0:	429a      	cmp	r2, r3
 80006c2:	dbcf      	blt.n	8000664 <ILI9341_DrawChar+0x78>
	for (int j=0; j < fHeight; j++)
 80006c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006c6:	3301      	adds	r3, #1
 80006c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80006ca:	7f7b      	ldrb	r3, [r7, #29]
 80006cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80006ce:	429a      	cmp	r2, r3
 80006d0:	dbc5      	blt.n	800065e <ILI9341_DrawChar+0x72>
 80006d2:	e000      	b.n	80006d6 <ILI9341_DrawChar+0xea>
	if ((ch < 31) || (ch > 127)) return;
 80006d4:	bf00      	nop
			}
		}
	}
}
 80006d6:	372c      	adds	r7, #44	@ 0x2c
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd90      	pop	{r4, r7, pc}

080006dc <ILI9341_DrawText>:

void ILI9341_DrawText(const char* str, const uint8_t font[], uint16_t X, uint16_t Y, uint16_t color, uint16_t bgcolor)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b08a      	sub	sp, #40	@ 0x28
 80006e0:	af02      	add	r7, sp, #8
 80006e2:	60f8      	str	r0, [r7, #12]
 80006e4:	60b9      	str	r1, [r7, #8]
 80006e6:	4611      	mov	r1, r2
 80006e8:	461a      	mov	r2, r3
 80006ea:	460b      	mov	r3, r1
 80006ec:	80fb      	strh	r3, [r7, #6]
 80006ee:	4613      	mov	r3, r2
 80006f0:	80bb      	strh	r3, [r7, #4]
	uint8_t charWidth;			/* Width of character */
	uint8_t fOffset = font[0];	/* Offset of character */
 80006f2:	68bb      	ldr	r3, [r7, #8]
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	77fb      	strb	r3, [r7, #31]
	uint8_t fWidth = font[1];	/* Width of font */
 80006f8:	68bb      	ldr	r3, [r7, #8]
 80006fa:	3301      	adds	r3, #1
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	77bb      	strb	r3, [r7, #30]

	while (*str)
 8000700:	e02d      	b.n	800075e <ILI9341_DrawText+0x82>
	{
		ILI9341_DrawChar(*str, font, X, Y, color, bgcolor);
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	7818      	ldrb	r0, [r3, #0]
 8000706:	88b9      	ldrh	r1, [r7, #4]
 8000708:	88fa      	ldrh	r2, [r7, #6]
 800070a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800070c:	9301      	str	r3, [sp, #4]
 800070e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000710:	9300      	str	r3, [sp, #0]
 8000712:	460b      	mov	r3, r1
 8000714:	68b9      	ldr	r1, [r7, #8]
 8000716:	f7ff ff69 	bl	80005ec <ILI9341_DrawChar>

		/* Check character width and calculate proper position */
		uint8_t *tempChar = (uint8_t*)&font[((*str - 0x20) * fOffset) + 4];
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	3b20      	subs	r3, #32
 8000720:	7ffa      	ldrb	r2, [r7, #31]
 8000722:	fb02 f303 	mul.w	r3, r2, r3
 8000726:	3304      	adds	r3, #4
 8000728:	68ba      	ldr	r2, [r7, #8]
 800072a:	4413      	add	r3, r2
 800072c:	61bb      	str	r3, [r7, #24]
		charWidth = tempChar[0];
 800072e:	69bb      	ldr	r3, [r7, #24]
 8000730:	781b      	ldrb	r3, [r3, #0]
 8000732:	75fb      	strb	r3, [r7, #23]

		if(charWidth + 2 < fWidth)
 8000734:	7dfb      	ldrb	r3, [r7, #23]
 8000736:	1c9a      	adds	r2, r3, #2
 8000738:	7fbb      	ldrb	r3, [r7, #30]
 800073a:	429a      	cmp	r2, r3
 800073c:	da07      	bge.n	800074e <ILI9341_DrawText+0x72>
		{
			/* If character width is smaller than font width */
			X += (charWidth + 2);
 800073e:	7dfb      	ldrb	r3, [r7, #23]
 8000740:	b29a      	uxth	r2, r3
 8000742:	88fb      	ldrh	r3, [r7, #6]
 8000744:	4413      	add	r3, r2
 8000746:	b29b      	uxth	r3, r3
 8000748:	3302      	adds	r3, #2
 800074a:	80fb      	strh	r3, [r7, #6]
 800074c:	e004      	b.n	8000758 <ILI9341_DrawText+0x7c>
		}
		else
		{
			X += fWidth;
 800074e:	7fbb      	ldrb	r3, [r7, #30]
 8000750:	b29a      	uxth	r2, r3
 8000752:	88fb      	ldrh	r3, [r7, #6]
 8000754:	4413      	add	r3, r2
 8000756:	80fb      	strh	r3, [r7, #6]
		}

		str++;
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	3301      	adds	r3, #1
 800075c:	60fb      	str	r3, [r7, #12]
	while (*str)
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	2b00      	cmp	r3, #0
 8000764:	d1cd      	bne.n	8000702 <ILI9341_DrawText+0x26>
	}
}
 8000766:	bf00      	nop
 8000768:	bf00      	nop
 800076a:	3720      	adds	r7, #32
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}

08000770 <ILI9341_DrawImageAt>:
    {
        ILI9341_WriteBuffer((uint8_t*)(image + counter), image_size - counter);
    }
}
void ILI9341_DrawImageAt(const uint8_t* image, uint16_t start_x, uint16_t start_y, uint16_t image_width, uint16_t image_height)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b088      	sub	sp, #32
 8000774:	af00      	add	r7, sp, #0
 8000776:	60f8      	str	r0, [r7, #12]
 8000778:	4608      	mov	r0, r1
 800077a:	4611      	mov	r1, r2
 800077c:	461a      	mov	r2, r3
 800077e:	4603      	mov	r3, r0
 8000780:	817b      	strh	r3, [r7, #10]
 8000782:	460b      	mov	r3, r1
 8000784:	813b      	strh	r3, [r7, #8]
 8000786:	4613      	mov	r3, r2
 8000788:	80fb      	strh	r3, [r7, #6]
    uint16_t end_x = start_x + image_width - 1;
 800078a:	897a      	ldrh	r2, [r7, #10]
 800078c:	88fb      	ldrh	r3, [r7, #6]
 800078e:	4413      	add	r3, r2
 8000790:	b29b      	uxth	r3, r3
 8000792:	3b01      	subs	r3, #1
 8000794:	837b      	strh	r3, [r7, #26]
    uint16_t end_y = start_y + image_height - 1;
 8000796:	893a      	ldrh	r2, [r7, #8]
 8000798:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800079a:	4413      	add	r3, r2
 800079c:	b29b      	uxth	r3, r3
 800079e:	3b01      	subs	r3, #1
 80007a0:	833b      	strh	r3, [r7, #24]

    // Boundary check (optional)
    if (end_x >= ILI9341_SCREEN_WIDTH || end_y >= ILI9341_SCREEN_HEIGHT)
 80007a2:	8b7b      	ldrh	r3, [r7, #26]
 80007a4:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80007a8:	d237      	bcs.n	800081a <ILI9341_DrawImageAt+0xaa>
 80007aa:	8b3b      	ldrh	r3, [r7, #24]
 80007ac:	2bef      	cmp	r3, #239	@ 0xef
 80007ae:	d834      	bhi.n	800081a <ILI9341_DrawImageAt+0xaa>
        return;

    ILI9341_SetAddress(start_x, start_y, end_x, end_y);
 80007b0:	8b3b      	ldrh	r3, [r7, #24]
 80007b2:	8b7a      	ldrh	r2, [r7, #26]
 80007b4:	8939      	ldrh	r1, [r7, #8]
 80007b6:	8978      	ldrh	r0, [r7, #10]
 80007b8:	f000 f8d4 	bl	8000964 <ILI9341_SetAddress>

    uint32_t image_size = image_width * image_height * 2; // RGB565 = 2 bytes per pixel
 80007bc:	88fb      	ldrh	r3, [r7, #6]
 80007be:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80007c0:	fb02 f303 	mul.w	r3, r2, r3
 80007c4:	005b      	lsls	r3, r3, #1
 80007c6:	617b      	str	r3, [r7, #20]
    uint32_t counter = 0;
 80007c8:	2300      	movs	r3, #0
 80007ca:	61fb      	str	r3, [r7, #28]

    while (counter + BURST_MAX_SIZE <= image_size)
 80007cc:	e00e      	b.n	80007ec <ILI9341_DrawImageAt+0x7c>
    {
        ILI9341_WriteBuffer((uint8_t*)(image + counter), BURST_MAX_SIZE);
 80007ce:	68fa      	ldr	r2, [r7, #12]
 80007d0:	69fb      	ldr	r3, [r7, #28]
 80007d2:	4413      	add	r3, r2
 80007d4:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80007d8:	4618      	mov	r0, r3
 80007da:	f000 f8a5 	bl	8000928 <ILI9341_WriteBuffer>
        counter += BURST_MAX_SIZE;
 80007de:	69fb      	ldr	r3, [r7, #28]
 80007e0:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 80007e4:	61fb      	str	r3, [r7, #28]
        DelayUs(1);
 80007e6:	2001      	movs	r0, #1
 80007e8:	f7ff fee0 	bl	80005ac <DelayUs>
    while (counter + BURST_MAX_SIZE <= image_size)
 80007ec:	69fb      	ldr	r3, [r7, #28]
 80007ee:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 80007f2:	697a      	ldr	r2, [r7, #20]
 80007f4:	429a      	cmp	r2, r3
 80007f6:	d2ea      	bcs.n	80007ce <ILI9341_DrawImageAt+0x5e>
    }

    if (counter < image_size)
 80007f8:	69fa      	ldr	r2, [r7, #28]
 80007fa:	697b      	ldr	r3, [r7, #20]
 80007fc:	429a      	cmp	r2, r3
 80007fe:	d20d      	bcs.n	800081c <ILI9341_DrawImageAt+0xac>
    {
        ILI9341_WriteBuffer((uint8_t*)(image + counter), image_size - counter);
 8000800:	68fa      	ldr	r2, [r7, #12]
 8000802:	69fb      	ldr	r3, [r7, #28]
 8000804:	18d0      	adds	r0, r2, r3
 8000806:	697b      	ldr	r3, [r7, #20]
 8000808:	b29a      	uxth	r2, r3
 800080a:	69fb      	ldr	r3, [r7, #28]
 800080c:	b29b      	uxth	r3, r3
 800080e:	1ad3      	subs	r3, r2, r3
 8000810:	b29b      	uxth	r3, r3
 8000812:	4619      	mov	r1, r3
 8000814:	f000 f888 	bl	8000928 <ILI9341_WriteBuffer>
 8000818:	e000      	b.n	800081c <ILI9341_DrawImageAt+0xac>
        return;
 800081a:	bf00      	nop
    }
}
 800081c:	3720      	adds	r7, #32
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
	...

08000824 <HAL_SPI_TxCpltCallback>:

volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  /* Deselect when Tx Complete */
  if(hspi == HSPI_INSTANCE)
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	4a06      	ldr	r2, [pc, #24]	@ (8000848 <HAL_SPI_TxCpltCallback+0x24>)
 8000830:	4293      	cmp	r3, r2
 8000832:	d105      	bne.n	8000840 <HAL_SPI_TxCpltCallback+0x1c>
  {
	  HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000834:	2201      	movs	r2, #1
 8000836:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800083a:	4804      	ldr	r0, [pc, #16]	@ (800084c <HAL_SPI_TxCpltCallback+0x28>)
 800083c:	f002 ffca 	bl	80037d4 <HAL_GPIO_WritePin>
  }
}
 8000840:	bf00      	nop
 8000842:	3708      	adds	r7, #8
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	20000114 	.word	0x20000114
 800084c:	40020400 	.word	0x40020400

08000850 <ILI9341_SPI_Tx>:

static void ILI9341_SPI_Tx(uint8_t data)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	4603      	mov	r3, r0
 8000858:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 800085a:	bf00      	nop
 800085c:	4b08      	ldr	r3, [pc, #32]	@ (8000880 <ILI9341_SPI_Tx+0x30>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	689b      	ldr	r3, [r3, #8]
 8000862:	f003 0302 	and.w	r3, r3, #2
 8000866:	2b02      	cmp	r3, #2
 8000868:	d1f8      	bne.n	800085c <ILI9341_SPI_Tx+0xc>
	HAL_SPI_Transmit_DMA(HSPI_INSTANCE, &data, 1);
 800086a:	1dfb      	adds	r3, r7, #7
 800086c:	2201      	movs	r2, #1
 800086e:	4619      	mov	r1, r3
 8000870:	4803      	ldr	r0, [pc, #12]	@ (8000880 <ILI9341_SPI_Tx+0x30>)
 8000872:	f003 fe07 	bl	8004484 <HAL_SPI_Transmit_DMA>
	//HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
}
 8000876:	bf00      	nop
 8000878:	3708      	adds	r7, #8
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	20000114 	.word	0x20000114

08000884 <ILI9341_SPI_TxBuffer>:

static void ILI9341_SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
 800088c:	460b      	mov	r3, r1
 800088e:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 8000890:	bf00      	nop
 8000892:	4b08      	ldr	r3, [pc, #32]	@ (80008b4 <ILI9341_SPI_TxBuffer+0x30>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	689b      	ldr	r3, [r3, #8]
 8000898:	f003 0302 	and.w	r3, r3, #2
 800089c:	2b02      	cmp	r3, #2
 800089e:	d1f8      	bne.n	8000892 <ILI9341_SPI_TxBuffer+0xe>
	//HAL_SPI_Transmit_DMA(HSPI_INSTANCE, buffer, len);
	HAL_SPI_Transmit(HSPI_INSTANCE, buffer, len, 100);
 80008a0:	887a      	ldrh	r2, [r7, #2]
 80008a2:	2364      	movs	r3, #100	@ 0x64
 80008a4:	6879      	ldr	r1, [r7, #4]
 80008a6:	4803      	ldr	r0, [pc, #12]	@ (80008b4 <ILI9341_SPI_TxBuffer+0x30>)
 80008a8:	f003 fca7 	bl	80041fa <HAL_SPI_Transmit>
}
 80008ac:	bf00      	nop
 80008ae:	3708      	adds	r7, #8
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	20000114 	.word	0x20000114

080008b8 <ILI9341_WriteCommand>:

void ILI9341_WriteCommand(uint8_t cmd)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
 80008be:	4603      	mov	r3, r0
 80008c0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	//command
 80008c2:	2200      	movs	r2, #0
 80008c4:	2110      	movs	r1, #16
 80008c6:	4808      	ldr	r0, [pc, #32]	@ (80008e8 <ILI9341_WriteCommand+0x30>)
 80008c8:	f002 ff84 	bl	80037d4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 80008cc:	2200      	movs	r2, #0
 80008ce:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80008d2:	4806      	ldr	r0, [pc, #24]	@ (80008ec <ILI9341_WriteCommand+0x34>)
 80008d4:	f002 ff7e 	bl	80037d4 <HAL_GPIO_WritePin>
	ILI9341_SPI_Tx(cmd);
 80008d8:	79fb      	ldrb	r3, [r7, #7]
 80008da:	4618      	mov	r0, r3
 80008dc:	f7ff ffb8 	bl	8000850 <ILI9341_SPI_Tx>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 80008e0:	bf00      	nop
 80008e2:	3708      	adds	r7, #8
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	40020800 	.word	0x40020800
 80008ec:	40020400 	.word	0x40020400

080008f0 <ILI9341_WriteData>:

void ILI9341_WriteData(uint8_t data)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	4603      	mov	r3, r0
 80008f8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	//data
 80008fa:	2201      	movs	r2, #1
 80008fc:	2110      	movs	r1, #16
 80008fe:	4808      	ldr	r0, [pc, #32]	@ (8000920 <ILI9341_WriteData+0x30>)
 8000900:	f002 ff68 	bl	80037d4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 8000904:	2200      	movs	r2, #0
 8000906:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800090a:	4806      	ldr	r0, [pc, #24]	@ (8000924 <ILI9341_WriteData+0x34>)
 800090c:	f002 ff62 	bl	80037d4 <HAL_GPIO_WritePin>
	ILI9341_SPI_Tx(data);
 8000910:	79fb      	ldrb	r3, [r7, #7]
 8000912:	4618      	mov	r0, r3
 8000914:	f7ff ff9c 	bl	8000850 <ILI9341_SPI_Tx>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 8000918:	bf00      	nop
 800091a:	3708      	adds	r7, #8
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	40020800 	.word	0x40020800
 8000924:	40020400 	.word	0x40020400

08000928 <ILI9341_WriteBuffer>:

void ILI9341_WriteBuffer(uint8_t *buffer, uint16_t len)                                     //@@@@
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
 8000930:	460b      	mov	r3, r1
 8000932:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	//data
 8000934:	2201      	movs	r2, #1
 8000936:	2110      	movs	r1, #16
 8000938:	4808      	ldr	r0, [pc, #32]	@ (800095c <ILI9341_WriteBuffer+0x34>)
 800093a:	f002 ff4b 	bl	80037d4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 800093e:	2200      	movs	r2, #0
 8000940:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000944:	4806      	ldr	r0, [pc, #24]	@ (8000960 <ILI9341_WriteBuffer+0x38>)
 8000946:	f002 ff45 	bl	80037d4 <HAL_GPIO_WritePin>
	ILI9341_SPI_TxBuffer(buffer, len);
 800094a:	887b      	ldrh	r3, [r7, #2]
 800094c:	4619      	mov	r1, r3
 800094e:	6878      	ldr	r0, [r7, #4]
 8000950:	f7ff ff98 	bl	8000884 <ILI9341_SPI_TxBuffer>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 8000954:	bf00      	nop
 8000956:	3708      	adds	r7, #8
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	40020800 	.word	0x40020800
 8000960:	40020400 	.word	0x40020400

08000964 <ILI9341_SetAddress>:

void ILI9341_SetAddress(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8000964:	b590      	push	{r4, r7, lr}
 8000966:	b085      	sub	sp, #20
 8000968:	af00      	add	r7, sp, #0
 800096a:	4604      	mov	r4, r0
 800096c:	4608      	mov	r0, r1
 800096e:	4611      	mov	r1, r2
 8000970:	461a      	mov	r2, r3
 8000972:	4623      	mov	r3, r4
 8000974:	80fb      	strh	r3, [r7, #6]
 8000976:	4603      	mov	r3, r0
 8000978:	80bb      	strh	r3, [r7, #4]
 800097a:	460b      	mov	r3, r1
 800097c:	807b      	strh	r3, [r7, #2]
 800097e:	4613      	mov	r3, r2
 8000980:	803b      	strh	r3, [r7, #0]
	uint8_t buffer[4];
	buffer[0] = x1 >> 8;
 8000982:	88fb      	ldrh	r3, [r7, #6]
 8000984:	0a1b      	lsrs	r3, r3, #8
 8000986:	b29b      	uxth	r3, r3
 8000988:	b2db      	uxtb	r3, r3
 800098a:	733b      	strb	r3, [r7, #12]
	buffer[1] = x1;
 800098c:	88fb      	ldrh	r3, [r7, #6]
 800098e:	b2db      	uxtb	r3, r3
 8000990:	737b      	strb	r3, [r7, #13]
	buffer[2] = x2 >> 8;
 8000992:	887b      	ldrh	r3, [r7, #2]
 8000994:	0a1b      	lsrs	r3, r3, #8
 8000996:	b29b      	uxth	r3, r3
 8000998:	b2db      	uxtb	r3, r3
 800099a:	73bb      	strb	r3, [r7, #14]
	buffer[3] = x2;
 800099c:	887b      	ldrh	r3, [r7, #2]
 800099e:	b2db      	uxtb	r3, r3
 80009a0:	73fb      	strb	r3, [r7, #15]

	ILI9341_WriteCommand(0x2A);
 80009a2:	202a      	movs	r0, #42	@ 0x2a
 80009a4:	f7ff ff88 	bl	80008b8 <ILI9341_WriteCommand>

	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 80009a8:	f107 030c 	add.w	r3, r7, #12
 80009ac:	2104      	movs	r1, #4
 80009ae:	4618      	mov	r0, r3
 80009b0:	f7ff ffba 	bl	8000928 <ILI9341_WriteBuffer>


	buffer[0] = y1 >> 8;
 80009b4:	88bb      	ldrh	r3, [r7, #4]
 80009b6:	0a1b      	lsrs	r3, r3, #8
 80009b8:	b29b      	uxth	r3, r3
 80009ba:	b2db      	uxtb	r3, r3
 80009bc:	733b      	strb	r3, [r7, #12]
	buffer[1] = y1;
 80009be:	88bb      	ldrh	r3, [r7, #4]
 80009c0:	b2db      	uxtb	r3, r3
 80009c2:	737b      	strb	r3, [r7, #13]
	buffer[2] = y2 >> 8;
 80009c4:	883b      	ldrh	r3, [r7, #0]
 80009c6:	0a1b      	lsrs	r3, r3, #8
 80009c8:	b29b      	uxth	r3, r3
 80009ca:	b2db      	uxtb	r3, r3
 80009cc:	73bb      	strb	r3, [r7, #14]
	buffer[3] = y2;
 80009ce:	883b      	ldrh	r3, [r7, #0]
 80009d0:	b2db      	uxtb	r3, r3
 80009d2:	73fb      	strb	r3, [r7, #15]

	ILI9341_WriteCommand(0x2B);
 80009d4:	202b      	movs	r0, #43	@ 0x2b
 80009d6:	f7ff ff6f 	bl	80008b8 <ILI9341_WriteCommand>

	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 80009da:	f107 030c 	add.w	r3, r7, #12
 80009de:	2104      	movs	r1, #4
 80009e0:	4618      	mov	r0, r3
 80009e2:	f7ff ffa1 	bl	8000928 <ILI9341_WriteBuffer>

   // HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10, GPIO_PIN_RESET);

	ILI9341_WriteCommand(0x2C);
 80009e6:	202c      	movs	r0, #44	@ 0x2c
 80009e8:	f7ff ff66 	bl	80008b8 <ILI9341_WriteCommand>
}
 80009ec:	bf00      	nop
 80009ee:	3714      	adds	r7, #20
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd90      	pop	{r4, r7, pc}

080009f4 <ILI9341_Reset>:

void ILI9341_Reset(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);	//Disable
 80009f8:	2200      	movs	r2, #0
 80009fa:	2120      	movs	r1, #32
 80009fc:	480d      	ldr	r0, [pc, #52]	@ (8000a34 <ILI9341_Reset+0x40>)
 80009fe:	f002 fee9 	bl	80037d4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000a02:	200a      	movs	r0, #10
 8000a04:	f001 fc5a 	bl	80022bc <HAL_Delay>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);		//Select
 8000a08:	2200      	movs	r2, #0
 8000a0a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a0e:	480a      	ldr	r0, [pc, #40]	@ (8000a38 <ILI9341_Reset+0x44>)
 8000a10:	f002 fee0 	bl	80037d4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000a14:	200a      	movs	r0, #10
 8000a16:	f001 fc51 	bl	80022bc <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);		//Enable
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	2120      	movs	r1, #32
 8000a1e:	4805      	ldr	r0, [pc, #20]	@ (8000a34 <ILI9341_Reset+0x40>)
 8000a20:	f002 fed8 	bl	80037d4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET); 		//Deselect
 8000a24:	2201      	movs	r2, #1
 8000a26:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a2a:	4803      	ldr	r0, [pc, #12]	@ (8000a38 <ILI9341_Reset+0x44>)
 8000a2c:	f002 fed2 	bl	80037d4 <HAL_GPIO_WritePin>
}
 8000a30:	bf00      	nop
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	40020800 	.word	0x40020800
 8000a38:	40020400 	.word	0x40020400

08000a3c <ILI9341_Enable>:

void ILI9341_Enable(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);		//Enable
 8000a40:	2201      	movs	r2, #1
 8000a42:	2120      	movs	r1, #32
 8000a44:	4802      	ldr	r0, [pc, #8]	@ (8000a50 <ILI9341_Enable+0x14>)
 8000a46:	f002 fec5 	bl	80037d4 <HAL_GPIO_WritePin>
}
 8000a4a:	bf00      	nop
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	40020800 	.word	0x40020800

08000a54 <ILI9341_Init>:

void ILI9341_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0


	ILI9341_Enable();
 8000a58:	f7ff fff0 	bl	8000a3c <ILI9341_Enable>

	ILI9341_Reset();
 8000a5c:	f7ff ffca 	bl	80009f4 <ILI9341_Reset>

	//SOFTWARE RESET
	ILI9341_WriteCommand(0x01);
 8000a60:	2001      	movs	r0, #1
 8000a62:	f7ff ff29 	bl	80008b8 <ILI9341_WriteCommand>
	HAL_Delay(10);
 8000a66:	200a      	movs	r0, #10
 8000a68:	f001 fc28 	bl	80022bc <HAL_Delay>

	//POWER CONTROL A
	ILI9341_WriteCommand(0xCB);
 8000a6c:	20cb      	movs	r0, #203	@ 0xcb
 8000a6e:	f7ff ff23 	bl	80008b8 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x39);
 8000a72:	2039      	movs	r0, #57	@ 0x39
 8000a74:	f7ff ff3c 	bl	80008f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x2C);
 8000a78:	202c      	movs	r0, #44	@ 0x2c
 8000a7a:	f7ff ff39 	bl	80008f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8000a7e:	2000      	movs	r0, #0
 8000a80:	f7ff ff36 	bl	80008f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x34);
 8000a84:	2034      	movs	r0, #52	@ 0x34
 8000a86:	f7ff ff33 	bl	80008f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x02);
 8000a8a:	2002      	movs	r0, #2
 8000a8c:	f7ff ff30 	bl	80008f0 <ILI9341_WriteData>

	//POWER CONTROL B
	ILI9341_WriteCommand(0xCF);
 8000a90:	20cf      	movs	r0, #207	@ 0xcf
 8000a92:	f7ff ff11 	bl	80008b8 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000a96:	2000      	movs	r0, #0
 8000a98:	f7ff ff2a 	bl	80008f0 <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 8000a9c:	20c1      	movs	r0, #193	@ 0xc1
 8000a9e:	f7ff ff27 	bl	80008f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x30);
 8000aa2:	2030      	movs	r0, #48	@ 0x30
 8000aa4:	f7ff ff24 	bl	80008f0 <ILI9341_WriteData>

	//DRIVER TIMING CONTROL A
	ILI9341_WriteCommand(0xE8);
 8000aa8:	20e8      	movs	r0, #232	@ 0xe8
 8000aaa:	f7ff ff05 	bl	80008b8 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x85);
 8000aae:	2085      	movs	r0, #133	@ 0x85
 8000ab0:	f7ff ff1e 	bl	80008f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8000ab4:	2000      	movs	r0, #0
 8000ab6:	f7ff ff1b 	bl	80008f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x78);
 8000aba:	2078      	movs	r0, #120	@ 0x78
 8000abc:	f7ff ff18 	bl	80008f0 <ILI9341_WriteData>


	//DRIVER TIMING CONTROL B
	ILI9341_WriteCommand(0xEA);
 8000ac0:	20ea      	movs	r0, #234	@ 0xea
 8000ac2:	f7ff fef9 	bl	80008b8 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000ac6:	2000      	movs	r0, #0
 8000ac8:	f7ff ff12 	bl	80008f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8000acc:	2000      	movs	r0, #0
 8000ace:	f7ff ff0f 	bl	80008f0 <ILI9341_WriteData>

	//POWER ON SEQUENCE CONTROL
	ILI9341_WriteCommand(0xED);
 8000ad2:	20ed      	movs	r0, #237	@ 0xed
 8000ad4:	f7ff fef0 	bl	80008b8 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x64);
 8000ad8:	2064      	movs	r0, #100	@ 0x64
 8000ada:	f7ff ff09 	bl	80008f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8000ade:	2003      	movs	r0, #3
 8000ae0:	f7ff ff06 	bl	80008f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x12);
 8000ae4:	2012      	movs	r0, #18
 8000ae6:	f7ff ff03 	bl	80008f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x81);
 8000aea:	2081      	movs	r0, #129	@ 0x81
 8000aec:	f7ff ff00 	bl	80008f0 <ILI9341_WriteData>

	//PUMP RATIO CONTROL
	ILI9341_WriteCommand(0xF7);
 8000af0:	20f7      	movs	r0, #247	@ 0xf7
 8000af2:	f7ff fee1 	bl	80008b8 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x20);
 8000af6:	2020      	movs	r0, #32
 8000af8:	f7ff fefa 	bl	80008f0 <ILI9341_WriteData>

	//POWER CONTROL,VRH[5:0]
	ILI9341_WriteCommand(0xC0);
 8000afc:	20c0      	movs	r0, #192	@ 0xc0
 8000afe:	f7ff fedb 	bl	80008b8 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x23);
 8000b02:	2023      	movs	r0, #35	@ 0x23
 8000b04:	f7ff fef4 	bl	80008f0 <ILI9341_WriteData>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	ILI9341_WriteCommand(0xC1);
 8000b08:	20c1      	movs	r0, #193	@ 0xc1
 8000b0a:	f7ff fed5 	bl	80008b8 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x10);
 8000b0e:	2010      	movs	r0, #16
 8000b10:	f7ff feee 	bl	80008f0 <ILI9341_WriteData>

	//VCM CONTROL
	ILI9341_WriteCommand(0xC5);
 8000b14:	20c5      	movs	r0, #197	@ 0xc5
 8000b16:	f7ff fecf 	bl	80008b8 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x3E);
 8000b1a:	203e      	movs	r0, #62	@ 0x3e
 8000b1c:	f7ff fee8 	bl	80008f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x28);
 8000b20:	2028      	movs	r0, #40	@ 0x28
 8000b22:	f7ff fee5 	bl	80008f0 <ILI9341_WriteData>

	//VCM CONTROL 2
	ILI9341_WriteCommand(0xC7);
 8000b26:	20c7      	movs	r0, #199	@ 0xc7
 8000b28:	f7ff fec6 	bl	80008b8 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x86);
 8000b2c:	2086      	movs	r0, #134	@ 0x86
 8000b2e:	f7ff fedf 	bl	80008f0 <ILI9341_WriteData>

	//MEMORY ACCESS CONTROL
	ILI9341_WriteCommand(0x36);
 8000b32:	2036      	movs	r0, #54	@ 0x36
 8000b34:	f7ff fec0 	bl	80008b8 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x48);
 8000b38:	2048      	movs	r0, #72	@ 0x48
 8000b3a:	f7ff fed9 	bl	80008f0 <ILI9341_WriteData>

	//PIXEL FORMAT
	ILI9341_WriteCommand(0x3A);
 8000b3e:	203a      	movs	r0, #58	@ 0x3a
 8000b40:	f7ff feba 	bl	80008b8 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x55);
 8000b44:	2055      	movs	r0, #85	@ 0x55
 8000b46:	f7ff fed3 	bl	80008f0 <ILI9341_WriteData>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	ILI9341_WriteCommand(0xB1);
 8000b4a:	20b1      	movs	r0, #177	@ 0xb1
 8000b4c:	f7ff feb4 	bl	80008b8 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000b50:	2000      	movs	r0, #0
 8000b52:	f7ff fecd 	bl	80008f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x18);
 8000b56:	2018      	movs	r0, #24
 8000b58:	f7ff feca 	bl	80008f0 <ILI9341_WriteData>

	//DISPLAY FUNCTION CONTROL
	ILI9341_WriteCommand(0xB6);
 8000b5c:	20b6      	movs	r0, #182	@ 0xb6
 8000b5e:	f7ff feab 	bl	80008b8 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x08);
 8000b62:	2008      	movs	r0, #8
 8000b64:	f7ff fec4 	bl	80008f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x82);
 8000b68:	2082      	movs	r0, #130	@ 0x82
 8000b6a:	f7ff fec1 	bl	80008f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x27);
 8000b6e:	2027      	movs	r0, #39	@ 0x27
 8000b70:	f7ff febe 	bl	80008f0 <ILI9341_WriteData>

	//3GAMMA FUNCTION DISABLE
	ILI9341_WriteCommand(0xF2);
 8000b74:	20f2      	movs	r0, #242	@ 0xf2
 8000b76:	f7ff fe9f 	bl	80008b8 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000b7a:	2000      	movs	r0, #0
 8000b7c:	f7ff feb8 	bl	80008f0 <ILI9341_WriteData>

	//GAMMA CURVE SELECTED
	ILI9341_WriteCommand(0x26);
 8000b80:	2026      	movs	r0, #38	@ 0x26
 8000b82:	f7ff fe99 	bl	80008b8 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x01);
 8000b86:	2001      	movs	r0, #1
 8000b88:	f7ff feb2 	bl	80008f0 <ILI9341_WriteData>

	//POSITIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE0);
 8000b8c:	20e0      	movs	r0, #224	@ 0xe0
 8000b8e:	f7ff fe93 	bl	80008b8 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x0F);
 8000b92:	200f      	movs	r0, #15
 8000b94:	f7ff feac 	bl	80008f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 8000b98:	2031      	movs	r0, #49	@ 0x31
 8000b9a:	f7ff fea9 	bl	80008f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x2B);
 8000b9e:	202b      	movs	r0, #43	@ 0x2b
 8000ba0:	f7ff fea6 	bl	80008f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 8000ba4:	200c      	movs	r0, #12
 8000ba6:	f7ff fea3 	bl	80008f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8000baa:	200e      	movs	r0, #14
 8000bac:	f7ff fea0 	bl	80008f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 8000bb0:	2008      	movs	r0, #8
 8000bb2:	f7ff fe9d 	bl	80008f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x4E);
 8000bb6:	204e      	movs	r0, #78	@ 0x4e
 8000bb8:	f7ff fe9a 	bl	80008f0 <ILI9341_WriteData>
	ILI9341_WriteData(0xF1);
 8000bbc:	20f1      	movs	r0, #241	@ 0xf1
 8000bbe:	f7ff fe97 	bl	80008f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x37);
 8000bc2:	2037      	movs	r0, #55	@ 0x37
 8000bc4:	f7ff fe94 	bl	80008f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 8000bc8:	2007      	movs	r0, #7
 8000bca:	f7ff fe91 	bl	80008f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x10);
 8000bce:	2010      	movs	r0, #16
 8000bd0:	f7ff fe8e 	bl	80008f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8000bd4:	2003      	movs	r0, #3
 8000bd6:	f7ff fe8b 	bl	80008f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8000bda:	200e      	movs	r0, #14
 8000bdc:	f7ff fe88 	bl	80008f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x09);
 8000be0:	2009      	movs	r0, #9
 8000be2:	f7ff fe85 	bl	80008f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8000be6:	2000      	movs	r0, #0
 8000be8:	f7ff fe82 	bl	80008f0 <ILI9341_WriteData>

	//NEGATIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE1);
 8000bec:	20e1      	movs	r0, #225	@ 0xe1
 8000bee:	f7ff fe63 	bl	80008b8 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000bf2:	2000      	movs	r0, #0
 8000bf4:	f7ff fe7c 	bl	80008f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8000bf8:	200e      	movs	r0, #14
 8000bfa:	f7ff fe79 	bl	80008f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x14);
 8000bfe:	2014      	movs	r0, #20
 8000c00:	f7ff fe76 	bl	80008f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8000c04:	2003      	movs	r0, #3
 8000c06:	f7ff fe73 	bl	80008f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x11);
 8000c0a:	2011      	movs	r0, #17
 8000c0c:	f7ff fe70 	bl	80008f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 8000c10:	2007      	movs	r0, #7
 8000c12:	f7ff fe6d 	bl	80008f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 8000c16:	2031      	movs	r0, #49	@ 0x31
 8000c18:	f7ff fe6a 	bl	80008f0 <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 8000c1c:	20c1      	movs	r0, #193	@ 0xc1
 8000c1e:	f7ff fe67 	bl	80008f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x48);
 8000c22:	2048      	movs	r0, #72	@ 0x48
 8000c24:	f7ff fe64 	bl	80008f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 8000c28:	2008      	movs	r0, #8
 8000c2a:	f7ff fe61 	bl	80008f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 8000c2e:	200f      	movs	r0, #15
 8000c30:	f7ff fe5e 	bl	80008f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 8000c34:	200c      	movs	r0, #12
 8000c36:	f7ff fe5b 	bl	80008f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 8000c3a:	2031      	movs	r0, #49	@ 0x31
 8000c3c:	f7ff fe58 	bl	80008f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x36);
 8000c40:	2036      	movs	r0, #54	@ 0x36
 8000c42:	f7ff fe55 	bl	80008f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 8000c46:	200f      	movs	r0, #15
 8000c48:	f7ff fe52 	bl	80008f0 <ILI9341_WriteData>


	//EXIT SLEEP
	ILI9341_WriteCommand(0x11);
 8000c4c:	2011      	movs	r0, #17
 8000c4e:	f7ff fe33 	bl	80008b8 <ILI9341_WriteCommand>
	HAL_Delay(100);
 8000c52:	2064      	movs	r0, #100	@ 0x64
 8000c54:	f001 fb32 	bl	80022bc <HAL_Delay>

	//TURN ON DISPLAY
	ILI9341_WriteCommand(0x29);
 8000c58:	2029      	movs	r0, #41	@ 0x29
 8000c5a:	f7ff fe2d 	bl	80008b8 <ILI9341_WriteCommand>

	//STARTING ROTATION
	ILI9341_SetRotation(SCREEN_VERTICAL_1);
 8000c5e:	2000      	movs	r0, #0
 8000c60:	f000 f802 	bl	8000c68 <ILI9341_SetRotation>

}
 8000c64:	bf00      	nop
 8000c66:	bd80      	pop	{r7, pc}

08000c68 <ILI9341_SetRotation>:

void ILI9341_SetRotation(uint8_t rotation)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	4603      	mov	r3, r0
 8000c70:	71fb      	strb	r3, [r7, #7]
	ILI9341_WriteCommand(0x36);
 8000c72:	2036      	movs	r0, #54	@ 0x36
 8000c74:	f7ff fe20 	bl	80008b8 <ILI9341_WriteCommand>
	HAL_Delay(1);
 8000c78:	2001      	movs	r0, #1
 8000c7a:	f001 fb1f 	bl	80022bc <HAL_Delay>

	switch(rotation)
 8000c7e:	79fb      	ldrb	r3, [r7, #7]
 8000c80:	2b03      	cmp	r3, #3
 8000c82:	d837      	bhi.n	8000cf4 <ILI9341_SetRotation+0x8c>
 8000c84:	a201      	add	r2, pc, #4	@ (adr r2, 8000c8c <ILI9341_SetRotation+0x24>)
 8000c86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c8a:	bf00      	nop
 8000c8c:	08000c9d 	.word	0x08000c9d
 8000c90:	08000cb3 	.word	0x08000cb3
 8000c94:	08000cc9 	.word	0x08000cc9
 8000c98:	08000cdf 	.word	0x08000cdf
	{
	case SCREEN_VERTICAL_1:
		ILI9341_WriteData(0x40|0x08);
 8000c9c:	2048      	movs	r0, #72	@ 0x48
 8000c9e:	f7ff fe27 	bl	80008f0 <ILI9341_WriteData>
		LCD_WIDTH = 240;
 8000ca2:	4b17      	ldr	r3, [pc, #92]	@ (8000d00 <ILI9341_SetRotation+0x98>)
 8000ca4:	22f0      	movs	r2, #240	@ 0xf0
 8000ca6:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 8000ca8:	4b16      	ldr	r3, [pc, #88]	@ (8000d04 <ILI9341_SetRotation+0x9c>)
 8000caa:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000cae:	801a      	strh	r2, [r3, #0]
		break;
 8000cb0:	e021      	b.n	8000cf6 <ILI9341_SetRotation+0x8e>
	case SCREEN_HORIZONTAL_1:
		ILI9341_WriteData(0x20|0x08);
 8000cb2:	2028      	movs	r0, #40	@ 0x28
 8000cb4:	f7ff fe1c 	bl	80008f0 <ILI9341_WriteData>
		LCD_WIDTH  = 320;
 8000cb8:	4b11      	ldr	r3, [pc, #68]	@ (8000d00 <ILI9341_SetRotation+0x98>)
 8000cba:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000cbe:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 8000cc0:	4b10      	ldr	r3, [pc, #64]	@ (8000d04 <ILI9341_SetRotation+0x9c>)
 8000cc2:	22f0      	movs	r2, #240	@ 0xf0
 8000cc4:	801a      	strh	r2, [r3, #0]
		break;
 8000cc6:	e016      	b.n	8000cf6 <ILI9341_SetRotation+0x8e>
	case SCREEN_VERTICAL_2:
		ILI9341_WriteData(0x80|0x08);
 8000cc8:	2088      	movs	r0, #136	@ 0x88
 8000cca:	f7ff fe11 	bl	80008f0 <ILI9341_WriteData>
		LCD_WIDTH  = 240;
 8000cce:	4b0c      	ldr	r3, [pc, #48]	@ (8000d00 <ILI9341_SetRotation+0x98>)
 8000cd0:	22f0      	movs	r2, #240	@ 0xf0
 8000cd2:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 8000cd4:	4b0b      	ldr	r3, [pc, #44]	@ (8000d04 <ILI9341_SetRotation+0x9c>)
 8000cd6:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000cda:	801a      	strh	r2, [r3, #0]
		break;
 8000cdc:	e00b      	b.n	8000cf6 <ILI9341_SetRotation+0x8e>
	case SCREEN_HORIZONTAL_2:
		ILI9341_WriteData(0x40|0x80|0x20|0x08);
 8000cde:	20e8      	movs	r0, #232	@ 0xe8
 8000ce0:	f7ff fe06 	bl	80008f0 <ILI9341_WriteData>
		LCD_WIDTH  = 320;
 8000ce4:	4b06      	ldr	r3, [pc, #24]	@ (8000d00 <ILI9341_SetRotation+0x98>)
 8000ce6:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000cea:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 8000cec:	4b05      	ldr	r3, [pc, #20]	@ (8000d04 <ILI9341_SetRotation+0x9c>)
 8000cee:	22f0      	movs	r2, #240	@ 0xf0
 8000cf0:	801a      	strh	r2, [r3, #0]
		break;
 8000cf2:	e000      	b.n	8000cf6 <ILI9341_SetRotation+0x8e>
	default:
		break;
 8000cf4:	bf00      	nop
	}
}
 8000cf6:	bf00      	nop
 8000cf8:	3708      	adds	r7, #8
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	20000002 	.word	0x20000002
 8000d04:	20000000 	.word	0x20000000

08000d08 <ILI9341_DrawColorBurst>:
	uint8_t buffer[2] = {color>>8, color};
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
}

void ILI9341_DrawColorBurst(uint16_t color, uint32_t size)
{
 8000d08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000d0c:	b08d      	sub	sp, #52	@ 0x34
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	4603      	mov	r3, r0
 8000d12:	6039      	str	r1, [r7, #0]
 8000d14:	80fb      	strh	r3, [r7, #6]
 8000d16:	466b      	mov	r3, sp
 8000d18:	461e      	mov	r6, r3
	uint32_t BufferSize = 0;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	62fb      	str	r3, [r7, #44]	@ 0x2c

	if((size*2) < BURST_MAX_SIZE)
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	005b      	lsls	r3, r3, #1
 8000d22:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000d26:	d202      	bcs.n	8000d2e <ILI9341_DrawColorBurst+0x26>
	{
		BufferSize = size;
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000d2c:	e002      	b.n	8000d34 <ILI9341_DrawColorBurst+0x2c>
	}
	else
	{
		BufferSize = BURST_MAX_SIZE;
 8000d2e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000d32:	62fb      	str	r3, [r7, #44]	@ 0x2c
	}

	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8000d34:	2201      	movs	r2, #1
 8000d36:	2110      	movs	r1, #16
 8000d38:	483f      	ldr	r0, [pc, #252]	@ (8000e38 <ILI9341_DrawColorBurst+0x130>)
 8000d3a:	f002 fd4b 	bl	80037d4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000d3e:	2200      	movs	r2, #0
 8000d40:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d44:	483d      	ldr	r0, [pc, #244]	@ (8000e3c <ILI9341_DrawColorBurst+0x134>)
 8000d46:	f002 fd45 	bl	80037d4 <HAL_GPIO_WritePin>

	uint8_t chifted = color>>8;
 8000d4a:	88fb      	ldrh	r3, [r7, #6]
 8000d4c:	0a1b      	lsrs	r3, r3, #8
 8000d4e:	b29b      	uxth	r3, r3
 8000d50:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	uint8_t BurstBuffer[BufferSize];
 8000d54:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8000d56:	460b      	mov	r3, r1
 8000d58:	3b01      	subs	r3, #1
 8000d5a:	61fb      	str	r3, [r7, #28]
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	4688      	mov	r8, r1
 8000d60:	4699      	mov	r9, r3
 8000d62:	f04f 0200 	mov.w	r2, #0
 8000d66:	f04f 0300 	mov.w	r3, #0
 8000d6a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000d6e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000d72:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000d76:	2300      	movs	r3, #0
 8000d78:	460c      	mov	r4, r1
 8000d7a:	461d      	mov	r5, r3
 8000d7c:	f04f 0200 	mov.w	r2, #0
 8000d80:	f04f 0300 	mov.w	r3, #0
 8000d84:	00eb      	lsls	r3, r5, #3
 8000d86:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000d8a:	00e2      	lsls	r2, r4, #3
 8000d8c:	1dcb      	adds	r3, r1, #7
 8000d8e:	08db      	lsrs	r3, r3, #3
 8000d90:	00db      	lsls	r3, r3, #3
 8000d92:	ebad 0d03 	sub.w	sp, sp, r3
 8000d96:	466b      	mov	r3, sp
 8000d98:	3300      	adds	r3, #0
 8000d9a:	61bb      	str	r3, [r7, #24]

	for(uint32_t j = 0; j < BufferSize; j+=2)
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000da0:	e00e      	b.n	8000dc0 <ILI9341_DrawColorBurst+0xb8>
	{
		BurstBuffer[j] = chifted;
 8000da2:	69ba      	ldr	r2, [r7, #24]
 8000da4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000da6:	4413      	add	r3, r2
 8000da8:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8000dac:	701a      	strb	r2, [r3, #0]
		BurstBuffer[j+1] = color;
 8000dae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000db0:	3301      	adds	r3, #1
 8000db2:	88fa      	ldrh	r2, [r7, #6]
 8000db4:	b2d1      	uxtb	r1, r2
 8000db6:	69ba      	ldr	r2, [r7, #24]
 8000db8:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < BufferSize; j+=2)
 8000dba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000dbc:	3302      	adds	r3, #2
 8000dbe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000dc0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000dc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000dc4:	429a      	cmp	r2, r3
 8000dc6:	d3ec      	bcc.n	8000da2 <ILI9341_DrawColorBurst+0x9a>
	}

	uint32_t SendingSize = size * 2;
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	005b      	lsls	r3, r3, #1
 8000dcc:	617b      	str	r3, [r7, #20]
	uint32_t SendingInBlock = SendingSize / BufferSize;
 8000dce:	697a      	ldr	r2, [r7, #20]
 8000dd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dd6:	613b      	str	r3, [r7, #16]
	uint32_t RemainderFromBlock = SendingSize % BufferSize;
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000ddc:	fbb3 f2f2 	udiv	r2, r3, r2
 8000de0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8000de2:	fb01 f202 	mul.w	r2, r1, r2
 8000de6:	1a9b      	subs	r3, r3, r2
 8000de8:	60fb      	str	r3, [r7, #12]

	if(SendingInBlock != 0)
 8000dea:	693b      	ldr	r3, [r7, #16]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d010      	beq.n	8000e12 <ILI9341_DrawColorBurst+0x10a>
	{
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 8000df0:	2300      	movs	r3, #0
 8000df2:	627b      	str	r3, [r7, #36]	@ 0x24
 8000df4:	e009      	b.n	8000e0a <ILI9341_DrawColorBurst+0x102>
		{
			HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, BufferSize, 10);
 8000df6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000df8:	b29a      	uxth	r2, r3
 8000dfa:	230a      	movs	r3, #10
 8000dfc:	69b9      	ldr	r1, [r7, #24]
 8000dfe:	4810      	ldr	r0, [pc, #64]	@ (8000e40 <ILI9341_DrawColorBurst+0x138>)
 8000e00:	f003 f9fb 	bl	80041fa <HAL_SPI_Transmit>
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 8000e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e06:	3301      	adds	r3, #1
 8000e08:	627b      	str	r3, [r7, #36]	@ 0x24
 8000e0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000e0c:	693b      	ldr	r3, [r7, #16]
 8000e0e:	429a      	cmp	r2, r3
 8000e10:	d3f1      	bcc.n	8000df6 <ILI9341_DrawColorBurst+0xee>
		}
	}

	HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, RemainderFromBlock, 10);
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	b29a      	uxth	r2, r3
 8000e16:	230a      	movs	r3, #10
 8000e18:	69b9      	ldr	r1, [r7, #24]
 8000e1a:	4809      	ldr	r0, [pc, #36]	@ (8000e40 <ILI9341_DrawColorBurst+0x138>)
 8000e1c:	f003 f9ed 	bl	80041fa <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000e20:	2201      	movs	r2, #1
 8000e22:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e26:	4805      	ldr	r0, [pc, #20]	@ (8000e3c <ILI9341_DrawColorBurst+0x134>)
 8000e28:	f002 fcd4 	bl	80037d4 <HAL_GPIO_WritePin>
 8000e2c:	46b5      	mov	sp, r6
}
 8000e2e:	bf00      	nop
 8000e30:	3734      	adds	r7, #52	@ 0x34
 8000e32:	46bd      	mov	sp, r7
 8000e34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000e38:	40020800 	.word	0x40020800
 8000e3c:	40020400 	.word	0x40020400
 8000e40:	20000114 	.word	0x20000114

08000e44 <ILI9341_FillScreen>:

void ILI9341_FillScreen(uint16_t color)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	80fb      	strh	r3, [r7, #6]
	ILI9341_SetAddress(0, 0, LCD_WIDTH, LCD_HEIGHT);                //@@@@
 8000e4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000e88 <ILI9341_FillScreen+0x44>)
 8000e50:	881b      	ldrh	r3, [r3, #0]
 8000e52:	b29a      	uxth	r2, r3
 8000e54:	4b0d      	ldr	r3, [pc, #52]	@ (8000e8c <ILI9341_FillScreen+0x48>)
 8000e56:	881b      	ldrh	r3, [r3, #0]
 8000e58:	b29b      	uxth	r3, r3
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	2000      	movs	r0, #0
 8000e5e:	f7ff fd81 	bl	8000964 <ILI9341_SetAddress>

	ILI9341_DrawColorBurst(color, LCD_WIDTH*LCD_HEIGHT);
 8000e62:	4b09      	ldr	r3, [pc, #36]	@ (8000e88 <ILI9341_FillScreen+0x44>)
 8000e64:	881b      	ldrh	r3, [r3, #0]
 8000e66:	b29b      	uxth	r3, r3
 8000e68:	461a      	mov	r2, r3
 8000e6a:	4b08      	ldr	r3, [pc, #32]	@ (8000e8c <ILI9341_FillScreen+0x48>)
 8000e6c:	881b      	ldrh	r3, [r3, #0]
 8000e6e:	b29b      	uxth	r3, r3
 8000e70:	fb02 f303 	mul.w	r3, r2, r3
 8000e74:	461a      	mov	r2, r3
 8000e76:	88fb      	ldrh	r3, [r7, #6]
 8000e78:	4611      	mov	r1, r2
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f7ff ff44 	bl	8000d08 <ILI9341_DrawColorBurst>
}
 8000e80:	bf00      	nop
 8000e82:	3708      	adds	r7, #8
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	20000002 	.word	0x20000002
 8000e8c:	20000000 	.word	0x20000000

08000e90 <ILI9341_DrawPixel>:

void ILI9341_DrawPixel(uint16_t x,uint16_t y,uint16_t color)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b086      	sub	sp, #24
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	4603      	mov	r3, r0
 8000e98:	80fb      	strh	r3, [r7, #6]
 8000e9a:	460b      	mov	r3, r1
 8000e9c:	80bb      	strh	r3, [r7, #4]
 8000e9e:	4613      	mov	r3, r2
 8000ea0:	807b      	strh	r3, [r7, #2]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8000ea2:	4b2c      	ldr	r3, [pc, #176]	@ (8000f54 <ILI9341_DrawPixel+0xc4>)
 8000ea4:	881b      	ldrh	r3, [r3, #0]
 8000ea6:	b29b      	uxth	r3, r3
 8000ea8:	88fa      	ldrh	r2, [r7, #6]
 8000eaa:	429a      	cmp	r2, r3
 8000eac:	d24d      	bcs.n	8000f4a <ILI9341_DrawPixel+0xba>
 8000eae:	4b2a      	ldr	r3, [pc, #168]	@ (8000f58 <ILI9341_DrawPixel+0xc8>)
 8000eb0:	881b      	ldrh	r3, [r3, #0]
 8000eb2:	b29b      	uxth	r3, r3
 8000eb4:	88ba      	ldrh	r2, [r7, #4]
 8000eb6:	429a      	cmp	r2, r3
 8000eb8:	d247      	bcs.n	8000f4a <ILI9341_DrawPixel+0xba>

	uint8_t bufferX[4] = {x>>8, x, (x+1)>>8, (x+1)};
 8000eba:	88fb      	ldrh	r3, [r7, #6]
 8000ebc:	0a1b      	lsrs	r3, r3, #8
 8000ebe:	b29b      	uxth	r3, r3
 8000ec0:	b2db      	uxtb	r3, r3
 8000ec2:	753b      	strb	r3, [r7, #20]
 8000ec4:	88fb      	ldrh	r3, [r7, #6]
 8000ec6:	b2db      	uxtb	r3, r3
 8000ec8:	757b      	strb	r3, [r7, #21]
 8000eca:	88fb      	ldrh	r3, [r7, #6]
 8000ecc:	3301      	adds	r3, #1
 8000ece:	121b      	asrs	r3, r3, #8
 8000ed0:	b2db      	uxtb	r3, r3
 8000ed2:	75bb      	strb	r3, [r7, #22]
 8000ed4:	88fb      	ldrh	r3, [r7, #6]
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	3301      	adds	r3, #1
 8000eda:	b2db      	uxtb	r3, r3
 8000edc:	75fb      	strb	r3, [r7, #23]
	uint8_t bufferY[4] = {y>>8, y, (y+1)>>8, (y+1)};
 8000ede:	88bb      	ldrh	r3, [r7, #4]
 8000ee0:	0a1b      	lsrs	r3, r3, #8
 8000ee2:	b29b      	uxth	r3, r3
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	743b      	strb	r3, [r7, #16]
 8000ee8:	88bb      	ldrh	r3, [r7, #4]
 8000eea:	b2db      	uxtb	r3, r3
 8000eec:	747b      	strb	r3, [r7, #17]
 8000eee:	88bb      	ldrh	r3, [r7, #4]
 8000ef0:	3301      	adds	r3, #1
 8000ef2:	121b      	asrs	r3, r3, #8
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	74bb      	strb	r3, [r7, #18]
 8000ef8:	88bb      	ldrh	r3, [r7, #4]
 8000efa:	b2db      	uxtb	r3, r3
 8000efc:	3301      	adds	r3, #1
 8000efe:	b2db      	uxtb	r3, r3
 8000f00:	74fb      	strb	r3, [r7, #19]
	uint8_t bufferC[2] = {color>>8, color};
 8000f02:	887b      	ldrh	r3, [r7, #2]
 8000f04:	0a1b      	lsrs	r3, r3, #8
 8000f06:	b29b      	uxth	r3, r3
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	733b      	strb	r3, [r7, #12]
 8000f0c:	887b      	ldrh	r3, [r7, #2]
 8000f0e:	b2db      	uxtb	r3, r3
 8000f10:	737b      	strb	r3, [r7, #13]

	ILI9341_WriteCommand(0x2A);						//ADDRESS
 8000f12:	202a      	movs	r0, #42	@ 0x2a
 8000f14:	f7ff fcd0 	bl	80008b8 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferX, sizeof(bufferX));	//XDATA
 8000f18:	f107 0314 	add.w	r3, r7, #20
 8000f1c:	2104      	movs	r1, #4
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f7ff fd02 	bl	8000928 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2B);						//ADDRESS
 8000f24:	202b      	movs	r0, #43	@ 0x2b
 8000f26:	f7ff fcc7 	bl	80008b8 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferY, sizeof(bufferY));	//YDATA
 8000f2a:	f107 0310 	add.w	r3, r7, #16
 8000f2e:	2104      	movs	r1, #4
 8000f30:	4618      	mov	r0, r3
 8000f32:	f7ff fcf9 	bl	8000928 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2C);						//ADDRESS
 8000f36:	202c      	movs	r0, #44	@ 0x2c
 8000f38:	f7ff fcbe 	bl	80008b8 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferC, sizeof(bufferC));	//COLOR
 8000f3c:	f107 030c 	add.w	r3, r7, #12
 8000f40:	2102      	movs	r1, #2
 8000f42:	4618      	mov	r0, r3
 8000f44:	f7ff fcf0 	bl	8000928 <ILI9341_WriteBuffer>
 8000f48:	e000      	b.n	8000f4c <ILI9341_DrawPixel+0xbc>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8000f4a:	bf00      	nop
}
 8000f4c:	3718      	adds	r7, #24
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	20000002 	.word	0x20000002
 8000f58:	20000000 	.word	0x20000000

08000f5c <ILI9341_DrawRectangle>:

void ILI9341_DrawRectangle(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t color)
{
 8000f5c:	b590      	push	{r4, r7, lr}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4604      	mov	r4, r0
 8000f64:	4608      	mov	r0, r1
 8000f66:	4611      	mov	r1, r2
 8000f68:	461a      	mov	r2, r3
 8000f6a:	4623      	mov	r3, r4
 8000f6c:	80fb      	strh	r3, [r7, #6]
 8000f6e:	4603      	mov	r3, r0
 8000f70:	80bb      	strh	r3, [r7, #4]
 8000f72:	460b      	mov	r3, r1
 8000f74:	807b      	strh	r3, [r7, #2]
 8000f76:	4613      	mov	r3, r2
 8000f78:	803b      	strh	r3, [r7, #0]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8000f7a:	4b24      	ldr	r3, [pc, #144]	@ (800100c <ILI9341_DrawRectangle+0xb0>)
 8000f7c:	881b      	ldrh	r3, [r3, #0]
 8000f7e:	b29b      	uxth	r3, r3
 8000f80:	88fa      	ldrh	r2, [r7, #6]
 8000f82:	429a      	cmp	r2, r3
 8000f84:	d23d      	bcs.n	8001002 <ILI9341_DrawRectangle+0xa6>
 8000f86:	4b22      	ldr	r3, [pc, #136]	@ (8001010 <ILI9341_DrawRectangle+0xb4>)
 8000f88:	881b      	ldrh	r3, [r3, #0]
 8000f8a:	b29b      	uxth	r3, r3
 8000f8c:	88ba      	ldrh	r2, [r7, #4]
 8000f8e:	429a      	cmp	r2, r3
 8000f90:	d237      	bcs.n	8001002 <ILI9341_DrawRectangle+0xa6>

	if((x+width-1)>=LCD_WIDTH)
 8000f92:	88fa      	ldrh	r2, [r7, #6]
 8000f94:	887b      	ldrh	r3, [r7, #2]
 8000f96:	4413      	add	r3, r2
 8000f98:	4a1c      	ldr	r2, [pc, #112]	@ (800100c <ILI9341_DrawRectangle+0xb0>)
 8000f9a:	8812      	ldrh	r2, [r2, #0]
 8000f9c:	b292      	uxth	r2, r2
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	dd05      	ble.n	8000fae <ILI9341_DrawRectangle+0x52>
	{
		width=LCD_WIDTH-x;
 8000fa2:	4b1a      	ldr	r3, [pc, #104]	@ (800100c <ILI9341_DrawRectangle+0xb0>)
 8000fa4:	881b      	ldrh	r3, [r3, #0]
 8000fa6:	b29a      	uxth	r2, r3
 8000fa8:	88fb      	ldrh	r3, [r7, #6]
 8000faa:	1ad3      	subs	r3, r2, r3
 8000fac:	807b      	strh	r3, [r7, #2]
	}

	if((y+height-1)>=LCD_HEIGHT)
 8000fae:	88ba      	ldrh	r2, [r7, #4]
 8000fb0:	883b      	ldrh	r3, [r7, #0]
 8000fb2:	4413      	add	r3, r2
 8000fb4:	4a16      	ldr	r2, [pc, #88]	@ (8001010 <ILI9341_DrawRectangle+0xb4>)
 8000fb6:	8812      	ldrh	r2, [r2, #0]
 8000fb8:	b292      	uxth	r2, r2
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	dd05      	ble.n	8000fca <ILI9341_DrawRectangle+0x6e>
	{
		height=LCD_HEIGHT-y;
 8000fbe:	4b14      	ldr	r3, [pc, #80]	@ (8001010 <ILI9341_DrawRectangle+0xb4>)
 8000fc0:	881b      	ldrh	r3, [r3, #0]
 8000fc2:	b29a      	uxth	r2, r3
 8000fc4:	88bb      	ldrh	r3, [r7, #4]
 8000fc6:	1ad3      	subs	r3, r2, r3
 8000fc8:	803b      	strh	r3, [r7, #0]
	}

	ILI9341_SetAddress(x, y, x+width-1, y+height-1);
 8000fca:	88fa      	ldrh	r2, [r7, #6]
 8000fcc:	887b      	ldrh	r3, [r7, #2]
 8000fce:	4413      	add	r3, r2
 8000fd0:	b29b      	uxth	r3, r3
 8000fd2:	3b01      	subs	r3, #1
 8000fd4:	b29c      	uxth	r4, r3
 8000fd6:	88ba      	ldrh	r2, [r7, #4]
 8000fd8:	883b      	ldrh	r3, [r7, #0]
 8000fda:	4413      	add	r3, r2
 8000fdc:	b29b      	uxth	r3, r3
 8000fde:	3b01      	subs	r3, #1
 8000fe0:	b29b      	uxth	r3, r3
 8000fe2:	88b9      	ldrh	r1, [r7, #4]
 8000fe4:	88f8      	ldrh	r0, [r7, #6]
 8000fe6:	4622      	mov	r2, r4
 8000fe8:	f7ff fcbc 	bl	8000964 <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, height*width);
 8000fec:	883b      	ldrh	r3, [r7, #0]
 8000fee:	887a      	ldrh	r2, [r7, #2]
 8000ff0:	fb02 f303 	mul.w	r3, r2, r3
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	8b3b      	ldrh	r3, [r7, #24]
 8000ff8:	4611      	mov	r1, r2
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f7ff fe84 	bl	8000d08 <ILI9341_DrawColorBurst>
 8001000:	e000      	b.n	8001004 <ILI9341_DrawRectangle+0xa8>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8001002:	bf00      	nop
}
 8001004:	370c      	adds	r7, #12
 8001006:	46bd      	mov	sp, r7
 8001008:	bd90      	pop	{r4, r7, pc}
 800100a:	bf00      	nop
 800100c:	20000002 	.word	0x20000002
 8001010:	20000000 	.word	0x20000000

08001014 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af02      	add	r7, sp, #8
 800101a:	4603      	mov	r3, r0
 800101c:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == GPIO_PIN_0)  // Check which pin triggered the EXTI
 800101e:	88fb      	ldrh	r3, [r7, #6]
 8001020:	2b01      	cmp	r3, #1
 8001022:	d042      	beq.n	80010aa <HAL_GPIO_EXTI_Callback+0x96>
        // Your EXTI handling code here
        //do somthing
        //HAL_NVIC_EnableIRQ(EXTI0_IRQn);

    }
    else if(GPIO_Pin == GPIO_PIN_1){
 8001024:	88fb      	ldrh	r3, [r7, #6]
 8001026:	2b02      	cmp	r3, #2
 8001028:	d03f      	beq.n	80010aa <HAL_GPIO_EXTI_Callback+0x96>


    }
    else if(GPIO_Pin == GPIO_PIN_4){
 800102a:	88fb      	ldrh	r3, [r7, #6]
 800102c:	2b10      	cmp	r3, #16
 800102e:	d13c      	bne.n	80010aa <HAL_GPIO_EXTI_Callback+0x96>
    HAL_NVIC_DisableIRQ(EXTI4_IRQn);
 8001030:	200a      	movs	r0, #10
 8001032:	f001 fe90 	bl	8002d56 <HAL_NVIC_DisableIRQ>
        HAL_Delay(600);
 8001036:	f44f 7016 	mov.w	r0, #600	@ 0x258
 800103a:	f001 f93f 	bl	80022bc <HAL_Delay>
        if(!HAL_GPIO_ReadPin(STOP_WATCH_GPIO_Port, STOP_WATCH_Pin)){
 800103e:	2110      	movs	r1, #16
 8001040:	481c      	ldr	r0, [pc, #112]	@ (80010b4 <HAL_GPIO_EXTI_Callback+0xa0>)
 8001042:	f002 fbaf 	bl	80037a4 <HAL_GPIO_ReadPin>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d117      	bne.n	800107c <HAL_GPIO_EXTI_Callback+0x68>
            counter_exti4 = 0; mins_stopwatch = 0; sec_stopwatch = 0; stopwatch_screen_flag = 0;
 800104c:	4b1a      	ldr	r3, [pc, #104]	@ (80010b8 <HAL_GPIO_EXTI_Callback+0xa4>)
 800104e:	2200      	movs	r2, #0
 8001050:	801a      	strh	r2, [r3, #0]
 8001052:	4b1a      	ldr	r3, [pc, #104]	@ (80010bc <HAL_GPIO_EXTI_Callback+0xa8>)
 8001054:	2200      	movs	r2, #0
 8001056:	701a      	strb	r2, [r3, #0]
 8001058:	4b19      	ldr	r3, [pc, #100]	@ (80010c0 <HAL_GPIO_EXTI_Callback+0xac>)
 800105a:	2200      	movs	r2, #0
 800105c:	701a      	strb	r2, [r3, #0]
 800105e:	4b19      	ldr	r3, [pc, #100]	@ (80010c4 <HAL_GPIO_EXTI_Callback+0xb0>)
 8001060:	2200      	movs	r2, #0
 8001062:	701a      	strb	r2, [r3, #0]
            // ILI9341_DrawText("00 : 00", FONT3, 90 , 260, WHITE, BLACK);
            ILI9341_DrawText("00:00", FONT4, 100, 280, WHITE, BLACK);              // Timer text
 8001064:	2300      	movs	r3, #0
 8001066:	9301      	str	r3, [sp, #4]
 8001068:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800106c:	9300      	str	r3, [sp, #0]
 800106e:	f44f 738c 	mov.w	r3, #280	@ 0x118
 8001072:	2264      	movs	r2, #100	@ 0x64
 8001074:	4914      	ldr	r1, [pc, #80]	@ (80010c8 <HAL_GPIO_EXTI_Callback+0xb4>)
 8001076:	4815      	ldr	r0, [pc, #84]	@ (80010cc <HAL_GPIO_EXTI_Callback+0xb8>)
 8001078:	f7ff fb30 	bl	80006dc <ILI9341_DrawText>

        }
    	counter_exti4++;
 800107c:	4b0e      	ldr	r3, [pc, #56]	@ (80010b8 <HAL_GPIO_EXTI_Callback+0xa4>)
 800107e:	881b      	ldrh	r3, [r3, #0]
 8001080:	3301      	adds	r3, #1
 8001082:	b29a      	uxth	r2, r3
 8001084:	4b0c      	ldr	r3, [pc, #48]	@ (80010b8 <HAL_GPIO_EXTI_Callback+0xa4>)
 8001086:	801a      	strh	r2, [r3, #0]
    	if((counter_exti4%2) == 0){
 8001088:	4b0b      	ldr	r3, [pc, #44]	@ (80010b8 <HAL_GPIO_EXTI_Callback+0xa4>)
 800108a:	881b      	ldrh	r3, [r3, #0]
 800108c:	f003 0301 	and.w	r3, r3, #1
 8001090:	b29b      	uxth	r3, r3
 8001092:	2b00      	cmp	r3, #0
 8001094:	d103      	bne.n	800109e <HAL_GPIO_EXTI_Callback+0x8a>
    		stopwatch_screen_flag=0;
 8001096:	4b0b      	ldr	r3, [pc, #44]	@ (80010c4 <HAL_GPIO_EXTI_Callback+0xb0>)
 8001098:	2200      	movs	r2, #0
 800109a:	701a      	strb	r2, [r3, #0]
 800109c:	e002      	b.n	80010a4 <HAL_GPIO_EXTI_Callback+0x90>
    	}

    	else{
    		stopwatch_screen_flag=1;
 800109e:	4b09      	ldr	r3, [pc, #36]	@ (80010c4 <HAL_GPIO_EXTI_Callback+0xb0>)
 80010a0:	2201      	movs	r2, #1
 80010a2:	701a      	strb	r2, [r3, #0]
    	}


    	//        //do somthing
    	//        // Your EXTI ha
        HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80010a4:	200a      	movs	r0, #10
 80010a6:	f001 fe48 	bl	8002d3a <HAL_NVIC_EnableIRQ>
    }
}
 80010aa:	bf00      	nop
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	40020000 	.word	0x40020000
 80010b8:	200002a4 	.word	0x200002a4
 80010bc:	200002a6 	.word	0x200002a6
 80010c0:	200002a7 	.word	0x200002a7
 80010c4:	200002a8 	.word	0x200002a8
 80010c8:	08006d68 	.word	0x08006d68
 80010cc:	0800631c 	.word	0x0800631c

080010d0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b086      	sub	sp, #24
 80010d4:	af02      	add	r7, sp, #8
 80010d6:	6078      	str	r0, [r7, #4]
    if(htim->Instance == TIM2)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80010e0:	f040 81fc 	bne.w	80014dc <HAL_TIM_PeriodElapsedCallback+0x40c>
    {
        // Stopwatch update
        if(stopwatch_screen_flag == 1)
 80010e4:	4b95      	ldr	r3, [pc, #596]	@ (800133c <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d131      	bne.n	8001150 <HAL_TIM_PeriodElapsedCallback+0x80>
        {
            sec_stopwatch++;
 80010ec:	4b94      	ldr	r3, [pc, #592]	@ (8001340 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	3301      	adds	r3, #1
 80010f2:	b2da      	uxtb	r2, r3
 80010f4:	4b92      	ldr	r3, [pc, #584]	@ (8001340 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80010f6:	701a      	strb	r2, [r3, #0]
            if(sec_stopwatch == 60) { sec_stopwatch = 0; mins_stopwatch++; }
 80010f8:	4b91      	ldr	r3, [pc, #580]	@ (8001340 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	2b3c      	cmp	r3, #60	@ 0x3c
 80010fe:	d108      	bne.n	8001112 <HAL_TIM_PeriodElapsedCallback+0x42>
 8001100:	4b8f      	ldr	r3, [pc, #572]	@ (8001340 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001102:	2200      	movs	r2, #0
 8001104:	701a      	strb	r2, [r3, #0]
 8001106:	4b8f      	ldr	r3, [pc, #572]	@ (8001344 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	3301      	adds	r3, #1
 800110c:	b2da      	uxtb	r2, r3
 800110e:	4b8d      	ldr	r3, [pc, #564]	@ (8001344 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001110:	701a      	strb	r2, [r3, #0]
             if(mins_stopwatch == 99) { sec_stopwatch = 0; stopwatch_screen_flag = 0; }
 8001112:	4b8c      	ldr	r3, [pc, #560]	@ (8001344 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	2b63      	cmp	r3, #99	@ 0x63
 8001118:	d105      	bne.n	8001126 <HAL_TIM_PeriodElapsedCallback+0x56>
 800111a:	4b89      	ldr	r3, [pc, #548]	@ (8001340 <HAL_TIM_PeriodElapsedCallback+0x270>)
 800111c:	2200      	movs	r2, #0
 800111e:	701a      	strb	r2, [r3, #0]
 8001120:	4b86      	ldr	r3, [pc, #536]	@ (800133c <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001122:	2200      	movs	r2, #0
 8001124:	701a      	strb	r2, [r3, #0]

            // sprintf(timer_text,"%d : %d", mins_stopwatch, sec_stopwatch);
            sprintf(timer_text,"%02d : %02d", mins_stopwatch, sec_stopwatch);
 8001126:	4b87      	ldr	r3, [pc, #540]	@ (8001344 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	461a      	mov	r2, r3
 800112c:	4b84      	ldr	r3, [pc, #528]	@ (8001340 <HAL_TIM_PeriodElapsedCallback+0x270>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	4985      	ldr	r1, [pc, #532]	@ (8001348 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001132:	4886      	ldr	r0, [pc, #536]	@ (800134c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001134:	f004 fc46 	bl	80059c4 <siprintf>
            ILI9341_DrawText((const char*)timer_text, FONT4, 100, 280, WHITE, BLACK); 
 8001138:	2300      	movs	r3, #0
 800113a:	9301      	str	r3, [sp, #4]
 800113c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001140:	9300      	str	r3, [sp, #0]
 8001142:	f44f 738c 	mov.w	r3, #280	@ 0x118
 8001146:	2264      	movs	r2, #100	@ 0x64
 8001148:	4981      	ldr	r1, [pc, #516]	@ (8001350 <HAL_TIM_PeriodElapsedCallback+0x280>)
 800114a:	4880      	ldr	r0, [pc, #512]	@ (800134c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 800114c:	f7ff fac6 	bl	80006dc <ILI9341_DrawText>
        static float Remain_Cap = BATTERY_CAPACITY_AH; // assume full at boot
        static uint8_t soc_rc_temp = 255;              // force first update
        static uint8_t soc_joky_temp = 255;

        // Read current from ADC
        HAL_ADC_Start(&hadc1);
 8001150:	4880      	ldr	r0, [pc, #512]	@ (8001354 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001152:	f001 f91b 	bl	800238c <HAL_ADC_Start>
        HAL_ADC_PollForConversion(&hadc1, 10);
 8001156:	210a      	movs	r1, #10
 8001158:	487e      	ldr	r0, [pc, #504]	@ (8001354 <HAL_TIM_PeriodElapsedCallback+0x284>)
 800115a:	f001 fa1c 	bl	8002596 <HAL_ADC_PollForConversion>
        uint16_t adc_val = HAL_ADC_GetValue(&hadc1);
 800115e:	487d      	ldr	r0, [pc, #500]	@ (8001354 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001160:	f001 faa4 	bl	80026ac <HAL_ADC_GetValue>
 8001164:	4603      	mov	r3, r0
 8001166:	81fb      	strh	r3, [r7, #14]
        HAL_ADC_Stop(&hadc1);
 8001168:	487a      	ldr	r0, [pc, #488]	@ (8001354 <HAL_TIM_PeriodElapsedCallback+0x284>)
 800116a:	f001 f9e1 	bl	8002530 <HAL_ADC_Stop>

        ACS712_Voltage = ((adc_val * ADC_VREF_VOLTAGE) / ADC_RESOLUTION);
 800116e:	89fb      	ldrh	r3, [r7, #14]
 8001170:	ee07 3a90 	vmov	s15, r3
 8001174:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001178:	ed9f 7a77 	vldr	s14, [pc, #476]	@ 8001358 <HAL_TIM_PeriodElapsedCallback+0x288>
 800117c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001180:	eddf 6a76 	vldr	s13, [pc, #472]	@ 800135c <HAL_TIM_PeriodElapsedCallback+0x28c>
 8001184:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001188:	4b75      	ldr	r3, [pc, #468]	@ (8001360 <HAL_TIM_PeriodElapsedCallback+0x290>)
 800118a:	edc3 7a00 	vstr	s15, [r3]
        ACS712_Current = (ACS712_Voltage - ACS712_OFFSET_VOLTAGE) / ACS712_SENSITIVITY;
 800118e:	4b74      	ldr	r3, [pc, #464]	@ (8001360 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001190:	edd3 7a00 	vldr	s15, [r3]
 8001194:	ed9f 7a73 	vldr	s14, [pc, #460]	@ 8001364 <HAL_TIM_PeriodElapsedCallback+0x294>
 8001198:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800119c:	eddf 6a72 	vldr	s13, [pc, #456]	@ 8001368 <HAL_TIM_PeriodElapsedCallback+0x298>
 80011a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011a4:	4b71      	ldr	r3, [pc, #452]	@ (800136c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80011a6:	edc3 7a00 	vstr	s15, [r3]

        // Integrate current to calculate remaining capacity (Ah)
        float delta_Ah = ACS712_Current * (TIM2_TICK_PERIOD_S / 3600.0f);
 80011aa:	4b70      	ldr	r3, [pc, #448]	@ (800136c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80011ac:	edd3 7a00 	vldr	s15, [r3]
 80011b0:	ed9f 7a6f 	vldr	s14, [pc, #444]	@ 8001370 <HAL_TIM_PeriodElapsedCallback+0x2a0>
 80011b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011b8:	edc7 7a02 	vstr	s15, [r7, #8]
        Remain_Cap += delta_Ah;
 80011bc:	4b6d      	ldr	r3, [pc, #436]	@ (8001374 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80011be:	ed93 7a00 	vldr	s14, [r3]
 80011c2:	edd7 7a02 	vldr	s15, [r7, #8]
 80011c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011ca:	4b6a      	ldr	r3, [pc, #424]	@ (8001374 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80011cc:	edc3 7a00 	vstr	s15, [r3]

        // Clamp capacity
        if(Remain_Cap > BATTERY_CAPACITY_AH) Remain_Cap = BATTERY_CAPACITY_AH;
 80011d0:	4b68      	ldr	r3, [pc, #416]	@ (8001374 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80011d2:	edd3 7a00 	vldr	s15, [r3]
 80011d6:	eeb0 7a04 	vmov.f32	s14, #4	@ 0x40200000  2.5
 80011da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011e2:	dd02      	ble.n	80011ea <HAL_TIM_PeriodElapsedCallback+0x11a>
 80011e4:	4b63      	ldr	r3, [pc, #396]	@ (8001374 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80011e6:	4a64      	ldr	r2, [pc, #400]	@ (8001378 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80011e8:	601a      	str	r2, [r3, #0]
        if(Remain_Cap < 0.0f) Remain_Cap = 0.0f;
 80011ea:	4b62      	ldr	r3, [pc, #392]	@ (8001374 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80011ec:	edd3 7a00 	vldr	s15, [r3]
 80011f0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80011f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011f8:	d503      	bpl.n	8001202 <HAL_TIM_PeriodElapsedCallback+0x132>
 80011fa:	4b5e      	ldr	r3, [pc, #376]	@ (8001374 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80011fc:	f04f 0200 	mov.w	r2, #0
 8001200:	601a      	str	r2, [r3, #0]

        soc_rc = (Remain_Cap / BATTERY_CAPACITY_AH) * 100.0f;
 8001202:	4b5c      	ldr	r3, [pc, #368]	@ (8001374 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001204:	ed93 7a00 	vldr	s14, [r3]
 8001208:	eef0 6a04 	vmov.f32	s13, #4	@ 0x40200000  2.5
 800120c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001210:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 800137c <HAL_TIM_PeriodElapsedCallback+0x2ac>
 8001214:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001218:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800121c:	edc7 7a00 	vstr	s15, [r7]
 8001220:	783b      	ldrb	r3, [r7, #0]
 8001222:	b2da      	uxtb	r2, r3
 8001224:	4b56      	ldr	r3, [pc, #344]	@ (8001380 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001226:	701a      	strb	r2, [r3, #0]

        // Update SOC display if changed
        if((uint8_t)soc_rc != soc_rc_temp)
 8001228:	4b55      	ldr	r3, [pc, #340]	@ (8001380 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 800122a:	781a      	ldrb	r2, [r3, #0]
 800122c:	4b55      	ldr	r3, [pc, #340]	@ (8001384 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	429a      	cmp	r2, r3
 8001232:	f000 8153 	beq.w	80014dc <HAL_TIM_PeriodElapsedCallback+0x40c>
        {
//            sprintf(soc_rc_text, "%d", (uint8_t)soc_rc);
            ILI9341_DrawText((const char*)soc_str, FONT3, 60 ,100, WHITE, BLACK);
 8001236:	2300      	movs	r3, #0
 8001238:	9301      	str	r3, [sp, #4]
 800123a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800123e:	9300      	str	r3, [sp, #0]
 8001240:	2364      	movs	r3, #100	@ 0x64
 8001242:	223c      	movs	r2, #60	@ 0x3c
 8001244:	4950      	ldr	r1, [pc, #320]	@ (8001388 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001246:	4851      	ldr	r0, [pc, #324]	@ (800138c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001248:	f7ff fa48 	bl	80006dc <ILI9341_DrawText>
            soc_rc_temp = (uint8_t)soc_rc;
 800124c:	4b4c      	ldr	r3, [pc, #304]	@ (8001380 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 800124e:	781a      	ldrb	r2, [r3, #0]
 8001250:	4b4c      	ldr	r3, [pc, #304]	@ (8001384 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001252:	701a      	strb	r2, [r3, #0]
            sprintf(soc_str, "%d%%", soc_rc);
 8001254:	4b4a      	ldr	r3, [pc, #296]	@ (8001380 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	461a      	mov	r2, r3
 800125a:	494d      	ldr	r1, [pc, #308]	@ (8001390 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 800125c:	484b      	ldr	r0, [pc, #300]	@ (800138c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 800125e:	f004 fbb1 	bl	80059c4 <siprintf>
            ILI9341_DrawText((const char*)soc_str, FONT3, 70 ,100, WHITE, BLACK);
 8001262:	2300      	movs	r3, #0
 8001264:	9301      	str	r3, [sp, #4]
 8001266:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800126a:	9300      	str	r3, [sp, #0]
 800126c:	2364      	movs	r3, #100	@ 0x64
 800126e:	2246      	movs	r2, #70	@ 0x46
 8001270:	4945      	ldr	r1, [pc, #276]	@ (8001388 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001272:	4846      	ldr	r0, [pc, #280]	@ (800138c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001274:	f7ff fa32 	bl	80006dc <ILI9341_DrawText>
            if(soc_rc < 10){
 8001278:	4b41      	ldr	r3, [pc, #260]	@ (8001380 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	2b09      	cmp	r3, #9
 800127e:	d808      	bhi.n	8001292 <HAL_TIM_PeriodElapsedCallback+0x1c2>
                
                ILI9341_DrawImageAt((const uint8_t*)_less10, 20, 50, 30, 60);                                    // Battery icon
 8001280:	233c      	movs	r3, #60	@ 0x3c
 8001282:	9300      	str	r3, [sp, #0]
 8001284:	231e      	movs	r3, #30
 8001286:	2232      	movs	r2, #50	@ 0x32
 8001288:	2114      	movs	r1, #20
 800128a:	4842      	ldr	r0, [pc, #264]	@ (8001394 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 800128c:	f7ff fa70 	bl	8000770 <ILI9341_DrawImageAt>
 8001290:	e098      	b.n	80013c4 <HAL_TIM_PeriodElapsedCallback+0x2f4>

            }
            else if(soc_rc >= 20 && soc_rc < 35){
 8001292:	4b3b      	ldr	r3, [pc, #236]	@ (8001380 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	2b13      	cmp	r3, #19
 8001298:	d90c      	bls.n	80012b4 <HAL_TIM_PeriodElapsedCallback+0x1e4>
 800129a:	4b39      	ldr	r3, [pc, #228]	@ (8001380 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	2b22      	cmp	r3, #34	@ 0x22
 80012a0:	d808      	bhi.n	80012b4 <HAL_TIM_PeriodElapsedCallback+0x1e4>
                ILI9341_DrawImageAt((const uint8_t*)_20, 20, 50, 30, 60);                                    // Battery icon
 80012a2:	233c      	movs	r3, #60	@ 0x3c
 80012a4:	9300      	str	r3, [sp, #0]
 80012a6:	231e      	movs	r3, #30
 80012a8:	2232      	movs	r2, #50	@ 0x32
 80012aa:	2114      	movs	r1, #20
 80012ac:	483a      	ldr	r0, [pc, #232]	@ (8001398 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 80012ae:	f7ff fa5f 	bl	8000770 <ILI9341_DrawImageAt>
 80012b2:	e087      	b.n	80013c4 <HAL_TIM_PeriodElapsedCallback+0x2f4>
            }
            else if(soc_rc >= 35 && soc_rc < 50){
 80012b4:	4b32      	ldr	r3, [pc, #200]	@ (8001380 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	2b22      	cmp	r3, #34	@ 0x22
 80012ba:	d90c      	bls.n	80012d6 <HAL_TIM_PeriodElapsedCallback+0x206>
 80012bc:	4b30      	ldr	r3, [pc, #192]	@ (8001380 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	2b31      	cmp	r3, #49	@ 0x31
 80012c2:	d808      	bhi.n	80012d6 <HAL_TIM_PeriodElapsedCallback+0x206>
                ILI9341_DrawImageAt((const uint8_t*)_35, 20, 50, 30, 60);                                    // Battery icon
 80012c4:	233c      	movs	r3, #60	@ 0x3c
 80012c6:	9300      	str	r3, [sp, #0]
 80012c8:	231e      	movs	r3, #30
 80012ca:	2232      	movs	r2, #50	@ 0x32
 80012cc:	2114      	movs	r1, #20
 80012ce:	4833      	ldr	r0, [pc, #204]	@ (800139c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80012d0:	f7ff fa4e 	bl	8000770 <ILI9341_DrawImageAt>
 80012d4:	e076      	b.n	80013c4 <HAL_TIM_PeriodElapsedCallback+0x2f4>
            }
            else if(soc_rc >= 50 && soc_rc < 65){
 80012d6:	4b2a      	ldr	r3, [pc, #168]	@ (8001380 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	2b31      	cmp	r3, #49	@ 0x31
 80012dc:	d90c      	bls.n	80012f8 <HAL_TIM_PeriodElapsedCallback+0x228>
 80012de:	4b28      	ldr	r3, [pc, #160]	@ (8001380 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	2b40      	cmp	r3, #64	@ 0x40
 80012e4:	d808      	bhi.n	80012f8 <HAL_TIM_PeriodElapsedCallback+0x228>
                ILI9341_DrawImageAt((const uint8_t*)_50, 20, 50, 30, 60);                                    // Battery icon
 80012e6:	233c      	movs	r3, #60	@ 0x3c
 80012e8:	9300      	str	r3, [sp, #0]
 80012ea:	231e      	movs	r3, #30
 80012ec:	2232      	movs	r2, #50	@ 0x32
 80012ee:	2114      	movs	r1, #20
 80012f0:	482b      	ldr	r0, [pc, #172]	@ (80013a0 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80012f2:	f7ff fa3d 	bl	8000770 <ILI9341_DrawImageAt>
 80012f6:	e065      	b.n	80013c4 <HAL_TIM_PeriodElapsedCallback+0x2f4>
            }
            else if(soc_rc >= 65 && soc_rc < 85){
 80012f8:	4b21      	ldr	r3, [pc, #132]	@ (8001380 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	2b40      	cmp	r3, #64	@ 0x40
 80012fe:	d90c      	bls.n	800131a <HAL_TIM_PeriodElapsedCallback+0x24a>
 8001300:	4b1f      	ldr	r3, [pc, #124]	@ (8001380 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	2b54      	cmp	r3, #84	@ 0x54
 8001306:	d808      	bhi.n	800131a <HAL_TIM_PeriodElapsedCallback+0x24a>
                ILI9341_DrawImageAt((const uint8_t*)_65, 20, 50, 30, 60);                                    // Battery icon
 8001308:	233c      	movs	r3, #60	@ 0x3c
 800130a:	9300      	str	r3, [sp, #0]
 800130c:	231e      	movs	r3, #30
 800130e:	2232      	movs	r2, #50	@ 0x32
 8001310:	2114      	movs	r1, #20
 8001312:	4824      	ldr	r0, [pc, #144]	@ (80013a4 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8001314:	f7ff fa2c 	bl	8000770 <ILI9341_DrawImageAt>
 8001318:	e054      	b.n	80013c4 <HAL_TIM_PeriodElapsedCallback+0x2f4>
            }
            else if(soc_rc >= 85 && soc_rc < 100){
 800131a:	4b19      	ldr	r3, [pc, #100]	@ (8001380 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	2b54      	cmp	r3, #84	@ 0x54
 8001320:	d944      	bls.n	80013ac <HAL_TIM_PeriodElapsedCallback+0x2dc>
 8001322:	4b17      	ldr	r3, [pc, #92]	@ (8001380 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	2b63      	cmp	r3, #99	@ 0x63
 8001328:	d840      	bhi.n	80013ac <HAL_TIM_PeriodElapsedCallback+0x2dc>
                ILI9341_DrawImageAt((const uint8_t*)_85, 20, 50, 30, 60);                                    // Battery icon
 800132a:	233c      	movs	r3, #60	@ 0x3c
 800132c:	9300      	str	r3, [sp, #0]
 800132e:	231e      	movs	r3, #30
 8001330:	2232      	movs	r2, #50	@ 0x32
 8001332:	2114      	movs	r1, #20
 8001334:	481c      	ldr	r0, [pc, #112]	@ (80013a8 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8001336:	f7ff fa1b 	bl	8000770 <ILI9341_DrawImageAt>
 800133a:	e043      	b.n	80013c4 <HAL_TIM_PeriodElapsedCallback+0x2f4>
 800133c:	200002a8 	.word	0x200002a8
 8001340:	200002a7 	.word	0x200002a7
 8001344:	200002a6 	.word	0x200002a6
 8001348:	08006324 	.word	0x08006324
 800134c:	200002b4 	.word	0x200002b4
 8001350:	08006d68 	.word	0x08006d68
 8001354:	20000084 	.word	0x20000084
 8001358:	40533333 	.word	0x40533333
 800135c:	45800000 	.word	0x45800000
 8001360:	200002b0 	.word	0x200002b0
 8001364:	3fd33333 	.word	0x3fd33333
 8001368:	3dcccccd 	.word	0x3dcccccd
 800136c:	200002ac 	.word	0x200002ac
 8001370:	3991a2b4 	.word	0x3991a2b4
 8001374:	20000004 	.word	0x20000004
 8001378:	40200000 	.word	0x40200000
 800137c:	42c80000 	.word	0x42c80000
 8001380:	200002aa 	.word	0x200002aa
 8001384:	20000008 	.word	0x20000008
 8001388:	08006404 	.word	0x08006404
 800138c:	200002c4 	.word	0x200002c4
 8001390:	08006330 	.word	0x08006330
 8001394:	0800ed9c 	.word	0x0800ed9c
 8001398:	0800a74c 	.word	0x0800a74c
 800139c:	0800b55c 	.word	0x0800b55c
 80013a0:	0800c36c 	.word	0x0800c36c
 80013a4:	0800d17c 	.word	0x0800d17c
 80013a8:	0800df8c 	.word	0x0800df8c
            }
            else if(soc_rc >= 100){
 80013ac:	4b4d      	ldr	r3, [pc, #308]	@ (80014e4 <HAL_TIM_PeriodElapsedCallback+0x414>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	2b63      	cmp	r3, #99	@ 0x63
 80013b2:	d907      	bls.n	80013c4 <HAL_TIM_PeriodElapsedCallback+0x2f4>
                ILI9341_DrawImageAt((const uint8_t*)_100, 20, 50, 30, 60);                                   // Battery icon
 80013b4:	233c      	movs	r3, #60	@ 0x3c
 80013b6:	9300      	str	r3, [sp, #0]
 80013b8:	231e      	movs	r3, #30
 80013ba:	2232      	movs	r2, #50	@ 0x32
 80013bc:	2114      	movs	r1, #20
 80013be:	484a      	ldr	r0, [pc, #296]	@ (80014e8 <HAL_TIM_PeriodElapsedCallback+0x418>)
 80013c0:	f7ff f9d6 	bl	8000770 <ILI9341_DrawImageAt>
            }

        // Update Jokey SOC display if changed
        if(soc_joky != soc_joky_temp)
 80013c4:	4b49      	ldr	r3, [pc, #292]	@ (80014ec <HAL_TIM_PeriodElapsedCallback+0x41c>)
 80013c6:	781a      	ldrb	r2, [r3, #0]
 80013c8:	4b49      	ldr	r3, [pc, #292]	@ (80014f0 <HAL_TIM_PeriodElapsedCallback+0x420>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	429a      	cmp	r2, r3
 80013ce:	f000 8085 	beq.w	80014dc <HAL_TIM_PeriodElapsedCallback+0x40c>
        {
          soc_joky_temp = soc_joky;
 80013d2:	4b46      	ldr	r3, [pc, #280]	@ (80014ec <HAL_TIM_PeriodElapsedCallback+0x41c>)
 80013d4:	781a      	ldrb	r2, [r3, #0]
 80013d6:	4b46      	ldr	r3, [pc, #280]	@ (80014f0 <HAL_TIM_PeriodElapsedCallback+0x420>)
 80013d8:	701a      	strb	r2, [r3, #0]
            // sprintf(soc_joky_text, "%d", soc_joky);
            sprintf(soc_joky_text, "%d%%", soc_joky);
 80013da:	4b44      	ldr	r3, [pc, #272]	@ (80014ec <HAL_TIM_PeriodElapsedCallback+0x41c>)
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	461a      	mov	r2, r3
 80013e0:	4944      	ldr	r1, [pc, #272]	@ (80014f4 <HAL_TIM_PeriodElapsedCallback+0x424>)
 80013e2:	4845      	ldr	r0, [pc, #276]	@ (80014f8 <HAL_TIM_PeriodElapsedCallback+0x428>)
 80013e4:	f004 faee 	bl	80059c4 <siprintf>
            ILI9341_DrawText((const char*)soc_joky_text, FONT3, 180 ,100, WHITE, BLACK);
 80013e8:	2300      	movs	r3, #0
 80013ea:	9301      	str	r3, [sp, #4]
 80013ec:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80013f0:	9300      	str	r3, [sp, #0]
 80013f2:	2364      	movs	r3, #100	@ 0x64
 80013f4:	22b4      	movs	r2, #180	@ 0xb4
 80013f6:	4941      	ldr	r1, [pc, #260]	@ (80014fc <HAL_TIM_PeriodElapsedCallback+0x42c>)
 80013f8:	483f      	ldr	r0, [pc, #252]	@ (80014f8 <HAL_TIM_PeriodElapsedCallback+0x428>)
 80013fa:	f7ff f96f 	bl	80006dc <ILI9341_DrawText>
            //<<==================================================================>>//
            if(soc_joky < 10){
 80013fe:	4b3b      	ldr	r3, [pc, #236]	@ (80014ec <HAL_TIM_PeriodElapsedCallback+0x41c>)
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	2b09      	cmp	r3, #9
 8001404:	d808      	bhi.n	8001418 <HAL_TIM_PeriodElapsedCallback+0x348>

                ILI9341_DrawImageAt((const uint8_t*)_less10, 20, 50, 30, 60);                                    // Battery icon
 8001406:	233c      	movs	r3, #60	@ 0x3c
 8001408:	9300      	str	r3, [sp, #0]
 800140a:	231e      	movs	r3, #30
 800140c:	2232      	movs	r2, #50	@ 0x32
 800140e:	2114      	movs	r1, #20
 8001410:	483b      	ldr	r0, [pc, #236]	@ (8001500 <HAL_TIM_PeriodElapsedCallback+0x430>)
 8001412:	f7ff f9ad 	bl	8000770 <ILI9341_DrawImageAt>
            }
            
        }
    }
}
}
 8001416:	e061      	b.n	80014dc <HAL_TIM_PeriodElapsedCallback+0x40c>
            else if(soc_joky >= 20 && soc_joky < 35){
 8001418:	4b34      	ldr	r3, [pc, #208]	@ (80014ec <HAL_TIM_PeriodElapsedCallback+0x41c>)
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	2b13      	cmp	r3, #19
 800141e:	d90c      	bls.n	800143a <HAL_TIM_PeriodElapsedCallback+0x36a>
 8001420:	4b32      	ldr	r3, [pc, #200]	@ (80014ec <HAL_TIM_PeriodElapsedCallback+0x41c>)
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	2b22      	cmp	r3, #34	@ 0x22
 8001426:	d808      	bhi.n	800143a <HAL_TIM_PeriodElapsedCallback+0x36a>
                ILI9341_DrawImageAt((const uint8_t*)_20, 20, 50, 30, 60);                                    // Battery icon
 8001428:	233c      	movs	r3, #60	@ 0x3c
 800142a:	9300      	str	r3, [sp, #0]
 800142c:	231e      	movs	r3, #30
 800142e:	2232      	movs	r2, #50	@ 0x32
 8001430:	2114      	movs	r1, #20
 8001432:	4834      	ldr	r0, [pc, #208]	@ (8001504 <HAL_TIM_PeriodElapsedCallback+0x434>)
 8001434:	f7ff f99c 	bl	8000770 <ILI9341_DrawImageAt>
 8001438:	e050      	b.n	80014dc <HAL_TIM_PeriodElapsedCallback+0x40c>
            else if(soc_joky >= 35 && soc_joky < 50){
 800143a:	4b2c      	ldr	r3, [pc, #176]	@ (80014ec <HAL_TIM_PeriodElapsedCallback+0x41c>)
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	2b22      	cmp	r3, #34	@ 0x22
 8001440:	d90c      	bls.n	800145c <HAL_TIM_PeriodElapsedCallback+0x38c>
 8001442:	4b2a      	ldr	r3, [pc, #168]	@ (80014ec <HAL_TIM_PeriodElapsedCallback+0x41c>)
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	2b31      	cmp	r3, #49	@ 0x31
 8001448:	d808      	bhi.n	800145c <HAL_TIM_PeriodElapsedCallback+0x38c>
                ILI9341_DrawImageAt((const uint8_t*)_35, 20, 50, 30, 60);                                    // Battery icon
 800144a:	233c      	movs	r3, #60	@ 0x3c
 800144c:	9300      	str	r3, [sp, #0]
 800144e:	231e      	movs	r3, #30
 8001450:	2232      	movs	r2, #50	@ 0x32
 8001452:	2114      	movs	r1, #20
 8001454:	482c      	ldr	r0, [pc, #176]	@ (8001508 <HAL_TIM_PeriodElapsedCallback+0x438>)
 8001456:	f7ff f98b 	bl	8000770 <ILI9341_DrawImageAt>
 800145a:	e03f      	b.n	80014dc <HAL_TIM_PeriodElapsedCallback+0x40c>
            else if(soc_joky >= 50 && soc_joky < 65){
 800145c:	4b23      	ldr	r3, [pc, #140]	@ (80014ec <HAL_TIM_PeriodElapsedCallback+0x41c>)
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	2b31      	cmp	r3, #49	@ 0x31
 8001462:	d90c      	bls.n	800147e <HAL_TIM_PeriodElapsedCallback+0x3ae>
 8001464:	4b21      	ldr	r3, [pc, #132]	@ (80014ec <HAL_TIM_PeriodElapsedCallback+0x41c>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	2b40      	cmp	r3, #64	@ 0x40
 800146a:	d808      	bhi.n	800147e <HAL_TIM_PeriodElapsedCallback+0x3ae>
                ILI9341_DrawImageAt((const uint8_t*)_50, 20, 50, 30, 60);                                    // Battery icon
 800146c:	233c      	movs	r3, #60	@ 0x3c
 800146e:	9300      	str	r3, [sp, #0]
 8001470:	231e      	movs	r3, #30
 8001472:	2232      	movs	r2, #50	@ 0x32
 8001474:	2114      	movs	r1, #20
 8001476:	4825      	ldr	r0, [pc, #148]	@ (800150c <HAL_TIM_PeriodElapsedCallback+0x43c>)
 8001478:	f7ff f97a 	bl	8000770 <ILI9341_DrawImageAt>
 800147c:	e02e      	b.n	80014dc <HAL_TIM_PeriodElapsedCallback+0x40c>
            else if(soc_joky >= 65 && soc_joky < 85){
 800147e:	4b1b      	ldr	r3, [pc, #108]	@ (80014ec <HAL_TIM_PeriodElapsedCallback+0x41c>)
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	2b40      	cmp	r3, #64	@ 0x40
 8001484:	d90c      	bls.n	80014a0 <HAL_TIM_PeriodElapsedCallback+0x3d0>
 8001486:	4b19      	ldr	r3, [pc, #100]	@ (80014ec <HAL_TIM_PeriodElapsedCallback+0x41c>)
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	2b54      	cmp	r3, #84	@ 0x54
 800148c:	d808      	bhi.n	80014a0 <HAL_TIM_PeriodElapsedCallback+0x3d0>
                ILI9341_DrawImageAt((const uint8_t*)_65, 20, 50, 30, 60);                                    // Battery icon
 800148e:	233c      	movs	r3, #60	@ 0x3c
 8001490:	9300      	str	r3, [sp, #0]
 8001492:	231e      	movs	r3, #30
 8001494:	2232      	movs	r2, #50	@ 0x32
 8001496:	2114      	movs	r1, #20
 8001498:	481d      	ldr	r0, [pc, #116]	@ (8001510 <HAL_TIM_PeriodElapsedCallback+0x440>)
 800149a:	f7ff f969 	bl	8000770 <ILI9341_DrawImageAt>
 800149e:	e01d      	b.n	80014dc <HAL_TIM_PeriodElapsedCallback+0x40c>
            else if(soc_joky >= 85 && soc_joky < 100){
 80014a0:	4b12      	ldr	r3, [pc, #72]	@ (80014ec <HAL_TIM_PeriodElapsedCallback+0x41c>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	2b54      	cmp	r3, #84	@ 0x54
 80014a6:	d90c      	bls.n	80014c2 <HAL_TIM_PeriodElapsedCallback+0x3f2>
 80014a8:	4b10      	ldr	r3, [pc, #64]	@ (80014ec <HAL_TIM_PeriodElapsedCallback+0x41c>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	2b63      	cmp	r3, #99	@ 0x63
 80014ae:	d808      	bhi.n	80014c2 <HAL_TIM_PeriodElapsedCallback+0x3f2>
                ILI9341_DrawImageAt((const uint8_t*)_85, 20, 50, 30, 60);                                    // Battery icon
 80014b0:	233c      	movs	r3, #60	@ 0x3c
 80014b2:	9300      	str	r3, [sp, #0]
 80014b4:	231e      	movs	r3, #30
 80014b6:	2232      	movs	r2, #50	@ 0x32
 80014b8:	2114      	movs	r1, #20
 80014ba:	4816      	ldr	r0, [pc, #88]	@ (8001514 <HAL_TIM_PeriodElapsedCallback+0x444>)
 80014bc:	f7ff f958 	bl	8000770 <ILI9341_DrawImageAt>
 80014c0:	e00c      	b.n	80014dc <HAL_TIM_PeriodElapsedCallback+0x40c>
            else if(soc_joky >= 100){
 80014c2:	4b0a      	ldr	r3, [pc, #40]	@ (80014ec <HAL_TIM_PeriodElapsedCallback+0x41c>)
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	2b63      	cmp	r3, #99	@ 0x63
 80014c8:	d908      	bls.n	80014dc <HAL_TIM_PeriodElapsedCallback+0x40c>
                ILI9341_DrawImageAt((const uint8_t*)_100, 20, 50, 30, 60);                                   // Battery icon
 80014ca:	233c      	movs	r3, #60	@ 0x3c
 80014cc:	9300      	str	r3, [sp, #0]
 80014ce:	231e      	movs	r3, #30
 80014d0:	2232      	movs	r2, #50	@ 0x32
 80014d2:	2114      	movs	r1, #20
 80014d4:	4804      	ldr	r0, [pc, #16]	@ (80014e8 <HAL_TIM_PeriodElapsedCallback+0x418>)
 80014d6:	f7ff f94b 	bl	8000770 <ILI9341_DrawImageAt>
}
 80014da:	e7ff      	b.n	80014dc <HAL_TIM_PeriodElapsedCallback+0x40c>
 80014dc:	bf00      	nop
 80014de:	3710      	adds	r7, #16
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	200002aa 	.word	0x200002aa
 80014e8:	0800993c 	.word	0x0800993c
 80014ec:	200002a9 	.word	0x200002a9
 80014f0:	20000009 	.word	0x20000009
 80014f4:	08006330 	.word	0x08006330
 80014f8:	200002c0 	.word	0x200002c0
 80014fc:	08006404 	.word	0x08006404
 8001500:	0800ed9c 	.word	0x0800ed9c
 8001504:	0800a74c 	.word	0x0800a74c
 8001508:	0800b55c 	.word	0x0800b55c
 800150c:	0800c36c 	.word	0x0800c36c
 8001510:	0800d17c 	.word	0x0800d17c
 8001514:	0800df8c 	.word	0x0800df8c

08001518 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800151e:	f000 fe5b 	bl	80021d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001522:	f000 f8d1 	bl	80016c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001526:	f000 fad5 	bl	8001ad4 <MX_GPIO_Init>
  MX_DMA_Init();
 800152a:	f000 fab3 	bl	8001a94 <MX_DMA_Init>
  MX_SPI1_Init();
 800152e:	f000 f9d9 	bl	80018e4 <MX_SPI1_Init>
  MX_TIM2_Init();
 8001532:	f000 fa0d 	bl	8001950 <MX_TIM2_Init>
  MX_UART5_Init();
 8001536:	f000 fa59 	bl	80019ec <MX_UART5_Init>
  MX_USART1_UART_Init();
 800153a:	f000 fa81 	bl	8001a40 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 800153e:	f000 f92d 	bl	800179c <MX_ADC1_Init>
  MX_ADC2_Init();
 8001542:	f000 f97d 	bl	8001840 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
      ILI9341_Init();
 8001546:	f7ff fa85 	bl	8000a54 <ILI9341_Init>
      HAL_Delay(100);
 800154a:	2064      	movs	r0, #100	@ 0x64
 800154c:	f000 feb6 	bl	80022bc <HAL_Delay>
    Display_LCD_UI();
 8001550:	f000 f844 	bl	80015dc <Display_LCD_UI>
      HAL_TIM_Base_Start_IT(&htim2); // Start TIM2 interrupts
 8001554:	481f      	ldr	r0, [pc, #124]	@ (80015d4 <main+0xbc>)
 8001556:	f003 fa09 	bl	800496c <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */
  uint32_t cont_count=0;
 800155a:	2300      	movs	r3, #0
 800155c:	607b      	str	r3, [r7, #4]
  {

	//code in background the lora and controllers in the poll mode

     /* USER CODE END WHILE */
	  if((!HAL_GPIO_ReadPin(CONT_GPIO_Port, CONT_Pin)) ||(!HAL_GPIO_ReadPin(DISC_GPIO_Port, DISC_Pin)) ){
 800155e:	2101      	movs	r1, #1
 8001560:	481d      	ldr	r0, [pc, #116]	@ (80015d8 <main+0xc0>)
 8001562:	f002 f91f 	bl	80037a4 <HAL_GPIO_ReadPin>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d006      	beq.n	800157a <main+0x62>
 800156c:	2102      	movs	r1, #2
 800156e:	481a      	ldr	r0, [pc, #104]	@ (80015d8 <main+0xc0>)
 8001570:	f002 f918 	bl	80037a4 <HAL_GPIO_ReadPin>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d1f1      	bne.n	800155e <main+0x46>
		  if(!HAL_GPIO_ReadPin(CONT_GPIO_Port, CONT_Pin)){
 800157a:	2101      	movs	r1, #1
 800157c:	4816      	ldr	r0, [pc, #88]	@ (80015d8 <main+0xc0>)
 800157e:	f002 f911 	bl	80037a4 <HAL_GPIO_ReadPin>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d116      	bne.n	80015b6 <main+0x9e>
			  if(cont_count%2==0){
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	f003 0301 	and.w	r3, r3, #1
 800158e:	2b00      	cmp	r3, #0
 8001590:	d107      	bne.n	80015a2 <main+0x8a>
			  lora_send_char((uint8_t)'c');
 8001592:	2063      	movs	r0, #99	@ 0x63
 8001594:	f000 fb4e 	bl	8001c34 <lora_send_char>
			  HAL_Delay(1000);}
 8001598:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800159c:	f000 fe8e 	bl	80022bc <HAL_Delay>
 80015a0:	e006      	b.n	80015b0 <main+0x98>
			  else {
				  lora_send_char((uint8_t)'0');
 80015a2:	2030      	movs	r0, #48	@ 0x30
 80015a4:	f000 fb46 	bl	8001c34 <lora_send_char>
				  HAL_Delay(1000);
 80015a8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80015ac:	f000 fe86 	bl	80022bc <HAL_Delay>
			  }
			  cont_count++;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	3301      	adds	r3, #1
 80015b4:	607b      	str	r3, [r7, #4]

		  }
		  if(!HAL_GPIO_ReadPin(DISC_GPIO_Port, DISC_Pin)){
 80015b6:	2102      	movs	r1, #2
 80015b8:	4807      	ldr	r0, [pc, #28]	@ (80015d8 <main+0xc0>)
 80015ba:	f002 f8f3 	bl	80037a4 <HAL_GPIO_ReadPin>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d1cc      	bne.n	800155e <main+0x46>
			  lora_send_char((uint8_t)'d');
 80015c4:	2064      	movs	r0, #100	@ 0x64
 80015c6:	f000 fb35 	bl	8001c34 <lora_send_char>
			  HAL_Delay(1000);
 80015ca:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80015ce:	f000 fe75 	bl	80022bc <HAL_Delay>
	  if((!HAL_GPIO_ReadPin(CONT_GPIO_Port, CONT_Pin)) ||(!HAL_GPIO_ReadPin(DISC_GPIO_Port, DISC_Pin)) ){
 80015d2:	e7c4      	b.n	800155e <main+0x46>
 80015d4:	200001cc 	.word	0x200001cc
 80015d8:	40020800 	.word	0x40020800

080015dc <Display_LCD_UI>:
  }
  /* USER CODE END 3 */
}

void Display_LCD_UI(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af02      	add	r7, sp, #8
    // Clear screen
    ILI9341_FillScreen(BLACK);
 80015e2:	2000      	movs	r0, #0
 80015e4:	f7ff fc2e 	bl	8000e44 <ILI9341_FillScreen>

    // === TOP BAR ===
    ILI9341_DrawText("AMER 1", FONT3, 10, 10, RED, BLACK);                   // Top-left code
 80015e8:	2300      	movs	r3, #0
 80015ea:	9301      	str	r3, [sp, #4]
 80015ec:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80015f0:	9300      	str	r3, [sp, #0]
 80015f2:	230a      	movs	r3, #10
 80015f4:	220a      	movs	r2, #10
 80015f6:	492a      	ldr	r1, [pc, #168]	@ (80016a0 <Display_LCD_UI+0xc4>)
 80015f8:	482a      	ldr	r0, [pc, #168]	@ (80016a4 <Display_LCD_UI+0xc8>)
 80015fa:	f7ff f86f 	bl	80006dc <ILI9341_DrawText>
    ILI9341_DrawImageAt((const uint8_t*)_4, 210, 10, 20, 20);                                      // Top-right signal icon
 80015fe:	2314      	movs	r3, #20
 8001600:	9300      	str	r3, [sp, #0]
 8001602:	2314      	movs	r3, #20
 8001604:	220a      	movs	r2, #10
 8001606:	21d2      	movs	r1, #210	@ 0xd2
 8001608:	4827      	ldr	r0, [pc, #156]	@ (80016a8 <Display_LCD_UI+0xcc>)
 800160a:	f7ff f8b1 	bl	8000770 <ILI9341_DrawImageAt>

    // === BATTERY 1 (Left) ===
    ILI9341_DrawImageAt((const uint8_t*)_less10, 20, 50, 30, 60);                                    // Battery icon
 800160e:	233c      	movs	r3, #60	@ 0x3c
 8001610:	9300      	str	r3, [sp, #0]
 8001612:	231e      	movs	r3, #30
 8001614:	2232      	movs	r2, #50	@ 0x32
 8001616:	2114      	movs	r1, #20
 8001618:	4824      	ldr	r0, [pc, #144]	@ (80016ac <Display_LCD_UI+0xd0>)
 800161a:	f7ff f8a9 	bl	8000770 <ILI9341_DrawImageAt>
    ILI9341_DrawText("100%", FONT4, 70, 70, WHITE, BLACK);                 // Battery percentage
 800161e:	2300      	movs	r3, #0
 8001620:	9301      	str	r3, [sp, #4]
 8001622:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001626:	9300      	str	r3, [sp, #0]
 8001628:	2346      	movs	r3, #70	@ 0x46
 800162a:	2246      	movs	r2, #70	@ 0x46
 800162c:	4920      	ldr	r1, [pc, #128]	@ (80016b0 <Display_LCD_UI+0xd4>)
 800162e:	4821      	ldr	r0, [pc, #132]	@ (80016b4 <Display_LCD_UI+0xd8>)
 8001630:	f7ff f854 	bl	80006dc <ILI9341_DrawText>
//    ILI9341_DrawText("SOC_RC", FONT3, 20, 30, WHITE, BLACK);             // Device name

    // === BATTERY 2 (Right) ===
    ILI9341_DrawImageAt((const uint8_t*)_85, 140, 50, 30, 60);                                   // Battery icon
 8001634:	233c      	movs	r3, #60	@ 0x3c
 8001636:	9300      	str	r3, [sp, #0]
 8001638:	231e      	movs	r3, #30
 800163a:	2232      	movs	r2, #50	@ 0x32
 800163c:	218c      	movs	r1, #140	@ 0x8c
 800163e:	481e      	ldr	r0, [pc, #120]	@ (80016b8 <Display_LCD_UI+0xdc>)
 8001640:	f7ff f896 	bl	8000770 <ILI9341_DrawImageAt>
    ILI9341_DrawText("100%", FONT4, 190, 70, WHITE, BLACK);                // Battery percentage
 8001644:	2300      	movs	r3, #0
 8001646:	9301      	str	r3, [sp, #4]
 8001648:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800164c:	9300      	str	r3, [sp, #0]
 800164e:	2346      	movs	r3, #70	@ 0x46
 8001650:	22be      	movs	r2, #190	@ 0xbe
 8001652:	4917      	ldr	r1, [pc, #92]	@ (80016b0 <Display_LCD_UI+0xd4>)
 8001654:	4817      	ldr	r0, [pc, #92]	@ (80016b4 <Display_LCD_UI+0xd8>)
 8001656:	f7ff f841 	bl	80006dc <ILI9341_DrawText>
//    ILI9341_DrawHLine(0, 221, 240, WHITE);                                          // Horizontal line
//    ILI9341_DrawHLine(0, 222, 240, WHITE);                                          // Horizontal line
//    ILI9341_DrawHLine(0, 222, 240, WHITE);                                          // Horizontal line

    // === STOPWATCH AREA ===
    ILI9341_DrawText("STOP-WATCH", FONT3, 75, 260, WHITE, BLACK);         // Label
 800165a:	2300      	movs	r3, #0
 800165c:	9301      	str	r3, [sp, #4]
 800165e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001662:	9300      	str	r3, [sp, #0]
 8001664:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8001668:	224b      	movs	r2, #75	@ 0x4b
 800166a:	490d      	ldr	r1, [pc, #52]	@ (80016a0 <Display_LCD_UI+0xc4>)
 800166c:	4813      	ldr	r0, [pc, #76]	@ (80016bc <Display_LCD_UI+0xe0>)
 800166e:	f7ff f835 	bl	80006dc <ILI9341_DrawText>
    ILI9341_DrawText("00:00", FONT4, 100, 280, WHITE, BLACK);              // Timer text
 8001672:	2300      	movs	r3, #0
 8001674:	9301      	str	r3, [sp, #4]
 8001676:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800167a:	9300      	str	r3, [sp, #0]
 800167c:	f44f 738c 	mov.w	r3, #280	@ 0x118
 8001680:	2264      	movs	r2, #100	@ 0x64
 8001682:	490b      	ldr	r1, [pc, #44]	@ (80016b0 <Display_LCD_UI+0xd4>)
 8001684:	480e      	ldr	r0, [pc, #56]	@ (80016c0 <Display_LCD_UI+0xe4>)
 8001686:	f7ff f829 	bl	80006dc <ILI9341_DrawText>
    ILI9341_DrawImageAt((const uint8_t*)stopwatch, 95, 180, 50, 60);                                   // Stopwatch icon
 800168a:	233c      	movs	r3, #60	@ 0x3c
 800168c:	9300      	str	r3, [sp, #0]
 800168e:	2332      	movs	r3, #50	@ 0x32
 8001690:	22b4      	movs	r2, #180	@ 0xb4
 8001692:	215f      	movs	r1, #95	@ 0x5f
 8001694:	480b      	ldr	r0, [pc, #44]	@ (80016c4 <Display_LCD_UI+0xe8>)
 8001696:	f7ff f86b 	bl	8000770 <ILI9341_DrawImageAt>

}
 800169a:	bf00      	nop
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	08006404 	.word	0x08006404
 80016a4:	08006338 	.word	0x08006338
 80016a8:	0800961c 	.word	0x0800961c
 80016ac:	0800ed9c 	.word	0x0800ed9c
 80016b0:	08006d68 	.word	0x08006d68
 80016b4:	08006340 	.word	0x08006340
 80016b8:	0800df8c 	.word	0x0800df8c
 80016bc:	08006348 	.word	0x08006348
 80016c0:	0800631c 	.word	0x0800631c
 80016c4:	08007eac 	.word	0x08007eac

080016c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b094      	sub	sp, #80	@ 0x50
 80016cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016ce:	f107 0320 	add.w	r3, r7, #32
 80016d2:	2230      	movs	r2, #48	@ 0x30
 80016d4:	2100      	movs	r1, #0
 80016d6:	4618      	mov	r0, r3
 80016d8:	f004 f996 	bl	8005a08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016dc:	f107 030c 	add.w	r3, r7, #12
 80016e0:	2200      	movs	r2, #0
 80016e2:	601a      	str	r2, [r3, #0]
 80016e4:	605a      	str	r2, [r3, #4]
 80016e6:	609a      	str	r2, [r3, #8]
 80016e8:	60da      	str	r2, [r3, #12]
 80016ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016ec:	2300      	movs	r3, #0
 80016ee:	60bb      	str	r3, [r7, #8]
 80016f0:	4b28      	ldr	r3, [pc, #160]	@ (8001794 <SystemClock_Config+0xcc>)
 80016f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016f4:	4a27      	ldr	r2, [pc, #156]	@ (8001794 <SystemClock_Config+0xcc>)
 80016f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016fa:	6413      	str	r3, [r2, #64]	@ 0x40
 80016fc:	4b25      	ldr	r3, [pc, #148]	@ (8001794 <SystemClock_Config+0xcc>)
 80016fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001700:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001704:	60bb      	str	r3, [r7, #8]
 8001706:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001708:	2300      	movs	r3, #0
 800170a:	607b      	str	r3, [r7, #4]
 800170c:	4b22      	ldr	r3, [pc, #136]	@ (8001798 <SystemClock_Config+0xd0>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a21      	ldr	r2, [pc, #132]	@ (8001798 <SystemClock_Config+0xd0>)
 8001712:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001716:	6013      	str	r3, [r2, #0]
 8001718:	4b1f      	ldr	r3, [pc, #124]	@ (8001798 <SystemClock_Config+0xd0>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001720:	607b      	str	r3, [r7, #4]
 8001722:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001724:	2302      	movs	r3, #2
 8001726:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001728:	2301      	movs	r3, #1
 800172a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800172c:	2310      	movs	r3, #16
 800172e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001730:	2302      	movs	r3, #2
 8001732:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001734:	2300      	movs	r3, #0
 8001736:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001738:	2308      	movs	r3, #8
 800173a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800173c:	23a8      	movs	r3, #168	@ 0xa8
 800173e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001740:	2302      	movs	r3, #2
 8001742:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001744:	2304      	movs	r3, #4
 8001746:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001748:	f107 0320 	add.w	r3, r7, #32
 800174c:	4618      	mov	r0, r3
 800174e:	f002 f873 	bl	8003838 <HAL_RCC_OscConfig>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d001      	beq.n	800175c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001758:	f000 fa66 	bl	8001c28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800175c:	230f      	movs	r3, #15
 800175e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001760:	2302      	movs	r3, #2
 8001762:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001764:	2300      	movs	r3, #0
 8001766:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001768:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800176c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800176e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001772:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001774:	f107 030c 	add.w	r3, r7, #12
 8001778:	2105      	movs	r1, #5
 800177a:	4618      	mov	r0, r3
 800177c:	f002 fad4 	bl	8003d28 <HAL_RCC_ClockConfig>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001786:	f000 fa4f 	bl	8001c28 <Error_Handler>
  }
}
 800178a:	bf00      	nop
 800178c:	3750      	adds	r7, #80	@ 0x50
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	40023800 	.word	0x40023800
 8001798:	40007000 	.word	0x40007000

0800179c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b084      	sub	sp, #16
 80017a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80017a2:	463b      	mov	r3, r7
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]
 80017a8:	605a      	str	r2, [r3, #4]
 80017aa:	609a      	str	r2, [r3, #8]
 80017ac:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80017ae:	4b21      	ldr	r3, [pc, #132]	@ (8001834 <MX_ADC1_Init+0x98>)
 80017b0:	4a21      	ldr	r2, [pc, #132]	@ (8001838 <MX_ADC1_Init+0x9c>)
 80017b2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80017b4:	4b1f      	ldr	r3, [pc, #124]	@ (8001834 <MX_ADC1_Init+0x98>)
 80017b6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80017ba:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80017bc:	4b1d      	ldr	r3, [pc, #116]	@ (8001834 <MX_ADC1_Init+0x98>)
 80017be:	2200      	movs	r2, #0
 80017c0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80017c2:	4b1c      	ldr	r3, [pc, #112]	@ (8001834 <MX_ADC1_Init+0x98>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80017c8:	4b1a      	ldr	r3, [pc, #104]	@ (8001834 <MX_ADC1_Init+0x98>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80017ce:	4b19      	ldr	r3, [pc, #100]	@ (8001834 <MX_ADC1_Init+0x98>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80017d6:	4b17      	ldr	r3, [pc, #92]	@ (8001834 <MX_ADC1_Init+0x98>)
 80017d8:	2200      	movs	r2, #0
 80017da:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80017dc:	4b15      	ldr	r3, [pc, #84]	@ (8001834 <MX_ADC1_Init+0x98>)
 80017de:	4a17      	ldr	r2, [pc, #92]	@ (800183c <MX_ADC1_Init+0xa0>)
 80017e0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017e2:	4b14      	ldr	r3, [pc, #80]	@ (8001834 <MX_ADC1_Init+0x98>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80017e8:	4b12      	ldr	r3, [pc, #72]	@ (8001834 <MX_ADC1_Init+0x98>)
 80017ea:	2201      	movs	r2, #1
 80017ec:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80017ee:	4b11      	ldr	r3, [pc, #68]	@ (8001834 <MX_ADC1_Init+0x98>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80017f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001834 <MX_ADC1_Init+0x98>)
 80017f8:	2201      	movs	r2, #1
 80017fa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80017fc:	480d      	ldr	r0, [pc, #52]	@ (8001834 <MX_ADC1_Init+0x98>)
 80017fe:	f000 fd81 	bl	8002304 <HAL_ADC_Init>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d001      	beq.n	800180c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001808:	f000 fa0e 	bl	8001c28 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800180c:	2308      	movs	r3, #8
 800180e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001810:	2301      	movs	r3, #1
 8001812:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001814:	2301      	movs	r3, #1
 8001816:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001818:	463b      	mov	r3, r7
 800181a:	4619      	mov	r1, r3
 800181c:	4805      	ldr	r0, [pc, #20]	@ (8001834 <MX_ADC1_Init+0x98>)
 800181e:	f000 ff53 	bl	80026c8 <HAL_ADC_ConfigChannel>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001828:	f000 f9fe 	bl	8001c28 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800182c:	bf00      	nop
 800182e:	3710      	adds	r7, #16
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	20000084 	.word	0x20000084
 8001838:	40012000 	.word	0x40012000
 800183c:	0f000001 	.word	0x0f000001

08001840 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b084      	sub	sp, #16
 8001844:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001846:	463b      	mov	r3, r7
 8001848:	2200      	movs	r2, #0
 800184a:	601a      	str	r2, [r3, #0]
 800184c:	605a      	str	r2, [r3, #4]
 800184e:	609a      	str	r2, [r3, #8]
 8001850:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001852:	4b21      	ldr	r3, [pc, #132]	@ (80018d8 <MX_ADC2_Init+0x98>)
 8001854:	4a21      	ldr	r2, [pc, #132]	@ (80018dc <MX_ADC2_Init+0x9c>)
 8001856:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001858:	4b1f      	ldr	r3, [pc, #124]	@ (80018d8 <MX_ADC2_Init+0x98>)
 800185a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800185e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001860:	4b1d      	ldr	r3, [pc, #116]	@ (80018d8 <MX_ADC2_Init+0x98>)
 8001862:	2200      	movs	r2, #0
 8001864:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8001866:	4b1c      	ldr	r3, [pc, #112]	@ (80018d8 <MX_ADC2_Init+0x98>)
 8001868:	2200      	movs	r2, #0
 800186a:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800186c:	4b1a      	ldr	r3, [pc, #104]	@ (80018d8 <MX_ADC2_Init+0x98>)
 800186e:	2200      	movs	r2, #0
 8001870:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001872:	4b19      	ldr	r3, [pc, #100]	@ (80018d8 <MX_ADC2_Init+0x98>)
 8001874:	2200      	movs	r2, #0
 8001876:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800187a:	4b17      	ldr	r3, [pc, #92]	@ (80018d8 <MX_ADC2_Init+0x98>)
 800187c:	2200      	movs	r2, #0
 800187e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001880:	4b15      	ldr	r3, [pc, #84]	@ (80018d8 <MX_ADC2_Init+0x98>)
 8001882:	4a17      	ldr	r2, [pc, #92]	@ (80018e0 <MX_ADC2_Init+0xa0>)
 8001884:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001886:	4b14      	ldr	r3, [pc, #80]	@ (80018d8 <MX_ADC2_Init+0x98>)
 8001888:	2200      	movs	r2, #0
 800188a:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800188c:	4b12      	ldr	r3, [pc, #72]	@ (80018d8 <MX_ADC2_Init+0x98>)
 800188e:	2201      	movs	r2, #1
 8001890:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001892:	4b11      	ldr	r3, [pc, #68]	@ (80018d8 <MX_ADC2_Init+0x98>)
 8001894:	2200      	movs	r2, #0
 8001896:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800189a:	4b0f      	ldr	r3, [pc, #60]	@ (80018d8 <MX_ADC2_Init+0x98>)
 800189c:	2201      	movs	r2, #1
 800189e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80018a0:	480d      	ldr	r0, [pc, #52]	@ (80018d8 <MX_ADC2_Init+0x98>)
 80018a2:	f000 fd2f 	bl	8002304 <HAL_ADC_Init>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d001      	beq.n	80018b0 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 80018ac:	f000 f9bc 	bl	8001c28 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80018b0:	2309      	movs	r3, #9
 80018b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80018b4:	2301      	movs	r3, #1
 80018b6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80018b8:	2301      	movs	r3, #1
 80018ba:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80018bc:	463b      	mov	r3, r7
 80018be:	4619      	mov	r1, r3
 80018c0:	4805      	ldr	r0, [pc, #20]	@ (80018d8 <MX_ADC2_Init+0x98>)
 80018c2:	f000 ff01 	bl	80026c8 <HAL_ADC_ConfigChannel>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 80018cc:	f000 f9ac 	bl	8001c28 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80018d0:	bf00      	nop
 80018d2:	3710      	adds	r7, #16
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	200000cc 	.word	0x200000cc
 80018dc:	40012100 	.word	0x40012100
 80018e0:	0f000001 	.word	0x0f000001

080018e4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80018e8:	4b17      	ldr	r3, [pc, #92]	@ (8001948 <MX_SPI1_Init+0x64>)
 80018ea:	4a18      	ldr	r2, [pc, #96]	@ (800194c <MX_SPI1_Init+0x68>)
 80018ec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80018ee:	4b16      	ldr	r3, [pc, #88]	@ (8001948 <MX_SPI1_Init+0x64>)
 80018f0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80018f4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80018f6:	4b14      	ldr	r3, [pc, #80]	@ (8001948 <MX_SPI1_Init+0x64>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80018fc:	4b12      	ldr	r3, [pc, #72]	@ (8001948 <MX_SPI1_Init+0x64>)
 80018fe:	2200      	movs	r2, #0
 8001900:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001902:	4b11      	ldr	r3, [pc, #68]	@ (8001948 <MX_SPI1_Init+0x64>)
 8001904:	2200      	movs	r2, #0
 8001906:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001908:	4b0f      	ldr	r3, [pc, #60]	@ (8001948 <MX_SPI1_Init+0x64>)
 800190a:	2200      	movs	r2, #0
 800190c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800190e:	4b0e      	ldr	r3, [pc, #56]	@ (8001948 <MX_SPI1_Init+0x64>)
 8001910:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001914:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001916:	4b0c      	ldr	r3, [pc, #48]	@ (8001948 <MX_SPI1_Init+0x64>)
 8001918:	2200      	movs	r2, #0
 800191a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800191c:	4b0a      	ldr	r3, [pc, #40]	@ (8001948 <MX_SPI1_Init+0x64>)
 800191e:	2200      	movs	r2, #0
 8001920:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001922:	4b09      	ldr	r3, [pc, #36]	@ (8001948 <MX_SPI1_Init+0x64>)
 8001924:	2200      	movs	r2, #0
 8001926:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001928:	4b07      	ldr	r3, [pc, #28]	@ (8001948 <MX_SPI1_Init+0x64>)
 800192a:	2200      	movs	r2, #0
 800192c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800192e:	4b06      	ldr	r3, [pc, #24]	@ (8001948 <MX_SPI1_Init+0x64>)
 8001930:	220a      	movs	r2, #10
 8001932:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001934:	4804      	ldr	r0, [pc, #16]	@ (8001948 <MX_SPI1_Init+0x64>)
 8001936:	f002 fbd7 	bl	80040e8 <HAL_SPI_Init>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001940:	f000 f972 	bl	8001c28 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001944:	bf00      	nop
 8001946:	bd80      	pop	{r7, pc}
 8001948:	20000114 	.word	0x20000114
 800194c:	40013000 	.word	0x40013000

08001950 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b086      	sub	sp, #24
 8001954:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001956:	f107 0308 	add.w	r3, r7, #8
 800195a:	2200      	movs	r2, #0
 800195c:	601a      	str	r2, [r3, #0]
 800195e:	605a      	str	r2, [r3, #4]
 8001960:	609a      	str	r2, [r3, #8]
 8001962:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001964:	463b      	mov	r3, r7
 8001966:	2200      	movs	r2, #0
 8001968:	601a      	str	r2, [r3, #0]
 800196a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800196c:	4b1e      	ldr	r3, [pc, #120]	@ (80019e8 <MX_TIM2_Init+0x98>)
 800196e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001972:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16800-1;
 8001974:	4b1c      	ldr	r3, [pc, #112]	@ (80019e8 <MX_TIM2_Init+0x98>)
 8001976:	f244 129f 	movw	r2, #16799	@ 0x419f
 800197a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800197c:	4b1a      	ldr	r3, [pc, #104]	@ (80019e8 <MX_TIM2_Init+0x98>)
 800197e:	2200      	movs	r2, #0
 8001980:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8001982:	4b19      	ldr	r3, [pc, #100]	@ (80019e8 <MX_TIM2_Init+0x98>)
 8001984:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001988:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800198a:	4b17      	ldr	r3, [pc, #92]	@ (80019e8 <MX_TIM2_Init+0x98>)
 800198c:	2200      	movs	r2, #0
 800198e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001990:	4b15      	ldr	r3, [pc, #84]	@ (80019e8 <MX_TIM2_Init+0x98>)
 8001992:	2200      	movs	r2, #0
 8001994:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001996:	4814      	ldr	r0, [pc, #80]	@ (80019e8 <MX_TIM2_Init+0x98>)
 8001998:	f002 ff98 	bl	80048cc <HAL_TIM_Base_Init>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80019a2:	f000 f941 	bl	8001c28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019a6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019aa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80019ac:	f107 0308 	add.w	r3, r7, #8
 80019b0:	4619      	mov	r1, r3
 80019b2:	480d      	ldr	r0, [pc, #52]	@ (80019e8 <MX_TIM2_Init+0x98>)
 80019b4:	f003 f93a 	bl	8004c2c <HAL_TIM_ConfigClockSource>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80019be:	f000 f933 	bl	8001c28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019c2:	2300      	movs	r3, #0
 80019c4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019c6:	2300      	movs	r3, #0
 80019c8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019ca:	463b      	mov	r3, r7
 80019cc:	4619      	mov	r1, r3
 80019ce:	4806      	ldr	r0, [pc, #24]	@ (80019e8 <MX_TIM2_Init+0x98>)
 80019d0:	f003 fb5c 	bl	800508c <HAL_TIMEx_MasterConfigSynchronization>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80019da:	f000 f925 	bl	8001c28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80019de:	bf00      	nop
 80019e0:	3718      	adds	r7, #24
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	200001cc 	.word	0x200001cc

080019ec <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80019f0:	4b11      	ldr	r3, [pc, #68]	@ (8001a38 <MX_UART5_Init+0x4c>)
 80019f2:	4a12      	ldr	r2, [pc, #72]	@ (8001a3c <MX_UART5_Init+0x50>)
 80019f4:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 80019f6:	4b10      	ldr	r3, [pc, #64]	@ (8001a38 <MX_UART5_Init+0x4c>)
 80019f8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80019fc:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80019fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001a38 <MX_UART5_Init+0x4c>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001a04:	4b0c      	ldr	r3, [pc, #48]	@ (8001a38 <MX_UART5_Init+0x4c>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001a0a:	4b0b      	ldr	r3, [pc, #44]	@ (8001a38 <MX_UART5_Init+0x4c>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001a10:	4b09      	ldr	r3, [pc, #36]	@ (8001a38 <MX_UART5_Init+0x4c>)
 8001a12:	220c      	movs	r2, #12
 8001a14:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a16:	4b08      	ldr	r3, [pc, #32]	@ (8001a38 <MX_UART5_Init+0x4c>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a1c:	4b06      	ldr	r3, [pc, #24]	@ (8001a38 <MX_UART5_Init+0x4c>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001a22:	4805      	ldr	r0, [pc, #20]	@ (8001a38 <MX_UART5_Init+0x4c>)
 8001a24:	f003 fbc2 	bl	80051ac <HAL_UART_Init>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8001a2e:	f000 f8fb 	bl	8001c28 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001a32:	bf00      	nop
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	20000214 	.word	0x20000214
 8001a3c:	40005000 	.word	0x40005000

08001a40 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a44:	4b11      	ldr	r3, [pc, #68]	@ (8001a8c <MX_USART1_UART_Init+0x4c>)
 8001a46:	4a12      	ldr	r2, [pc, #72]	@ (8001a90 <MX_USART1_UART_Init+0x50>)
 8001a48:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001a4a:	4b10      	ldr	r3, [pc, #64]	@ (8001a8c <MX_USART1_UART_Init+0x4c>)
 8001a4c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001a50:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a52:	4b0e      	ldr	r3, [pc, #56]	@ (8001a8c <MX_USART1_UART_Init+0x4c>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a58:	4b0c      	ldr	r3, [pc, #48]	@ (8001a8c <MX_USART1_UART_Init+0x4c>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a5e:	4b0b      	ldr	r3, [pc, #44]	@ (8001a8c <MX_USART1_UART_Init+0x4c>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a64:	4b09      	ldr	r3, [pc, #36]	@ (8001a8c <MX_USART1_UART_Init+0x4c>)
 8001a66:	220c      	movs	r2, #12
 8001a68:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a6a:	4b08      	ldr	r3, [pc, #32]	@ (8001a8c <MX_USART1_UART_Init+0x4c>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a70:	4b06      	ldr	r3, [pc, #24]	@ (8001a8c <MX_USART1_UART_Init+0x4c>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a76:	4805      	ldr	r0, [pc, #20]	@ (8001a8c <MX_USART1_UART_Init+0x4c>)
 8001a78:	f003 fb98 	bl	80051ac <HAL_UART_Init>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d001      	beq.n	8001a86 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001a82:	f000 f8d1 	bl	8001c28 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001a86:	bf00      	nop
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	2000025c 	.word	0x2000025c
 8001a90:	40011000 	.word	0x40011000

08001a94 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	607b      	str	r3, [r7, #4]
 8001a9e:	4b0c      	ldr	r3, [pc, #48]	@ (8001ad0 <MX_DMA_Init+0x3c>)
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aa2:	4a0b      	ldr	r2, [pc, #44]	@ (8001ad0 <MX_DMA_Init+0x3c>)
 8001aa4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001aa8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aaa:	4b09      	ldr	r3, [pc, #36]	@ (8001ad0 <MX_DMA_Init+0x3c>)
 8001aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ab2:	607b      	str	r3, [r7, #4]
 8001ab4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	2100      	movs	r1, #0
 8001aba:	203b      	movs	r0, #59	@ 0x3b
 8001abc:	f001 f921 	bl	8002d02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001ac0:	203b      	movs	r0, #59	@ 0x3b
 8001ac2:	f001 f93a 	bl	8002d3a <HAL_NVIC_EnableIRQ>

}
 8001ac6:	bf00      	nop
 8001ac8:	3708      	adds	r7, #8
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	40023800 	.word	0x40023800

08001ad4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b08a      	sub	sp, #40	@ 0x28
 8001ad8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ada:	f107 0314 	add.w	r3, r7, #20
 8001ade:	2200      	movs	r2, #0
 8001ae0:	601a      	str	r2, [r3, #0]
 8001ae2:	605a      	str	r2, [r3, #4]
 8001ae4:	609a      	str	r2, [r3, #8]
 8001ae6:	60da      	str	r2, [r3, #12]
 8001ae8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aea:	2300      	movs	r3, #0
 8001aec:	613b      	str	r3, [r7, #16]
 8001aee:	4b4a      	ldr	r3, [pc, #296]	@ (8001c18 <MX_GPIO_Init+0x144>)
 8001af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001af2:	4a49      	ldr	r2, [pc, #292]	@ (8001c18 <MX_GPIO_Init+0x144>)
 8001af4:	f043 0304 	orr.w	r3, r3, #4
 8001af8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001afa:	4b47      	ldr	r3, [pc, #284]	@ (8001c18 <MX_GPIO_Init+0x144>)
 8001afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001afe:	f003 0304 	and.w	r3, r3, #4
 8001b02:	613b      	str	r3, [r7, #16]
 8001b04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b06:	2300      	movs	r3, #0
 8001b08:	60fb      	str	r3, [r7, #12]
 8001b0a:	4b43      	ldr	r3, [pc, #268]	@ (8001c18 <MX_GPIO_Init+0x144>)
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b0e:	4a42      	ldr	r2, [pc, #264]	@ (8001c18 <MX_GPIO_Init+0x144>)
 8001b10:	f043 0301 	orr.w	r3, r3, #1
 8001b14:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b16:	4b40      	ldr	r3, [pc, #256]	@ (8001c18 <MX_GPIO_Init+0x144>)
 8001b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b1a:	f003 0301 	and.w	r3, r3, #1
 8001b1e:	60fb      	str	r3, [r7, #12]
 8001b20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b22:	2300      	movs	r3, #0
 8001b24:	60bb      	str	r3, [r7, #8]
 8001b26:	4b3c      	ldr	r3, [pc, #240]	@ (8001c18 <MX_GPIO_Init+0x144>)
 8001b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b2a:	4a3b      	ldr	r2, [pc, #236]	@ (8001c18 <MX_GPIO_Init+0x144>)
 8001b2c:	f043 0302 	orr.w	r3, r3, #2
 8001b30:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b32:	4b39      	ldr	r3, [pc, #228]	@ (8001c18 <MX_GPIO_Init+0x144>)
 8001b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b36:	f003 0302 	and.w	r3, r3, #2
 8001b3a:	60bb      	str	r3, [r7, #8]
 8001b3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b3e:	2300      	movs	r3, #0
 8001b40:	607b      	str	r3, [r7, #4]
 8001b42:	4b35      	ldr	r3, [pc, #212]	@ (8001c18 <MX_GPIO_Init+0x144>)
 8001b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b46:	4a34      	ldr	r2, [pc, #208]	@ (8001c18 <MX_GPIO_Init+0x144>)
 8001b48:	f043 0308 	orr.w	r3, r3, #8
 8001b4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b4e:	4b32      	ldr	r3, [pc, #200]	@ (8001c18 <MX_GPIO_Init+0x144>)
 8001b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b52:	f003 0308 	and.w	r3, r3, #8
 8001b56:	607b      	str	r3, [r7, #4]
 8001b58:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_DC_Pin|LCD_RST_Pin, GPIO_PIN_SET);
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	2130      	movs	r1, #48	@ 0x30
 8001b5e:	482f      	ldr	r0, [pc, #188]	@ (8001c1c <MX_GPIO_Init+0x148>)
 8001b60:	f001 fe38 	bl	80037d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8001b64:	2201      	movs	r2, #1
 8001b66:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001b6a:	482d      	ldr	r0, [pc, #180]	@ (8001c20 <MX_GPIO_Init+0x14c>)
 8001b6c:	f001 fe32 	bl	80037d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CONT_Pin DISC_Pin */
  GPIO_InitStruct.Pin = CONT_Pin|DISC_Pin;
 8001b70:	2303      	movs	r3, #3
 8001b72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001b74:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001b78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b7e:	f107 0314 	add.w	r3, r7, #20
 8001b82:	4619      	mov	r1, r3
 8001b84:	4825      	ldr	r0, [pc, #148]	@ (8001c1c <MX_GPIO_Init+0x148>)
 8001b86:	f001 fc71 	bl	800346c <HAL_GPIO_Init>

  /*Configure GPIO pin : STOP_WATCH_Pin */
  GPIO_InitStruct.Pin = STOP_WATCH_Pin;
 8001b8a:	2310      	movs	r3, #16
 8001b8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001b8e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001b92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b94:	2301      	movs	r3, #1
 8001b96:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(STOP_WATCH_GPIO_Port, &GPIO_InitStruct);
 8001b98:	f107 0314 	add.w	r3, r7, #20
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	4821      	ldr	r0, [pc, #132]	@ (8001c24 <MX_GPIO_Init+0x150>)
 8001ba0:	f001 fc64 	bl	800346c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DC_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin|LCD_RST_Pin;
 8001ba4:	2330      	movs	r3, #48	@ 0x30
 8001ba6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bac:	2301      	movs	r3, #1
 8001bae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bb0:	2302      	movs	r3, #2
 8001bb2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bb4:	f107 0314 	add.w	r3, r7, #20
 8001bb8:	4619      	mov	r1, r3
 8001bba:	4818      	ldr	r0, [pc, #96]	@ (8001c1c <MX_GPIO_Init+0x148>)
 8001bbc:	f001 fc56 	bl	800346c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_CS_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin;
 8001bc0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001bc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bce:	2302      	movs	r3, #2
 8001bd0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 8001bd2:	f107 0314 	add.w	r3, r7, #20
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	4811      	ldr	r0, [pc, #68]	@ (8001c20 <MX_GPIO_Init+0x14c>)
 8001bda:	f001 fc47 	bl	800346c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001bde:	2200      	movs	r2, #0
 8001be0:	2100      	movs	r1, #0
 8001be2:	2006      	movs	r0, #6
 8001be4:	f001 f88d 	bl	8002d02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001be8:	2006      	movs	r0, #6
 8001bea:	f001 f8a6 	bl	8002d3a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001bee:	2200      	movs	r2, #0
 8001bf0:	2100      	movs	r1, #0
 8001bf2:	2007      	movs	r0, #7
 8001bf4:	f001 f885 	bl	8002d02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001bf8:	2007      	movs	r0, #7
 8001bfa:	f001 f89e 	bl	8002d3a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001bfe:	2200      	movs	r2, #0
 8001c00:	2100      	movs	r1, #0
 8001c02:	200a      	movs	r0, #10
 8001c04:	f001 f87d 	bl	8002d02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001c08:	200a      	movs	r0, #10
 8001c0a:	f001 f896 	bl	8002d3a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001c0e:	bf00      	nop
 8001c10:	3728      	adds	r7, #40	@ 0x28
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	40023800 	.word	0x40023800
 8001c1c:	40020800 	.word	0x40020800
 8001c20:	40020400 	.word	0x40020400
 8001c24:	40020000 	.word	0x40020000

08001c28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c2c:	b672      	cpsid	i
}
 8001c2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c30:	bf00      	nop
 8001c32:	e7fd      	b.n	8001c30 <Error_Handler+0x8>

08001c34 <lora_send_char>:
    char data = 0;
    sscanf(message, "+RCV=%d,%d,%c,%d,%*d", &address, &length, &data, &rssi);
    return (uint8_t)data;
}

void lora_send_char(uint8_t data) {
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b090      	sub	sp, #64	@ 0x40
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	71fb      	strb	r3, [r7, #7]
    char buffer[50] = {0};
 8001c3e:	f107 030c 	add.w	r3, r7, #12
 8001c42:	2232      	movs	r2, #50	@ 0x32
 8001c44:	2100      	movs	r1, #0
 8001c46:	4618      	mov	r0, r3
 8001c48:	f003 fede 	bl	8005a08 <memset>
    sprintf(buffer, "AT+SEND=%d,1,%c\r\n", lora_config.receiver_addr, data);
 8001c4c:	4b0c      	ldr	r3, [pc, #48]	@ (8001c80 <lora_send_char+0x4c>)
 8001c4e:	88db      	ldrh	r3, [r3, #6]
 8001c50:	461a      	mov	r2, r3
 8001c52:	79fb      	ldrb	r3, [r7, #7]
 8001c54:	f107 000c 	add.w	r0, r7, #12
 8001c58:	490a      	ldr	r1, [pc, #40]	@ (8001c84 <lora_send_char+0x50>)
 8001c5a:	f003 feb3 	bl	80059c4 <siprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 100);
 8001c5e:	f107 030c 	add.w	r3, r7, #12
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7fe fab4 	bl	80001d0 <strlen>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	b29a      	uxth	r2, r3
 8001c6c:	f107 010c 	add.w	r1, r7, #12
 8001c70:	2364      	movs	r3, #100	@ 0x64
 8001c72:	4805      	ldr	r0, [pc, #20]	@ (8001c88 <lora_send_char+0x54>)
 8001c74:	f003 faea 	bl	800524c <HAL_UART_Transmit>
}
 8001c78:	bf00      	nop
 8001c7a:	3740      	adds	r7, #64	@ 0x40
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	200002d0 	.word	0x200002d0
 8001c84:	08006374 	.word	0x08006374
 8001c88:	2000025c 	.word	0x2000025c

08001c8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c92:	2300      	movs	r3, #0
 8001c94:	607b      	str	r3, [r7, #4]
 8001c96:	4b10      	ldr	r3, [pc, #64]	@ (8001cd8 <HAL_MspInit+0x4c>)
 8001c98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c9a:	4a0f      	ldr	r2, [pc, #60]	@ (8001cd8 <HAL_MspInit+0x4c>)
 8001c9c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ca0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ca2:	4b0d      	ldr	r3, [pc, #52]	@ (8001cd8 <HAL_MspInit+0x4c>)
 8001ca4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ca6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001caa:	607b      	str	r3, [r7, #4]
 8001cac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cae:	2300      	movs	r3, #0
 8001cb0:	603b      	str	r3, [r7, #0]
 8001cb2:	4b09      	ldr	r3, [pc, #36]	@ (8001cd8 <HAL_MspInit+0x4c>)
 8001cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cb6:	4a08      	ldr	r2, [pc, #32]	@ (8001cd8 <HAL_MspInit+0x4c>)
 8001cb8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cbc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cbe:	4b06      	ldr	r3, [pc, #24]	@ (8001cd8 <HAL_MspInit+0x4c>)
 8001cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cc6:	603b      	str	r3, [r7, #0]
 8001cc8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cca:	bf00      	nop
 8001ccc:	370c      	adds	r7, #12
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	40023800 	.word	0x40023800

08001cdc <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b08c      	sub	sp, #48	@ 0x30
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce4:	f107 031c 	add.w	r3, r7, #28
 8001ce8:	2200      	movs	r2, #0
 8001cea:	601a      	str	r2, [r3, #0]
 8001cec:	605a      	str	r2, [r3, #4]
 8001cee:	609a      	str	r2, [r3, #8]
 8001cf0:	60da      	str	r2, [r3, #12]
 8001cf2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a2e      	ldr	r2, [pc, #184]	@ (8001db4 <HAL_ADC_MspInit+0xd8>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d128      	bne.n	8001d50 <HAL_ADC_MspInit+0x74>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001cfe:	2300      	movs	r3, #0
 8001d00:	61bb      	str	r3, [r7, #24]
 8001d02:	4b2d      	ldr	r3, [pc, #180]	@ (8001db8 <HAL_ADC_MspInit+0xdc>)
 8001d04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d06:	4a2c      	ldr	r2, [pc, #176]	@ (8001db8 <HAL_ADC_MspInit+0xdc>)
 8001d08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d0e:	4b2a      	ldr	r3, [pc, #168]	@ (8001db8 <HAL_ADC_MspInit+0xdc>)
 8001d10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d16:	61bb      	str	r3, [r7, #24]
 8001d18:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	617b      	str	r3, [r7, #20]
 8001d1e:	4b26      	ldr	r3, [pc, #152]	@ (8001db8 <HAL_ADC_MspInit+0xdc>)
 8001d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d22:	4a25      	ldr	r2, [pc, #148]	@ (8001db8 <HAL_ADC_MspInit+0xdc>)
 8001d24:	f043 0302 	orr.w	r3, r3, #2
 8001d28:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d2a:	4b23      	ldr	r3, [pc, #140]	@ (8001db8 <HAL_ADC_MspInit+0xdc>)
 8001d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d2e:	f003 0302 	and.w	r3, r3, #2
 8001d32:	617b      	str	r3, [r7, #20]
 8001d34:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001d36:	2301      	movs	r3, #1
 8001d38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d42:	f107 031c 	add.w	r3, r7, #28
 8001d46:	4619      	mov	r1, r3
 8001d48:	481c      	ldr	r0, [pc, #112]	@ (8001dbc <HAL_ADC_MspInit+0xe0>)
 8001d4a:	f001 fb8f 	bl	800346c <HAL_GPIO_Init>
    /* USER CODE BEGIN ADC2_MspInit 1 */

    /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001d4e:	e02c      	b.n	8001daa <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC2)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a1a      	ldr	r2, [pc, #104]	@ (8001dc0 <HAL_ADC_MspInit+0xe4>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d127      	bne.n	8001daa <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	613b      	str	r3, [r7, #16]
 8001d5e:	4b16      	ldr	r3, [pc, #88]	@ (8001db8 <HAL_ADC_MspInit+0xdc>)
 8001d60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d62:	4a15      	ldr	r2, [pc, #84]	@ (8001db8 <HAL_ADC_MspInit+0xdc>)
 8001d64:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d68:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d6a:	4b13      	ldr	r3, [pc, #76]	@ (8001db8 <HAL_ADC_MspInit+0xdc>)
 8001d6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d6e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001d72:	613b      	str	r3, [r7, #16]
 8001d74:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d76:	2300      	movs	r3, #0
 8001d78:	60fb      	str	r3, [r7, #12]
 8001d7a:	4b0f      	ldr	r3, [pc, #60]	@ (8001db8 <HAL_ADC_MspInit+0xdc>)
 8001d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d7e:	4a0e      	ldr	r2, [pc, #56]	@ (8001db8 <HAL_ADC_MspInit+0xdc>)
 8001d80:	f043 0302 	orr.w	r3, r3, #2
 8001d84:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d86:	4b0c      	ldr	r3, [pc, #48]	@ (8001db8 <HAL_ADC_MspInit+0xdc>)
 8001d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d8a:	f003 0302 	and.w	r3, r3, #2
 8001d8e:	60fb      	str	r3, [r7, #12]
 8001d90:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001d92:	2302      	movs	r3, #2
 8001d94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d96:	2303      	movs	r3, #3
 8001d98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d9e:	f107 031c 	add.w	r3, r7, #28
 8001da2:	4619      	mov	r1, r3
 8001da4:	4805      	ldr	r0, [pc, #20]	@ (8001dbc <HAL_ADC_MspInit+0xe0>)
 8001da6:	f001 fb61 	bl	800346c <HAL_GPIO_Init>
}
 8001daa:	bf00      	nop
 8001dac:	3730      	adds	r7, #48	@ 0x30
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	40012000 	.word	0x40012000
 8001db8:	40023800 	.word	0x40023800
 8001dbc:	40020400 	.word	0x40020400
 8001dc0:	40012100 	.word	0x40012100

08001dc4 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b08a      	sub	sp, #40	@ 0x28
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dcc:	f107 0314 	add.w	r3, r7, #20
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	601a      	str	r2, [r3, #0]
 8001dd4:	605a      	str	r2, [r3, #4]
 8001dd6:	609a      	str	r2, [r3, #8]
 8001dd8:	60da      	str	r2, [r3, #12]
 8001dda:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a30      	ldr	r2, [pc, #192]	@ (8001ea4 <HAL_SPI_MspInit+0xe0>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d159      	bne.n	8001e9a <HAL_SPI_MspInit+0xd6>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001de6:	2300      	movs	r3, #0
 8001de8:	613b      	str	r3, [r7, #16]
 8001dea:	4b2f      	ldr	r3, [pc, #188]	@ (8001ea8 <HAL_SPI_MspInit+0xe4>)
 8001dec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dee:	4a2e      	ldr	r2, [pc, #184]	@ (8001ea8 <HAL_SPI_MspInit+0xe4>)
 8001df0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001df4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001df6:	4b2c      	ldr	r3, [pc, #176]	@ (8001ea8 <HAL_SPI_MspInit+0xe4>)
 8001df8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dfa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001dfe:	613b      	str	r3, [r7, #16]
 8001e00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e02:	2300      	movs	r3, #0
 8001e04:	60fb      	str	r3, [r7, #12]
 8001e06:	4b28      	ldr	r3, [pc, #160]	@ (8001ea8 <HAL_SPI_MspInit+0xe4>)
 8001e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e0a:	4a27      	ldr	r2, [pc, #156]	@ (8001ea8 <HAL_SPI_MspInit+0xe4>)
 8001e0c:	f043 0301 	orr.w	r3, r3, #1
 8001e10:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e12:	4b25      	ldr	r3, [pc, #148]	@ (8001ea8 <HAL_SPI_MspInit+0xe4>)
 8001e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e16:	f003 0301 	and.w	r3, r3, #1
 8001e1a:	60fb      	str	r3, [r7, #12]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001e1e:	23a0      	movs	r3, #160	@ 0xa0
 8001e20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e22:	2302      	movs	r3, #2
 8001e24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e26:	2300      	movs	r3, #0
 8001e28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e2e:	2305      	movs	r3, #5
 8001e30:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e32:	f107 0314 	add.w	r3, r7, #20
 8001e36:	4619      	mov	r1, r3
 8001e38:	481c      	ldr	r0, [pc, #112]	@ (8001eac <HAL_SPI_MspInit+0xe8>)
 8001e3a:	f001 fb17 	bl	800346c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8001e3e:	4b1c      	ldr	r3, [pc, #112]	@ (8001eb0 <HAL_SPI_MspInit+0xec>)
 8001e40:	4a1c      	ldr	r2, [pc, #112]	@ (8001eb4 <HAL_SPI_MspInit+0xf0>)
 8001e42:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8001e44:	4b1a      	ldr	r3, [pc, #104]	@ (8001eb0 <HAL_SPI_MspInit+0xec>)
 8001e46:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001e4a:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e4c:	4b18      	ldr	r3, [pc, #96]	@ (8001eb0 <HAL_SPI_MspInit+0xec>)
 8001e4e:	2240      	movs	r2, #64	@ 0x40
 8001e50:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e52:	4b17      	ldr	r3, [pc, #92]	@ (8001eb0 <HAL_SPI_MspInit+0xec>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001e58:	4b15      	ldr	r3, [pc, #84]	@ (8001eb0 <HAL_SPI_MspInit+0xec>)
 8001e5a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e5e:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e60:	4b13      	ldr	r3, [pc, #76]	@ (8001eb0 <HAL_SPI_MspInit+0xec>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e66:	4b12      	ldr	r3, [pc, #72]	@ (8001eb0 <HAL_SPI_MspInit+0xec>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001e6c:	4b10      	ldr	r3, [pc, #64]	@ (8001eb0 <HAL_SPI_MspInit+0xec>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001e72:	4b0f      	ldr	r3, [pc, #60]	@ (8001eb0 <HAL_SPI_MspInit+0xec>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e78:	4b0d      	ldr	r3, [pc, #52]	@ (8001eb0 <HAL_SPI_MspInit+0xec>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001e7e:	480c      	ldr	r0, [pc, #48]	@ (8001eb0 <HAL_SPI_MspInit+0xec>)
 8001e80:	f000 ff84 	bl	8002d8c <HAL_DMA_Init>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d001      	beq.n	8001e8e <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 8001e8a:	f7ff fecd 	bl	8001c28 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4a07      	ldr	r2, [pc, #28]	@ (8001eb0 <HAL_SPI_MspInit+0xec>)
 8001e92:	649a      	str	r2, [r3, #72]	@ 0x48
 8001e94:	4a06      	ldr	r2, [pc, #24]	@ (8001eb0 <HAL_SPI_MspInit+0xec>)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001e9a:	bf00      	nop
 8001e9c:	3728      	adds	r7, #40	@ 0x28
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	40013000 	.word	0x40013000
 8001ea8:	40023800 	.word	0x40023800
 8001eac:	40020000 	.word	0x40020000
 8001eb0:	2000016c 	.word	0x2000016c
 8001eb4:	40026458 	.word	0x40026458

08001eb8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b084      	sub	sp, #16
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ec8:	d115      	bne.n	8001ef6 <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001eca:	2300      	movs	r3, #0
 8001ecc:	60fb      	str	r3, [r7, #12]
 8001ece:	4b0c      	ldr	r3, [pc, #48]	@ (8001f00 <HAL_TIM_Base_MspInit+0x48>)
 8001ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ed2:	4a0b      	ldr	r2, [pc, #44]	@ (8001f00 <HAL_TIM_Base_MspInit+0x48>)
 8001ed4:	f043 0301 	orr.w	r3, r3, #1
 8001ed8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001eda:	4b09      	ldr	r3, [pc, #36]	@ (8001f00 <HAL_TIM_Base_MspInit+0x48>)
 8001edc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ede:	f003 0301 	and.w	r3, r3, #1
 8001ee2:	60fb      	str	r3, [r7, #12]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	2100      	movs	r1, #0
 8001eea:	201c      	movs	r0, #28
 8001eec:	f000 ff09 	bl	8002d02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001ef0:	201c      	movs	r0, #28
 8001ef2:	f000 ff22 	bl	8002d3a <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001ef6:	bf00      	nop
 8001ef8:	3710      	adds	r7, #16
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	40023800 	.word	0x40023800

08001f04 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b08c      	sub	sp, #48	@ 0x30
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f0c:	f107 031c 	add.w	r3, r7, #28
 8001f10:	2200      	movs	r2, #0
 8001f12:	601a      	str	r2, [r3, #0]
 8001f14:	605a      	str	r2, [r3, #4]
 8001f16:	609a      	str	r2, [r3, #8]
 8001f18:	60da      	str	r2, [r3, #12]
 8001f1a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a42      	ldr	r2, [pc, #264]	@ (800202c <HAL_UART_MspInit+0x128>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d14b      	bne.n	8001fbe <HAL_UART_MspInit+0xba>
  {
    /* USER CODE BEGIN UART5_MspInit 0 */

    /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001f26:	2300      	movs	r3, #0
 8001f28:	61bb      	str	r3, [r7, #24]
 8001f2a:	4b41      	ldr	r3, [pc, #260]	@ (8002030 <HAL_UART_MspInit+0x12c>)
 8001f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f2e:	4a40      	ldr	r2, [pc, #256]	@ (8002030 <HAL_UART_MspInit+0x12c>)
 8001f30:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001f34:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f36:	4b3e      	ldr	r3, [pc, #248]	@ (8002030 <HAL_UART_MspInit+0x12c>)
 8001f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f3a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f3e:	61bb      	str	r3, [r7, #24]
 8001f40:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f42:	2300      	movs	r3, #0
 8001f44:	617b      	str	r3, [r7, #20]
 8001f46:	4b3a      	ldr	r3, [pc, #232]	@ (8002030 <HAL_UART_MspInit+0x12c>)
 8001f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f4a:	4a39      	ldr	r2, [pc, #228]	@ (8002030 <HAL_UART_MspInit+0x12c>)
 8001f4c:	f043 0304 	orr.w	r3, r3, #4
 8001f50:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f52:	4b37      	ldr	r3, [pc, #220]	@ (8002030 <HAL_UART_MspInit+0x12c>)
 8001f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f56:	f003 0304 	and.w	r3, r3, #4
 8001f5a:	617b      	str	r3, [r7, #20]
 8001f5c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f5e:	2300      	movs	r3, #0
 8001f60:	613b      	str	r3, [r7, #16]
 8001f62:	4b33      	ldr	r3, [pc, #204]	@ (8002030 <HAL_UART_MspInit+0x12c>)
 8001f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f66:	4a32      	ldr	r2, [pc, #200]	@ (8002030 <HAL_UART_MspInit+0x12c>)
 8001f68:	f043 0308 	orr.w	r3, r3, #8
 8001f6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f6e:	4b30      	ldr	r3, [pc, #192]	@ (8002030 <HAL_UART_MspInit+0x12c>)
 8001f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f72:	f003 0308 	and.w	r3, r3, #8
 8001f76:	613b      	str	r3, [r7, #16]
 8001f78:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001f7a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f80:	2302      	movs	r3, #2
 8001f82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f84:	2300      	movs	r3, #0
 8001f86:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f88:	2303      	movs	r3, #3
 8001f8a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001f8c:	2308      	movs	r3, #8
 8001f8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f90:	f107 031c 	add.w	r3, r7, #28
 8001f94:	4619      	mov	r1, r3
 8001f96:	4827      	ldr	r0, [pc, #156]	@ (8002034 <HAL_UART_MspInit+0x130>)
 8001f98:	f001 fa68 	bl	800346c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001f9c:	2304      	movs	r3, #4
 8001f9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa0:	2302      	movs	r3, #2
 8001fa2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fa8:	2303      	movs	r3, #3
 8001faa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001fac:	2308      	movs	r3, #8
 8001fae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fb0:	f107 031c 	add.w	r3, r7, #28
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	4820      	ldr	r0, [pc, #128]	@ (8002038 <HAL_UART_MspInit+0x134>)
 8001fb8:	f001 fa58 	bl	800346c <HAL_GPIO_Init>
    /* USER CODE BEGIN USART1_MspInit 1 */

    /* USER CODE END USART1_MspInit 1 */
  }

}
 8001fbc:	e031      	b.n	8002022 <HAL_UART_MspInit+0x11e>
  else if(huart->Instance==USART1)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a1e      	ldr	r2, [pc, #120]	@ (800203c <HAL_UART_MspInit+0x138>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d12c      	bne.n	8002022 <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001fc8:	2300      	movs	r3, #0
 8001fca:	60fb      	str	r3, [r7, #12]
 8001fcc:	4b18      	ldr	r3, [pc, #96]	@ (8002030 <HAL_UART_MspInit+0x12c>)
 8001fce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fd0:	4a17      	ldr	r2, [pc, #92]	@ (8002030 <HAL_UART_MspInit+0x12c>)
 8001fd2:	f043 0310 	orr.w	r3, r3, #16
 8001fd6:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fd8:	4b15      	ldr	r3, [pc, #84]	@ (8002030 <HAL_UART_MspInit+0x12c>)
 8001fda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fdc:	f003 0310 	and.w	r3, r3, #16
 8001fe0:	60fb      	str	r3, [r7, #12]
 8001fe2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	60bb      	str	r3, [r7, #8]
 8001fe8:	4b11      	ldr	r3, [pc, #68]	@ (8002030 <HAL_UART_MspInit+0x12c>)
 8001fea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fec:	4a10      	ldr	r2, [pc, #64]	@ (8002030 <HAL_UART_MspInit+0x12c>)
 8001fee:	f043 0301 	orr.w	r3, r3, #1
 8001ff2:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ff4:	4b0e      	ldr	r3, [pc, #56]	@ (8002030 <HAL_UART_MspInit+0x12c>)
 8001ff6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ff8:	f003 0301 	and.w	r3, r3, #1
 8001ffc:	60bb      	str	r3, [r7, #8]
 8001ffe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002000:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002004:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002006:	2302      	movs	r3, #2
 8002008:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800200a:	2300      	movs	r3, #0
 800200c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800200e:	2303      	movs	r3, #3
 8002010:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002012:	2307      	movs	r3, #7
 8002014:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002016:	f107 031c 	add.w	r3, r7, #28
 800201a:	4619      	mov	r1, r3
 800201c:	4808      	ldr	r0, [pc, #32]	@ (8002040 <HAL_UART_MspInit+0x13c>)
 800201e:	f001 fa25 	bl	800346c <HAL_GPIO_Init>
}
 8002022:	bf00      	nop
 8002024:	3730      	adds	r7, #48	@ 0x30
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	40005000 	.word	0x40005000
 8002030:	40023800 	.word	0x40023800
 8002034:	40020800 	.word	0x40020800
 8002038:	40020c00 	.word	0x40020c00
 800203c:	40011000 	.word	0x40011000
 8002040:	40020000 	.word	0x40020000

08002044 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002048:	bf00      	nop
 800204a:	e7fd      	b.n	8002048 <NMI_Handler+0x4>

0800204c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002050:	bf00      	nop
 8002052:	e7fd      	b.n	8002050 <HardFault_Handler+0x4>

08002054 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002058:	bf00      	nop
 800205a:	e7fd      	b.n	8002058 <MemManage_Handler+0x4>

0800205c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002060:	bf00      	nop
 8002062:	e7fd      	b.n	8002060 <BusFault_Handler+0x4>

08002064 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002068:	bf00      	nop
 800206a:	e7fd      	b.n	8002068 <UsageFault_Handler+0x4>

0800206c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002070:	bf00      	nop
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr

0800207a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800207a:	b480      	push	{r7}
 800207c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800207e:	bf00      	nop
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr

08002088 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800208c:	bf00      	nop
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr

08002096 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002096:	b580      	push	{r7, lr}
 8002098:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800209a:	f000 f8ef 	bl	800227c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800209e:	bf00      	nop
 80020a0:	bd80      	pop	{r7, pc}

080020a2 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80020a2:	b580      	push	{r7, lr}
 80020a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CONT_Pin);
 80020a6:	2001      	movs	r0, #1
 80020a8:	f001 fbae 	bl	8003808 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80020ac:	bf00      	nop
 80020ae:	bd80      	pop	{r7, pc}

080020b0 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DISC_Pin);
 80020b4:	2002      	movs	r0, #2
 80020b6:	f001 fba7 	bl	8003808 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80020ba:	bf00      	nop
 80020bc:	bd80      	pop	{r7, pc}

080020be <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80020be:	b580      	push	{r7, lr}
 80020c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(STOP_WATCH_Pin);
 80020c2:	2010      	movs	r0, #16
 80020c4:	f001 fba0 	bl	8003808 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80020c8:	bf00      	nop
 80020ca:	bd80      	pop	{r7, pc}

080020cc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80020d0:	4802      	ldr	r0, [pc, #8]	@ (80020dc <TIM2_IRQHandler+0x10>)
 80020d2:	f002 fcbb 	bl	8004a4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80020d6:	bf00      	nop
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	200001cc 	.word	0x200001cc

080020e0 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80020e4:	4802      	ldr	r0, [pc, #8]	@ (80020f0 <DMA2_Stream3_IRQHandler+0x10>)
 80020e6:	f000 ff57 	bl	8002f98 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80020ea:	bf00      	nop
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	2000016c 	.word	0x2000016c

080020f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b086      	sub	sp, #24
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020fc:	4a14      	ldr	r2, [pc, #80]	@ (8002150 <_sbrk+0x5c>)
 80020fe:	4b15      	ldr	r3, [pc, #84]	@ (8002154 <_sbrk+0x60>)
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002108:	4b13      	ldr	r3, [pc, #76]	@ (8002158 <_sbrk+0x64>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d102      	bne.n	8002116 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002110:	4b11      	ldr	r3, [pc, #68]	@ (8002158 <_sbrk+0x64>)
 8002112:	4a12      	ldr	r2, [pc, #72]	@ (800215c <_sbrk+0x68>)
 8002114:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002116:	4b10      	ldr	r3, [pc, #64]	@ (8002158 <_sbrk+0x64>)
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4413      	add	r3, r2
 800211e:	693a      	ldr	r2, [r7, #16]
 8002120:	429a      	cmp	r2, r3
 8002122:	d207      	bcs.n	8002134 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002124:	f003 fc78 	bl	8005a18 <__errno>
 8002128:	4603      	mov	r3, r0
 800212a:	220c      	movs	r2, #12
 800212c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800212e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002132:	e009      	b.n	8002148 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002134:	4b08      	ldr	r3, [pc, #32]	@ (8002158 <_sbrk+0x64>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800213a:	4b07      	ldr	r3, [pc, #28]	@ (8002158 <_sbrk+0x64>)
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4413      	add	r3, r2
 8002142:	4a05      	ldr	r2, [pc, #20]	@ (8002158 <_sbrk+0x64>)
 8002144:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002146:	68fb      	ldr	r3, [r7, #12]
}
 8002148:	4618      	mov	r0, r3
 800214a:	3718      	adds	r7, #24
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	20020000 	.word	0x20020000
 8002154:	00000400 	.word	0x00000400
 8002158:	200002f4 	.word	0x200002f4
 800215c:	20000448 	.word	0x20000448

08002160 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002164:	4b06      	ldr	r3, [pc, #24]	@ (8002180 <SystemInit+0x20>)
 8002166:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800216a:	4a05      	ldr	r2, [pc, #20]	@ (8002180 <SystemInit+0x20>)
 800216c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002170:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002174:	bf00      	nop
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	e000ed00 	.word	0xe000ed00

08002184 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002184:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80021bc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002188:	f7ff ffea 	bl	8002160 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800218c:	480c      	ldr	r0, [pc, #48]	@ (80021c0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800218e:	490d      	ldr	r1, [pc, #52]	@ (80021c4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002190:	4a0d      	ldr	r2, [pc, #52]	@ (80021c8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002192:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002194:	e002      	b.n	800219c <LoopCopyDataInit>

08002196 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002196:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002198:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800219a:	3304      	adds	r3, #4

0800219c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800219c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800219e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021a0:	d3f9      	bcc.n	8002196 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021a2:	4a0a      	ldr	r2, [pc, #40]	@ (80021cc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80021a4:	4c0a      	ldr	r4, [pc, #40]	@ (80021d0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80021a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021a8:	e001      	b.n	80021ae <LoopFillZerobss>

080021aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021ac:	3204      	adds	r2, #4

080021ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021b0:	d3fb      	bcc.n	80021aa <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80021b2:	f003 fc37 	bl	8005a24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021b6:	f7ff f9af 	bl	8001518 <main>
  bx  lr    
 80021ba:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80021bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80021c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021c4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80021c8:	0800fc10 	.word	0x0800fc10
  ldr r2, =_sbss
 80021cc:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80021d0:	20000444 	.word	0x20000444

080021d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021d4:	e7fe      	b.n	80021d4 <ADC_IRQHandler>
	...

080021d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80021dc:	4b0e      	ldr	r3, [pc, #56]	@ (8002218 <HAL_Init+0x40>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a0d      	ldr	r2, [pc, #52]	@ (8002218 <HAL_Init+0x40>)
 80021e2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80021e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80021e8:	4b0b      	ldr	r3, [pc, #44]	@ (8002218 <HAL_Init+0x40>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a0a      	ldr	r2, [pc, #40]	@ (8002218 <HAL_Init+0x40>)
 80021ee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80021f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021f4:	4b08      	ldr	r3, [pc, #32]	@ (8002218 <HAL_Init+0x40>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a07      	ldr	r2, [pc, #28]	@ (8002218 <HAL_Init+0x40>)
 80021fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002200:	2003      	movs	r0, #3
 8002202:	f000 fd73 	bl	8002cec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002206:	200f      	movs	r0, #15
 8002208:	f000 f808 	bl	800221c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800220c:	f7ff fd3e 	bl	8001c8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002210:	2300      	movs	r3, #0
}
 8002212:	4618      	mov	r0, r3
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	40023c00 	.word	0x40023c00

0800221c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002224:	4b12      	ldr	r3, [pc, #72]	@ (8002270 <HAL_InitTick+0x54>)
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	4b12      	ldr	r3, [pc, #72]	@ (8002274 <HAL_InitTick+0x58>)
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	4619      	mov	r1, r3
 800222e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002232:	fbb3 f3f1 	udiv	r3, r3, r1
 8002236:	fbb2 f3f3 	udiv	r3, r2, r3
 800223a:	4618      	mov	r0, r3
 800223c:	f000 fd99 	bl	8002d72 <HAL_SYSTICK_Config>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d001      	beq.n	800224a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e00e      	b.n	8002268 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2b0f      	cmp	r3, #15
 800224e:	d80a      	bhi.n	8002266 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002250:	2200      	movs	r2, #0
 8002252:	6879      	ldr	r1, [r7, #4]
 8002254:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002258:	f000 fd53 	bl	8002d02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800225c:	4a06      	ldr	r2, [pc, #24]	@ (8002278 <HAL_InitTick+0x5c>)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002262:	2300      	movs	r3, #0
 8002264:	e000      	b.n	8002268 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
}
 8002268:	4618      	mov	r0, r3
 800226a:	3708      	adds	r7, #8
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}
 8002270:	2000000c 	.word	0x2000000c
 8002274:	20000014 	.word	0x20000014
 8002278:	20000010 	.word	0x20000010

0800227c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002280:	4b06      	ldr	r3, [pc, #24]	@ (800229c <HAL_IncTick+0x20>)
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	461a      	mov	r2, r3
 8002286:	4b06      	ldr	r3, [pc, #24]	@ (80022a0 <HAL_IncTick+0x24>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4413      	add	r3, r2
 800228c:	4a04      	ldr	r2, [pc, #16]	@ (80022a0 <HAL_IncTick+0x24>)
 800228e:	6013      	str	r3, [r2, #0]
}
 8002290:	bf00      	nop
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop
 800229c:	20000014 	.word	0x20000014
 80022a0:	200002f8 	.word	0x200002f8

080022a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0
  return uwTick;
 80022a8:	4b03      	ldr	r3, [pc, #12]	@ (80022b8 <HAL_GetTick+0x14>)
 80022aa:	681b      	ldr	r3, [r3, #0]
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr
 80022b6:	bf00      	nop
 80022b8:	200002f8 	.word	0x200002f8

080022bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b084      	sub	sp, #16
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022c4:	f7ff ffee 	bl	80022a4 <HAL_GetTick>
 80022c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80022d4:	d005      	beq.n	80022e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022d6:	4b0a      	ldr	r3, [pc, #40]	@ (8002300 <HAL_Delay+0x44>)
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	461a      	mov	r2, r3
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	4413      	add	r3, r2
 80022e0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80022e2:	bf00      	nop
 80022e4:	f7ff ffde 	bl	80022a4 <HAL_GetTick>
 80022e8:	4602      	mov	r2, r0
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	68fa      	ldr	r2, [r7, #12]
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d8f7      	bhi.n	80022e4 <HAL_Delay+0x28>
  {
  }
}
 80022f4:	bf00      	nop
 80022f6:	bf00      	nop
 80022f8:	3710      	adds	r7, #16
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	20000014 	.word	0x20000014

08002304 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b084      	sub	sp, #16
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800230c:	2300      	movs	r3, #0
 800230e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d101      	bne.n	800231a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e033      	b.n	8002382 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800231e:	2b00      	cmp	r3, #0
 8002320:	d109      	bne.n	8002336 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f7ff fcda 	bl	8001cdc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2200      	movs	r2, #0
 800232c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2200      	movs	r2, #0
 8002332:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800233a:	f003 0310 	and.w	r3, r3, #16
 800233e:	2b00      	cmp	r3, #0
 8002340:	d118      	bne.n	8002374 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002346:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800234a:	f023 0302 	bic.w	r3, r3, #2
 800234e:	f043 0202 	orr.w	r2, r3, #2
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f000 fad8 	bl	800290c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2200      	movs	r2, #0
 8002360:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002366:	f023 0303 	bic.w	r3, r3, #3
 800236a:	f043 0201 	orr.w	r2, r3, #1
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	641a      	str	r2, [r3, #64]	@ 0x40
 8002372:	e001      	b.n	8002378 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2200      	movs	r2, #0
 800237c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002380:	7bfb      	ldrb	r3, [r7, #15]
}
 8002382:	4618      	mov	r0, r3
 8002384:	3710      	adds	r7, #16
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
	...

0800238c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800238c:	b480      	push	{r7}
 800238e:	b085      	sub	sp, #20
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002394:	2300      	movs	r3, #0
 8002396:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d101      	bne.n	80023a6 <HAL_ADC_Start+0x1a>
 80023a2:	2302      	movs	r3, #2
 80023a4:	e0b2      	b.n	800250c <HAL_ADC_Start+0x180>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2201      	movs	r2, #1
 80023aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	f003 0301 	and.w	r3, r3, #1
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d018      	beq.n	80023ee <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	689a      	ldr	r2, [r3, #8]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f042 0201 	orr.w	r2, r2, #1
 80023ca:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80023cc:	4b52      	ldr	r3, [pc, #328]	@ (8002518 <HAL_ADC_Start+0x18c>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a52      	ldr	r2, [pc, #328]	@ (800251c <HAL_ADC_Start+0x190>)
 80023d2:	fba2 2303 	umull	r2, r3, r2, r3
 80023d6:	0c9a      	lsrs	r2, r3, #18
 80023d8:	4613      	mov	r3, r2
 80023da:	005b      	lsls	r3, r3, #1
 80023dc:	4413      	add	r3, r2
 80023de:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80023e0:	e002      	b.n	80023e8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	3b01      	subs	r3, #1
 80023e6:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d1f9      	bne.n	80023e2 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	f003 0301 	and.w	r3, r3, #1
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d17a      	bne.n	80024f2 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002400:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002404:	f023 0301 	bic.w	r3, r3, #1
 8002408:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800241a:	2b00      	cmp	r3, #0
 800241c:	d007      	beq.n	800242e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002422:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002426:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002432:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002436:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800243a:	d106      	bne.n	800244a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002440:	f023 0206 	bic.w	r2, r3, #6
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	645a      	str	r2, [r3, #68]	@ 0x44
 8002448:	e002      	b.n	8002450 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2200      	movs	r2, #0
 800244e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2200      	movs	r2, #0
 8002454:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002458:	4b31      	ldr	r3, [pc, #196]	@ (8002520 <HAL_ADC_Start+0x194>)
 800245a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002464:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f003 031f 	and.w	r3, r3, #31
 800246e:	2b00      	cmp	r3, #0
 8002470:	d12a      	bne.n	80024c8 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a2b      	ldr	r2, [pc, #172]	@ (8002524 <HAL_ADC_Start+0x198>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d015      	beq.n	80024a8 <HAL_ADC_Start+0x11c>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a29      	ldr	r2, [pc, #164]	@ (8002528 <HAL_ADC_Start+0x19c>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d105      	bne.n	8002492 <HAL_ADC_Start+0x106>
 8002486:	4b26      	ldr	r3, [pc, #152]	@ (8002520 <HAL_ADC_Start+0x194>)
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	f003 031f 	and.w	r3, r3, #31
 800248e:	2b00      	cmp	r3, #0
 8002490:	d00a      	beq.n	80024a8 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a25      	ldr	r2, [pc, #148]	@ (800252c <HAL_ADC_Start+0x1a0>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d136      	bne.n	800250a <HAL_ADC_Start+0x17e>
 800249c:	4b20      	ldr	r3, [pc, #128]	@ (8002520 <HAL_ADC_Start+0x194>)
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f003 0310 	and.w	r3, r3, #16
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d130      	bne.n	800250a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d129      	bne.n	800250a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	689a      	ldr	r2, [r3, #8]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80024c4:	609a      	str	r2, [r3, #8]
 80024c6:	e020      	b.n	800250a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a15      	ldr	r2, [pc, #84]	@ (8002524 <HAL_ADC_Start+0x198>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d11b      	bne.n	800250a <HAL_ADC_Start+0x17e>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d114      	bne.n	800250a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	689a      	ldr	r2, [r3, #8]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80024ee:	609a      	str	r2, [r3, #8]
 80024f0:	e00b      	b.n	800250a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024f6:	f043 0210 	orr.w	r2, r3, #16
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002502:	f043 0201 	orr.w	r2, r3, #1
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800250a:	2300      	movs	r3, #0
}
 800250c:	4618      	mov	r0, r3
 800250e:	3714      	adds	r7, #20
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr
 8002518:	2000000c 	.word	0x2000000c
 800251c:	431bde83 	.word	0x431bde83
 8002520:	40012300 	.word	0x40012300
 8002524:	40012000 	.word	0x40012000
 8002528:	40012100 	.word	0x40012100
 800252c:	40012200 	.word	0x40012200

08002530 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800253e:	2b01      	cmp	r3, #1
 8002540:	d101      	bne.n	8002546 <HAL_ADC_Stop+0x16>
 8002542:	2302      	movs	r3, #2
 8002544:	e021      	b.n	800258a <HAL_ADC_Stop+0x5a>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2201      	movs	r2, #1
 800254a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	689a      	ldr	r2, [r3, #8]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f022 0201 	bic.w	r2, r2, #1
 800255c:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	f003 0301 	and.w	r3, r3, #1
 8002568:	2b00      	cmp	r3, #0
 800256a:	d109      	bne.n	8002580 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002570:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002574:	f023 0301 	bic.w	r3, r3, #1
 8002578:	f043 0201 	orr.w	r2, r3, #1
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2200      	movs	r2, #0
 8002584:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002588:	2300      	movs	r3, #0
}
 800258a:	4618      	mov	r0, r3
 800258c:	370c      	adds	r7, #12
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr

08002596 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002596:	b580      	push	{r7, lr}
 8002598:	b084      	sub	sp, #16
 800259a:	af00      	add	r7, sp, #0
 800259c:	6078      	str	r0, [r7, #4]
 800259e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80025a0:	2300      	movs	r3, #0
 80025a2:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025b2:	d113      	bne.n	80025dc <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80025be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80025c2:	d10b      	bne.n	80025dc <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025c8:	f043 0220 	orr.w	r2, r3, #32
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2200      	movs	r2, #0
 80025d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	e063      	b.n	80026a4 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80025dc:	f7ff fe62 	bl	80022a4 <HAL_GetTick>
 80025e0:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80025e2:	e021      	b.n	8002628 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80025ea:	d01d      	beq.n	8002628 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d007      	beq.n	8002602 <HAL_ADC_PollForConversion+0x6c>
 80025f2:	f7ff fe57 	bl	80022a4 <HAL_GetTick>
 80025f6:	4602      	mov	r2, r0
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	1ad3      	subs	r3, r2, r3
 80025fc:	683a      	ldr	r2, [r7, #0]
 80025fe:	429a      	cmp	r2, r3
 8002600:	d212      	bcs.n	8002628 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 0302 	and.w	r3, r3, #2
 800260c:	2b02      	cmp	r3, #2
 800260e:	d00b      	beq.n	8002628 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002614:	f043 0204 	orr.w	r2, r3, #4
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2200      	movs	r2, #0
 8002620:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8002624:	2303      	movs	r3, #3
 8002626:	e03d      	b.n	80026a4 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0302 	and.w	r3, r3, #2
 8002632:	2b02      	cmp	r3, #2
 8002634:	d1d6      	bne.n	80025e4 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f06f 0212 	mvn.w	r2, #18
 800263e:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002644:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d123      	bne.n	80026a2 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800265e:	2b00      	cmp	r3, #0
 8002660:	d11f      	bne.n	80026a2 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002668:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800266c:	2b00      	cmp	r3, #0
 800266e:	d006      	beq.n	800267e <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800267a:	2b00      	cmp	r3, #0
 800267c:	d111      	bne.n	80026a2 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002682:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800268e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d105      	bne.n	80026a2 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800269a:	f043 0201 	orr.w	r2, r3, #1
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80026a2:	2300      	movs	r3, #0
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	3710      	adds	r7, #16
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}

080026ac <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	370c      	adds	r7, #12
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr
	...

080026c8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b085      	sub	sp, #20
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80026d2:	2300      	movs	r3, #0
 80026d4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d101      	bne.n	80026e4 <HAL_ADC_ConfigChannel+0x1c>
 80026e0:	2302      	movs	r3, #2
 80026e2:	e105      	b.n	80028f0 <HAL_ADC_ConfigChannel+0x228>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2201      	movs	r2, #1
 80026e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	2b09      	cmp	r3, #9
 80026f2:	d925      	bls.n	8002740 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	68d9      	ldr	r1, [r3, #12]
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	b29b      	uxth	r3, r3
 8002700:	461a      	mov	r2, r3
 8002702:	4613      	mov	r3, r2
 8002704:	005b      	lsls	r3, r3, #1
 8002706:	4413      	add	r3, r2
 8002708:	3b1e      	subs	r3, #30
 800270a:	2207      	movs	r2, #7
 800270c:	fa02 f303 	lsl.w	r3, r2, r3
 8002710:	43da      	mvns	r2, r3
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	400a      	ands	r2, r1
 8002718:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	68d9      	ldr	r1, [r3, #12]
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	689a      	ldr	r2, [r3, #8]
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	b29b      	uxth	r3, r3
 800272a:	4618      	mov	r0, r3
 800272c:	4603      	mov	r3, r0
 800272e:	005b      	lsls	r3, r3, #1
 8002730:	4403      	add	r3, r0
 8002732:	3b1e      	subs	r3, #30
 8002734:	409a      	lsls	r2, r3
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	430a      	orrs	r2, r1
 800273c:	60da      	str	r2, [r3, #12]
 800273e:	e022      	b.n	8002786 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	6919      	ldr	r1, [r3, #16]
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	b29b      	uxth	r3, r3
 800274c:	461a      	mov	r2, r3
 800274e:	4613      	mov	r3, r2
 8002750:	005b      	lsls	r3, r3, #1
 8002752:	4413      	add	r3, r2
 8002754:	2207      	movs	r2, #7
 8002756:	fa02 f303 	lsl.w	r3, r2, r3
 800275a:	43da      	mvns	r2, r3
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	400a      	ands	r2, r1
 8002762:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	6919      	ldr	r1, [r3, #16]
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	689a      	ldr	r2, [r3, #8]
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	b29b      	uxth	r3, r3
 8002774:	4618      	mov	r0, r3
 8002776:	4603      	mov	r3, r0
 8002778:	005b      	lsls	r3, r3, #1
 800277a:	4403      	add	r3, r0
 800277c:	409a      	lsls	r2, r3
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	430a      	orrs	r2, r1
 8002784:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	2b06      	cmp	r3, #6
 800278c:	d824      	bhi.n	80027d8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	685a      	ldr	r2, [r3, #4]
 8002798:	4613      	mov	r3, r2
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	4413      	add	r3, r2
 800279e:	3b05      	subs	r3, #5
 80027a0:	221f      	movs	r2, #31
 80027a2:	fa02 f303 	lsl.w	r3, r2, r3
 80027a6:	43da      	mvns	r2, r3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	400a      	ands	r2, r1
 80027ae:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	4618      	mov	r0, r3
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	685a      	ldr	r2, [r3, #4]
 80027c2:	4613      	mov	r3, r2
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	4413      	add	r3, r2
 80027c8:	3b05      	subs	r3, #5
 80027ca:	fa00 f203 	lsl.w	r2, r0, r3
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	430a      	orrs	r2, r1
 80027d4:	635a      	str	r2, [r3, #52]	@ 0x34
 80027d6:	e04c      	b.n	8002872 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	2b0c      	cmp	r3, #12
 80027de:	d824      	bhi.n	800282a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	685a      	ldr	r2, [r3, #4]
 80027ea:	4613      	mov	r3, r2
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	4413      	add	r3, r2
 80027f0:	3b23      	subs	r3, #35	@ 0x23
 80027f2:	221f      	movs	r2, #31
 80027f4:	fa02 f303 	lsl.w	r3, r2, r3
 80027f8:	43da      	mvns	r2, r3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	400a      	ands	r2, r1
 8002800:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	b29b      	uxth	r3, r3
 800280e:	4618      	mov	r0, r3
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	685a      	ldr	r2, [r3, #4]
 8002814:	4613      	mov	r3, r2
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	4413      	add	r3, r2
 800281a:	3b23      	subs	r3, #35	@ 0x23
 800281c:	fa00 f203 	lsl.w	r2, r0, r3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	430a      	orrs	r2, r1
 8002826:	631a      	str	r2, [r3, #48]	@ 0x30
 8002828:	e023      	b.n	8002872 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	685a      	ldr	r2, [r3, #4]
 8002834:	4613      	mov	r3, r2
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	4413      	add	r3, r2
 800283a:	3b41      	subs	r3, #65	@ 0x41
 800283c:	221f      	movs	r2, #31
 800283e:	fa02 f303 	lsl.w	r3, r2, r3
 8002842:	43da      	mvns	r2, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	400a      	ands	r2, r1
 800284a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	b29b      	uxth	r3, r3
 8002858:	4618      	mov	r0, r3
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	685a      	ldr	r2, [r3, #4]
 800285e:	4613      	mov	r3, r2
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	4413      	add	r3, r2
 8002864:	3b41      	subs	r3, #65	@ 0x41
 8002866:	fa00 f203 	lsl.w	r2, r0, r3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	430a      	orrs	r2, r1
 8002870:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002872:	4b22      	ldr	r3, [pc, #136]	@ (80028fc <HAL_ADC_ConfigChannel+0x234>)
 8002874:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a21      	ldr	r2, [pc, #132]	@ (8002900 <HAL_ADC_ConfigChannel+0x238>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d109      	bne.n	8002894 <HAL_ADC_ConfigChannel+0x1cc>
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	2b12      	cmp	r3, #18
 8002886:	d105      	bne.n	8002894 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a19      	ldr	r2, [pc, #100]	@ (8002900 <HAL_ADC_ConfigChannel+0x238>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d123      	bne.n	80028e6 <HAL_ADC_ConfigChannel+0x21e>
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	2b10      	cmp	r3, #16
 80028a4:	d003      	beq.n	80028ae <HAL_ADC_ConfigChannel+0x1e6>
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	2b11      	cmp	r3, #17
 80028ac:	d11b      	bne.n	80028e6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	2b10      	cmp	r3, #16
 80028c0:	d111      	bne.n	80028e6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80028c2:	4b10      	ldr	r3, [pc, #64]	@ (8002904 <HAL_ADC_ConfigChannel+0x23c>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a10      	ldr	r2, [pc, #64]	@ (8002908 <HAL_ADC_ConfigChannel+0x240>)
 80028c8:	fba2 2303 	umull	r2, r3, r2, r3
 80028cc:	0c9a      	lsrs	r2, r3, #18
 80028ce:	4613      	mov	r3, r2
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	4413      	add	r3, r2
 80028d4:	005b      	lsls	r3, r3, #1
 80028d6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80028d8:	e002      	b.n	80028e0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	3b01      	subs	r3, #1
 80028de:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d1f9      	bne.n	80028da <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2200      	movs	r2, #0
 80028ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80028ee:	2300      	movs	r3, #0
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3714      	adds	r7, #20
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr
 80028fc:	40012300 	.word	0x40012300
 8002900:	40012000 	.word	0x40012000
 8002904:	2000000c 	.word	0x2000000c
 8002908:	431bde83 	.word	0x431bde83

0800290c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800290c:	b480      	push	{r7}
 800290e:	b085      	sub	sp, #20
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002914:	4b79      	ldr	r3, [pc, #484]	@ (8002afc <ADC_Init+0x1f0>)
 8002916:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	685a      	ldr	r2, [r3, #4]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	431a      	orrs	r2, r3
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	685a      	ldr	r2, [r3, #4]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002940:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	6859      	ldr	r1, [r3, #4]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	691b      	ldr	r3, [r3, #16]
 800294c:	021a      	lsls	r2, r3, #8
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	430a      	orrs	r2, r1
 8002954:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	685a      	ldr	r2, [r3, #4]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002964:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	6859      	ldr	r1, [r3, #4]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	689a      	ldr	r2, [r3, #8]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	430a      	orrs	r2, r1
 8002976:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	689a      	ldr	r2, [r3, #8]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002986:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	6899      	ldr	r1, [r3, #8]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	68da      	ldr	r2, [r3, #12]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	430a      	orrs	r2, r1
 8002998:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800299e:	4a58      	ldr	r2, [pc, #352]	@ (8002b00 <ADC_Init+0x1f4>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d022      	beq.n	80029ea <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	689a      	ldr	r2, [r3, #8]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80029b2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	6899      	ldr	r1, [r3, #8]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	430a      	orrs	r2, r1
 80029c4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	689a      	ldr	r2, [r3, #8]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80029d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	6899      	ldr	r1, [r3, #8]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	430a      	orrs	r2, r1
 80029e6:	609a      	str	r2, [r3, #8]
 80029e8:	e00f      	b.n	8002a0a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	689a      	ldr	r2, [r3, #8]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80029f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	689a      	ldr	r2, [r3, #8]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002a08:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	689a      	ldr	r2, [r3, #8]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f022 0202 	bic.w	r2, r2, #2
 8002a18:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	6899      	ldr	r1, [r3, #8]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	7e1b      	ldrb	r3, [r3, #24]
 8002a24:	005a      	lsls	r2, r3, #1
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	430a      	orrs	r2, r1
 8002a2c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d01b      	beq.n	8002a70 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	685a      	ldr	r2, [r3, #4]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002a46:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	685a      	ldr	r2, [r3, #4]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002a56:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	6859      	ldr	r1, [r3, #4]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a62:	3b01      	subs	r3, #1
 8002a64:	035a      	lsls	r2, r3, #13
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	430a      	orrs	r2, r1
 8002a6c:	605a      	str	r2, [r3, #4]
 8002a6e:	e007      	b.n	8002a80 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	685a      	ldr	r2, [r3, #4]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a7e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002a8e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	69db      	ldr	r3, [r3, #28]
 8002a9a:	3b01      	subs	r3, #1
 8002a9c:	051a      	lsls	r2, r3, #20
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	430a      	orrs	r2, r1
 8002aa4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	689a      	ldr	r2, [r3, #8]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002ab4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	6899      	ldr	r1, [r3, #8]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002ac2:	025a      	lsls	r2, r3, #9
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	430a      	orrs	r2, r1
 8002aca:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	689a      	ldr	r2, [r3, #8]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ada:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	6899      	ldr	r1, [r3, #8]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	695b      	ldr	r3, [r3, #20]
 8002ae6:	029a      	lsls	r2, r3, #10
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	430a      	orrs	r2, r1
 8002aee:	609a      	str	r2, [r3, #8]
}
 8002af0:	bf00      	nop
 8002af2:	3714      	adds	r7, #20
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr
 8002afc:	40012300 	.word	0x40012300
 8002b00:	0f000001 	.word	0x0f000001

08002b04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b085      	sub	sp, #20
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	f003 0307 	and.w	r3, r3, #7
 8002b12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b14:	4b0c      	ldr	r3, [pc, #48]	@ (8002b48 <__NVIC_SetPriorityGrouping+0x44>)
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b1a:	68ba      	ldr	r2, [r7, #8]
 8002b1c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002b20:	4013      	ands	r3, r2
 8002b22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b2c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002b30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b36:	4a04      	ldr	r2, [pc, #16]	@ (8002b48 <__NVIC_SetPriorityGrouping+0x44>)
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	60d3      	str	r3, [r2, #12]
}
 8002b3c:	bf00      	nop
 8002b3e:	3714      	adds	r7, #20
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr
 8002b48:	e000ed00 	.word	0xe000ed00

08002b4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b50:	4b04      	ldr	r3, [pc, #16]	@ (8002b64 <__NVIC_GetPriorityGrouping+0x18>)
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	0a1b      	lsrs	r3, r3, #8
 8002b56:	f003 0307 	and.w	r3, r3, #7
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr
 8002b64:	e000ed00 	.word	0xe000ed00

08002b68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	4603      	mov	r3, r0
 8002b70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	db0b      	blt.n	8002b92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b7a:	79fb      	ldrb	r3, [r7, #7]
 8002b7c:	f003 021f 	and.w	r2, r3, #31
 8002b80:	4907      	ldr	r1, [pc, #28]	@ (8002ba0 <__NVIC_EnableIRQ+0x38>)
 8002b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b86:	095b      	lsrs	r3, r3, #5
 8002b88:	2001      	movs	r0, #1
 8002b8a:	fa00 f202 	lsl.w	r2, r0, r2
 8002b8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002b92:	bf00      	nop
 8002b94:	370c      	adds	r7, #12
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr
 8002b9e:	bf00      	nop
 8002ba0:	e000e100 	.word	0xe000e100

08002ba4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	4603      	mov	r3, r0
 8002bac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	db12      	blt.n	8002bdc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bb6:	79fb      	ldrb	r3, [r7, #7]
 8002bb8:	f003 021f 	and.w	r2, r3, #31
 8002bbc:	490a      	ldr	r1, [pc, #40]	@ (8002be8 <__NVIC_DisableIRQ+0x44>)
 8002bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bc2:	095b      	lsrs	r3, r3, #5
 8002bc4:	2001      	movs	r0, #1
 8002bc6:	fa00 f202 	lsl.w	r2, r0, r2
 8002bca:	3320      	adds	r3, #32
 8002bcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002bd0:	f3bf 8f4f 	dsb	sy
}
 8002bd4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002bd6:	f3bf 8f6f 	isb	sy
}
 8002bda:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002bdc:	bf00      	nop
 8002bde:	370c      	adds	r7, #12
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr
 8002be8:	e000e100 	.word	0xe000e100

08002bec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	6039      	str	r1, [r7, #0]
 8002bf6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	db0a      	blt.n	8002c16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	b2da      	uxtb	r2, r3
 8002c04:	490c      	ldr	r1, [pc, #48]	@ (8002c38 <__NVIC_SetPriority+0x4c>)
 8002c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c0a:	0112      	lsls	r2, r2, #4
 8002c0c:	b2d2      	uxtb	r2, r2
 8002c0e:	440b      	add	r3, r1
 8002c10:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c14:	e00a      	b.n	8002c2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	b2da      	uxtb	r2, r3
 8002c1a:	4908      	ldr	r1, [pc, #32]	@ (8002c3c <__NVIC_SetPriority+0x50>)
 8002c1c:	79fb      	ldrb	r3, [r7, #7]
 8002c1e:	f003 030f 	and.w	r3, r3, #15
 8002c22:	3b04      	subs	r3, #4
 8002c24:	0112      	lsls	r2, r2, #4
 8002c26:	b2d2      	uxtb	r2, r2
 8002c28:	440b      	add	r3, r1
 8002c2a:	761a      	strb	r2, [r3, #24]
}
 8002c2c:	bf00      	nop
 8002c2e:	370c      	adds	r7, #12
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr
 8002c38:	e000e100 	.word	0xe000e100
 8002c3c:	e000ed00 	.word	0xe000ed00

08002c40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b089      	sub	sp, #36	@ 0x24
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	60f8      	str	r0, [r7, #12]
 8002c48:	60b9      	str	r1, [r7, #8]
 8002c4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	f003 0307 	and.w	r3, r3, #7
 8002c52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c54:	69fb      	ldr	r3, [r7, #28]
 8002c56:	f1c3 0307 	rsb	r3, r3, #7
 8002c5a:	2b04      	cmp	r3, #4
 8002c5c:	bf28      	it	cs
 8002c5e:	2304      	movcs	r3, #4
 8002c60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	3304      	adds	r3, #4
 8002c66:	2b06      	cmp	r3, #6
 8002c68:	d902      	bls.n	8002c70 <NVIC_EncodePriority+0x30>
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	3b03      	subs	r3, #3
 8002c6e:	e000      	b.n	8002c72 <NVIC_EncodePriority+0x32>
 8002c70:	2300      	movs	r3, #0
 8002c72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c74:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002c78:	69bb      	ldr	r3, [r7, #24]
 8002c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7e:	43da      	mvns	r2, r3
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	401a      	ands	r2, r3
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c88:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c92:	43d9      	mvns	r1, r3
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c98:	4313      	orrs	r3, r2
         );
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3724      	adds	r7, #36	@ 0x24
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr
	...

08002ca8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b082      	sub	sp, #8
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	3b01      	subs	r3, #1
 8002cb4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002cb8:	d301      	bcc.n	8002cbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e00f      	b.n	8002cde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cbe:	4a0a      	ldr	r2, [pc, #40]	@ (8002ce8 <SysTick_Config+0x40>)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	3b01      	subs	r3, #1
 8002cc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cc6:	210f      	movs	r1, #15
 8002cc8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002ccc:	f7ff ff8e 	bl	8002bec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002cd0:	4b05      	ldr	r3, [pc, #20]	@ (8002ce8 <SysTick_Config+0x40>)
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cd6:	4b04      	ldr	r3, [pc, #16]	@ (8002ce8 <SysTick_Config+0x40>)
 8002cd8:	2207      	movs	r2, #7
 8002cda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002cdc:	2300      	movs	r3, #0
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3708      	adds	r7, #8
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	e000e010 	.word	0xe000e010

08002cec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b082      	sub	sp, #8
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	f7ff ff05 	bl	8002b04 <__NVIC_SetPriorityGrouping>
}
 8002cfa:	bf00      	nop
 8002cfc:	3708      	adds	r7, #8
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}

08002d02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d02:	b580      	push	{r7, lr}
 8002d04:	b086      	sub	sp, #24
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	4603      	mov	r3, r0
 8002d0a:	60b9      	str	r1, [r7, #8]
 8002d0c:	607a      	str	r2, [r7, #4]
 8002d0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d10:	2300      	movs	r3, #0
 8002d12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d14:	f7ff ff1a 	bl	8002b4c <__NVIC_GetPriorityGrouping>
 8002d18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	68b9      	ldr	r1, [r7, #8]
 8002d1e:	6978      	ldr	r0, [r7, #20]
 8002d20:	f7ff ff8e 	bl	8002c40 <NVIC_EncodePriority>
 8002d24:	4602      	mov	r2, r0
 8002d26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d2a:	4611      	mov	r1, r2
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f7ff ff5d 	bl	8002bec <__NVIC_SetPriority>
}
 8002d32:	bf00      	nop
 8002d34:	3718      	adds	r7, #24
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}

08002d3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d3a:	b580      	push	{r7, lr}
 8002d3c:	b082      	sub	sp, #8
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	4603      	mov	r3, r0
 8002d42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f7ff ff0d 	bl	8002b68 <__NVIC_EnableIRQ>
}
 8002d4e:	bf00      	nop
 8002d50:	3708      	adds	r7, #8
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}

08002d56 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002d56:	b580      	push	{r7, lr}
 8002d58:	b082      	sub	sp, #8
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002d60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d64:	4618      	mov	r0, r3
 8002d66:	f7ff ff1d 	bl	8002ba4 <__NVIC_DisableIRQ>
}
 8002d6a:	bf00      	nop
 8002d6c:	3708      	adds	r7, #8
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}

08002d72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d72:	b580      	push	{r7, lr}
 8002d74:	b082      	sub	sp, #8
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f7ff ff94 	bl	8002ca8 <SysTick_Config>
 8002d80:	4603      	mov	r3, r0
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3708      	adds	r7, #8
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
	...

08002d8c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b086      	sub	sp, #24
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002d94:	2300      	movs	r3, #0
 8002d96:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002d98:	f7ff fa84 	bl	80022a4 <HAL_GetTick>
 8002d9c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d101      	bne.n	8002da8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e099      	b.n	8002edc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2202      	movs	r2, #2
 8002dac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2200      	movs	r2, #0
 8002db4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f022 0201 	bic.w	r2, r2, #1
 8002dc6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002dc8:	e00f      	b.n	8002dea <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002dca:	f7ff fa6b 	bl	80022a4 <HAL_GetTick>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	1ad3      	subs	r3, r2, r3
 8002dd4:	2b05      	cmp	r3, #5
 8002dd6:	d908      	bls.n	8002dea <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2220      	movs	r2, #32
 8002ddc:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2203      	movs	r2, #3
 8002de2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	e078      	b.n	8002edc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 0301 	and.w	r3, r3, #1
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d1e8      	bne.n	8002dca <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002e00:	697a      	ldr	r2, [r7, #20]
 8002e02:	4b38      	ldr	r3, [pc, #224]	@ (8002ee4 <HAL_DMA_Init+0x158>)
 8002e04:	4013      	ands	r3, r2
 8002e06:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	685a      	ldr	r2, [r3, #4]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e16:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	691b      	ldr	r3, [r3, #16]
 8002e1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e22:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	699b      	ldr	r3, [r3, #24]
 8002e28:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e2e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6a1b      	ldr	r3, [r3, #32]
 8002e34:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e36:	697a      	ldr	r2, [r7, #20]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e40:	2b04      	cmp	r3, #4
 8002e42:	d107      	bne.n	8002e54 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	697a      	ldr	r2, [r7, #20]
 8002e50:	4313      	orrs	r3, r2
 8002e52:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	697a      	ldr	r2, [r7, #20]
 8002e5a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	695b      	ldr	r3, [r3, #20]
 8002e62:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	f023 0307 	bic.w	r3, r3, #7
 8002e6a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e70:	697a      	ldr	r2, [r7, #20]
 8002e72:	4313      	orrs	r3, r2
 8002e74:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e7a:	2b04      	cmp	r3, #4
 8002e7c:	d117      	bne.n	8002eae <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e82:	697a      	ldr	r2, [r7, #20]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d00e      	beq.n	8002eae <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	f000 fa6f 	bl	8003374 <DMA_CheckFifoParam>
 8002e96:	4603      	mov	r3, r0
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d008      	beq.n	8002eae <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2240      	movs	r2, #64	@ 0x40
 8002ea0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e016      	b.n	8002edc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	697a      	ldr	r2, [r7, #20]
 8002eb4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f000 fa26 	bl	8003308 <DMA_CalcBaseAndBitshift>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ec4:	223f      	movs	r2, #63	@ 0x3f
 8002ec6:	409a      	lsls	r2, r3
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002eda:	2300      	movs	r3, #0
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	3718      	adds	r7, #24
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	f010803f 	.word	0xf010803f

08002ee8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b086      	sub	sp, #24
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	60f8      	str	r0, [r7, #12]
 8002ef0:	60b9      	str	r1, [r7, #8]
 8002ef2:	607a      	str	r2, [r7, #4]
 8002ef4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002efe:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d101      	bne.n	8002f0e <HAL_DMA_Start_IT+0x26>
 8002f0a:	2302      	movs	r3, #2
 8002f0c:	e040      	b.n	8002f90 <HAL_DMA_Start_IT+0xa8>
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2201      	movs	r2, #1
 8002f12:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d12f      	bne.n	8002f82 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2202      	movs	r2, #2
 8002f26:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	68b9      	ldr	r1, [r7, #8]
 8002f36:	68f8      	ldr	r0, [r7, #12]
 8002f38:	f000 f9b8 	bl	80032ac <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f40:	223f      	movs	r2, #63	@ 0x3f
 8002f42:	409a      	lsls	r2, r3
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f042 0216 	orr.w	r2, r2, #22
 8002f56:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d007      	beq.n	8002f70 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f042 0208 	orr.w	r2, r2, #8
 8002f6e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f042 0201 	orr.w	r2, r2, #1
 8002f7e:	601a      	str	r2, [r3, #0]
 8002f80:	e005      	b.n	8002f8e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2200      	movs	r2, #0
 8002f86:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002f8a:	2302      	movs	r3, #2
 8002f8c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002f8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3718      	adds	r7, #24
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}

08002f98 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b086      	sub	sp, #24
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002fa4:	4b8e      	ldr	r3, [pc, #568]	@ (80031e0 <HAL_DMA_IRQHandler+0x248>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a8e      	ldr	r2, [pc, #568]	@ (80031e4 <HAL_DMA_IRQHandler+0x24c>)
 8002faa:	fba2 2303 	umull	r2, r3, r2, r3
 8002fae:	0a9b      	lsrs	r3, r3, #10
 8002fb0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fb6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fc2:	2208      	movs	r2, #8
 8002fc4:	409a      	lsls	r2, r3
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	4013      	ands	r3, r2
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d01a      	beq.n	8003004 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 0304 	and.w	r3, r3, #4
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d013      	beq.n	8003004 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f022 0204 	bic.w	r2, r2, #4
 8002fea:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ff0:	2208      	movs	r2, #8
 8002ff2:	409a      	lsls	r2, r3
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ffc:	f043 0201 	orr.w	r2, r3, #1
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003008:	2201      	movs	r2, #1
 800300a:	409a      	lsls	r2, r3
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	4013      	ands	r3, r2
 8003010:	2b00      	cmp	r3, #0
 8003012:	d012      	beq.n	800303a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	695b      	ldr	r3, [r3, #20]
 800301a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800301e:	2b00      	cmp	r3, #0
 8003020:	d00b      	beq.n	800303a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003026:	2201      	movs	r2, #1
 8003028:	409a      	lsls	r2, r3
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003032:	f043 0202 	orr.w	r2, r3, #2
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800303e:	2204      	movs	r2, #4
 8003040:	409a      	lsls	r2, r3
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	4013      	ands	r3, r2
 8003046:	2b00      	cmp	r3, #0
 8003048:	d012      	beq.n	8003070 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 0302 	and.w	r3, r3, #2
 8003054:	2b00      	cmp	r3, #0
 8003056:	d00b      	beq.n	8003070 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800305c:	2204      	movs	r2, #4
 800305e:	409a      	lsls	r2, r3
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003068:	f043 0204 	orr.w	r2, r3, #4
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003074:	2210      	movs	r2, #16
 8003076:	409a      	lsls	r2, r3
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	4013      	ands	r3, r2
 800307c:	2b00      	cmp	r3, #0
 800307e:	d043      	beq.n	8003108 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0308 	and.w	r3, r3, #8
 800308a:	2b00      	cmp	r3, #0
 800308c:	d03c      	beq.n	8003108 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003092:	2210      	movs	r2, #16
 8003094:	409a      	lsls	r2, r3
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d018      	beq.n	80030da <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d108      	bne.n	80030c8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d024      	beq.n	8003108 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	4798      	blx	r3
 80030c6:	e01f      	b.n	8003108 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d01b      	beq.n	8003108 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030d4:	6878      	ldr	r0, [r7, #4]
 80030d6:	4798      	blx	r3
 80030d8:	e016      	b.n	8003108 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d107      	bne.n	80030f8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f022 0208 	bic.w	r2, r2, #8
 80030f6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d003      	beq.n	8003108 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800310c:	2220      	movs	r2, #32
 800310e:	409a      	lsls	r2, r3
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	4013      	ands	r3, r2
 8003114:	2b00      	cmp	r3, #0
 8003116:	f000 808f 	beq.w	8003238 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 0310 	and.w	r3, r3, #16
 8003124:	2b00      	cmp	r3, #0
 8003126:	f000 8087 	beq.w	8003238 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800312e:	2220      	movs	r2, #32
 8003130:	409a      	lsls	r2, r3
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800313c:	b2db      	uxtb	r3, r3
 800313e:	2b05      	cmp	r3, #5
 8003140:	d136      	bne.n	80031b0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f022 0216 	bic.w	r2, r2, #22
 8003150:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	695a      	ldr	r2, [r3, #20]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003160:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003166:	2b00      	cmp	r3, #0
 8003168:	d103      	bne.n	8003172 <HAL_DMA_IRQHandler+0x1da>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800316e:	2b00      	cmp	r3, #0
 8003170:	d007      	beq.n	8003182 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f022 0208 	bic.w	r2, r2, #8
 8003180:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003186:	223f      	movs	r2, #63	@ 0x3f
 8003188:	409a      	lsls	r2, r3
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2201      	movs	r2, #1
 8003192:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2200      	movs	r2, #0
 800319a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d07e      	beq.n	80032a4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	4798      	blx	r3
        }
        return;
 80031ae:	e079      	b.n	80032a4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d01d      	beq.n	80031fa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d10d      	bne.n	80031e8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d031      	beq.n	8003238 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	4798      	blx	r3
 80031dc:	e02c      	b.n	8003238 <HAL_DMA_IRQHandler+0x2a0>
 80031de:	bf00      	nop
 80031e0:	2000000c 	.word	0x2000000c
 80031e4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d023      	beq.n	8003238 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	4798      	blx	r3
 80031f8:	e01e      	b.n	8003238 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003204:	2b00      	cmp	r3, #0
 8003206:	d10f      	bne.n	8003228 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f022 0210 	bic.w	r2, r2, #16
 8003216:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2201      	movs	r2, #1
 800321c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2200      	movs	r2, #0
 8003224:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800322c:	2b00      	cmp	r3, #0
 800322e:	d003      	beq.n	8003238 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003234:	6878      	ldr	r0, [r7, #4]
 8003236:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800323c:	2b00      	cmp	r3, #0
 800323e:	d032      	beq.n	80032a6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003244:	f003 0301 	and.w	r3, r3, #1
 8003248:	2b00      	cmp	r3, #0
 800324a:	d022      	beq.n	8003292 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2205      	movs	r2, #5
 8003250:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f022 0201 	bic.w	r2, r2, #1
 8003262:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	3301      	adds	r3, #1
 8003268:	60bb      	str	r3, [r7, #8]
 800326a:	697a      	ldr	r2, [r7, #20]
 800326c:	429a      	cmp	r2, r3
 800326e:	d307      	bcc.n	8003280 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 0301 	and.w	r3, r3, #1
 800327a:	2b00      	cmp	r3, #0
 800327c:	d1f2      	bne.n	8003264 <HAL_DMA_IRQHandler+0x2cc>
 800327e:	e000      	b.n	8003282 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003280:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2201      	movs	r2, #1
 8003286:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2200      	movs	r2, #0
 800328e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003296:	2b00      	cmp	r3, #0
 8003298:	d005      	beq.n	80032a6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	4798      	blx	r3
 80032a2:	e000      	b.n	80032a6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80032a4:	bf00      	nop
    }
  }
}
 80032a6:	3718      	adds	r7, #24
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}

080032ac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b085      	sub	sp, #20
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	60f8      	str	r0, [r7, #12]
 80032b4:	60b9      	str	r1, [r7, #8]
 80032b6:	607a      	str	r2, [r7, #4]
 80032b8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80032c8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	683a      	ldr	r2, [r7, #0]
 80032d0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	2b40      	cmp	r3, #64	@ 0x40
 80032d8:	d108      	bne.n	80032ec <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	68ba      	ldr	r2, [r7, #8]
 80032e8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80032ea:	e007      	b.n	80032fc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	68ba      	ldr	r2, [r7, #8]
 80032f2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	60da      	str	r2, [r3, #12]
}
 80032fc:	bf00      	nop
 80032fe:	3714      	adds	r7, #20
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr

08003308 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003308:	b480      	push	{r7}
 800330a:	b085      	sub	sp, #20
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	b2db      	uxtb	r3, r3
 8003316:	3b10      	subs	r3, #16
 8003318:	4a14      	ldr	r2, [pc, #80]	@ (800336c <DMA_CalcBaseAndBitshift+0x64>)
 800331a:	fba2 2303 	umull	r2, r3, r2, r3
 800331e:	091b      	lsrs	r3, r3, #4
 8003320:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003322:	4a13      	ldr	r2, [pc, #76]	@ (8003370 <DMA_CalcBaseAndBitshift+0x68>)
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	4413      	add	r3, r2
 8003328:	781b      	ldrb	r3, [r3, #0]
 800332a:	461a      	mov	r2, r3
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2b03      	cmp	r3, #3
 8003334:	d909      	bls.n	800334a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800333e:	f023 0303 	bic.w	r3, r3, #3
 8003342:	1d1a      	adds	r2, r3, #4
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	659a      	str	r2, [r3, #88]	@ 0x58
 8003348:	e007      	b.n	800335a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003352:	f023 0303 	bic.w	r3, r3, #3
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800335e:	4618      	mov	r0, r3
 8003360:	3714      	adds	r7, #20
 8003362:	46bd      	mov	sp, r7
 8003364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003368:	4770      	bx	lr
 800336a:	bf00      	nop
 800336c:	aaaaaaab 	.word	0xaaaaaaab
 8003370:	0800fbc4 	.word	0x0800fbc4

08003374 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003374:	b480      	push	{r7}
 8003376:	b085      	sub	sp, #20
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800337c:	2300      	movs	r3, #0
 800337e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003384:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	699b      	ldr	r3, [r3, #24]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d11f      	bne.n	80033ce <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	2b03      	cmp	r3, #3
 8003392:	d856      	bhi.n	8003442 <DMA_CheckFifoParam+0xce>
 8003394:	a201      	add	r2, pc, #4	@ (adr r2, 800339c <DMA_CheckFifoParam+0x28>)
 8003396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800339a:	bf00      	nop
 800339c:	080033ad 	.word	0x080033ad
 80033a0:	080033bf 	.word	0x080033bf
 80033a4:	080033ad 	.word	0x080033ad
 80033a8:	08003443 	.word	0x08003443
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033b0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d046      	beq.n	8003446 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033bc:	e043      	b.n	8003446 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033c2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80033c6:	d140      	bne.n	800344a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033cc:	e03d      	b.n	800344a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	699b      	ldr	r3, [r3, #24]
 80033d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80033d6:	d121      	bne.n	800341c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	2b03      	cmp	r3, #3
 80033dc:	d837      	bhi.n	800344e <DMA_CheckFifoParam+0xda>
 80033de:	a201      	add	r2, pc, #4	@ (adr r2, 80033e4 <DMA_CheckFifoParam+0x70>)
 80033e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033e4:	080033f5 	.word	0x080033f5
 80033e8:	080033fb 	.word	0x080033fb
 80033ec:	080033f5 	.word	0x080033f5
 80033f0:	0800340d 	.word	0x0800340d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	73fb      	strb	r3, [r7, #15]
      break;
 80033f8:	e030      	b.n	800345c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033fe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d025      	beq.n	8003452 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800340a:	e022      	b.n	8003452 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003410:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003414:	d11f      	bne.n	8003456 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800341a:	e01c      	b.n	8003456 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	2b02      	cmp	r3, #2
 8003420:	d903      	bls.n	800342a <DMA_CheckFifoParam+0xb6>
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	2b03      	cmp	r3, #3
 8003426:	d003      	beq.n	8003430 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003428:	e018      	b.n	800345c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	73fb      	strb	r3, [r7, #15]
      break;
 800342e:	e015      	b.n	800345c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003434:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003438:	2b00      	cmp	r3, #0
 800343a:	d00e      	beq.n	800345a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	73fb      	strb	r3, [r7, #15]
      break;
 8003440:	e00b      	b.n	800345a <DMA_CheckFifoParam+0xe6>
      break;
 8003442:	bf00      	nop
 8003444:	e00a      	b.n	800345c <DMA_CheckFifoParam+0xe8>
      break;
 8003446:	bf00      	nop
 8003448:	e008      	b.n	800345c <DMA_CheckFifoParam+0xe8>
      break;
 800344a:	bf00      	nop
 800344c:	e006      	b.n	800345c <DMA_CheckFifoParam+0xe8>
      break;
 800344e:	bf00      	nop
 8003450:	e004      	b.n	800345c <DMA_CheckFifoParam+0xe8>
      break;
 8003452:	bf00      	nop
 8003454:	e002      	b.n	800345c <DMA_CheckFifoParam+0xe8>
      break;   
 8003456:	bf00      	nop
 8003458:	e000      	b.n	800345c <DMA_CheckFifoParam+0xe8>
      break;
 800345a:	bf00      	nop
    }
  } 
  
  return status; 
 800345c:	7bfb      	ldrb	r3, [r7, #15]
}
 800345e:	4618      	mov	r0, r3
 8003460:	3714      	adds	r7, #20
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr
 800346a:	bf00      	nop

0800346c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800346c:	b480      	push	{r7}
 800346e:	b089      	sub	sp, #36	@ 0x24
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003476:	2300      	movs	r3, #0
 8003478:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800347a:	2300      	movs	r3, #0
 800347c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800347e:	2300      	movs	r3, #0
 8003480:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003482:	2300      	movs	r3, #0
 8003484:	61fb      	str	r3, [r7, #28]
 8003486:	e16b      	b.n	8003760 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003488:	2201      	movs	r2, #1
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	fa02 f303 	lsl.w	r3, r2, r3
 8003490:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	697a      	ldr	r2, [r7, #20]
 8003498:	4013      	ands	r3, r2
 800349a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800349c:	693a      	ldr	r2, [r7, #16]
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	429a      	cmp	r2, r3
 80034a2:	f040 815a 	bne.w	800375a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	f003 0303 	and.w	r3, r3, #3
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d005      	beq.n	80034be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80034ba:	2b02      	cmp	r3, #2
 80034bc:	d130      	bne.n	8003520 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80034c4:	69fb      	ldr	r3, [r7, #28]
 80034c6:	005b      	lsls	r3, r3, #1
 80034c8:	2203      	movs	r2, #3
 80034ca:	fa02 f303 	lsl.w	r3, r2, r3
 80034ce:	43db      	mvns	r3, r3
 80034d0:	69ba      	ldr	r2, [r7, #24]
 80034d2:	4013      	ands	r3, r2
 80034d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	68da      	ldr	r2, [r3, #12]
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	005b      	lsls	r3, r3, #1
 80034de:	fa02 f303 	lsl.w	r3, r2, r3
 80034e2:	69ba      	ldr	r2, [r7, #24]
 80034e4:	4313      	orrs	r3, r2
 80034e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	69ba      	ldr	r2, [r7, #24]
 80034ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80034f4:	2201      	movs	r2, #1
 80034f6:	69fb      	ldr	r3, [r7, #28]
 80034f8:	fa02 f303 	lsl.w	r3, r2, r3
 80034fc:	43db      	mvns	r3, r3
 80034fe:	69ba      	ldr	r2, [r7, #24]
 8003500:	4013      	ands	r3, r2
 8003502:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	091b      	lsrs	r3, r3, #4
 800350a:	f003 0201 	and.w	r2, r3, #1
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	fa02 f303 	lsl.w	r3, r2, r3
 8003514:	69ba      	ldr	r2, [r7, #24]
 8003516:	4313      	orrs	r3, r2
 8003518:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	69ba      	ldr	r2, [r7, #24]
 800351e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	f003 0303 	and.w	r3, r3, #3
 8003528:	2b03      	cmp	r3, #3
 800352a:	d017      	beq.n	800355c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	005b      	lsls	r3, r3, #1
 8003536:	2203      	movs	r2, #3
 8003538:	fa02 f303 	lsl.w	r3, r2, r3
 800353c:	43db      	mvns	r3, r3
 800353e:	69ba      	ldr	r2, [r7, #24]
 8003540:	4013      	ands	r3, r2
 8003542:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	689a      	ldr	r2, [r3, #8]
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	005b      	lsls	r3, r3, #1
 800354c:	fa02 f303 	lsl.w	r3, r2, r3
 8003550:	69ba      	ldr	r2, [r7, #24]
 8003552:	4313      	orrs	r3, r2
 8003554:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	69ba      	ldr	r2, [r7, #24]
 800355a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	f003 0303 	and.w	r3, r3, #3
 8003564:	2b02      	cmp	r3, #2
 8003566:	d123      	bne.n	80035b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003568:	69fb      	ldr	r3, [r7, #28]
 800356a:	08da      	lsrs	r2, r3, #3
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	3208      	adds	r2, #8
 8003570:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003574:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003576:	69fb      	ldr	r3, [r7, #28]
 8003578:	f003 0307 	and.w	r3, r3, #7
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	220f      	movs	r2, #15
 8003580:	fa02 f303 	lsl.w	r3, r2, r3
 8003584:	43db      	mvns	r3, r3
 8003586:	69ba      	ldr	r2, [r7, #24]
 8003588:	4013      	ands	r3, r2
 800358a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	691a      	ldr	r2, [r3, #16]
 8003590:	69fb      	ldr	r3, [r7, #28]
 8003592:	f003 0307 	and.w	r3, r3, #7
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	fa02 f303 	lsl.w	r3, r2, r3
 800359c:	69ba      	ldr	r2, [r7, #24]
 800359e:	4313      	orrs	r3, r2
 80035a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	08da      	lsrs	r2, r3, #3
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	3208      	adds	r2, #8
 80035aa:	69b9      	ldr	r1, [r7, #24]
 80035ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	005b      	lsls	r3, r3, #1
 80035ba:	2203      	movs	r2, #3
 80035bc:	fa02 f303 	lsl.w	r3, r2, r3
 80035c0:	43db      	mvns	r3, r3
 80035c2:	69ba      	ldr	r2, [r7, #24]
 80035c4:	4013      	ands	r3, r2
 80035c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	f003 0203 	and.w	r2, r3, #3
 80035d0:	69fb      	ldr	r3, [r7, #28]
 80035d2:	005b      	lsls	r3, r3, #1
 80035d4:	fa02 f303 	lsl.w	r3, r2, r3
 80035d8:	69ba      	ldr	r2, [r7, #24]
 80035da:	4313      	orrs	r3, r2
 80035dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	69ba      	ldr	r2, [r7, #24]
 80035e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	f000 80b4 	beq.w	800375a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035f2:	2300      	movs	r3, #0
 80035f4:	60fb      	str	r3, [r7, #12]
 80035f6:	4b60      	ldr	r3, [pc, #384]	@ (8003778 <HAL_GPIO_Init+0x30c>)
 80035f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035fa:	4a5f      	ldr	r2, [pc, #380]	@ (8003778 <HAL_GPIO_Init+0x30c>)
 80035fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003600:	6453      	str	r3, [r2, #68]	@ 0x44
 8003602:	4b5d      	ldr	r3, [pc, #372]	@ (8003778 <HAL_GPIO_Init+0x30c>)
 8003604:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003606:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800360a:	60fb      	str	r3, [r7, #12]
 800360c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800360e:	4a5b      	ldr	r2, [pc, #364]	@ (800377c <HAL_GPIO_Init+0x310>)
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	089b      	lsrs	r3, r3, #2
 8003614:	3302      	adds	r3, #2
 8003616:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800361a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800361c:	69fb      	ldr	r3, [r7, #28]
 800361e:	f003 0303 	and.w	r3, r3, #3
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	220f      	movs	r2, #15
 8003626:	fa02 f303 	lsl.w	r3, r2, r3
 800362a:	43db      	mvns	r3, r3
 800362c:	69ba      	ldr	r2, [r7, #24]
 800362e:	4013      	ands	r3, r2
 8003630:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	4a52      	ldr	r2, [pc, #328]	@ (8003780 <HAL_GPIO_Init+0x314>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d02b      	beq.n	8003692 <HAL_GPIO_Init+0x226>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	4a51      	ldr	r2, [pc, #324]	@ (8003784 <HAL_GPIO_Init+0x318>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d025      	beq.n	800368e <HAL_GPIO_Init+0x222>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	4a50      	ldr	r2, [pc, #320]	@ (8003788 <HAL_GPIO_Init+0x31c>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d01f      	beq.n	800368a <HAL_GPIO_Init+0x21e>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	4a4f      	ldr	r2, [pc, #316]	@ (800378c <HAL_GPIO_Init+0x320>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d019      	beq.n	8003686 <HAL_GPIO_Init+0x21a>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	4a4e      	ldr	r2, [pc, #312]	@ (8003790 <HAL_GPIO_Init+0x324>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d013      	beq.n	8003682 <HAL_GPIO_Init+0x216>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	4a4d      	ldr	r2, [pc, #308]	@ (8003794 <HAL_GPIO_Init+0x328>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d00d      	beq.n	800367e <HAL_GPIO_Init+0x212>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	4a4c      	ldr	r2, [pc, #304]	@ (8003798 <HAL_GPIO_Init+0x32c>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d007      	beq.n	800367a <HAL_GPIO_Init+0x20e>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	4a4b      	ldr	r2, [pc, #300]	@ (800379c <HAL_GPIO_Init+0x330>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d101      	bne.n	8003676 <HAL_GPIO_Init+0x20a>
 8003672:	2307      	movs	r3, #7
 8003674:	e00e      	b.n	8003694 <HAL_GPIO_Init+0x228>
 8003676:	2308      	movs	r3, #8
 8003678:	e00c      	b.n	8003694 <HAL_GPIO_Init+0x228>
 800367a:	2306      	movs	r3, #6
 800367c:	e00a      	b.n	8003694 <HAL_GPIO_Init+0x228>
 800367e:	2305      	movs	r3, #5
 8003680:	e008      	b.n	8003694 <HAL_GPIO_Init+0x228>
 8003682:	2304      	movs	r3, #4
 8003684:	e006      	b.n	8003694 <HAL_GPIO_Init+0x228>
 8003686:	2303      	movs	r3, #3
 8003688:	e004      	b.n	8003694 <HAL_GPIO_Init+0x228>
 800368a:	2302      	movs	r3, #2
 800368c:	e002      	b.n	8003694 <HAL_GPIO_Init+0x228>
 800368e:	2301      	movs	r3, #1
 8003690:	e000      	b.n	8003694 <HAL_GPIO_Init+0x228>
 8003692:	2300      	movs	r3, #0
 8003694:	69fa      	ldr	r2, [r7, #28]
 8003696:	f002 0203 	and.w	r2, r2, #3
 800369a:	0092      	lsls	r2, r2, #2
 800369c:	4093      	lsls	r3, r2
 800369e:	69ba      	ldr	r2, [r7, #24]
 80036a0:	4313      	orrs	r3, r2
 80036a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80036a4:	4935      	ldr	r1, [pc, #212]	@ (800377c <HAL_GPIO_Init+0x310>)
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	089b      	lsrs	r3, r3, #2
 80036aa:	3302      	adds	r3, #2
 80036ac:	69ba      	ldr	r2, [r7, #24]
 80036ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80036b2:	4b3b      	ldr	r3, [pc, #236]	@ (80037a0 <HAL_GPIO_Init+0x334>)
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	43db      	mvns	r3, r3
 80036bc:	69ba      	ldr	r2, [r7, #24]
 80036be:	4013      	ands	r3, r2
 80036c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d003      	beq.n	80036d6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80036ce:	69ba      	ldr	r2, [r7, #24]
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	4313      	orrs	r3, r2
 80036d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80036d6:	4a32      	ldr	r2, [pc, #200]	@ (80037a0 <HAL_GPIO_Init+0x334>)
 80036d8:	69bb      	ldr	r3, [r7, #24]
 80036da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80036dc:	4b30      	ldr	r3, [pc, #192]	@ (80037a0 <HAL_GPIO_Init+0x334>)
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	43db      	mvns	r3, r3
 80036e6:	69ba      	ldr	r2, [r7, #24]
 80036e8:	4013      	ands	r3, r2
 80036ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d003      	beq.n	8003700 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80036f8:	69ba      	ldr	r2, [r7, #24]
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	4313      	orrs	r3, r2
 80036fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003700:	4a27      	ldr	r2, [pc, #156]	@ (80037a0 <HAL_GPIO_Init+0x334>)
 8003702:	69bb      	ldr	r3, [r7, #24]
 8003704:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003706:	4b26      	ldr	r3, [pc, #152]	@ (80037a0 <HAL_GPIO_Init+0x334>)
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	43db      	mvns	r3, r3
 8003710:	69ba      	ldr	r2, [r7, #24]
 8003712:	4013      	ands	r3, r2
 8003714:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800371e:	2b00      	cmp	r3, #0
 8003720:	d003      	beq.n	800372a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003722:	69ba      	ldr	r2, [r7, #24]
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	4313      	orrs	r3, r2
 8003728:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800372a:	4a1d      	ldr	r2, [pc, #116]	@ (80037a0 <HAL_GPIO_Init+0x334>)
 800372c:	69bb      	ldr	r3, [r7, #24]
 800372e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003730:	4b1b      	ldr	r3, [pc, #108]	@ (80037a0 <HAL_GPIO_Init+0x334>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	43db      	mvns	r3, r3
 800373a:	69ba      	ldr	r2, [r7, #24]
 800373c:	4013      	ands	r3, r2
 800373e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003748:	2b00      	cmp	r3, #0
 800374a:	d003      	beq.n	8003754 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800374c:	69ba      	ldr	r2, [r7, #24]
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	4313      	orrs	r3, r2
 8003752:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003754:	4a12      	ldr	r2, [pc, #72]	@ (80037a0 <HAL_GPIO_Init+0x334>)
 8003756:	69bb      	ldr	r3, [r7, #24]
 8003758:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800375a:	69fb      	ldr	r3, [r7, #28]
 800375c:	3301      	adds	r3, #1
 800375e:	61fb      	str	r3, [r7, #28]
 8003760:	69fb      	ldr	r3, [r7, #28]
 8003762:	2b0f      	cmp	r3, #15
 8003764:	f67f ae90 	bls.w	8003488 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003768:	bf00      	nop
 800376a:	bf00      	nop
 800376c:	3724      	adds	r7, #36	@ 0x24
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr
 8003776:	bf00      	nop
 8003778:	40023800 	.word	0x40023800
 800377c:	40013800 	.word	0x40013800
 8003780:	40020000 	.word	0x40020000
 8003784:	40020400 	.word	0x40020400
 8003788:	40020800 	.word	0x40020800
 800378c:	40020c00 	.word	0x40020c00
 8003790:	40021000 	.word	0x40021000
 8003794:	40021400 	.word	0x40021400
 8003798:	40021800 	.word	0x40021800
 800379c:	40021c00 	.word	0x40021c00
 80037a0:	40013c00 	.word	0x40013c00

080037a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b085      	sub	sp, #20
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
 80037ac:	460b      	mov	r3, r1
 80037ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	691a      	ldr	r2, [r3, #16]
 80037b4:	887b      	ldrh	r3, [r7, #2]
 80037b6:	4013      	ands	r3, r2
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d002      	beq.n	80037c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80037bc:	2301      	movs	r3, #1
 80037be:	73fb      	strb	r3, [r7, #15]
 80037c0:	e001      	b.n	80037c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80037c2:	2300      	movs	r3, #0
 80037c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80037c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	3714      	adds	r7, #20
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr

080037d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b083      	sub	sp, #12
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	460b      	mov	r3, r1
 80037de:	807b      	strh	r3, [r7, #2]
 80037e0:	4613      	mov	r3, r2
 80037e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80037e4:	787b      	ldrb	r3, [r7, #1]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d003      	beq.n	80037f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80037ea:	887a      	ldrh	r2, [r7, #2]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80037f0:	e003      	b.n	80037fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80037f2:	887b      	ldrh	r3, [r7, #2]
 80037f4:	041a      	lsls	r2, r3, #16
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	619a      	str	r2, [r3, #24]
}
 80037fa:	bf00      	nop
 80037fc:	370c      	adds	r7, #12
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr
	...

08003808 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b082      	sub	sp, #8
 800380c:	af00      	add	r7, sp, #0
 800380e:	4603      	mov	r3, r0
 8003810:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003812:	4b08      	ldr	r3, [pc, #32]	@ (8003834 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003814:	695a      	ldr	r2, [r3, #20]
 8003816:	88fb      	ldrh	r3, [r7, #6]
 8003818:	4013      	ands	r3, r2
 800381a:	2b00      	cmp	r3, #0
 800381c:	d006      	beq.n	800382c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800381e:	4a05      	ldr	r2, [pc, #20]	@ (8003834 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003820:	88fb      	ldrh	r3, [r7, #6]
 8003822:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003824:	88fb      	ldrh	r3, [r7, #6]
 8003826:	4618      	mov	r0, r3
 8003828:	f7fd fbf4 	bl	8001014 <HAL_GPIO_EXTI_Callback>
  }
}
 800382c:	bf00      	nop
 800382e:	3708      	adds	r7, #8
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}
 8003834:	40013c00 	.word	0x40013c00

08003838 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b086      	sub	sp, #24
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d101      	bne.n	800384a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e267      	b.n	8003d1a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 0301 	and.w	r3, r3, #1
 8003852:	2b00      	cmp	r3, #0
 8003854:	d075      	beq.n	8003942 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003856:	4b88      	ldr	r3, [pc, #544]	@ (8003a78 <HAL_RCC_OscConfig+0x240>)
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	f003 030c 	and.w	r3, r3, #12
 800385e:	2b04      	cmp	r3, #4
 8003860:	d00c      	beq.n	800387c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003862:	4b85      	ldr	r3, [pc, #532]	@ (8003a78 <HAL_RCC_OscConfig+0x240>)
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800386a:	2b08      	cmp	r3, #8
 800386c:	d112      	bne.n	8003894 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800386e:	4b82      	ldr	r3, [pc, #520]	@ (8003a78 <HAL_RCC_OscConfig+0x240>)
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003876:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800387a:	d10b      	bne.n	8003894 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800387c:	4b7e      	ldr	r3, [pc, #504]	@ (8003a78 <HAL_RCC_OscConfig+0x240>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003884:	2b00      	cmp	r3, #0
 8003886:	d05b      	beq.n	8003940 <HAL_RCC_OscConfig+0x108>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d157      	bne.n	8003940 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	e242      	b.n	8003d1a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800389c:	d106      	bne.n	80038ac <HAL_RCC_OscConfig+0x74>
 800389e:	4b76      	ldr	r3, [pc, #472]	@ (8003a78 <HAL_RCC_OscConfig+0x240>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a75      	ldr	r2, [pc, #468]	@ (8003a78 <HAL_RCC_OscConfig+0x240>)
 80038a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038a8:	6013      	str	r3, [r2, #0]
 80038aa:	e01d      	b.n	80038e8 <HAL_RCC_OscConfig+0xb0>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80038b4:	d10c      	bne.n	80038d0 <HAL_RCC_OscConfig+0x98>
 80038b6:	4b70      	ldr	r3, [pc, #448]	@ (8003a78 <HAL_RCC_OscConfig+0x240>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a6f      	ldr	r2, [pc, #444]	@ (8003a78 <HAL_RCC_OscConfig+0x240>)
 80038bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80038c0:	6013      	str	r3, [r2, #0]
 80038c2:	4b6d      	ldr	r3, [pc, #436]	@ (8003a78 <HAL_RCC_OscConfig+0x240>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a6c      	ldr	r2, [pc, #432]	@ (8003a78 <HAL_RCC_OscConfig+0x240>)
 80038c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038cc:	6013      	str	r3, [r2, #0]
 80038ce:	e00b      	b.n	80038e8 <HAL_RCC_OscConfig+0xb0>
 80038d0:	4b69      	ldr	r3, [pc, #420]	@ (8003a78 <HAL_RCC_OscConfig+0x240>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a68      	ldr	r2, [pc, #416]	@ (8003a78 <HAL_RCC_OscConfig+0x240>)
 80038d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038da:	6013      	str	r3, [r2, #0]
 80038dc:	4b66      	ldr	r3, [pc, #408]	@ (8003a78 <HAL_RCC_OscConfig+0x240>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a65      	ldr	r2, [pc, #404]	@ (8003a78 <HAL_RCC_OscConfig+0x240>)
 80038e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80038e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d013      	beq.n	8003918 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038f0:	f7fe fcd8 	bl	80022a4 <HAL_GetTick>
 80038f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038f6:	e008      	b.n	800390a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038f8:	f7fe fcd4 	bl	80022a4 <HAL_GetTick>
 80038fc:	4602      	mov	r2, r0
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	2b64      	cmp	r3, #100	@ 0x64
 8003904:	d901      	bls.n	800390a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003906:	2303      	movs	r3, #3
 8003908:	e207      	b.n	8003d1a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800390a:	4b5b      	ldr	r3, [pc, #364]	@ (8003a78 <HAL_RCC_OscConfig+0x240>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003912:	2b00      	cmp	r3, #0
 8003914:	d0f0      	beq.n	80038f8 <HAL_RCC_OscConfig+0xc0>
 8003916:	e014      	b.n	8003942 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003918:	f7fe fcc4 	bl	80022a4 <HAL_GetTick>
 800391c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800391e:	e008      	b.n	8003932 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003920:	f7fe fcc0 	bl	80022a4 <HAL_GetTick>
 8003924:	4602      	mov	r2, r0
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	1ad3      	subs	r3, r2, r3
 800392a:	2b64      	cmp	r3, #100	@ 0x64
 800392c:	d901      	bls.n	8003932 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	e1f3      	b.n	8003d1a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003932:	4b51      	ldr	r3, [pc, #324]	@ (8003a78 <HAL_RCC_OscConfig+0x240>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800393a:	2b00      	cmp	r3, #0
 800393c:	d1f0      	bne.n	8003920 <HAL_RCC_OscConfig+0xe8>
 800393e:	e000      	b.n	8003942 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003940:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 0302 	and.w	r3, r3, #2
 800394a:	2b00      	cmp	r3, #0
 800394c:	d063      	beq.n	8003a16 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800394e:	4b4a      	ldr	r3, [pc, #296]	@ (8003a78 <HAL_RCC_OscConfig+0x240>)
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	f003 030c 	and.w	r3, r3, #12
 8003956:	2b00      	cmp	r3, #0
 8003958:	d00b      	beq.n	8003972 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800395a:	4b47      	ldr	r3, [pc, #284]	@ (8003a78 <HAL_RCC_OscConfig+0x240>)
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003962:	2b08      	cmp	r3, #8
 8003964:	d11c      	bne.n	80039a0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003966:	4b44      	ldr	r3, [pc, #272]	@ (8003a78 <HAL_RCC_OscConfig+0x240>)
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800396e:	2b00      	cmp	r3, #0
 8003970:	d116      	bne.n	80039a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003972:	4b41      	ldr	r3, [pc, #260]	@ (8003a78 <HAL_RCC_OscConfig+0x240>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0302 	and.w	r3, r3, #2
 800397a:	2b00      	cmp	r3, #0
 800397c:	d005      	beq.n	800398a <HAL_RCC_OscConfig+0x152>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	2b01      	cmp	r3, #1
 8003984:	d001      	beq.n	800398a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e1c7      	b.n	8003d1a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800398a:	4b3b      	ldr	r3, [pc, #236]	@ (8003a78 <HAL_RCC_OscConfig+0x240>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	691b      	ldr	r3, [r3, #16]
 8003996:	00db      	lsls	r3, r3, #3
 8003998:	4937      	ldr	r1, [pc, #220]	@ (8003a78 <HAL_RCC_OscConfig+0x240>)
 800399a:	4313      	orrs	r3, r2
 800399c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800399e:	e03a      	b.n	8003a16 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d020      	beq.n	80039ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039a8:	4b34      	ldr	r3, [pc, #208]	@ (8003a7c <HAL_RCC_OscConfig+0x244>)
 80039aa:	2201      	movs	r2, #1
 80039ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039ae:	f7fe fc79 	bl	80022a4 <HAL_GetTick>
 80039b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039b4:	e008      	b.n	80039c8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039b6:	f7fe fc75 	bl	80022a4 <HAL_GetTick>
 80039ba:	4602      	mov	r2, r0
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	1ad3      	subs	r3, r2, r3
 80039c0:	2b02      	cmp	r3, #2
 80039c2:	d901      	bls.n	80039c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80039c4:	2303      	movs	r3, #3
 80039c6:	e1a8      	b.n	8003d1a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039c8:	4b2b      	ldr	r3, [pc, #172]	@ (8003a78 <HAL_RCC_OscConfig+0x240>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 0302 	and.w	r3, r3, #2
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d0f0      	beq.n	80039b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039d4:	4b28      	ldr	r3, [pc, #160]	@ (8003a78 <HAL_RCC_OscConfig+0x240>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	691b      	ldr	r3, [r3, #16]
 80039e0:	00db      	lsls	r3, r3, #3
 80039e2:	4925      	ldr	r1, [pc, #148]	@ (8003a78 <HAL_RCC_OscConfig+0x240>)
 80039e4:	4313      	orrs	r3, r2
 80039e6:	600b      	str	r3, [r1, #0]
 80039e8:	e015      	b.n	8003a16 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039ea:	4b24      	ldr	r3, [pc, #144]	@ (8003a7c <HAL_RCC_OscConfig+0x244>)
 80039ec:	2200      	movs	r2, #0
 80039ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039f0:	f7fe fc58 	bl	80022a4 <HAL_GetTick>
 80039f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039f6:	e008      	b.n	8003a0a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039f8:	f7fe fc54 	bl	80022a4 <HAL_GetTick>
 80039fc:	4602      	mov	r2, r0
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	2b02      	cmp	r3, #2
 8003a04:	d901      	bls.n	8003a0a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003a06:	2303      	movs	r3, #3
 8003a08:	e187      	b.n	8003d1a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a0a:	4b1b      	ldr	r3, [pc, #108]	@ (8003a78 <HAL_RCC_OscConfig+0x240>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0302 	and.w	r3, r3, #2
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d1f0      	bne.n	80039f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 0308 	and.w	r3, r3, #8
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d036      	beq.n	8003a90 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	695b      	ldr	r3, [r3, #20]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d016      	beq.n	8003a58 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a2a:	4b15      	ldr	r3, [pc, #84]	@ (8003a80 <HAL_RCC_OscConfig+0x248>)
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a30:	f7fe fc38 	bl	80022a4 <HAL_GetTick>
 8003a34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a36:	e008      	b.n	8003a4a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a38:	f7fe fc34 	bl	80022a4 <HAL_GetTick>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	2b02      	cmp	r3, #2
 8003a44:	d901      	bls.n	8003a4a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003a46:	2303      	movs	r3, #3
 8003a48:	e167      	b.n	8003d1a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a4a:	4b0b      	ldr	r3, [pc, #44]	@ (8003a78 <HAL_RCC_OscConfig+0x240>)
 8003a4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a4e:	f003 0302 	and.w	r3, r3, #2
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d0f0      	beq.n	8003a38 <HAL_RCC_OscConfig+0x200>
 8003a56:	e01b      	b.n	8003a90 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a58:	4b09      	ldr	r3, [pc, #36]	@ (8003a80 <HAL_RCC_OscConfig+0x248>)
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a5e:	f7fe fc21 	bl	80022a4 <HAL_GetTick>
 8003a62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a64:	e00e      	b.n	8003a84 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a66:	f7fe fc1d 	bl	80022a4 <HAL_GetTick>
 8003a6a:	4602      	mov	r2, r0
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	1ad3      	subs	r3, r2, r3
 8003a70:	2b02      	cmp	r3, #2
 8003a72:	d907      	bls.n	8003a84 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003a74:	2303      	movs	r3, #3
 8003a76:	e150      	b.n	8003d1a <HAL_RCC_OscConfig+0x4e2>
 8003a78:	40023800 	.word	0x40023800
 8003a7c:	42470000 	.word	0x42470000
 8003a80:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a84:	4b88      	ldr	r3, [pc, #544]	@ (8003ca8 <HAL_RCC_OscConfig+0x470>)
 8003a86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a88:	f003 0302 	and.w	r3, r3, #2
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d1ea      	bne.n	8003a66 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 0304 	and.w	r3, r3, #4
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	f000 8097 	beq.w	8003bcc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003aa2:	4b81      	ldr	r3, [pc, #516]	@ (8003ca8 <HAL_RCC_OscConfig+0x470>)
 8003aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aa6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d10f      	bne.n	8003ace <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003aae:	2300      	movs	r3, #0
 8003ab0:	60bb      	str	r3, [r7, #8]
 8003ab2:	4b7d      	ldr	r3, [pc, #500]	@ (8003ca8 <HAL_RCC_OscConfig+0x470>)
 8003ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ab6:	4a7c      	ldr	r2, [pc, #496]	@ (8003ca8 <HAL_RCC_OscConfig+0x470>)
 8003ab8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003abc:	6413      	str	r3, [r2, #64]	@ 0x40
 8003abe:	4b7a      	ldr	r3, [pc, #488]	@ (8003ca8 <HAL_RCC_OscConfig+0x470>)
 8003ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ac2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ac6:	60bb      	str	r3, [r7, #8]
 8003ac8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003aca:	2301      	movs	r3, #1
 8003acc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ace:	4b77      	ldr	r3, [pc, #476]	@ (8003cac <HAL_RCC_OscConfig+0x474>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d118      	bne.n	8003b0c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ada:	4b74      	ldr	r3, [pc, #464]	@ (8003cac <HAL_RCC_OscConfig+0x474>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a73      	ldr	r2, [pc, #460]	@ (8003cac <HAL_RCC_OscConfig+0x474>)
 8003ae0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ae4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ae6:	f7fe fbdd 	bl	80022a4 <HAL_GetTick>
 8003aea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aec:	e008      	b.n	8003b00 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003aee:	f7fe fbd9 	bl	80022a4 <HAL_GetTick>
 8003af2:	4602      	mov	r2, r0
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	1ad3      	subs	r3, r2, r3
 8003af8:	2b02      	cmp	r3, #2
 8003afa:	d901      	bls.n	8003b00 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003afc:	2303      	movs	r3, #3
 8003afe:	e10c      	b.n	8003d1a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b00:	4b6a      	ldr	r3, [pc, #424]	@ (8003cac <HAL_RCC_OscConfig+0x474>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d0f0      	beq.n	8003aee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d106      	bne.n	8003b22 <HAL_RCC_OscConfig+0x2ea>
 8003b14:	4b64      	ldr	r3, [pc, #400]	@ (8003ca8 <HAL_RCC_OscConfig+0x470>)
 8003b16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b18:	4a63      	ldr	r2, [pc, #396]	@ (8003ca8 <HAL_RCC_OscConfig+0x470>)
 8003b1a:	f043 0301 	orr.w	r3, r3, #1
 8003b1e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b20:	e01c      	b.n	8003b5c <HAL_RCC_OscConfig+0x324>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	2b05      	cmp	r3, #5
 8003b28:	d10c      	bne.n	8003b44 <HAL_RCC_OscConfig+0x30c>
 8003b2a:	4b5f      	ldr	r3, [pc, #380]	@ (8003ca8 <HAL_RCC_OscConfig+0x470>)
 8003b2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b2e:	4a5e      	ldr	r2, [pc, #376]	@ (8003ca8 <HAL_RCC_OscConfig+0x470>)
 8003b30:	f043 0304 	orr.w	r3, r3, #4
 8003b34:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b36:	4b5c      	ldr	r3, [pc, #368]	@ (8003ca8 <HAL_RCC_OscConfig+0x470>)
 8003b38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b3a:	4a5b      	ldr	r2, [pc, #364]	@ (8003ca8 <HAL_RCC_OscConfig+0x470>)
 8003b3c:	f043 0301 	orr.w	r3, r3, #1
 8003b40:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b42:	e00b      	b.n	8003b5c <HAL_RCC_OscConfig+0x324>
 8003b44:	4b58      	ldr	r3, [pc, #352]	@ (8003ca8 <HAL_RCC_OscConfig+0x470>)
 8003b46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b48:	4a57      	ldr	r2, [pc, #348]	@ (8003ca8 <HAL_RCC_OscConfig+0x470>)
 8003b4a:	f023 0301 	bic.w	r3, r3, #1
 8003b4e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b50:	4b55      	ldr	r3, [pc, #340]	@ (8003ca8 <HAL_RCC_OscConfig+0x470>)
 8003b52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b54:	4a54      	ldr	r2, [pc, #336]	@ (8003ca8 <HAL_RCC_OscConfig+0x470>)
 8003b56:	f023 0304 	bic.w	r3, r3, #4
 8003b5a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d015      	beq.n	8003b90 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b64:	f7fe fb9e 	bl	80022a4 <HAL_GetTick>
 8003b68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b6a:	e00a      	b.n	8003b82 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b6c:	f7fe fb9a 	bl	80022a4 <HAL_GetTick>
 8003b70:	4602      	mov	r2, r0
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d901      	bls.n	8003b82 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	e0cb      	b.n	8003d1a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b82:	4b49      	ldr	r3, [pc, #292]	@ (8003ca8 <HAL_RCC_OscConfig+0x470>)
 8003b84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b86:	f003 0302 	and.w	r3, r3, #2
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d0ee      	beq.n	8003b6c <HAL_RCC_OscConfig+0x334>
 8003b8e:	e014      	b.n	8003bba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b90:	f7fe fb88 	bl	80022a4 <HAL_GetTick>
 8003b94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b96:	e00a      	b.n	8003bae <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b98:	f7fe fb84 	bl	80022a4 <HAL_GetTick>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d901      	bls.n	8003bae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003baa:	2303      	movs	r3, #3
 8003bac:	e0b5      	b.n	8003d1a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bae:	4b3e      	ldr	r3, [pc, #248]	@ (8003ca8 <HAL_RCC_OscConfig+0x470>)
 8003bb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bb2:	f003 0302 	and.w	r3, r3, #2
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d1ee      	bne.n	8003b98 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003bba:	7dfb      	ldrb	r3, [r7, #23]
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d105      	bne.n	8003bcc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bc0:	4b39      	ldr	r3, [pc, #228]	@ (8003ca8 <HAL_RCC_OscConfig+0x470>)
 8003bc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bc4:	4a38      	ldr	r2, [pc, #224]	@ (8003ca8 <HAL_RCC_OscConfig+0x470>)
 8003bc6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003bca:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	699b      	ldr	r3, [r3, #24]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	f000 80a1 	beq.w	8003d18 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003bd6:	4b34      	ldr	r3, [pc, #208]	@ (8003ca8 <HAL_RCC_OscConfig+0x470>)
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	f003 030c 	and.w	r3, r3, #12
 8003bde:	2b08      	cmp	r3, #8
 8003be0:	d05c      	beq.n	8003c9c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	699b      	ldr	r3, [r3, #24]
 8003be6:	2b02      	cmp	r3, #2
 8003be8:	d141      	bne.n	8003c6e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bea:	4b31      	ldr	r3, [pc, #196]	@ (8003cb0 <HAL_RCC_OscConfig+0x478>)
 8003bec:	2200      	movs	r2, #0
 8003bee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bf0:	f7fe fb58 	bl	80022a4 <HAL_GetTick>
 8003bf4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bf6:	e008      	b.n	8003c0a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bf8:	f7fe fb54 	bl	80022a4 <HAL_GetTick>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	1ad3      	subs	r3, r2, r3
 8003c02:	2b02      	cmp	r3, #2
 8003c04:	d901      	bls.n	8003c0a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003c06:	2303      	movs	r3, #3
 8003c08:	e087      	b.n	8003d1a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c0a:	4b27      	ldr	r3, [pc, #156]	@ (8003ca8 <HAL_RCC_OscConfig+0x470>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d1f0      	bne.n	8003bf8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	69da      	ldr	r2, [r3, #28]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6a1b      	ldr	r3, [r3, #32]
 8003c1e:	431a      	orrs	r2, r3
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c24:	019b      	lsls	r3, r3, #6
 8003c26:	431a      	orrs	r2, r3
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c2c:	085b      	lsrs	r3, r3, #1
 8003c2e:	3b01      	subs	r3, #1
 8003c30:	041b      	lsls	r3, r3, #16
 8003c32:	431a      	orrs	r2, r3
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c38:	061b      	lsls	r3, r3, #24
 8003c3a:	491b      	ldr	r1, [pc, #108]	@ (8003ca8 <HAL_RCC_OscConfig+0x470>)
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c40:	4b1b      	ldr	r3, [pc, #108]	@ (8003cb0 <HAL_RCC_OscConfig+0x478>)
 8003c42:	2201      	movs	r2, #1
 8003c44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c46:	f7fe fb2d 	bl	80022a4 <HAL_GetTick>
 8003c4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c4c:	e008      	b.n	8003c60 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c4e:	f7fe fb29 	bl	80022a4 <HAL_GetTick>
 8003c52:	4602      	mov	r2, r0
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	1ad3      	subs	r3, r2, r3
 8003c58:	2b02      	cmp	r3, #2
 8003c5a:	d901      	bls.n	8003c60 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003c5c:	2303      	movs	r3, #3
 8003c5e:	e05c      	b.n	8003d1a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c60:	4b11      	ldr	r3, [pc, #68]	@ (8003ca8 <HAL_RCC_OscConfig+0x470>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d0f0      	beq.n	8003c4e <HAL_RCC_OscConfig+0x416>
 8003c6c:	e054      	b.n	8003d18 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c6e:	4b10      	ldr	r3, [pc, #64]	@ (8003cb0 <HAL_RCC_OscConfig+0x478>)
 8003c70:	2200      	movs	r2, #0
 8003c72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c74:	f7fe fb16 	bl	80022a4 <HAL_GetTick>
 8003c78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c7a:	e008      	b.n	8003c8e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c7c:	f7fe fb12 	bl	80022a4 <HAL_GetTick>
 8003c80:	4602      	mov	r2, r0
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	2b02      	cmp	r3, #2
 8003c88:	d901      	bls.n	8003c8e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003c8a:	2303      	movs	r3, #3
 8003c8c:	e045      	b.n	8003d1a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c8e:	4b06      	ldr	r3, [pc, #24]	@ (8003ca8 <HAL_RCC_OscConfig+0x470>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d1f0      	bne.n	8003c7c <HAL_RCC_OscConfig+0x444>
 8003c9a:	e03d      	b.n	8003d18 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	699b      	ldr	r3, [r3, #24]
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d107      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e038      	b.n	8003d1a <HAL_RCC_OscConfig+0x4e2>
 8003ca8:	40023800 	.word	0x40023800
 8003cac:	40007000 	.word	0x40007000
 8003cb0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003cb4:	4b1b      	ldr	r3, [pc, #108]	@ (8003d24 <HAL_RCC_OscConfig+0x4ec>)
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	699b      	ldr	r3, [r3, #24]
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d028      	beq.n	8003d14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d121      	bne.n	8003d14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d11a      	bne.n	8003d14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003cde:	68fa      	ldr	r2, [r7, #12]
 8003ce0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	687a      	ldr	r2, [r7, #4]
 8003ce8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003cea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d111      	bne.n	8003d14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cfa:	085b      	lsrs	r3, r3, #1
 8003cfc:	3b01      	subs	r3, #1
 8003cfe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d107      	bne.n	8003d14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d0e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d001      	beq.n	8003d18 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	e000      	b.n	8003d1a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003d18:	2300      	movs	r3, #0
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3718      	adds	r7, #24
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	bf00      	nop
 8003d24:	40023800 	.word	0x40023800

08003d28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b084      	sub	sp, #16
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
 8003d30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d101      	bne.n	8003d3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	e0cc      	b.n	8003ed6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d3c:	4b68      	ldr	r3, [pc, #416]	@ (8003ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 0307 	and.w	r3, r3, #7
 8003d44:	683a      	ldr	r2, [r7, #0]
 8003d46:	429a      	cmp	r2, r3
 8003d48:	d90c      	bls.n	8003d64 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d4a:	4b65      	ldr	r3, [pc, #404]	@ (8003ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8003d4c:	683a      	ldr	r2, [r7, #0]
 8003d4e:	b2d2      	uxtb	r2, r2
 8003d50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d52:	4b63      	ldr	r3, [pc, #396]	@ (8003ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 0307 	and.w	r3, r3, #7
 8003d5a:	683a      	ldr	r2, [r7, #0]
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d001      	beq.n	8003d64 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e0b8      	b.n	8003ed6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 0302 	and.w	r3, r3, #2
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d020      	beq.n	8003db2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 0304 	and.w	r3, r3, #4
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d005      	beq.n	8003d88 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d7c:	4b59      	ldr	r3, [pc, #356]	@ (8003ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	4a58      	ldr	r2, [pc, #352]	@ (8003ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d82:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003d86:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 0308 	and.w	r3, r3, #8
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d005      	beq.n	8003da0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d94:	4b53      	ldr	r3, [pc, #332]	@ (8003ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	4a52      	ldr	r2, [pc, #328]	@ (8003ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d9a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003d9e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003da0:	4b50      	ldr	r3, [pc, #320]	@ (8003ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	494d      	ldr	r1, [pc, #308]	@ (8003ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8003dae:	4313      	orrs	r3, r2
 8003db0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f003 0301 	and.w	r3, r3, #1
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d044      	beq.n	8003e48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d107      	bne.n	8003dd6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dc6:	4b47      	ldr	r3, [pc, #284]	@ (8003ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d119      	bne.n	8003e06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e07f      	b.n	8003ed6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	2b02      	cmp	r3, #2
 8003ddc:	d003      	beq.n	8003de6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003de2:	2b03      	cmp	r3, #3
 8003de4:	d107      	bne.n	8003df6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003de6:	4b3f      	ldr	r3, [pc, #252]	@ (8003ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d109      	bne.n	8003e06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e06f      	b.n	8003ed6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003df6:	4b3b      	ldr	r3, [pc, #236]	@ (8003ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 0302 	and.w	r3, r3, #2
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d101      	bne.n	8003e06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e067      	b.n	8003ed6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e06:	4b37      	ldr	r3, [pc, #220]	@ (8003ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	f023 0203 	bic.w	r2, r3, #3
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	4934      	ldr	r1, [pc, #208]	@ (8003ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e14:	4313      	orrs	r3, r2
 8003e16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e18:	f7fe fa44 	bl	80022a4 <HAL_GetTick>
 8003e1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e1e:	e00a      	b.n	8003e36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e20:	f7fe fa40 	bl	80022a4 <HAL_GetTick>
 8003e24:	4602      	mov	r2, r0
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	1ad3      	subs	r3, r2, r3
 8003e2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d901      	bls.n	8003e36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e32:	2303      	movs	r3, #3
 8003e34:	e04f      	b.n	8003ed6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e36:	4b2b      	ldr	r3, [pc, #172]	@ (8003ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	f003 020c 	and.w	r2, r3, #12
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d1eb      	bne.n	8003e20 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e48:	4b25      	ldr	r3, [pc, #148]	@ (8003ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 0307 	and.w	r3, r3, #7
 8003e50:	683a      	ldr	r2, [r7, #0]
 8003e52:	429a      	cmp	r2, r3
 8003e54:	d20c      	bcs.n	8003e70 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e56:	4b22      	ldr	r3, [pc, #136]	@ (8003ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8003e58:	683a      	ldr	r2, [r7, #0]
 8003e5a:	b2d2      	uxtb	r2, r2
 8003e5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e5e:	4b20      	ldr	r3, [pc, #128]	@ (8003ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 0307 	and.w	r3, r3, #7
 8003e66:	683a      	ldr	r2, [r7, #0]
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d001      	beq.n	8003e70 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	e032      	b.n	8003ed6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 0304 	and.w	r3, r3, #4
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d008      	beq.n	8003e8e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e7c:	4b19      	ldr	r3, [pc, #100]	@ (8003ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	68db      	ldr	r3, [r3, #12]
 8003e88:	4916      	ldr	r1, [pc, #88]	@ (8003ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 0308 	and.w	r3, r3, #8
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d009      	beq.n	8003eae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e9a:	4b12      	ldr	r3, [pc, #72]	@ (8003ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	691b      	ldr	r3, [r3, #16]
 8003ea6:	00db      	lsls	r3, r3, #3
 8003ea8:	490e      	ldr	r1, [pc, #56]	@ (8003ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003eae:	f000 f821 	bl	8003ef4 <HAL_RCC_GetSysClockFreq>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	4b0b      	ldr	r3, [pc, #44]	@ (8003ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	091b      	lsrs	r3, r3, #4
 8003eba:	f003 030f 	and.w	r3, r3, #15
 8003ebe:	490a      	ldr	r1, [pc, #40]	@ (8003ee8 <HAL_RCC_ClockConfig+0x1c0>)
 8003ec0:	5ccb      	ldrb	r3, [r1, r3]
 8003ec2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ec6:	4a09      	ldr	r2, [pc, #36]	@ (8003eec <HAL_RCC_ClockConfig+0x1c4>)
 8003ec8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003eca:	4b09      	ldr	r3, [pc, #36]	@ (8003ef0 <HAL_RCC_ClockConfig+0x1c8>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f7fe f9a4 	bl	800221c <HAL_InitTick>

  return HAL_OK;
 8003ed4:	2300      	movs	r3, #0
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3710      	adds	r7, #16
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}
 8003ede:	bf00      	nop
 8003ee0:	40023c00 	.word	0x40023c00
 8003ee4:	40023800 	.word	0x40023800
 8003ee8:	0800fbac 	.word	0x0800fbac
 8003eec:	2000000c 	.word	0x2000000c
 8003ef0:	20000010 	.word	0x20000010

08003ef4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ef4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ef8:	b090      	sub	sp, #64	@ 0x40
 8003efa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003efc:	2300      	movs	r3, #0
 8003efe:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003f00:	2300      	movs	r3, #0
 8003f02:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003f04:	2300      	movs	r3, #0
 8003f06:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f0c:	4b59      	ldr	r3, [pc, #356]	@ (8004074 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	f003 030c 	and.w	r3, r3, #12
 8003f14:	2b08      	cmp	r3, #8
 8003f16:	d00d      	beq.n	8003f34 <HAL_RCC_GetSysClockFreq+0x40>
 8003f18:	2b08      	cmp	r3, #8
 8003f1a:	f200 80a1 	bhi.w	8004060 <HAL_RCC_GetSysClockFreq+0x16c>
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d002      	beq.n	8003f28 <HAL_RCC_GetSysClockFreq+0x34>
 8003f22:	2b04      	cmp	r3, #4
 8003f24:	d003      	beq.n	8003f2e <HAL_RCC_GetSysClockFreq+0x3a>
 8003f26:	e09b      	b.n	8004060 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f28:	4b53      	ldr	r3, [pc, #332]	@ (8004078 <HAL_RCC_GetSysClockFreq+0x184>)
 8003f2a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003f2c:	e09b      	b.n	8004066 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f2e:	4b53      	ldr	r3, [pc, #332]	@ (800407c <HAL_RCC_GetSysClockFreq+0x188>)
 8003f30:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003f32:	e098      	b.n	8004066 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f34:	4b4f      	ldr	r3, [pc, #316]	@ (8004074 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003f3c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f3e:	4b4d      	ldr	r3, [pc, #308]	@ (8004074 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d028      	beq.n	8003f9c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f4a:	4b4a      	ldr	r3, [pc, #296]	@ (8004074 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	099b      	lsrs	r3, r3, #6
 8003f50:	2200      	movs	r2, #0
 8003f52:	623b      	str	r3, [r7, #32]
 8003f54:	627a      	str	r2, [r7, #36]	@ 0x24
 8003f56:	6a3b      	ldr	r3, [r7, #32]
 8003f58:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003f5c:	2100      	movs	r1, #0
 8003f5e:	4b47      	ldr	r3, [pc, #284]	@ (800407c <HAL_RCC_GetSysClockFreq+0x188>)
 8003f60:	fb03 f201 	mul.w	r2, r3, r1
 8003f64:	2300      	movs	r3, #0
 8003f66:	fb00 f303 	mul.w	r3, r0, r3
 8003f6a:	4413      	add	r3, r2
 8003f6c:	4a43      	ldr	r2, [pc, #268]	@ (800407c <HAL_RCC_GetSysClockFreq+0x188>)
 8003f6e:	fba0 1202 	umull	r1, r2, r0, r2
 8003f72:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003f74:	460a      	mov	r2, r1
 8003f76:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003f78:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f7a:	4413      	add	r3, r2
 8003f7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f80:	2200      	movs	r2, #0
 8003f82:	61bb      	str	r3, [r7, #24]
 8003f84:	61fa      	str	r2, [r7, #28]
 8003f86:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f8a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003f8e:	f7fc f977 	bl	8000280 <__aeabi_uldivmod>
 8003f92:	4602      	mov	r2, r0
 8003f94:	460b      	mov	r3, r1
 8003f96:	4613      	mov	r3, r2
 8003f98:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f9a:	e053      	b.n	8004044 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f9c:	4b35      	ldr	r3, [pc, #212]	@ (8004074 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	099b      	lsrs	r3, r3, #6
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	613b      	str	r3, [r7, #16]
 8003fa6:	617a      	str	r2, [r7, #20]
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003fae:	f04f 0b00 	mov.w	fp, #0
 8003fb2:	4652      	mov	r2, sl
 8003fb4:	465b      	mov	r3, fp
 8003fb6:	f04f 0000 	mov.w	r0, #0
 8003fba:	f04f 0100 	mov.w	r1, #0
 8003fbe:	0159      	lsls	r1, r3, #5
 8003fc0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003fc4:	0150      	lsls	r0, r2, #5
 8003fc6:	4602      	mov	r2, r0
 8003fc8:	460b      	mov	r3, r1
 8003fca:	ebb2 080a 	subs.w	r8, r2, sl
 8003fce:	eb63 090b 	sbc.w	r9, r3, fp
 8003fd2:	f04f 0200 	mov.w	r2, #0
 8003fd6:	f04f 0300 	mov.w	r3, #0
 8003fda:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003fde:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003fe2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003fe6:	ebb2 0408 	subs.w	r4, r2, r8
 8003fea:	eb63 0509 	sbc.w	r5, r3, r9
 8003fee:	f04f 0200 	mov.w	r2, #0
 8003ff2:	f04f 0300 	mov.w	r3, #0
 8003ff6:	00eb      	lsls	r3, r5, #3
 8003ff8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ffc:	00e2      	lsls	r2, r4, #3
 8003ffe:	4614      	mov	r4, r2
 8004000:	461d      	mov	r5, r3
 8004002:	eb14 030a 	adds.w	r3, r4, sl
 8004006:	603b      	str	r3, [r7, #0]
 8004008:	eb45 030b 	adc.w	r3, r5, fp
 800400c:	607b      	str	r3, [r7, #4]
 800400e:	f04f 0200 	mov.w	r2, #0
 8004012:	f04f 0300 	mov.w	r3, #0
 8004016:	e9d7 4500 	ldrd	r4, r5, [r7]
 800401a:	4629      	mov	r1, r5
 800401c:	028b      	lsls	r3, r1, #10
 800401e:	4621      	mov	r1, r4
 8004020:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004024:	4621      	mov	r1, r4
 8004026:	028a      	lsls	r2, r1, #10
 8004028:	4610      	mov	r0, r2
 800402a:	4619      	mov	r1, r3
 800402c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800402e:	2200      	movs	r2, #0
 8004030:	60bb      	str	r3, [r7, #8]
 8004032:	60fa      	str	r2, [r7, #12]
 8004034:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004038:	f7fc f922 	bl	8000280 <__aeabi_uldivmod>
 800403c:	4602      	mov	r2, r0
 800403e:	460b      	mov	r3, r1
 8004040:	4613      	mov	r3, r2
 8004042:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004044:	4b0b      	ldr	r3, [pc, #44]	@ (8004074 <HAL_RCC_GetSysClockFreq+0x180>)
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	0c1b      	lsrs	r3, r3, #16
 800404a:	f003 0303 	and.w	r3, r3, #3
 800404e:	3301      	adds	r3, #1
 8004050:	005b      	lsls	r3, r3, #1
 8004052:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004054:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004058:	fbb2 f3f3 	udiv	r3, r2, r3
 800405c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800405e:	e002      	b.n	8004066 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004060:	4b05      	ldr	r3, [pc, #20]	@ (8004078 <HAL_RCC_GetSysClockFreq+0x184>)
 8004062:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004064:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004066:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004068:	4618      	mov	r0, r3
 800406a:	3740      	adds	r7, #64	@ 0x40
 800406c:	46bd      	mov	sp, r7
 800406e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004072:	bf00      	nop
 8004074:	40023800 	.word	0x40023800
 8004078:	00f42400 	.word	0x00f42400
 800407c:	017d7840 	.word	0x017d7840

08004080 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004080:	b480      	push	{r7}
 8004082:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004084:	4b03      	ldr	r3, [pc, #12]	@ (8004094 <HAL_RCC_GetHCLKFreq+0x14>)
 8004086:	681b      	ldr	r3, [r3, #0]
}
 8004088:	4618      	mov	r0, r3
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr
 8004092:	bf00      	nop
 8004094:	2000000c 	.word	0x2000000c

08004098 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800409c:	f7ff fff0 	bl	8004080 <HAL_RCC_GetHCLKFreq>
 80040a0:	4602      	mov	r2, r0
 80040a2:	4b05      	ldr	r3, [pc, #20]	@ (80040b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	0a9b      	lsrs	r3, r3, #10
 80040a8:	f003 0307 	and.w	r3, r3, #7
 80040ac:	4903      	ldr	r1, [pc, #12]	@ (80040bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80040ae:	5ccb      	ldrb	r3, [r1, r3]
 80040b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	bd80      	pop	{r7, pc}
 80040b8:	40023800 	.word	0x40023800
 80040bc:	0800fbbc 	.word	0x0800fbbc

080040c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80040c4:	f7ff ffdc 	bl	8004080 <HAL_RCC_GetHCLKFreq>
 80040c8:	4602      	mov	r2, r0
 80040ca:	4b05      	ldr	r3, [pc, #20]	@ (80040e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	0b5b      	lsrs	r3, r3, #13
 80040d0:	f003 0307 	and.w	r3, r3, #7
 80040d4:	4903      	ldr	r1, [pc, #12]	@ (80040e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80040d6:	5ccb      	ldrb	r3, [r1, r3]
 80040d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040dc:	4618      	mov	r0, r3
 80040de:	bd80      	pop	{r7, pc}
 80040e0:	40023800 	.word	0x40023800
 80040e4:	0800fbbc 	.word	0x0800fbbc

080040e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b082      	sub	sp, #8
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d101      	bne.n	80040fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	e07b      	b.n	80041f2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d108      	bne.n	8004114 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800410a:	d009      	beq.n	8004120 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2200      	movs	r2, #0
 8004110:	61da      	str	r2, [r3, #28]
 8004112:	e005      	b.n	8004120 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2200      	movs	r2, #0
 8004118:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2200      	movs	r2, #0
 800411e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2200      	movs	r2, #0
 8004124:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800412c:	b2db      	uxtb	r3, r3
 800412e:	2b00      	cmp	r3, #0
 8004130:	d106      	bne.n	8004140 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f7fd fe42 	bl	8001dc4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2202      	movs	r2, #2
 8004144:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004156:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004168:	431a      	orrs	r2, r3
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	68db      	ldr	r3, [r3, #12]
 800416e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004172:	431a      	orrs	r2, r3
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	691b      	ldr	r3, [r3, #16]
 8004178:	f003 0302 	and.w	r3, r3, #2
 800417c:	431a      	orrs	r2, r3
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	695b      	ldr	r3, [r3, #20]
 8004182:	f003 0301 	and.w	r3, r3, #1
 8004186:	431a      	orrs	r2, r3
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	699b      	ldr	r3, [r3, #24]
 800418c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004190:	431a      	orrs	r2, r3
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	69db      	ldr	r3, [r3, #28]
 8004196:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800419a:	431a      	orrs	r2, r3
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6a1b      	ldr	r3, [r3, #32]
 80041a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041a4:	ea42 0103 	orr.w	r1, r2, r3
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041ac:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	430a      	orrs	r2, r1
 80041b6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	699b      	ldr	r3, [r3, #24]
 80041bc:	0c1b      	lsrs	r3, r3, #16
 80041be:	f003 0104 	and.w	r1, r3, #4
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041c6:	f003 0210 	and.w	r2, r3, #16
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	430a      	orrs	r2, r1
 80041d0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	69da      	ldr	r2, [r3, #28]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80041e0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2200      	movs	r2, #0
 80041e6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2201      	movs	r2, #1
 80041ec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80041f0:	2300      	movs	r3, #0
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3708      	adds	r7, #8
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}

080041fa <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041fa:	b580      	push	{r7, lr}
 80041fc:	b088      	sub	sp, #32
 80041fe:	af00      	add	r7, sp, #0
 8004200:	60f8      	str	r0, [r7, #12]
 8004202:	60b9      	str	r1, [r7, #8]
 8004204:	603b      	str	r3, [r7, #0]
 8004206:	4613      	mov	r3, r2
 8004208:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800420a:	f7fe f84b 	bl	80022a4 <HAL_GetTick>
 800420e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004210:	88fb      	ldrh	r3, [r7, #6]
 8004212:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800421a:	b2db      	uxtb	r3, r3
 800421c:	2b01      	cmp	r3, #1
 800421e:	d001      	beq.n	8004224 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004220:	2302      	movs	r3, #2
 8004222:	e12a      	b.n	800447a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d002      	beq.n	8004230 <HAL_SPI_Transmit+0x36>
 800422a:	88fb      	ldrh	r3, [r7, #6]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d101      	bne.n	8004234 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	e122      	b.n	800447a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800423a:	2b01      	cmp	r3, #1
 800423c:	d101      	bne.n	8004242 <HAL_SPI_Transmit+0x48>
 800423e:	2302      	movs	r3, #2
 8004240:	e11b      	b.n	800447a <HAL_SPI_Transmit+0x280>
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2201      	movs	r2, #1
 8004246:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2203      	movs	r2, #3
 800424e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2200      	movs	r2, #0
 8004256:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	68ba      	ldr	r2, [r7, #8]
 800425c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	88fa      	ldrh	r2, [r7, #6]
 8004262:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	88fa      	ldrh	r2, [r7, #6]
 8004268:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2200      	movs	r2, #0
 800426e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2200      	movs	r2, #0
 8004274:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2200      	movs	r2, #0
 800427a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2200      	movs	r2, #0
 8004280:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2200      	movs	r2, #0
 8004286:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004290:	d10f      	bne.n	80042b2 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80042a0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	681a      	ldr	r2, [r3, #0]
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80042b0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042bc:	2b40      	cmp	r3, #64	@ 0x40
 80042be:	d007      	beq.n	80042d0 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80042ce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80042d8:	d152      	bne.n	8004380 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d002      	beq.n	80042e8 <HAL_SPI_Transmit+0xee>
 80042e2:	8b7b      	ldrh	r3, [r7, #26]
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d145      	bne.n	8004374 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042ec:	881a      	ldrh	r2, [r3, #0]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042f8:	1c9a      	adds	r2, r3, #2
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004302:	b29b      	uxth	r3, r3
 8004304:	3b01      	subs	r3, #1
 8004306:	b29a      	uxth	r2, r3
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800430c:	e032      	b.n	8004374 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	f003 0302 	and.w	r3, r3, #2
 8004318:	2b02      	cmp	r3, #2
 800431a:	d112      	bne.n	8004342 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004320:	881a      	ldrh	r2, [r3, #0]
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800432c:	1c9a      	adds	r2, r3, #2
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004336:	b29b      	uxth	r3, r3
 8004338:	3b01      	subs	r3, #1
 800433a:	b29a      	uxth	r2, r3
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004340:	e018      	b.n	8004374 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004342:	f7fd ffaf 	bl	80022a4 <HAL_GetTick>
 8004346:	4602      	mov	r2, r0
 8004348:	69fb      	ldr	r3, [r7, #28]
 800434a:	1ad3      	subs	r3, r2, r3
 800434c:	683a      	ldr	r2, [r7, #0]
 800434e:	429a      	cmp	r2, r3
 8004350:	d803      	bhi.n	800435a <HAL_SPI_Transmit+0x160>
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004358:	d102      	bne.n	8004360 <HAL_SPI_Transmit+0x166>
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d109      	bne.n	8004374 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2201      	movs	r2, #1
 8004364:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2200      	movs	r2, #0
 800436c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004370:	2303      	movs	r3, #3
 8004372:	e082      	b.n	800447a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004378:	b29b      	uxth	r3, r3
 800437a:	2b00      	cmp	r3, #0
 800437c:	d1c7      	bne.n	800430e <HAL_SPI_Transmit+0x114>
 800437e:	e053      	b.n	8004428 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d002      	beq.n	800438e <HAL_SPI_Transmit+0x194>
 8004388:	8b7b      	ldrh	r3, [r7, #26]
 800438a:	2b01      	cmp	r3, #1
 800438c:	d147      	bne.n	800441e <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	330c      	adds	r3, #12
 8004398:	7812      	ldrb	r2, [r2, #0]
 800439a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043a0:	1c5a      	adds	r2, r3, #1
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80043aa:	b29b      	uxth	r3, r3
 80043ac:	3b01      	subs	r3, #1
 80043ae:	b29a      	uxth	r2, r3
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80043b4:	e033      	b.n	800441e <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	f003 0302 	and.w	r3, r3, #2
 80043c0:	2b02      	cmp	r3, #2
 80043c2:	d113      	bne.n	80043ec <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	330c      	adds	r3, #12
 80043ce:	7812      	ldrb	r2, [r2, #0]
 80043d0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043d6:	1c5a      	adds	r2, r3, #1
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80043e0:	b29b      	uxth	r3, r3
 80043e2:	3b01      	subs	r3, #1
 80043e4:	b29a      	uxth	r2, r3
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	86da      	strh	r2, [r3, #54]	@ 0x36
 80043ea:	e018      	b.n	800441e <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80043ec:	f7fd ff5a 	bl	80022a4 <HAL_GetTick>
 80043f0:	4602      	mov	r2, r0
 80043f2:	69fb      	ldr	r3, [r7, #28]
 80043f4:	1ad3      	subs	r3, r2, r3
 80043f6:	683a      	ldr	r2, [r7, #0]
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d803      	bhi.n	8004404 <HAL_SPI_Transmit+0x20a>
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004402:	d102      	bne.n	800440a <HAL_SPI_Transmit+0x210>
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d109      	bne.n	800441e <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2201      	movs	r2, #1
 800440e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2200      	movs	r2, #0
 8004416:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800441a:	2303      	movs	r3, #3
 800441c:	e02d      	b.n	800447a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004422:	b29b      	uxth	r3, r3
 8004424:	2b00      	cmp	r3, #0
 8004426:	d1c6      	bne.n	80043b6 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004428:	69fa      	ldr	r2, [r7, #28]
 800442a:	6839      	ldr	r1, [r7, #0]
 800442c:	68f8      	ldr	r0, [r7, #12]
 800442e:	f000 f9f9 	bl	8004824 <SPI_EndRxTxTransaction>
 8004432:	4603      	mov	r3, r0
 8004434:	2b00      	cmp	r3, #0
 8004436:	d002      	beq.n	800443e <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2220      	movs	r2, #32
 800443c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d10a      	bne.n	800445c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004446:	2300      	movs	r3, #0
 8004448:	617b      	str	r3, [r7, #20]
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	617b      	str	r3, [r7, #20]
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	617b      	str	r3, [r7, #20]
 800445a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2201      	movs	r2, #1
 8004460:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2200      	movs	r2, #0
 8004468:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004470:	2b00      	cmp	r3, #0
 8004472:	d001      	beq.n	8004478 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	e000      	b.n	800447a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004478:	2300      	movs	r3, #0
  }
}
 800447a:	4618      	mov	r0, r3
 800447c:	3720      	adds	r7, #32
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
	...

08004484 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer  (u8 or u16 data elements)
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b084      	sub	sp, #16
 8004488:	af00      	add	r7, sp, #0
 800448a:	60f8      	str	r0, [r7, #12]
 800448c:	60b9      	str	r1, [r7, #8]
 800448e:	4613      	mov	r3, r2
 8004490:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004498:	b2db      	uxtb	r3, r3
 800449a:	2b01      	cmp	r3, #1
 800449c:	d001      	beq.n	80044a2 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 800449e:	2302      	movs	r3, #2
 80044a0:	e097      	b.n	80045d2 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d002      	beq.n	80044ae <HAL_SPI_Transmit_DMA+0x2a>
 80044a8:	88fb      	ldrh	r3, [r7, #6]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d101      	bne.n	80044b2 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e08f      	b.n	80045d2 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d101      	bne.n	80044c0 <HAL_SPI_Transmit_DMA+0x3c>
 80044bc:	2302      	movs	r3, #2
 80044be:	e088      	b.n	80045d2 <HAL_SPI_Transmit_DMA+0x14e>
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2201      	movs	r2, #1
 80044c4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2203      	movs	r2, #3
 80044cc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2200      	movs	r2, #0
 80044d4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	68ba      	ldr	r2, [r7, #8]
 80044da:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	88fa      	ldrh	r2, [r7, #6]
 80044e0:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	88fa      	ldrh	r2, [r7, #6]
 80044e6:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2200      	movs	r2, #0
 80044ec:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2200      	movs	r2, #0
 80044f2:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2200      	movs	r2, #0
 80044f8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2200      	movs	r2, #0
 80044fe:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2200      	movs	r2, #0
 8004504:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800450e:	d10f      	bne.n	8004530 <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800451e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800452e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004534:	4a29      	ldr	r2, [pc, #164]	@ (80045dc <HAL_SPI_Transmit_DMA+0x158>)
 8004536:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800453c:	4a28      	ldr	r2, [pc, #160]	@ (80045e0 <HAL_SPI_Transmit_DMA+0x15c>)
 800453e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004544:	4a27      	ldr	r2, [pc, #156]	@ (80045e4 <HAL_SPI_Transmit_DMA+0x160>)
 8004546:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800454c:	2200      	movs	r2, #0
 800454e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004558:	4619      	mov	r1, r3
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	330c      	adds	r3, #12
 8004560:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004566:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004568:	f7fe fcbe 	bl	8002ee8 <HAL_DMA_Start_IT>
 800456c:	4603      	mov	r3, r0
 800456e:	2b00      	cmp	r3, #0
 8004570:	d00b      	beq.n	800458a <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004576:	f043 0210 	orr.w	r2, r3, #16
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2200      	movs	r2, #0
 8004582:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	e023      	b.n	80045d2 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004594:	2b40      	cmp	r3, #64	@ 0x40
 8004596:	d007      	beq.n	80045a8 <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80045a6:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2200      	movs	r2, #0
 80045ac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	685a      	ldr	r2, [r3, #4]
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f042 0220 	orr.w	r2, r2, #32
 80045be:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	685a      	ldr	r2, [r3, #4]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f042 0202 	orr.w	r2, r2, #2
 80045ce:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80045d0:	2300      	movs	r3, #0
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3710      	adds	r7, #16
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}
 80045da:	bf00      	nop
 80045dc:	080046b9 	.word	0x080046b9
 80045e0:	08004611 	.word	0x08004611
 80045e4:	080046d5 	.word	0x080046d5

080045e8 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b083      	sub	sp, #12
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80045f0:	bf00      	nop
 80045f2:	370c      	adds	r7, #12
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr

080045fc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b083      	sub	sp, #12
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004604:	bf00      	nop
 8004606:	370c      	adds	r7, #12
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr

08004610 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b086      	sub	sp, #24
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800461c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800461e:	f7fd fe41 	bl	80022a4 <HAL_GetTick>
 8004622:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800462e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004632:	d03b      	beq.n	80046ac <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	685a      	ldr	r2, [r3, #4]
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f022 0220 	bic.w	r2, r2, #32
 8004642:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	685a      	ldr	r2, [r3, #4]
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f022 0202 	bic.w	r2, r2, #2
 8004652:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004654:	693a      	ldr	r2, [r7, #16]
 8004656:	2164      	movs	r1, #100	@ 0x64
 8004658:	6978      	ldr	r0, [r7, #20]
 800465a:	f000 f8e3 	bl	8004824 <SPI_EndRxTxTransaction>
 800465e:	4603      	mov	r3, r0
 8004660:	2b00      	cmp	r3, #0
 8004662:	d005      	beq.n	8004670 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004668:	f043 0220 	orr.w	r2, r3, #32
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d10a      	bne.n	800468e <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004678:	2300      	movs	r3, #0
 800467a:	60fb      	str	r3, [r7, #12]
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	68db      	ldr	r3, [r3, #12]
 8004682:	60fb      	str	r3, [r7, #12]
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	60fb      	str	r3, [r7, #12]
 800468c:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	2200      	movs	r2, #0
 8004692:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	2201      	movs	r2, #1
 8004698:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d003      	beq.n	80046ac <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80046a4:	6978      	ldr	r0, [r7, #20]
 80046a6:	f7ff ffa9 	bl	80045fc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80046aa:	e002      	b.n	80046b2 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80046ac:	6978      	ldr	r0, [r7, #20]
 80046ae:	f7fc f8b9 	bl	8000824 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80046b2:	3718      	adds	r7, #24
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}

080046b8 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b084      	sub	sp, #16
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046c4:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80046c6:	68f8      	ldr	r0, [r7, #12]
 80046c8:	f7ff ff8e 	bl	80045e8 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80046cc:	bf00      	nop
 80046ce:	3710      	adds	r7, #16
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}

080046d4 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b084      	sub	sp, #16
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046e0:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	685a      	ldr	r2, [r3, #4]
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f022 0203 	bic.w	r2, r2, #3
 80046f0:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046f6:	f043 0210 	orr.w	r2, r3, #16
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2201      	movs	r2, #1
 8004702:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004706:	68f8      	ldr	r0, [r7, #12]
 8004708:	f7ff ff78 	bl	80045fc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800470c:	bf00      	nop
 800470e:	3710      	adds	r7, #16
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}

08004714 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b088      	sub	sp, #32
 8004718:	af00      	add	r7, sp, #0
 800471a:	60f8      	str	r0, [r7, #12]
 800471c:	60b9      	str	r1, [r7, #8]
 800471e:	603b      	str	r3, [r7, #0]
 8004720:	4613      	mov	r3, r2
 8004722:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004724:	f7fd fdbe 	bl	80022a4 <HAL_GetTick>
 8004728:	4602      	mov	r2, r0
 800472a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800472c:	1a9b      	subs	r3, r3, r2
 800472e:	683a      	ldr	r2, [r7, #0]
 8004730:	4413      	add	r3, r2
 8004732:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004734:	f7fd fdb6 	bl	80022a4 <HAL_GetTick>
 8004738:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800473a:	4b39      	ldr	r3, [pc, #228]	@ (8004820 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	015b      	lsls	r3, r3, #5
 8004740:	0d1b      	lsrs	r3, r3, #20
 8004742:	69fa      	ldr	r2, [r7, #28]
 8004744:	fb02 f303 	mul.w	r3, r2, r3
 8004748:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800474a:	e055      	b.n	80047f8 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004752:	d051      	beq.n	80047f8 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004754:	f7fd fda6 	bl	80022a4 <HAL_GetTick>
 8004758:	4602      	mov	r2, r0
 800475a:	69bb      	ldr	r3, [r7, #24]
 800475c:	1ad3      	subs	r3, r2, r3
 800475e:	69fa      	ldr	r2, [r7, #28]
 8004760:	429a      	cmp	r2, r3
 8004762:	d902      	bls.n	800476a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004764:	69fb      	ldr	r3, [r7, #28]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d13d      	bne.n	80047e6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	685a      	ldr	r2, [r3, #4]
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004778:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004782:	d111      	bne.n	80047a8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800478c:	d004      	beq.n	8004798 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004796:	d107      	bne.n	80047a8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80047a6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80047b0:	d10f      	bne.n	80047d2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80047c0:	601a      	str	r2, [r3, #0]
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80047d0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2201      	movs	r2, #1
 80047d6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2200      	movs	r2, #0
 80047de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80047e2:	2303      	movs	r3, #3
 80047e4:	e018      	b.n	8004818 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d102      	bne.n	80047f2 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 80047ec:	2300      	movs	r3, #0
 80047ee:	61fb      	str	r3, [r7, #28]
 80047f0:	e002      	b.n	80047f8 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	3b01      	subs	r3, #1
 80047f6:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	689a      	ldr	r2, [r3, #8]
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	4013      	ands	r3, r2
 8004802:	68ba      	ldr	r2, [r7, #8]
 8004804:	429a      	cmp	r2, r3
 8004806:	bf0c      	ite	eq
 8004808:	2301      	moveq	r3, #1
 800480a:	2300      	movne	r3, #0
 800480c:	b2db      	uxtb	r3, r3
 800480e:	461a      	mov	r2, r3
 8004810:	79fb      	ldrb	r3, [r7, #7]
 8004812:	429a      	cmp	r2, r3
 8004814:	d19a      	bne.n	800474c <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8004816:	2300      	movs	r3, #0
}
 8004818:	4618      	mov	r0, r3
 800481a:	3720      	adds	r7, #32
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}
 8004820:	2000000c 	.word	0x2000000c

08004824 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b088      	sub	sp, #32
 8004828:	af02      	add	r7, sp, #8
 800482a:	60f8      	str	r0, [r7, #12]
 800482c:	60b9      	str	r1, [r7, #8]
 800482e:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	9300      	str	r3, [sp, #0]
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	2201      	movs	r2, #1
 8004838:	2102      	movs	r1, #2
 800483a:	68f8      	ldr	r0, [r7, #12]
 800483c:	f7ff ff6a 	bl	8004714 <SPI_WaitFlagStateUntilTimeout>
 8004840:	4603      	mov	r3, r0
 8004842:	2b00      	cmp	r3, #0
 8004844:	d007      	beq.n	8004856 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800484a:	f043 0220 	orr.w	r2, r3, #32
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004852:	2303      	movs	r3, #3
 8004854:	e032      	b.n	80048bc <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004856:	4b1b      	ldr	r3, [pc, #108]	@ (80048c4 <SPI_EndRxTxTransaction+0xa0>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a1b      	ldr	r2, [pc, #108]	@ (80048c8 <SPI_EndRxTxTransaction+0xa4>)
 800485c:	fba2 2303 	umull	r2, r3, r2, r3
 8004860:	0d5b      	lsrs	r3, r3, #21
 8004862:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004866:	fb02 f303 	mul.w	r3, r2, r3
 800486a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004874:	d112      	bne.n	800489c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	9300      	str	r3, [sp, #0]
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	2200      	movs	r2, #0
 800487e:	2180      	movs	r1, #128	@ 0x80
 8004880:	68f8      	ldr	r0, [r7, #12]
 8004882:	f7ff ff47 	bl	8004714 <SPI_WaitFlagStateUntilTimeout>
 8004886:	4603      	mov	r3, r0
 8004888:	2b00      	cmp	r3, #0
 800488a:	d016      	beq.n	80048ba <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004890:	f043 0220 	orr.w	r2, r3, #32
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004898:	2303      	movs	r3, #3
 800489a:	e00f      	b.n	80048bc <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d00a      	beq.n	80048b8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	3b01      	subs	r3, #1
 80048a6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048b2:	2b80      	cmp	r3, #128	@ 0x80
 80048b4:	d0f2      	beq.n	800489c <SPI_EndRxTxTransaction+0x78>
 80048b6:	e000      	b.n	80048ba <SPI_EndRxTxTransaction+0x96>
        break;
 80048b8:	bf00      	nop
  }

  return HAL_OK;
 80048ba:	2300      	movs	r3, #0
}
 80048bc:	4618      	mov	r0, r3
 80048be:	3718      	adds	r7, #24
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}
 80048c4:	2000000c 	.word	0x2000000c
 80048c8:	165e9f81 	.word	0x165e9f81

080048cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b082      	sub	sp, #8
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d101      	bne.n	80048de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	e041      	b.n	8004962 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d106      	bne.n	80048f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2200      	movs	r2, #0
 80048ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f7fd fae0 	bl	8001eb8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2202      	movs	r2, #2
 80048fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	3304      	adds	r3, #4
 8004908:	4619      	mov	r1, r3
 800490a:	4610      	mov	r0, r2
 800490c:	f000 fa7e 	bl	8004e0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2201      	movs	r2, #1
 8004914:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2201      	movs	r2, #1
 800491c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2201      	movs	r2, #1
 8004924:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2201      	movs	r2, #1
 800492c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2201      	movs	r2, #1
 8004934:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2201      	movs	r2, #1
 800493c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2201      	movs	r2, #1
 8004944:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2201      	movs	r2, #1
 8004954:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2201      	movs	r2, #1
 800495c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004960:	2300      	movs	r3, #0
}
 8004962:	4618      	mov	r0, r3
 8004964:	3708      	adds	r7, #8
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}
	...

0800496c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800496c:	b480      	push	{r7}
 800496e:	b085      	sub	sp, #20
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800497a:	b2db      	uxtb	r3, r3
 800497c:	2b01      	cmp	r3, #1
 800497e:	d001      	beq.n	8004984 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004980:	2301      	movs	r3, #1
 8004982:	e04e      	b.n	8004a22 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2202      	movs	r2, #2
 8004988:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	68da      	ldr	r2, [r3, #12]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f042 0201 	orr.w	r2, r2, #1
 800499a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a23      	ldr	r2, [pc, #140]	@ (8004a30 <HAL_TIM_Base_Start_IT+0xc4>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d022      	beq.n	80049ec <HAL_TIM_Base_Start_IT+0x80>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049ae:	d01d      	beq.n	80049ec <HAL_TIM_Base_Start_IT+0x80>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a1f      	ldr	r2, [pc, #124]	@ (8004a34 <HAL_TIM_Base_Start_IT+0xc8>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d018      	beq.n	80049ec <HAL_TIM_Base_Start_IT+0x80>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a1e      	ldr	r2, [pc, #120]	@ (8004a38 <HAL_TIM_Base_Start_IT+0xcc>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d013      	beq.n	80049ec <HAL_TIM_Base_Start_IT+0x80>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a1c      	ldr	r2, [pc, #112]	@ (8004a3c <HAL_TIM_Base_Start_IT+0xd0>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d00e      	beq.n	80049ec <HAL_TIM_Base_Start_IT+0x80>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a1b      	ldr	r2, [pc, #108]	@ (8004a40 <HAL_TIM_Base_Start_IT+0xd4>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d009      	beq.n	80049ec <HAL_TIM_Base_Start_IT+0x80>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a19      	ldr	r2, [pc, #100]	@ (8004a44 <HAL_TIM_Base_Start_IT+0xd8>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d004      	beq.n	80049ec <HAL_TIM_Base_Start_IT+0x80>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a18      	ldr	r2, [pc, #96]	@ (8004a48 <HAL_TIM_Base_Start_IT+0xdc>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d111      	bne.n	8004a10 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	f003 0307 	and.w	r3, r3, #7
 80049f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2b06      	cmp	r3, #6
 80049fc:	d010      	beq.n	8004a20 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	681a      	ldr	r2, [r3, #0]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f042 0201 	orr.w	r2, r2, #1
 8004a0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a0e:	e007      	b.n	8004a20 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f042 0201 	orr.w	r2, r2, #1
 8004a1e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a20:	2300      	movs	r3, #0
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3714      	adds	r7, #20
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr
 8004a2e:	bf00      	nop
 8004a30:	40010000 	.word	0x40010000
 8004a34:	40000400 	.word	0x40000400
 8004a38:	40000800 	.word	0x40000800
 8004a3c:	40000c00 	.word	0x40000c00
 8004a40:	40010400 	.word	0x40010400
 8004a44:	40014000 	.word	0x40014000
 8004a48:	40001800 	.word	0x40001800

08004a4c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b084      	sub	sp, #16
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	68db      	ldr	r3, [r3, #12]
 8004a5a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	691b      	ldr	r3, [r3, #16]
 8004a62:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	f003 0302 	and.w	r3, r3, #2
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d020      	beq.n	8004ab0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	f003 0302 	and.w	r3, r3, #2
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d01b      	beq.n	8004ab0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f06f 0202 	mvn.w	r2, #2
 8004a80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2201      	movs	r2, #1
 8004a86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	699b      	ldr	r3, [r3, #24]
 8004a8e:	f003 0303 	and.w	r3, r3, #3
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d003      	beq.n	8004a9e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f000 f999 	bl	8004dce <HAL_TIM_IC_CaptureCallback>
 8004a9c:	e005      	b.n	8004aaa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f000 f98b 	bl	8004dba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	f000 f99c 	bl	8004de2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2200      	movs	r2, #0
 8004aae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	f003 0304 	and.w	r3, r3, #4
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d020      	beq.n	8004afc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	f003 0304 	and.w	r3, r3, #4
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d01b      	beq.n	8004afc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f06f 0204 	mvn.w	r2, #4
 8004acc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2202      	movs	r2, #2
 8004ad2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	699b      	ldr	r3, [r3, #24]
 8004ada:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d003      	beq.n	8004aea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f000 f973 	bl	8004dce <HAL_TIM_IC_CaptureCallback>
 8004ae8:	e005      	b.n	8004af6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f000 f965 	bl	8004dba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004af0:	6878      	ldr	r0, [r7, #4]
 8004af2:	f000 f976 	bl	8004de2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2200      	movs	r2, #0
 8004afa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	f003 0308 	and.w	r3, r3, #8
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d020      	beq.n	8004b48 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	f003 0308 	and.w	r3, r3, #8
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d01b      	beq.n	8004b48 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f06f 0208 	mvn.w	r2, #8
 8004b18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2204      	movs	r2, #4
 8004b1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	69db      	ldr	r3, [r3, #28]
 8004b26:	f003 0303 	and.w	r3, r3, #3
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d003      	beq.n	8004b36 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f000 f94d 	bl	8004dce <HAL_TIM_IC_CaptureCallback>
 8004b34:	e005      	b.n	8004b42 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f000 f93f 	bl	8004dba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f000 f950 	bl	8004de2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2200      	movs	r2, #0
 8004b46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	f003 0310 	and.w	r3, r3, #16
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d020      	beq.n	8004b94 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	f003 0310 	and.w	r3, r3, #16
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d01b      	beq.n	8004b94 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f06f 0210 	mvn.w	r2, #16
 8004b64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2208      	movs	r2, #8
 8004b6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	69db      	ldr	r3, [r3, #28]
 8004b72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d003      	beq.n	8004b82 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f000 f927 	bl	8004dce <HAL_TIM_IC_CaptureCallback>
 8004b80:	e005      	b.n	8004b8e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f000 f919 	bl	8004dba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b88:	6878      	ldr	r0, [r7, #4]
 8004b8a:	f000 f92a 	bl	8004de2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2200      	movs	r2, #0
 8004b92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	f003 0301 	and.w	r3, r3, #1
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d00c      	beq.n	8004bb8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	f003 0301 	and.w	r3, r3, #1
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d007      	beq.n	8004bb8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f06f 0201 	mvn.w	r2, #1
 8004bb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f7fc fa8c 	bl	80010d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d00c      	beq.n	8004bdc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d007      	beq.n	8004bdc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004bd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f000 fade 	bl	8005198 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d00c      	beq.n	8004c00 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d007      	beq.n	8004c00 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004bf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f000 f8fb 	bl	8004df6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	f003 0320 	and.w	r3, r3, #32
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d00c      	beq.n	8004c24 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	f003 0320 	and.w	r3, r3, #32
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d007      	beq.n	8004c24 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f06f 0220 	mvn.w	r2, #32
 8004c1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f000 fab0 	bl	8005184 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c24:	bf00      	nop
 8004c26:	3710      	adds	r7, #16
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}

08004c2c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b084      	sub	sp, #16
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
 8004c34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c36:	2300      	movs	r3, #0
 8004c38:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	d101      	bne.n	8004c48 <HAL_TIM_ConfigClockSource+0x1c>
 8004c44:	2302      	movs	r3, #2
 8004c46:	e0b4      	b.n	8004db2 <HAL_TIM_ConfigClockSource+0x186>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2202      	movs	r2, #2
 8004c54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004c66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004c6e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	68ba      	ldr	r2, [r7, #8]
 8004c76:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c80:	d03e      	beq.n	8004d00 <HAL_TIM_ConfigClockSource+0xd4>
 8004c82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c86:	f200 8087 	bhi.w	8004d98 <HAL_TIM_ConfigClockSource+0x16c>
 8004c8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c8e:	f000 8086 	beq.w	8004d9e <HAL_TIM_ConfigClockSource+0x172>
 8004c92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c96:	d87f      	bhi.n	8004d98 <HAL_TIM_ConfigClockSource+0x16c>
 8004c98:	2b70      	cmp	r3, #112	@ 0x70
 8004c9a:	d01a      	beq.n	8004cd2 <HAL_TIM_ConfigClockSource+0xa6>
 8004c9c:	2b70      	cmp	r3, #112	@ 0x70
 8004c9e:	d87b      	bhi.n	8004d98 <HAL_TIM_ConfigClockSource+0x16c>
 8004ca0:	2b60      	cmp	r3, #96	@ 0x60
 8004ca2:	d050      	beq.n	8004d46 <HAL_TIM_ConfigClockSource+0x11a>
 8004ca4:	2b60      	cmp	r3, #96	@ 0x60
 8004ca6:	d877      	bhi.n	8004d98 <HAL_TIM_ConfigClockSource+0x16c>
 8004ca8:	2b50      	cmp	r3, #80	@ 0x50
 8004caa:	d03c      	beq.n	8004d26 <HAL_TIM_ConfigClockSource+0xfa>
 8004cac:	2b50      	cmp	r3, #80	@ 0x50
 8004cae:	d873      	bhi.n	8004d98 <HAL_TIM_ConfigClockSource+0x16c>
 8004cb0:	2b40      	cmp	r3, #64	@ 0x40
 8004cb2:	d058      	beq.n	8004d66 <HAL_TIM_ConfigClockSource+0x13a>
 8004cb4:	2b40      	cmp	r3, #64	@ 0x40
 8004cb6:	d86f      	bhi.n	8004d98 <HAL_TIM_ConfigClockSource+0x16c>
 8004cb8:	2b30      	cmp	r3, #48	@ 0x30
 8004cba:	d064      	beq.n	8004d86 <HAL_TIM_ConfigClockSource+0x15a>
 8004cbc:	2b30      	cmp	r3, #48	@ 0x30
 8004cbe:	d86b      	bhi.n	8004d98 <HAL_TIM_ConfigClockSource+0x16c>
 8004cc0:	2b20      	cmp	r3, #32
 8004cc2:	d060      	beq.n	8004d86 <HAL_TIM_ConfigClockSource+0x15a>
 8004cc4:	2b20      	cmp	r3, #32
 8004cc6:	d867      	bhi.n	8004d98 <HAL_TIM_ConfigClockSource+0x16c>
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d05c      	beq.n	8004d86 <HAL_TIM_ConfigClockSource+0x15a>
 8004ccc:	2b10      	cmp	r3, #16
 8004cce:	d05a      	beq.n	8004d86 <HAL_TIM_ConfigClockSource+0x15a>
 8004cd0:	e062      	b.n	8004d98 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004ce2:	f000 f9b3 	bl	800504c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004cf4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	68ba      	ldr	r2, [r7, #8]
 8004cfc:	609a      	str	r2, [r3, #8]
      break;
 8004cfe:	e04f      	b.n	8004da0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004d10:	f000 f99c 	bl	800504c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	689a      	ldr	r2, [r3, #8]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004d22:	609a      	str	r2, [r3, #8]
      break;
 8004d24:	e03c      	b.n	8004da0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d32:	461a      	mov	r2, r3
 8004d34:	f000 f910 	bl	8004f58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	2150      	movs	r1, #80	@ 0x50
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f000 f969 	bl	8005016 <TIM_ITRx_SetConfig>
      break;
 8004d44:	e02c      	b.n	8004da0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d52:	461a      	mov	r2, r3
 8004d54:	f000 f92f 	bl	8004fb6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	2160      	movs	r1, #96	@ 0x60
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f000 f959 	bl	8005016 <TIM_ITRx_SetConfig>
      break;
 8004d64:	e01c      	b.n	8004da0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d72:	461a      	mov	r2, r3
 8004d74:	f000 f8f0 	bl	8004f58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	2140      	movs	r1, #64	@ 0x40
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f000 f949 	bl	8005016 <TIM_ITRx_SetConfig>
      break;
 8004d84:	e00c      	b.n	8004da0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4619      	mov	r1, r3
 8004d90:	4610      	mov	r0, r2
 8004d92:	f000 f940 	bl	8005016 <TIM_ITRx_SetConfig>
      break;
 8004d96:	e003      	b.n	8004da0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	73fb      	strb	r3, [r7, #15]
      break;
 8004d9c:	e000      	b.n	8004da0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004d9e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2201      	movs	r2, #1
 8004da4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2200      	movs	r2, #0
 8004dac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004db0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3710      	adds	r7, #16
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}

08004dba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004dba:	b480      	push	{r7}
 8004dbc:	b083      	sub	sp, #12
 8004dbe:	af00      	add	r7, sp, #0
 8004dc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004dc2:	bf00      	nop
 8004dc4:	370c      	adds	r7, #12
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dcc:	4770      	bx	lr

08004dce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004dce:	b480      	push	{r7}
 8004dd0:	b083      	sub	sp, #12
 8004dd2:	af00      	add	r7, sp, #0
 8004dd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004dd6:	bf00      	nop
 8004dd8:	370c      	adds	r7, #12
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr

08004de2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004de2:	b480      	push	{r7}
 8004de4:	b083      	sub	sp, #12
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004dea:	bf00      	nop
 8004dec:	370c      	adds	r7, #12
 8004dee:	46bd      	mov	sp, r7
 8004df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df4:	4770      	bx	lr

08004df6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004df6:	b480      	push	{r7}
 8004df8:	b083      	sub	sp, #12
 8004dfa:	af00      	add	r7, sp, #0
 8004dfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004dfe:	bf00      	nop
 8004e00:	370c      	adds	r7, #12
 8004e02:	46bd      	mov	sp, r7
 8004e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e08:	4770      	bx	lr
	...

08004e0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b085      	sub	sp, #20
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
 8004e14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	4a43      	ldr	r2, [pc, #268]	@ (8004f2c <TIM_Base_SetConfig+0x120>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d013      	beq.n	8004e4c <TIM_Base_SetConfig+0x40>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e2a:	d00f      	beq.n	8004e4c <TIM_Base_SetConfig+0x40>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	4a40      	ldr	r2, [pc, #256]	@ (8004f30 <TIM_Base_SetConfig+0x124>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d00b      	beq.n	8004e4c <TIM_Base_SetConfig+0x40>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	4a3f      	ldr	r2, [pc, #252]	@ (8004f34 <TIM_Base_SetConfig+0x128>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d007      	beq.n	8004e4c <TIM_Base_SetConfig+0x40>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	4a3e      	ldr	r2, [pc, #248]	@ (8004f38 <TIM_Base_SetConfig+0x12c>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d003      	beq.n	8004e4c <TIM_Base_SetConfig+0x40>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	4a3d      	ldr	r2, [pc, #244]	@ (8004f3c <TIM_Base_SetConfig+0x130>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d108      	bne.n	8004e5e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	68fa      	ldr	r2, [r7, #12]
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	4a32      	ldr	r2, [pc, #200]	@ (8004f2c <TIM_Base_SetConfig+0x120>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d02b      	beq.n	8004ebe <TIM_Base_SetConfig+0xb2>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e6c:	d027      	beq.n	8004ebe <TIM_Base_SetConfig+0xb2>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	4a2f      	ldr	r2, [pc, #188]	@ (8004f30 <TIM_Base_SetConfig+0x124>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d023      	beq.n	8004ebe <TIM_Base_SetConfig+0xb2>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	4a2e      	ldr	r2, [pc, #184]	@ (8004f34 <TIM_Base_SetConfig+0x128>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d01f      	beq.n	8004ebe <TIM_Base_SetConfig+0xb2>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	4a2d      	ldr	r2, [pc, #180]	@ (8004f38 <TIM_Base_SetConfig+0x12c>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d01b      	beq.n	8004ebe <TIM_Base_SetConfig+0xb2>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	4a2c      	ldr	r2, [pc, #176]	@ (8004f3c <TIM_Base_SetConfig+0x130>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d017      	beq.n	8004ebe <TIM_Base_SetConfig+0xb2>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	4a2b      	ldr	r2, [pc, #172]	@ (8004f40 <TIM_Base_SetConfig+0x134>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d013      	beq.n	8004ebe <TIM_Base_SetConfig+0xb2>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	4a2a      	ldr	r2, [pc, #168]	@ (8004f44 <TIM_Base_SetConfig+0x138>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d00f      	beq.n	8004ebe <TIM_Base_SetConfig+0xb2>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	4a29      	ldr	r2, [pc, #164]	@ (8004f48 <TIM_Base_SetConfig+0x13c>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d00b      	beq.n	8004ebe <TIM_Base_SetConfig+0xb2>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	4a28      	ldr	r2, [pc, #160]	@ (8004f4c <TIM_Base_SetConfig+0x140>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d007      	beq.n	8004ebe <TIM_Base_SetConfig+0xb2>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	4a27      	ldr	r2, [pc, #156]	@ (8004f50 <TIM_Base_SetConfig+0x144>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d003      	beq.n	8004ebe <TIM_Base_SetConfig+0xb2>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	4a26      	ldr	r2, [pc, #152]	@ (8004f54 <TIM_Base_SetConfig+0x148>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d108      	bne.n	8004ed0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ec4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	68db      	ldr	r3, [r3, #12]
 8004eca:	68fa      	ldr	r2, [r7, #12]
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	695b      	ldr	r3, [r3, #20]
 8004eda:	4313      	orrs	r3, r2
 8004edc:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	689a      	ldr	r2, [r3, #8]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	4a0e      	ldr	r2, [pc, #56]	@ (8004f2c <TIM_Base_SetConfig+0x120>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d003      	beq.n	8004efe <TIM_Base_SetConfig+0xf2>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	4a10      	ldr	r2, [pc, #64]	@ (8004f3c <TIM_Base_SetConfig+0x130>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d103      	bne.n	8004f06 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	691a      	ldr	r2, [r3, #16]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f043 0204 	orr.w	r2, r3, #4
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2201      	movs	r2, #1
 8004f16:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	68fa      	ldr	r2, [r7, #12]
 8004f1c:	601a      	str	r2, [r3, #0]
}
 8004f1e:	bf00      	nop
 8004f20:	3714      	adds	r7, #20
 8004f22:	46bd      	mov	sp, r7
 8004f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f28:	4770      	bx	lr
 8004f2a:	bf00      	nop
 8004f2c:	40010000 	.word	0x40010000
 8004f30:	40000400 	.word	0x40000400
 8004f34:	40000800 	.word	0x40000800
 8004f38:	40000c00 	.word	0x40000c00
 8004f3c:	40010400 	.word	0x40010400
 8004f40:	40014000 	.word	0x40014000
 8004f44:	40014400 	.word	0x40014400
 8004f48:	40014800 	.word	0x40014800
 8004f4c:	40001800 	.word	0x40001800
 8004f50:	40001c00 	.word	0x40001c00
 8004f54:	40002000 	.word	0x40002000

08004f58 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b087      	sub	sp, #28
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	60f8      	str	r0, [r7, #12]
 8004f60:	60b9      	str	r1, [r7, #8]
 8004f62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	6a1b      	ldr	r3, [r3, #32]
 8004f68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	6a1b      	ldr	r3, [r3, #32]
 8004f6e:	f023 0201 	bic.w	r2, r3, #1
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	699b      	ldr	r3, [r3, #24]
 8004f7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004f82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	011b      	lsls	r3, r3, #4
 8004f88:	693a      	ldr	r2, [r7, #16]
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	f023 030a 	bic.w	r3, r3, #10
 8004f94:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f96:	697a      	ldr	r2, [r7, #20]
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	693a      	ldr	r2, [r7, #16]
 8004fa2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	697a      	ldr	r2, [r7, #20]
 8004fa8:	621a      	str	r2, [r3, #32]
}
 8004faa:	bf00      	nop
 8004fac:	371c      	adds	r7, #28
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb4:	4770      	bx	lr

08004fb6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004fb6:	b480      	push	{r7}
 8004fb8:	b087      	sub	sp, #28
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	60f8      	str	r0, [r7, #12]
 8004fbe:	60b9      	str	r1, [r7, #8]
 8004fc0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	6a1b      	ldr	r3, [r3, #32]
 8004fc6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	6a1b      	ldr	r3, [r3, #32]
 8004fcc:	f023 0210 	bic.w	r2, r3, #16
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	699b      	ldr	r3, [r3, #24]
 8004fd8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004fe0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	031b      	lsls	r3, r3, #12
 8004fe6:	693a      	ldr	r2, [r7, #16]
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004ff2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	011b      	lsls	r3, r3, #4
 8004ff8:	697a      	ldr	r2, [r7, #20]
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	693a      	ldr	r2, [r7, #16]
 8005002:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	697a      	ldr	r2, [r7, #20]
 8005008:	621a      	str	r2, [r3, #32]
}
 800500a:	bf00      	nop
 800500c:	371c      	adds	r7, #28
 800500e:	46bd      	mov	sp, r7
 8005010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005014:	4770      	bx	lr

08005016 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005016:	b480      	push	{r7}
 8005018:	b085      	sub	sp, #20
 800501a:	af00      	add	r7, sp, #0
 800501c:	6078      	str	r0, [r7, #4]
 800501e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800502c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800502e:	683a      	ldr	r2, [r7, #0]
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	4313      	orrs	r3, r2
 8005034:	f043 0307 	orr.w	r3, r3, #7
 8005038:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	68fa      	ldr	r2, [r7, #12]
 800503e:	609a      	str	r2, [r3, #8]
}
 8005040:	bf00      	nop
 8005042:	3714      	adds	r7, #20
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr

0800504c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800504c:	b480      	push	{r7}
 800504e:	b087      	sub	sp, #28
 8005050:	af00      	add	r7, sp, #0
 8005052:	60f8      	str	r0, [r7, #12]
 8005054:	60b9      	str	r1, [r7, #8]
 8005056:	607a      	str	r2, [r7, #4]
 8005058:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005066:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	021a      	lsls	r2, r3, #8
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	431a      	orrs	r2, r3
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	4313      	orrs	r3, r2
 8005074:	697a      	ldr	r2, [r7, #20]
 8005076:	4313      	orrs	r3, r2
 8005078:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	697a      	ldr	r2, [r7, #20]
 800507e:	609a      	str	r2, [r3, #8]
}
 8005080:	bf00      	nop
 8005082:	371c      	adds	r7, #28
 8005084:	46bd      	mov	sp, r7
 8005086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508a:	4770      	bx	lr

0800508c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800508c:	b480      	push	{r7}
 800508e:	b085      	sub	sp, #20
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
 8005094:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800509c:	2b01      	cmp	r3, #1
 800509e:	d101      	bne.n	80050a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80050a0:	2302      	movs	r3, #2
 80050a2:	e05a      	b.n	800515a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2201      	movs	r2, #1
 80050a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2202      	movs	r2, #2
 80050b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	68fa      	ldr	r2, [r7, #12]
 80050d2:	4313      	orrs	r3, r2
 80050d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	68fa      	ldr	r2, [r7, #12]
 80050dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a21      	ldr	r2, [pc, #132]	@ (8005168 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d022      	beq.n	800512e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050f0:	d01d      	beq.n	800512e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a1d      	ldr	r2, [pc, #116]	@ (800516c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d018      	beq.n	800512e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a1b      	ldr	r2, [pc, #108]	@ (8005170 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d013      	beq.n	800512e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a1a      	ldr	r2, [pc, #104]	@ (8005174 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d00e      	beq.n	800512e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a18      	ldr	r2, [pc, #96]	@ (8005178 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d009      	beq.n	800512e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a17      	ldr	r2, [pc, #92]	@ (800517c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d004      	beq.n	800512e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a15      	ldr	r2, [pc, #84]	@ (8005180 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d10c      	bne.n	8005148 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005134:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	68ba      	ldr	r2, [r7, #8]
 800513c:	4313      	orrs	r3, r2
 800513e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	68ba      	ldr	r2, [r7, #8]
 8005146:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2201      	movs	r2, #1
 800514c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2200      	movs	r2, #0
 8005154:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005158:	2300      	movs	r3, #0
}
 800515a:	4618      	mov	r0, r3
 800515c:	3714      	adds	r7, #20
 800515e:	46bd      	mov	sp, r7
 8005160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005164:	4770      	bx	lr
 8005166:	bf00      	nop
 8005168:	40010000 	.word	0x40010000
 800516c:	40000400 	.word	0x40000400
 8005170:	40000800 	.word	0x40000800
 8005174:	40000c00 	.word	0x40000c00
 8005178:	40010400 	.word	0x40010400
 800517c:	40014000 	.word	0x40014000
 8005180:	40001800 	.word	0x40001800

08005184 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005184:	b480      	push	{r7}
 8005186:	b083      	sub	sp, #12
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800518c:	bf00      	nop
 800518e:	370c      	adds	r7, #12
 8005190:	46bd      	mov	sp, r7
 8005192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005196:	4770      	bx	lr

08005198 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005198:	b480      	push	{r7}
 800519a:	b083      	sub	sp, #12
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80051a0:	bf00      	nop
 80051a2:	370c      	adds	r7, #12
 80051a4:	46bd      	mov	sp, r7
 80051a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051aa:	4770      	bx	lr

080051ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b082      	sub	sp, #8
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d101      	bne.n	80051be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80051ba:	2301      	movs	r3, #1
 80051bc:	e042      	b.n	8005244 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051c4:	b2db      	uxtb	r3, r3
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d106      	bne.n	80051d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2200      	movs	r2, #0
 80051ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f7fc fe96 	bl	8001f04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2224      	movs	r2, #36	@ 0x24
 80051dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	68da      	ldr	r2, [r3, #12]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80051ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80051f0:	6878      	ldr	r0, [r7, #4]
 80051f2:	f000 f973 	bl	80054dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	691a      	ldr	r2, [r3, #16]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005204:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	695a      	ldr	r2, [r3, #20]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005214:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	68da      	ldr	r2, [r3, #12]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005224:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2200      	movs	r2, #0
 800522a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2220      	movs	r2, #32
 8005230:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2220      	movs	r2, #32
 8005238:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2200      	movs	r2, #0
 8005240:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005242:	2300      	movs	r3, #0
}
 8005244:	4618      	mov	r0, r3
 8005246:	3708      	adds	r7, #8
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}

0800524c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b08a      	sub	sp, #40	@ 0x28
 8005250:	af02      	add	r7, sp, #8
 8005252:	60f8      	str	r0, [r7, #12]
 8005254:	60b9      	str	r1, [r7, #8]
 8005256:	603b      	str	r3, [r7, #0]
 8005258:	4613      	mov	r3, r2
 800525a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800525c:	2300      	movs	r3, #0
 800525e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005266:	b2db      	uxtb	r3, r3
 8005268:	2b20      	cmp	r3, #32
 800526a:	d175      	bne.n	8005358 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d002      	beq.n	8005278 <HAL_UART_Transmit+0x2c>
 8005272:	88fb      	ldrh	r3, [r7, #6]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d101      	bne.n	800527c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005278:	2301      	movs	r3, #1
 800527a:	e06e      	b.n	800535a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	2200      	movs	r2, #0
 8005280:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2221      	movs	r2, #33	@ 0x21
 8005286:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800528a:	f7fd f80b 	bl	80022a4 <HAL_GetTick>
 800528e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	88fa      	ldrh	r2, [r7, #6]
 8005294:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	88fa      	ldrh	r2, [r7, #6]
 800529a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052a4:	d108      	bne.n	80052b8 <HAL_UART_Transmit+0x6c>
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	691b      	ldr	r3, [r3, #16]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d104      	bne.n	80052b8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80052ae:	2300      	movs	r3, #0
 80052b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	61bb      	str	r3, [r7, #24]
 80052b6:	e003      	b.n	80052c0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80052bc:	2300      	movs	r3, #0
 80052be:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80052c0:	e02e      	b.n	8005320 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	9300      	str	r3, [sp, #0]
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	2200      	movs	r2, #0
 80052ca:	2180      	movs	r1, #128	@ 0x80
 80052cc:	68f8      	ldr	r0, [r7, #12]
 80052ce:	f000 f848 	bl	8005362 <UART_WaitOnFlagUntilTimeout>
 80052d2:	4603      	mov	r3, r0
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d005      	beq.n	80052e4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2220      	movs	r2, #32
 80052dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80052e0:	2303      	movs	r3, #3
 80052e2:	e03a      	b.n	800535a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80052e4:	69fb      	ldr	r3, [r7, #28]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d10b      	bne.n	8005302 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80052ea:	69bb      	ldr	r3, [r7, #24]
 80052ec:	881b      	ldrh	r3, [r3, #0]
 80052ee:	461a      	mov	r2, r3
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80052f8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80052fa:	69bb      	ldr	r3, [r7, #24]
 80052fc:	3302      	adds	r3, #2
 80052fe:	61bb      	str	r3, [r7, #24]
 8005300:	e007      	b.n	8005312 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005302:	69fb      	ldr	r3, [r7, #28]
 8005304:	781a      	ldrb	r2, [r3, #0]
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800530c:	69fb      	ldr	r3, [r7, #28]
 800530e:	3301      	adds	r3, #1
 8005310:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005316:	b29b      	uxth	r3, r3
 8005318:	3b01      	subs	r3, #1
 800531a:	b29a      	uxth	r2, r3
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005324:	b29b      	uxth	r3, r3
 8005326:	2b00      	cmp	r3, #0
 8005328:	d1cb      	bne.n	80052c2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	9300      	str	r3, [sp, #0]
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	2200      	movs	r2, #0
 8005332:	2140      	movs	r1, #64	@ 0x40
 8005334:	68f8      	ldr	r0, [r7, #12]
 8005336:	f000 f814 	bl	8005362 <UART_WaitOnFlagUntilTimeout>
 800533a:	4603      	mov	r3, r0
 800533c:	2b00      	cmp	r3, #0
 800533e:	d005      	beq.n	800534c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	2220      	movs	r2, #32
 8005344:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005348:	2303      	movs	r3, #3
 800534a:	e006      	b.n	800535a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2220      	movs	r2, #32
 8005350:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005354:	2300      	movs	r3, #0
 8005356:	e000      	b.n	800535a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005358:	2302      	movs	r3, #2
  }
}
 800535a:	4618      	mov	r0, r3
 800535c:	3720      	adds	r7, #32
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}

08005362 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005362:	b580      	push	{r7, lr}
 8005364:	b086      	sub	sp, #24
 8005366:	af00      	add	r7, sp, #0
 8005368:	60f8      	str	r0, [r7, #12]
 800536a:	60b9      	str	r1, [r7, #8]
 800536c:	603b      	str	r3, [r7, #0]
 800536e:	4613      	mov	r3, r2
 8005370:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005372:	e03b      	b.n	80053ec <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005374:	6a3b      	ldr	r3, [r7, #32]
 8005376:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800537a:	d037      	beq.n	80053ec <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800537c:	f7fc ff92 	bl	80022a4 <HAL_GetTick>
 8005380:	4602      	mov	r2, r0
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	1ad3      	subs	r3, r2, r3
 8005386:	6a3a      	ldr	r2, [r7, #32]
 8005388:	429a      	cmp	r2, r3
 800538a:	d302      	bcc.n	8005392 <UART_WaitOnFlagUntilTimeout+0x30>
 800538c:	6a3b      	ldr	r3, [r7, #32]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d101      	bne.n	8005396 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005392:	2303      	movs	r3, #3
 8005394:	e03a      	b.n	800540c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	68db      	ldr	r3, [r3, #12]
 800539c:	f003 0304 	and.w	r3, r3, #4
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d023      	beq.n	80053ec <UART_WaitOnFlagUntilTimeout+0x8a>
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	2b80      	cmp	r3, #128	@ 0x80
 80053a8:	d020      	beq.n	80053ec <UART_WaitOnFlagUntilTimeout+0x8a>
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	2b40      	cmp	r3, #64	@ 0x40
 80053ae:	d01d      	beq.n	80053ec <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f003 0308 	and.w	r3, r3, #8
 80053ba:	2b08      	cmp	r3, #8
 80053bc:	d116      	bne.n	80053ec <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80053be:	2300      	movs	r3, #0
 80053c0:	617b      	str	r3, [r7, #20]
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	617b      	str	r3, [r7, #20]
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	617b      	str	r3, [r7, #20]
 80053d2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80053d4:	68f8      	ldr	r0, [r7, #12]
 80053d6:	f000 f81d 	bl	8005414 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2208      	movs	r2, #8
 80053de:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	2200      	movs	r2, #0
 80053e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80053e8:	2301      	movs	r3, #1
 80053ea:	e00f      	b.n	800540c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	681a      	ldr	r2, [r3, #0]
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	4013      	ands	r3, r2
 80053f6:	68ba      	ldr	r2, [r7, #8]
 80053f8:	429a      	cmp	r2, r3
 80053fa:	bf0c      	ite	eq
 80053fc:	2301      	moveq	r3, #1
 80053fe:	2300      	movne	r3, #0
 8005400:	b2db      	uxtb	r3, r3
 8005402:	461a      	mov	r2, r3
 8005404:	79fb      	ldrb	r3, [r7, #7]
 8005406:	429a      	cmp	r2, r3
 8005408:	d0b4      	beq.n	8005374 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800540a:	2300      	movs	r3, #0
}
 800540c:	4618      	mov	r0, r3
 800540e:	3718      	adds	r7, #24
 8005410:	46bd      	mov	sp, r7
 8005412:	bd80      	pop	{r7, pc}

08005414 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005414:	b480      	push	{r7}
 8005416:	b095      	sub	sp, #84	@ 0x54
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	330c      	adds	r3, #12
 8005422:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005424:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005426:	e853 3f00 	ldrex	r3, [r3]
 800542a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800542c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800542e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005432:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	330c      	adds	r3, #12
 800543a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800543c:	643a      	str	r2, [r7, #64]	@ 0x40
 800543e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005440:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005442:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005444:	e841 2300 	strex	r3, r2, [r1]
 8005448:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800544a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800544c:	2b00      	cmp	r3, #0
 800544e:	d1e5      	bne.n	800541c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	3314      	adds	r3, #20
 8005456:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005458:	6a3b      	ldr	r3, [r7, #32]
 800545a:	e853 3f00 	ldrex	r3, [r3]
 800545e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005460:	69fb      	ldr	r3, [r7, #28]
 8005462:	f023 0301 	bic.w	r3, r3, #1
 8005466:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	3314      	adds	r3, #20
 800546e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005470:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005472:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005474:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005476:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005478:	e841 2300 	strex	r3, r2, [r1]
 800547c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800547e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005480:	2b00      	cmp	r3, #0
 8005482:	d1e5      	bne.n	8005450 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005488:	2b01      	cmp	r3, #1
 800548a:	d119      	bne.n	80054c0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	330c      	adds	r3, #12
 8005492:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	e853 3f00 	ldrex	r3, [r3]
 800549a:	60bb      	str	r3, [r7, #8]
   return(result);
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	f023 0310 	bic.w	r3, r3, #16
 80054a2:	647b      	str	r3, [r7, #68]	@ 0x44
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	330c      	adds	r3, #12
 80054aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80054ac:	61ba      	str	r2, [r7, #24]
 80054ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054b0:	6979      	ldr	r1, [r7, #20]
 80054b2:	69ba      	ldr	r2, [r7, #24]
 80054b4:	e841 2300 	strex	r3, r2, [r1]
 80054b8:	613b      	str	r3, [r7, #16]
   return(result);
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d1e5      	bne.n	800548c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2220      	movs	r2, #32
 80054c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2200      	movs	r2, #0
 80054cc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80054ce:	bf00      	nop
 80054d0:	3754      	adds	r7, #84	@ 0x54
 80054d2:	46bd      	mov	sp, r7
 80054d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d8:	4770      	bx	lr
	...

080054dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80054dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80054e0:	b0c0      	sub	sp, #256	@ 0x100
 80054e2:	af00      	add	r7, sp, #0
 80054e4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80054e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	691b      	ldr	r3, [r3, #16]
 80054f0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80054f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054f8:	68d9      	ldr	r1, [r3, #12]
 80054fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054fe:	681a      	ldr	r2, [r3, #0]
 8005500:	ea40 0301 	orr.w	r3, r0, r1
 8005504:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005506:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800550a:	689a      	ldr	r2, [r3, #8]
 800550c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005510:	691b      	ldr	r3, [r3, #16]
 8005512:	431a      	orrs	r2, r3
 8005514:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005518:	695b      	ldr	r3, [r3, #20]
 800551a:	431a      	orrs	r2, r3
 800551c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005520:	69db      	ldr	r3, [r3, #28]
 8005522:	4313      	orrs	r3, r2
 8005524:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	68db      	ldr	r3, [r3, #12]
 8005530:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005534:	f021 010c 	bic.w	r1, r1, #12
 8005538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800553c:	681a      	ldr	r2, [r3, #0]
 800553e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005542:	430b      	orrs	r3, r1
 8005544:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005546:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	695b      	ldr	r3, [r3, #20]
 800554e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005552:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005556:	6999      	ldr	r1, [r3, #24]
 8005558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800555c:	681a      	ldr	r2, [r3, #0]
 800555e:	ea40 0301 	orr.w	r3, r0, r1
 8005562:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005564:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005568:	681a      	ldr	r2, [r3, #0]
 800556a:	4b8f      	ldr	r3, [pc, #572]	@ (80057a8 <UART_SetConfig+0x2cc>)
 800556c:	429a      	cmp	r2, r3
 800556e:	d005      	beq.n	800557c <UART_SetConfig+0xa0>
 8005570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005574:	681a      	ldr	r2, [r3, #0]
 8005576:	4b8d      	ldr	r3, [pc, #564]	@ (80057ac <UART_SetConfig+0x2d0>)
 8005578:	429a      	cmp	r2, r3
 800557a:	d104      	bne.n	8005586 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800557c:	f7fe fda0 	bl	80040c0 <HAL_RCC_GetPCLK2Freq>
 8005580:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005584:	e003      	b.n	800558e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005586:	f7fe fd87 	bl	8004098 <HAL_RCC_GetPCLK1Freq>
 800558a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800558e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005592:	69db      	ldr	r3, [r3, #28]
 8005594:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005598:	f040 810c 	bne.w	80057b4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800559c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80055a0:	2200      	movs	r2, #0
 80055a2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80055a6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80055aa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80055ae:	4622      	mov	r2, r4
 80055b0:	462b      	mov	r3, r5
 80055b2:	1891      	adds	r1, r2, r2
 80055b4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80055b6:	415b      	adcs	r3, r3
 80055b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80055ba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80055be:	4621      	mov	r1, r4
 80055c0:	eb12 0801 	adds.w	r8, r2, r1
 80055c4:	4629      	mov	r1, r5
 80055c6:	eb43 0901 	adc.w	r9, r3, r1
 80055ca:	f04f 0200 	mov.w	r2, #0
 80055ce:	f04f 0300 	mov.w	r3, #0
 80055d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80055d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80055da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80055de:	4690      	mov	r8, r2
 80055e0:	4699      	mov	r9, r3
 80055e2:	4623      	mov	r3, r4
 80055e4:	eb18 0303 	adds.w	r3, r8, r3
 80055e8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80055ec:	462b      	mov	r3, r5
 80055ee:	eb49 0303 	adc.w	r3, r9, r3
 80055f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80055f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	2200      	movs	r2, #0
 80055fe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005602:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005606:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800560a:	460b      	mov	r3, r1
 800560c:	18db      	adds	r3, r3, r3
 800560e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005610:	4613      	mov	r3, r2
 8005612:	eb42 0303 	adc.w	r3, r2, r3
 8005616:	657b      	str	r3, [r7, #84]	@ 0x54
 8005618:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800561c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005620:	f7fa fe2e 	bl	8000280 <__aeabi_uldivmod>
 8005624:	4602      	mov	r2, r0
 8005626:	460b      	mov	r3, r1
 8005628:	4b61      	ldr	r3, [pc, #388]	@ (80057b0 <UART_SetConfig+0x2d4>)
 800562a:	fba3 2302 	umull	r2, r3, r3, r2
 800562e:	095b      	lsrs	r3, r3, #5
 8005630:	011c      	lsls	r4, r3, #4
 8005632:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005636:	2200      	movs	r2, #0
 8005638:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800563c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005640:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005644:	4642      	mov	r2, r8
 8005646:	464b      	mov	r3, r9
 8005648:	1891      	adds	r1, r2, r2
 800564a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800564c:	415b      	adcs	r3, r3
 800564e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005650:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005654:	4641      	mov	r1, r8
 8005656:	eb12 0a01 	adds.w	sl, r2, r1
 800565a:	4649      	mov	r1, r9
 800565c:	eb43 0b01 	adc.w	fp, r3, r1
 8005660:	f04f 0200 	mov.w	r2, #0
 8005664:	f04f 0300 	mov.w	r3, #0
 8005668:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800566c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005670:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005674:	4692      	mov	sl, r2
 8005676:	469b      	mov	fp, r3
 8005678:	4643      	mov	r3, r8
 800567a:	eb1a 0303 	adds.w	r3, sl, r3
 800567e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005682:	464b      	mov	r3, r9
 8005684:	eb4b 0303 	adc.w	r3, fp, r3
 8005688:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800568c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	2200      	movs	r2, #0
 8005694:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005698:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800569c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80056a0:	460b      	mov	r3, r1
 80056a2:	18db      	adds	r3, r3, r3
 80056a4:	643b      	str	r3, [r7, #64]	@ 0x40
 80056a6:	4613      	mov	r3, r2
 80056a8:	eb42 0303 	adc.w	r3, r2, r3
 80056ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80056ae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80056b2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80056b6:	f7fa fde3 	bl	8000280 <__aeabi_uldivmod>
 80056ba:	4602      	mov	r2, r0
 80056bc:	460b      	mov	r3, r1
 80056be:	4611      	mov	r1, r2
 80056c0:	4b3b      	ldr	r3, [pc, #236]	@ (80057b0 <UART_SetConfig+0x2d4>)
 80056c2:	fba3 2301 	umull	r2, r3, r3, r1
 80056c6:	095b      	lsrs	r3, r3, #5
 80056c8:	2264      	movs	r2, #100	@ 0x64
 80056ca:	fb02 f303 	mul.w	r3, r2, r3
 80056ce:	1acb      	subs	r3, r1, r3
 80056d0:	00db      	lsls	r3, r3, #3
 80056d2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80056d6:	4b36      	ldr	r3, [pc, #216]	@ (80057b0 <UART_SetConfig+0x2d4>)
 80056d8:	fba3 2302 	umull	r2, r3, r3, r2
 80056dc:	095b      	lsrs	r3, r3, #5
 80056de:	005b      	lsls	r3, r3, #1
 80056e0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80056e4:	441c      	add	r4, r3
 80056e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056ea:	2200      	movs	r2, #0
 80056ec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80056f0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80056f4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80056f8:	4642      	mov	r2, r8
 80056fa:	464b      	mov	r3, r9
 80056fc:	1891      	adds	r1, r2, r2
 80056fe:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005700:	415b      	adcs	r3, r3
 8005702:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005704:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005708:	4641      	mov	r1, r8
 800570a:	1851      	adds	r1, r2, r1
 800570c:	6339      	str	r1, [r7, #48]	@ 0x30
 800570e:	4649      	mov	r1, r9
 8005710:	414b      	adcs	r3, r1
 8005712:	637b      	str	r3, [r7, #52]	@ 0x34
 8005714:	f04f 0200 	mov.w	r2, #0
 8005718:	f04f 0300 	mov.w	r3, #0
 800571c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005720:	4659      	mov	r1, fp
 8005722:	00cb      	lsls	r3, r1, #3
 8005724:	4651      	mov	r1, sl
 8005726:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800572a:	4651      	mov	r1, sl
 800572c:	00ca      	lsls	r2, r1, #3
 800572e:	4610      	mov	r0, r2
 8005730:	4619      	mov	r1, r3
 8005732:	4603      	mov	r3, r0
 8005734:	4642      	mov	r2, r8
 8005736:	189b      	adds	r3, r3, r2
 8005738:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800573c:	464b      	mov	r3, r9
 800573e:	460a      	mov	r2, r1
 8005740:	eb42 0303 	adc.w	r3, r2, r3
 8005744:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	2200      	movs	r2, #0
 8005750:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005754:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005758:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800575c:	460b      	mov	r3, r1
 800575e:	18db      	adds	r3, r3, r3
 8005760:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005762:	4613      	mov	r3, r2
 8005764:	eb42 0303 	adc.w	r3, r2, r3
 8005768:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800576a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800576e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005772:	f7fa fd85 	bl	8000280 <__aeabi_uldivmod>
 8005776:	4602      	mov	r2, r0
 8005778:	460b      	mov	r3, r1
 800577a:	4b0d      	ldr	r3, [pc, #52]	@ (80057b0 <UART_SetConfig+0x2d4>)
 800577c:	fba3 1302 	umull	r1, r3, r3, r2
 8005780:	095b      	lsrs	r3, r3, #5
 8005782:	2164      	movs	r1, #100	@ 0x64
 8005784:	fb01 f303 	mul.w	r3, r1, r3
 8005788:	1ad3      	subs	r3, r2, r3
 800578a:	00db      	lsls	r3, r3, #3
 800578c:	3332      	adds	r3, #50	@ 0x32
 800578e:	4a08      	ldr	r2, [pc, #32]	@ (80057b0 <UART_SetConfig+0x2d4>)
 8005790:	fba2 2303 	umull	r2, r3, r2, r3
 8005794:	095b      	lsrs	r3, r3, #5
 8005796:	f003 0207 	and.w	r2, r3, #7
 800579a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4422      	add	r2, r4
 80057a2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80057a4:	e106      	b.n	80059b4 <UART_SetConfig+0x4d8>
 80057a6:	bf00      	nop
 80057a8:	40011000 	.word	0x40011000
 80057ac:	40011400 	.word	0x40011400
 80057b0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80057b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80057b8:	2200      	movs	r2, #0
 80057ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80057be:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80057c2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80057c6:	4642      	mov	r2, r8
 80057c8:	464b      	mov	r3, r9
 80057ca:	1891      	adds	r1, r2, r2
 80057cc:	6239      	str	r1, [r7, #32]
 80057ce:	415b      	adcs	r3, r3
 80057d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80057d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80057d6:	4641      	mov	r1, r8
 80057d8:	1854      	adds	r4, r2, r1
 80057da:	4649      	mov	r1, r9
 80057dc:	eb43 0501 	adc.w	r5, r3, r1
 80057e0:	f04f 0200 	mov.w	r2, #0
 80057e4:	f04f 0300 	mov.w	r3, #0
 80057e8:	00eb      	lsls	r3, r5, #3
 80057ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80057ee:	00e2      	lsls	r2, r4, #3
 80057f0:	4614      	mov	r4, r2
 80057f2:	461d      	mov	r5, r3
 80057f4:	4643      	mov	r3, r8
 80057f6:	18e3      	adds	r3, r4, r3
 80057f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80057fc:	464b      	mov	r3, r9
 80057fe:	eb45 0303 	adc.w	r3, r5, r3
 8005802:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005806:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	2200      	movs	r2, #0
 800580e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005812:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005816:	f04f 0200 	mov.w	r2, #0
 800581a:	f04f 0300 	mov.w	r3, #0
 800581e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005822:	4629      	mov	r1, r5
 8005824:	008b      	lsls	r3, r1, #2
 8005826:	4621      	mov	r1, r4
 8005828:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800582c:	4621      	mov	r1, r4
 800582e:	008a      	lsls	r2, r1, #2
 8005830:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005834:	f7fa fd24 	bl	8000280 <__aeabi_uldivmod>
 8005838:	4602      	mov	r2, r0
 800583a:	460b      	mov	r3, r1
 800583c:	4b60      	ldr	r3, [pc, #384]	@ (80059c0 <UART_SetConfig+0x4e4>)
 800583e:	fba3 2302 	umull	r2, r3, r3, r2
 8005842:	095b      	lsrs	r3, r3, #5
 8005844:	011c      	lsls	r4, r3, #4
 8005846:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800584a:	2200      	movs	r2, #0
 800584c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005850:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005854:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005858:	4642      	mov	r2, r8
 800585a:	464b      	mov	r3, r9
 800585c:	1891      	adds	r1, r2, r2
 800585e:	61b9      	str	r1, [r7, #24]
 8005860:	415b      	adcs	r3, r3
 8005862:	61fb      	str	r3, [r7, #28]
 8005864:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005868:	4641      	mov	r1, r8
 800586a:	1851      	adds	r1, r2, r1
 800586c:	6139      	str	r1, [r7, #16]
 800586e:	4649      	mov	r1, r9
 8005870:	414b      	adcs	r3, r1
 8005872:	617b      	str	r3, [r7, #20]
 8005874:	f04f 0200 	mov.w	r2, #0
 8005878:	f04f 0300 	mov.w	r3, #0
 800587c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005880:	4659      	mov	r1, fp
 8005882:	00cb      	lsls	r3, r1, #3
 8005884:	4651      	mov	r1, sl
 8005886:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800588a:	4651      	mov	r1, sl
 800588c:	00ca      	lsls	r2, r1, #3
 800588e:	4610      	mov	r0, r2
 8005890:	4619      	mov	r1, r3
 8005892:	4603      	mov	r3, r0
 8005894:	4642      	mov	r2, r8
 8005896:	189b      	adds	r3, r3, r2
 8005898:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800589c:	464b      	mov	r3, r9
 800589e:	460a      	mov	r2, r1
 80058a0:	eb42 0303 	adc.w	r3, r2, r3
 80058a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80058a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	2200      	movs	r2, #0
 80058b0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80058b2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80058b4:	f04f 0200 	mov.w	r2, #0
 80058b8:	f04f 0300 	mov.w	r3, #0
 80058bc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80058c0:	4649      	mov	r1, r9
 80058c2:	008b      	lsls	r3, r1, #2
 80058c4:	4641      	mov	r1, r8
 80058c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80058ca:	4641      	mov	r1, r8
 80058cc:	008a      	lsls	r2, r1, #2
 80058ce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80058d2:	f7fa fcd5 	bl	8000280 <__aeabi_uldivmod>
 80058d6:	4602      	mov	r2, r0
 80058d8:	460b      	mov	r3, r1
 80058da:	4611      	mov	r1, r2
 80058dc:	4b38      	ldr	r3, [pc, #224]	@ (80059c0 <UART_SetConfig+0x4e4>)
 80058de:	fba3 2301 	umull	r2, r3, r3, r1
 80058e2:	095b      	lsrs	r3, r3, #5
 80058e4:	2264      	movs	r2, #100	@ 0x64
 80058e6:	fb02 f303 	mul.w	r3, r2, r3
 80058ea:	1acb      	subs	r3, r1, r3
 80058ec:	011b      	lsls	r3, r3, #4
 80058ee:	3332      	adds	r3, #50	@ 0x32
 80058f0:	4a33      	ldr	r2, [pc, #204]	@ (80059c0 <UART_SetConfig+0x4e4>)
 80058f2:	fba2 2303 	umull	r2, r3, r2, r3
 80058f6:	095b      	lsrs	r3, r3, #5
 80058f8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80058fc:	441c      	add	r4, r3
 80058fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005902:	2200      	movs	r2, #0
 8005904:	673b      	str	r3, [r7, #112]	@ 0x70
 8005906:	677a      	str	r2, [r7, #116]	@ 0x74
 8005908:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800590c:	4642      	mov	r2, r8
 800590e:	464b      	mov	r3, r9
 8005910:	1891      	adds	r1, r2, r2
 8005912:	60b9      	str	r1, [r7, #8]
 8005914:	415b      	adcs	r3, r3
 8005916:	60fb      	str	r3, [r7, #12]
 8005918:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800591c:	4641      	mov	r1, r8
 800591e:	1851      	adds	r1, r2, r1
 8005920:	6039      	str	r1, [r7, #0]
 8005922:	4649      	mov	r1, r9
 8005924:	414b      	adcs	r3, r1
 8005926:	607b      	str	r3, [r7, #4]
 8005928:	f04f 0200 	mov.w	r2, #0
 800592c:	f04f 0300 	mov.w	r3, #0
 8005930:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005934:	4659      	mov	r1, fp
 8005936:	00cb      	lsls	r3, r1, #3
 8005938:	4651      	mov	r1, sl
 800593a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800593e:	4651      	mov	r1, sl
 8005940:	00ca      	lsls	r2, r1, #3
 8005942:	4610      	mov	r0, r2
 8005944:	4619      	mov	r1, r3
 8005946:	4603      	mov	r3, r0
 8005948:	4642      	mov	r2, r8
 800594a:	189b      	adds	r3, r3, r2
 800594c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800594e:	464b      	mov	r3, r9
 8005950:	460a      	mov	r2, r1
 8005952:	eb42 0303 	adc.w	r3, r2, r3
 8005956:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	2200      	movs	r2, #0
 8005960:	663b      	str	r3, [r7, #96]	@ 0x60
 8005962:	667a      	str	r2, [r7, #100]	@ 0x64
 8005964:	f04f 0200 	mov.w	r2, #0
 8005968:	f04f 0300 	mov.w	r3, #0
 800596c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005970:	4649      	mov	r1, r9
 8005972:	008b      	lsls	r3, r1, #2
 8005974:	4641      	mov	r1, r8
 8005976:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800597a:	4641      	mov	r1, r8
 800597c:	008a      	lsls	r2, r1, #2
 800597e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005982:	f7fa fc7d 	bl	8000280 <__aeabi_uldivmod>
 8005986:	4602      	mov	r2, r0
 8005988:	460b      	mov	r3, r1
 800598a:	4b0d      	ldr	r3, [pc, #52]	@ (80059c0 <UART_SetConfig+0x4e4>)
 800598c:	fba3 1302 	umull	r1, r3, r3, r2
 8005990:	095b      	lsrs	r3, r3, #5
 8005992:	2164      	movs	r1, #100	@ 0x64
 8005994:	fb01 f303 	mul.w	r3, r1, r3
 8005998:	1ad3      	subs	r3, r2, r3
 800599a:	011b      	lsls	r3, r3, #4
 800599c:	3332      	adds	r3, #50	@ 0x32
 800599e:	4a08      	ldr	r2, [pc, #32]	@ (80059c0 <UART_SetConfig+0x4e4>)
 80059a0:	fba2 2303 	umull	r2, r3, r2, r3
 80059a4:	095b      	lsrs	r3, r3, #5
 80059a6:	f003 020f 	and.w	r2, r3, #15
 80059aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4422      	add	r2, r4
 80059b2:	609a      	str	r2, [r3, #8]
}
 80059b4:	bf00      	nop
 80059b6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80059ba:	46bd      	mov	sp, r7
 80059bc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80059c0:	51eb851f 	.word	0x51eb851f

080059c4 <siprintf>:
 80059c4:	b40e      	push	{r1, r2, r3}
 80059c6:	b510      	push	{r4, lr}
 80059c8:	b09d      	sub	sp, #116	@ 0x74
 80059ca:	ab1f      	add	r3, sp, #124	@ 0x7c
 80059cc:	9002      	str	r0, [sp, #8]
 80059ce:	9006      	str	r0, [sp, #24]
 80059d0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80059d4:	480a      	ldr	r0, [pc, #40]	@ (8005a00 <siprintf+0x3c>)
 80059d6:	9107      	str	r1, [sp, #28]
 80059d8:	9104      	str	r1, [sp, #16]
 80059da:	490a      	ldr	r1, [pc, #40]	@ (8005a04 <siprintf+0x40>)
 80059dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80059e0:	9105      	str	r1, [sp, #20]
 80059e2:	2400      	movs	r4, #0
 80059e4:	a902      	add	r1, sp, #8
 80059e6:	6800      	ldr	r0, [r0, #0]
 80059e8:	9301      	str	r3, [sp, #4]
 80059ea:	941b      	str	r4, [sp, #108]	@ 0x6c
 80059ec:	f000 f9a2 	bl	8005d34 <_svfiprintf_r>
 80059f0:	9b02      	ldr	r3, [sp, #8]
 80059f2:	701c      	strb	r4, [r3, #0]
 80059f4:	b01d      	add	sp, #116	@ 0x74
 80059f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059fa:	b003      	add	sp, #12
 80059fc:	4770      	bx	lr
 80059fe:	bf00      	nop
 8005a00:	20000018 	.word	0x20000018
 8005a04:	ffff0208 	.word	0xffff0208

08005a08 <memset>:
 8005a08:	4402      	add	r2, r0
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d100      	bne.n	8005a12 <memset+0xa>
 8005a10:	4770      	bx	lr
 8005a12:	f803 1b01 	strb.w	r1, [r3], #1
 8005a16:	e7f9      	b.n	8005a0c <memset+0x4>

08005a18 <__errno>:
 8005a18:	4b01      	ldr	r3, [pc, #4]	@ (8005a20 <__errno+0x8>)
 8005a1a:	6818      	ldr	r0, [r3, #0]
 8005a1c:	4770      	bx	lr
 8005a1e:	bf00      	nop
 8005a20:	20000018 	.word	0x20000018

08005a24 <__libc_init_array>:
 8005a24:	b570      	push	{r4, r5, r6, lr}
 8005a26:	4d0d      	ldr	r5, [pc, #52]	@ (8005a5c <__libc_init_array+0x38>)
 8005a28:	4c0d      	ldr	r4, [pc, #52]	@ (8005a60 <__libc_init_array+0x3c>)
 8005a2a:	1b64      	subs	r4, r4, r5
 8005a2c:	10a4      	asrs	r4, r4, #2
 8005a2e:	2600      	movs	r6, #0
 8005a30:	42a6      	cmp	r6, r4
 8005a32:	d109      	bne.n	8005a48 <__libc_init_array+0x24>
 8005a34:	4d0b      	ldr	r5, [pc, #44]	@ (8005a64 <__libc_init_array+0x40>)
 8005a36:	4c0c      	ldr	r4, [pc, #48]	@ (8005a68 <__libc_init_array+0x44>)
 8005a38:	f000 fc64 	bl	8006304 <_init>
 8005a3c:	1b64      	subs	r4, r4, r5
 8005a3e:	10a4      	asrs	r4, r4, #2
 8005a40:	2600      	movs	r6, #0
 8005a42:	42a6      	cmp	r6, r4
 8005a44:	d105      	bne.n	8005a52 <__libc_init_array+0x2e>
 8005a46:	bd70      	pop	{r4, r5, r6, pc}
 8005a48:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a4c:	4798      	blx	r3
 8005a4e:	3601      	adds	r6, #1
 8005a50:	e7ee      	b.n	8005a30 <__libc_init_array+0xc>
 8005a52:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a56:	4798      	blx	r3
 8005a58:	3601      	adds	r6, #1
 8005a5a:	e7f2      	b.n	8005a42 <__libc_init_array+0x1e>
 8005a5c:	0800fc08 	.word	0x0800fc08
 8005a60:	0800fc08 	.word	0x0800fc08
 8005a64:	0800fc08 	.word	0x0800fc08
 8005a68:	0800fc0c 	.word	0x0800fc0c

08005a6c <__retarget_lock_acquire_recursive>:
 8005a6c:	4770      	bx	lr

08005a6e <__retarget_lock_release_recursive>:
 8005a6e:	4770      	bx	lr

08005a70 <memcpy>:
 8005a70:	440a      	add	r2, r1
 8005a72:	4291      	cmp	r1, r2
 8005a74:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8005a78:	d100      	bne.n	8005a7c <memcpy+0xc>
 8005a7a:	4770      	bx	lr
 8005a7c:	b510      	push	{r4, lr}
 8005a7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a82:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a86:	4291      	cmp	r1, r2
 8005a88:	d1f9      	bne.n	8005a7e <memcpy+0xe>
 8005a8a:	bd10      	pop	{r4, pc}

08005a8c <_free_r>:
 8005a8c:	b538      	push	{r3, r4, r5, lr}
 8005a8e:	4605      	mov	r5, r0
 8005a90:	2900      	cmp	r1, #0
 8005a92:	d041      	beq.n	8005b18 <_free_r+0x8c>
 8005a94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a98:	1f0c      	subs	r4, r1, #4
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	bfb8      	it	lt
 8005a9e:	18e4      	addlt	r4, r4, r3
 8005aa0:	f000 f8e0 	bl	8005c64 <__malloc_lock>
 8005aa4:	4a1d      	ldr	r2, [pc, #116]	@ (8005b1c <_free_r+0x90>)
 8005aa6:	6813      	ldr	r3, [r2, #0]
 8005aa8:	b933      	cbnz	r3, 8005ab8 <_free_r+0x2c>
 8005aaa:	6063      	str	r3, [r4, #4]
 8005aac:	6014      	str	r4, [r2, #0]
 8005aae:	4628      	mov	r0, r5
 8005ab0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005ab4:	f000 b8dc 	b.w	8005c70 <__malloc_unlock>
 8005ab8:	42a3      	cmp	r3, r4
 8005aba:	d908      	bls.n	8005ace <_free_r+0x42>
 8005abc:	6820      	ldr	r0, [r4, #0]
 8005abe:	1821      	adds	r1, r4, r0
 8005ac0:	428b      	cmp	r3, r1
 8005ac2:	bf01      	itttt	eq
 8005ac4:	6819      	ldreq	r1, [r3, #0]
 8005ac6:	685b      	ldreq	r3, [r3, #4]
 8005ac8:	1809      	addeq	r1, r1, r0
 8005aca:	6021      	streq	r1, [r4, #0]
 8005acc:	e7ed      	b.n	8005aaa <_free_r+0x1e>
 8005ace:	461a      	mov	r2, r3
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	b10b      	cbz	r3, 8005ad8 <_free_r+0x4c>
 8005ad4:	42a3      	cmp	r3, r4
 8005ad6:	d9fa      	bls.n	8005ace <_free_r+0x42>
 8005ad8:	6811      	ldr	r1, [r2, #0]
 8005ada:	1850      	adds	r0, r2, r1
 8005adc:	42a0      	cmp	r0, r4
 8005ade:	d10b      	bne.n	8005af8 <_free_r+0x6c>
 8005ae0:	6820      	ldr	r0, [r4, #0]
 8005ae2:	4401      	add	r1, r0
 8005ae4:	1850      	adds	r0, r2, r1
 8005ae6:	4283      	cmp	r3, r0
 8005ae8:	6011      	str	r1, [r2, #0]
 8005aea:	d1e0      	bne.n	8005aae <_free_r+0x22>
 8005aec:	6818      	ldr	r0, [r3, #0]
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	6053      	str	r3, [r2, #4]
 8005af2:	4408      	add	r0, r1
 8005af4:	6010      	str	r0, [r2, #0]
 8005af6:	e7da      	b.n	8005aae <_free_r+0x22>
 8005af8:	d902      	bls.n	8005b00 <_free_r+0x74>
 8005afa:	230c      	movs	r3, #12
 8005afc:	602b      	str	r3, [r5, #0]
 8005afe:	e7d6      	b.n	8005aae <_free_r+0x22>
 8005b00:	6820      	ldr	r0, [r4, #0]
 8005b02:	1821      	adds	r1, r4, r0
 8005b04:	428b      	cmp	r3, r1
 8005b06:	bf04      	itt	eq
 8005b08:	6819      	ldreq	r1, [r3, #0]
 8005b0a:	685b      	ldreq	r3, [r3, #4]
 8005b0c:	6063      	str	r3, [r4, #4]
 8005b0e:	bf04      	itt	eq
 8005b10:	1809      	addeq	r1, r1, r0
 8005b12:	6021      	streq	r1, [r4, #0]
 8005b14:	6054      	str	r4, [r2, #4]
 8005b16:	e7ca      	b.n	8005aae <_free_r+0x22>
 8005b18:	bd38      	pop	{r3, r4, r5, pc}
 8005b1a:	bf00      	nop
 8005b1c:	20000440 	.word	0x20000440

08005b20 <sbrk_aligned>:
 8005b20:	b570      	push	{r4, r5, r6, lr}
 8005b22:	4e0f      	ldr	r6, [pc, #60]	@ (8005b60 <sbrk_aligned+0x40>)
 8005b24:	460c      	mov	r4, r1
 8005b26:	6831      	ldr	r1, [r6, #0]
 8005b28:	4605      	mov	r5, r0
 8005b2a:	b911      	cbnz	r1, 8005b32 <sbrk_aligned+0x12>
 8005b2c:	f000 fba4 	bl	8006278 <_sbrk_r>
 8005b30:	6030      	str	r0, [r6, #0]
 8005b32:	4621      	mov	r1, r4
 8005b34:	4628      	mov	r0, r5
 8005b36:	f000 fb9f 	bl	8006278 <_sbrk_r>
 8005b3a:	1c43      	adds	r3, r0, #1
 8005b3c:	d103      	bne.n	8005b46 <sbrk_aligned+0x26>
 8005b3e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8005b42:	4620      	mov	r0, r4
 8005b44:	bd70      	pop	{r4, r5, r6, pc}
 8005b46:	1cc4      	adds	r4, r0, #3
 8005b48:	f024 0403 	bic.w	r4, r4, #3
 8005b4c:	42a0      	cmp	r0, r4
 8005b4e:	d0f8      	beq.n	8005b42 <sbrk_aligned+0x22>
 8005b50:	1a21      	subs	r1, r4, r0
 8005b52:	4628      	mov	r0, r5
 8005b54:	f000 fb90 	bl	8006278 <_sbrk_r>
 8005b58:	3001      	adds	r0, #1
 8005b5a:	d1f2      	bne.n	8005b42 <sbrk_aligned+0x22>
 8005b5c:	e7ef      	b.n	8005b3e <sbrk_aligned+0x1e>
 8005b5e:	bf00      	nop
 8005b60:	2000043c 	.word	0x2000043c

08005b64 <_malloc_r>:
 8005b64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b68:	1ccd      	adds	r5, r1, #3
 8005b6a:	f025 0503 	bic.w	r5, r5, #3
 8005b6e:	3508      	adds	r5, #8
 8005b70:	2d0c      	cmp	r5, #12
 8005b72:	bf38      	it	cc
 8005b74:	250c      	movcc	r5, #12
 8005b76:	2d00      	cmp	r5, #0
 8005b78:	4606      	mov	r6, r0
 8005b7a:	db01      	blt.n	8005b80 <_malloc_r+0x1c>
 8005b7c:	42a9      	cmp	r1, r5
 8005b7e:	d904      	bls.n	8005b8a <_malloc_r+0x26>
 8005b80:	230c      	movs	r3, #12
 8005b82:	6033      	str	r3, [r6, #0]
 8005b84:	2000      	movs	r0, #0
 8005b86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b8a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005c60 <_malloc_r+0xfc>
 8005b8e:	f000 f869 	bl	8005c64 <__malloc_lock>
 8005b92:	f8d8 3000 	ldr.w	r3, [r8]
 8005b96:	461c      	mov	r4, r3
 8005b98:	bb44      	cbnz	r4, 8005bec <_malloc_r+0x88>
 8005b9a:	4629      	mov	r1, r5
 8005b9c:	4630      	mov	r0, r6
 8005b9e:	f7ff ffbf 	bl	8005b20 <sbrk_aligned>
 8005ba2:	1c43      	adds	r3, r0, #1
 8005ba4:	4604      	mov	r4, r0
 8005ba6:	d158      	bne.n	8005c5a <_malloc_r+0xf6>
 8005ba8:	f8d8 4000 	ldr.w	r4, [r8]
 8005bac:	4627      	mov	r7, r4
 8005bae:	2f00      	cmp	r7, #0
 8005bb0:	d143      	bne.n	8005c3a <_malloc_r+0xd6>
 8005bb2:	2c00      	cmp	r4, #0
 8005bb4:	d04b      	beq.n	8005c4e <_malloc_r+0xea>
 8005bb6:	6823      	ldr	r3, [r4, #0]
 8005bb8:	4639      	mov	r1, r7
 8005bba:	4630      	mov	r0, r6
 8005bbc:	eb04 0903 	add.w	r9, r4, r3
 8005bc0:	f000 fb5a 	bl	8006278 <_sbrk_r>
 8005bc4:	4581      	cmp	r9, r0
 8005bc6:	d142      	bne.n	8005c4e <_malloc_r+0xea>
 8005bc8:	6821      	ldr	r1, [r4, #0]
 8005bca:	1a6d      	subs	r5, r5, r1
 8005bcc:	4629      	mov	r1, r5
 8005bce:	4630      	mov	r0, r6
 8005bd0:	f7ff ffa6 	bl	8005b20 <sbrk_aligned>
 8005bd4:	3001      	adds	r0, #1
 8005bd6:	d03a      	beq.n	8005c4e <_malloc_r+0xea>
 8005bd8:	6823      	ldr	r3, [r4, #0]
 8005bda:	442b      	add	r3, r5
 8005bdc:	6023      	str	r3, [r4, #0]
 8005bde:	f8d8 3000 	ldr.w	r3, [r8]
 8005be2:	685a      	ldr	r2, [r3, #4]
 8005be4:	bb62      	cbnz	r2, 8005c40 <_malloc_r+0xdc>
 8005be6:	f8c8 7000 	str.w	r7, [r8]
 8005bea:	e00f      	b.n	8005c0c <_malloc_r+0xa8>
 8005bec:	6822      	ldr	r2, [r4, #0]
 8005bee:	1b52      	subs	r2, r2, r5
 8005bf0:	d420      	bmi.n	8005c34 <_malloc_r+0xd0>
 8005bf2:	2a0b      	cmp	r2, #11
 8005bf4:	d917      	bls.n	8005c26 <_malloc_r+0xc2>
 8005bf6:	1961      	adds	r1, r4, r5
 8005bf8:	42a3      	cmp	r3, r4
 8005bfa:	6025      	str	r5, [r4, #0]
 8005bfc:	bf18      	it	ne
 8005bfe:	6059      	strne	r1, [r3, #4]
 8005c00:	6863      	ldr	r3, [r4, #4]
 8005c02:	bf08      	it	eq
 8005c04:	f8c8 1000 	streq.w	r1, [r8]
 8005c08:	5162      	str	r2, [r4, r5]
 8005c0a:	604b      	str	r3, [r1, #4]
 8005c0c:	4630      	mov	r0, r6
 8005c0e:	f000 f82f 	bl	8005c70 <__malloc_unlock>
 8005c12:	f104 000b 	add.w	r0, r4, #11
 8005c16:	1d23      	adds	r3, r4, #4
 8005c18:	f020 0007 	bic.w	r0, r0, #7
 8005c1c:	1ac2      	subs	r2, r0, r3
 8005c1e:	bf1c      	itt	ne
 8005c20:	1a1b      	subne	r3, r3, r0
 8005c22:	50a3      	strne	r3, [r4, r2]
 8005c24:	e7af      	b.n	8005b86 <_malloc_r+0x22>
 8005c26:	6862      	ldr	r2, [r4, #4]
 8005c28:	42a3      	cmp	r3, r4
 8005c2a:	bf0c      	ite	eq
 8005c2c:	f8c8 2000 	streq.w	r2, [r8]
 8005c30:	605a      	strne	r2, [r3, #4]
 8005c32:	e7eb      	b.n	8005c0c <_malloc_r+0xa8>
 8005c34:	4623      	mov	r3, r4
 8005c36:	6864      	ldr	r4, [r4, #4]
 8005c38:	e7ae      	b.n	8005b98 <_malloc_r+0x34>
 8005c3a:	463c      	mov	r4, r7
 8005c3c:	687f      	ldr	r7, [r7, #4]
 8005c3e:	e7b6      	b.n	8005bae <_malloc_r+0x4a>
 8005c40:	461a      	mov	r2, r3
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	42a3      	cmp	r3, r4
 8005c46:	d1fb      	bne.n	8005c40 <_malloc_r+0xdc>
 8005c48:	2300      	movs	r3, #0
 8005c4a:	6053      	str	r3, [r2, #4]
 8005c4c:	e7de      	b.n	8005c0c <_malloc_r+0xa8>
 8005c4e:	230c      	movs	r3, #12
 8005c50:	6033      	str	r3, [r6, #0]
 8005c52:	4630      	mov	r0, r6
 8005c54:	f000 f80c 	bl	8005c70 <__malloc_unlock>
 8005c58:	e794      	b.n	8005b84 <_malloc_r+0x20>
 8005c5a:	6005      	str	r5, [r0, #0]
 8005c5c:	e7d6      	b.n	8005c0c <_malloc_r+0xa8>
 8005c5e:	bf00      	nop
 8005c60:	20000440 	.word	0x20000440

08005c64 <__malloc_lock>:
 8005c64:	4801      	ldr	r0, [pc, #4]	@ (8005c6c <__malloc_lock+0x8>)
 8005c66:	f7ff bf01 	b.w	8005a6c <__retarget_lock_acquire_recursive>
 8005c6a:	bf00      	nop
 8005c6c:	20000438 	.word	0x20000438

08005c70 <__malloc_unlock>:
 8005c70:	4801      	ldr	r0, [pc, #4]	@ (8005c78 <__malloc_unlock+0x8>)
 8005c72:	f7ff befc 	b.w	8005a6e <__retarget_lock_release_recursive>
 8005c76:	bf00      	nop
 8005c78:	20000438 	.word	0x20000438

08005c7c <__ssputs_r>:
 8005c7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c80:	688e      	ldr	r6, [r1, #8]
 8005c82:	461f      	mov	r7, r3
 8005c84:	42be      	cmp	r6, r7
 8005c86:	680b      	ldr	r3, [r1, #0]
 8005c88:	4682      	mov	sl, r0
 8005c8a:	460c      	mov	r4, r1
 8005c8c:	4690      	mov	r8, r2
 8005c8e:	d82d      	bhi.n	8005cec <__ssputs_r+0x70>
 8005c90:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005c94:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005c98:	d026      	beq.n	8005ce8 <__ssputs_r+0x6c>
 8005c9a:	6965      	ldr	r5, [r4, #20]
 8005c9c:	6909      	ldr	r1, [r1, #16]
 8005c9e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005ca2:	eba3 0901 	sub.w	r9, r3, r1
 8005ca6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005caa:	1c7b      	adds	r3, r7, #1
 8005cac:	444b      	add	r3, r9
 8005cae:	106d      	asrs	r5, r5, #1
 8005cb0:	429d      	cmp	r5, r3
 8005cb2:	bf38      	it	cc
 8005cb4:	461d      	movcc	r5, r3
 8005cb6:	0553      	lsls	r3, r2, #21
 8005cb8:	d527      	bpl.n	8005d0a <__ssputs_r+0x8e>
 8005cba:	4629      	mov	r1, r5
 8005cbc:	f7ff ff52 	bl	8005b64 <_malloc_r>
 8005cc0:	4606      	mov	r6, r0
 8005cc2:	b360      	cbz	r0, 8005d1e <__ssputs_r+0xa2>
 8005cc4:	6921      	ldr	r1, [r4, #16]
 8005cc6:	464a      	mov	r2, r9
 8005cc8:	f7ff fed2 	bl	8005a70 <memcpy>
 8005ccc:	89a3      	ldrh	r3, [r4, #12]
 8005cce:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005cd2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005cd6:	81a3      	strh	r3, [r4, #12]
 8005cd8:	6126      	str	r6, [r4, #16]
 8005cda:	6165      	str	r5, [r4, #20]
 8005cdc:	444e      	add	r6, r9
 8005cde:	eba5 0509 	sub.w	r5, r5, r9
 8005ce2:	6026      	str	r6, [r4, #0]
 8005ce4:	60a5      	str	r5, [r4, #8]
 8005ce6:	463e      	mov	r6, r7
 8005ce8:	42be      	cmp	r6, r7
 8005cea:	d900      	bls.n	8005cee <__ssputs_r+0x72>
 8005cec:	463e      	mov	r6, r7
 8005cee:	6820      	ldr	r0, [r4, #0]
 8005cf0:	4632      	mov	r2, r6
 8005cf2:	4641      	mov	r1, r8
 8005cf4:	f000 faa6 	bl	8006244 <memmove>
 8005cf8:	68a3      	ldr	r3, [r4, #8]
 8005cfa:	1b9b      	subs	r3, r3, r6
 8005cfc:	60a3      	str	r3, [r4, #8]
 8005cfe:	6823      	ldr	r3, [r4, #0]
 8005d00:	4433      	add	r3, r6
 8005d02:	6023      	str	r3, [r4, #0]
 8005d04:	2000      	movs	r0, #0
 8005d06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d0a:	462a      	mov	r2, r5
 8005d0c:	f000 fac4 	bl	8006298 <_realloc_r>
 8005d10:	4606      	mov	r6, r0
 8005d12:	2800      	cmp	r0, #0
 8005d14:	d1e0      	bne.n	8005cd8 <__ssputs_r+0x5c>
 8005d16:	6921      	ldr	r1, [r4, #16]
 8005d18:	4650      	mov	r0, sl
 8005d1a:	f7ff feb7 	bl	8005a8c <_free_r>
 8005d1e:	230c      	movs	r3, #12
 8005d20:	f8ca 3000 	str.w	r3, [sl]
 8005d24:	89a3      	ldrh	r3, [r4, #12]
 8005d26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005d2a:	81a3      	strh	r3, [r4, #12]
 8005d2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005d30:	e7e9      	b.n	8005d06 <__ssputs_r+0x8a>
	...

08005d34 <_svfiprintf_r>:
 8005d34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d38:	4698      	mov	r8, r3
 8005d3a:	898b      	ldrh	r3, [r1, #12]
 8005d3c:	061b      	lsls	r3, r3, #24
 8005d3e:	b09d      	sub	sp, #116	@ 0x74
 8005d40:	4607      	mov	r7, r0
 8005d42:	460d      	mov	r5, r1
 8005d44:	4614      	mov	r4, r2
 8005d46:	d510      	bpl.n	8005d6a <_svfiprintf_r+0x36>
 8005d48:	690b      	ldr	r3, [r1, #16]
 8005d4a:	b973      	cbnz	r3, 8005d6a <_svfiprintf_r+0x36>
 8005d4c:	2140      	movs	r1, #64	@ 0x40
 8005d4e:	f7ff ff09 	bl	8005b64 <_malloc_r>
 8005d52:	6028      	str	r0, [r5, #0]
 8005d54:	6128      	str	r0, [r5, #16]
 8005d56:	b930      	cbnz	r0, 8005d66 <_svfiprintf_r+0x32>
 8005d58:	230c      	movs	r3, #12
 8005d5a:	603b      	str	r3, [r7, #0]
 8005d5c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005d60:	b01d      	add	sp, #116	@ 0x74
 8005d62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d66:	2340      	movs	r3, #64	@ 0x40
 8005d68:	616b      	str	r3, [r5, #20]
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005d6e:	2320      	movs	r3, #32
 8005d70:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005d74:	f8cd 800c 	str.w	r8, [sp, #12]
 8005d78:	2330      	movs	r3, #48	@ 0x30
 8005d7a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005f18 <_svfiprintf_r+0x1e4>
 8005d7e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005d82:	f04f 0901 	mov.w	r9, #1
 8005d86:	4623      	mov	r3, r4
 8005d88:	469a      	mov	sl, r3
 8005d8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005d8e:	b10a      	cbz	r2, 8005d94 <_svfiprintf_r+0x60>
 8005d90:	2a25      	cmp	r2, #37	@ 0x25
 8005d92:	d1f9      	bne.n	8005d88 <_svfiprintf_r+0x54>
 8005d94:	ebba 0b04 	subs.w	fp, sl, r4
 8005d98:	d00b      	beq.n	8005db2 <_svfiprintf_r+0x7e>
 8005d9a:	465b      	mov	r3, fp
 8005d9c:	4622      	mov	r2, r4
 8005d9e:	4629      	mov	r1, r5
 8005da0:	4638      	mov	r0, r7
 8005da2:	f7ff ff6b 	bl	8005c7c <__ssputs_r>
 8005da6:	3001      	adds	r0, #1
 8005da8:	f000 80a7 	beq.w	8005efa <_svfiprintf_r+0x1c6>
 8005dac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005dae:	445a      	add	r2, fp
 8005db0:	9209      	str	r2, [sp, #36]	@ 0x24
 8005db2:	f89a 3000 	ldrb.w	r3, [sl]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	f000 809f 	beq.w	8005efa <_svfiprintf_r+0x1c6>
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005dc2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005dc6:	f10a 0a01 	add.w	sl, sl, #1
 8005dca:	9304      	str	r3, [sp, #16]
 8005dcc:	9307      	str	r3, [sp, #28]
 8005dce:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005dd2:	931a      	str	r3, [sp, #104]	@ 0x68
 8005dd4:	4654      	mov	r4, sl
 8005dd6:	2205      	movs	r2, #5
 8005dd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ddc:	484e      	ldr	r0, [pc, #312]	@ (8005f18 <_svfiprintf_r+0x1e4>)
 8005dde:	f7fa f9ff 	bl	80001e0 <memchr>
 8005de2:	9a04      	ldr	r2, [sp, #16]
 8005de4:	b9d8      	cbnz	r0, 8005e1e <_svfiprintf_r+0xea>
 8005de6:	06d0      	lsls	r0, r2, #27
 8005de8:	bf44      	itt	mi
 8005dea:	2320      	movmi	r3, #32
 8005dec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005df0:	0711      	lsls	r1, r2, #28
 8005df2:	bf44      	itt	mi
 8005df4:	232b      	movmi	r3, #43	@ 0x2b
 8005df6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005dfa:	f89a 3000 	ldrb.w	r3, [sl]
 8005dfe:	2b2a      	cmp	r3, #42	@ 0x2a
 8005e00:	d015      	beq.n	8005e2e <_svfiprintf_r+0xfa>
 8005e02:	9a07      	ldr	r2, [sp, #28]
 8005e04:	4654      	mov	r4, sl
 8005e06:	2000      	movs	r0, #0
 8005e08:	f04f 0c0a 	mov.w	ip, #10
 8005e0c:	4621      	mov	r1, r4
 8005e0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005e12:	3b30      	subs	r3, #48	@ 0x30
 8005e14:	2b09      	cmp	r3, #9
 8005e16:	d94b      	bls.n	8005eb0 <_svfiprintf_r+0x17c>
 8005e18:	b1b0      	cbz	r0, 8005e48 <_svfiprintf_r+0x114>
 8005e1a:	9207      	str	r2, [sp, #28]
 8005e1c:	e014      	b.n	8005e48 <_svfiprintf_r+0x114>
 8005e1e:	eba0 0308 	sub.w	r3, r0, r8
 8005e22:	fa09 f303 	lsl.w	r3, r9, r3
 8005e26:	4313      	orrs	r3, r2
 8005e28:	9304      	str	r3, [sp, #16]
 8005e2a:	46a2      	mov	sl, r4
 8005e2c:	e7d2      	b.n	8005dd4 <_svfiprintf_r+0xa0>
 8005e2e:	9b03      	ldr	r3, [sp, #12]
 8005e30:	1d19      	adds	r1, r3, #4
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	9103      	str	r1, [sp, #12]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	bfbb      	ittet	lt
 8005e3a:	425b      	neglt	r3, r3
 8005e3c:	f042 0202 	orrlt.w	r2, r2, #2
 8005e40:	9307      	strge	r3, [sp, #28]
 8005e42:	9307      	strlt	r3, [sp, #28]
 8005e44:	bfb8      	it	lt
 8005e46:	9204      	strlt	r2, [sp, #16]
 8005e48:	7823      	ldrb	r3, [r4, #0]
 8005e4a:	2b2e      	cmp	r3, #46	@ 0x2e
 8005e4c:	d10a      	bne.n	8005e64 <_svfiprintf_r+0x130>
 8005e4e:	7863      	ldrb	r3, [r4, #1]
 8005e50:	2b2a      	cmp	r3, #42	@ 0x2a
 8005e52:	d132      	bne.n	8005eba <_svfiprintf_r+0x186>
 8005e54:	9b03      	ldr	r3, [sp, #12]
 8005e56:	1d1a      	adds	r2, r3, #4
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	9203      	str	r2, [sp, #12]
 8005e5c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005e60:	3402      	adds	r4, #2
 8005e62:	9305      	str	r3, [sp, #20]
 8005e64:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005f28 <_svfiprintf_r+0x1f4>
 8005e68:	7821      	ldrb	r1, [r4, #0]
 8005e6a:	2203      	movs	r2, #3
 8005e6c:	4650      	mov	r0, sl
 8005e6e:	f7fa f9b7 	bl	80001e0 <memchr>
 8005e72:	b138      	cbz	r0, 8005e84 <_svfiprintf_r+0x150>
 8005e74:	9b04      	ldr	r3, [sp, #16]
 8005e76:	eba0 000a 	sub.w	r0, r0, sl
 8005e7a:	2240      	movs	r2, #64	@ 0x40
 8005e7c:	4082      	lsls	r2, r0
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	3401      	adds	r4, #1
 8005e82:	9304      	str	r3, [sp, #16]
 8005e84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e88:	4824      	ldr	r0, [pc, #144]	@ (8005f1c <_svfiprintf_r+0x1e8>)
 8005e8a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005e8e:	2206      	movs	r2, #6
 8005e90:	f7fa f9a6 	bl	80001e0 <memchr>
 8005e94:	2800      	cmp	r0, #0
 8005e96:	d036      	beq.n	8005f06 <_svfiprintf_r+0x1d2>
 8005e98:	4b21      	ldr	r3, [pc, #132]	@ (8005f20 <_svfiprintf_r+0x1ec>)
 8005e9a:	bb1b      	cbnz	r3, 8005ee4 <_svfiprintf_r+0x1b0>
 8005e9c:	9b03      	ldr	r3, [sp, #12]
 8005e9e:	3307      	adds	r3, #7
 8005ea0:	f023 0307 	bic.w	r3, r3, #7
 8005ea4:	3308      	adds	r3, #8
 8005ea6:	9303      	str	r3, [sp, #12]
 8005ea8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005eaa:	4433      	add	r3, r6
 8005eac:	9309      	str	r3, [sp, #36]	@ 0x24
 8005eae:	e76a      	b.n	8005d86 <_svfiprintf_r+0x52>
 8005eb0:	fb0c 3202 	mla	r2, ip, r2, r3
 8005eb4:	460c      	mov	r4, r1
 8005eb6:	2001      	movs	r0, #1
 8005eb8:	e7a8      	b.n	8005e0c <_svfiprintf_r+0xd8>
 8005eba:	2300      	movs	r3, #0
 8005ebc:	3401      	adds	r4, #1
 8005ebe:	9305      	str	r3, [sp, #20]
 8005ec0:	4619      	mov	r1, r3
 8005ec2:	f04f 0c0a 	mov.w	ip, #10
 8005ec6:	4620      	mov	r0, r4
 8005ec8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005ecc:	3a30      	subs	r2, #48	@ 0x30
 8005ece:	2a09      	cmp	r2, #9
 8005ed0:	d903      	bls.n	8005eda <_svfiprintf_r+0x1a6>
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d0c6      	beq.n	8005e64 <_svfiprintf_r+0x130>
 8005ed6:	9105      	str	r1, [sp, #20]
 8005ed8:	e7c4      	b.n	8005e64 <_svfiprintf_r+0x130>
 8005eda:	fb0c 2101 	mla	r1, ip, r1, r2
 8005ede:	4604      	mov	r4, r0
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	e7f0      	b.n	8005ec6 <_svfiprintf_r+0x192>
 8005ee4:	ab03      	add	r3, sp, #12
 8005ee6:	9300      	str	r3, [sp, #0]
 8005ee8:	462a      	mov	r2, r5
 8005eea:	4b0e      	ldr	r3, [pc, #56]	@ (8005f24 <_svfiprintf_r+0x1f0>)
 8005eec:	a904      	add	r1, sp, #16
 8005eee:	4638      	mov	r0, r7
 8005ef0:	f3af 8000 	nop.w
 8005ef4:	1c42      	adds	r2, r0, #1
 8005ef6:	4606      	mov	r6, r0
 8005ef8:	d1d6      	bne.n	8005ea8 <_svfiprintf_r+0x174>
 8005efa:	89ab      	ldrh	r3, [r5, #12]
 8005efc:	065b      	lsls	r3, r3, #25
 8005efe:	f53f af2d 	bmi.w	8005d5c <_svfiprintf_r+0x28>
 8005f02:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005f04:	e72c      	b.n	8005d60 <_svfiprintf_r+0x2c>
 8005f06:	ab03      	add	r3, sp, #12
 8005f08:	9300      	str	r3, [sp, #0]
 8005f0a:	462a      	mov	r2, r5
 8005f0c:	4b05      	ldr	r3, [pc, #20]	@ (8005f24 <_svfiprintf_r+0x1f0>)
 8005f0e:	a904      	add	r1, sp, #16
 8005f10:	4638      	mov	r0, r7
 8005f12:	f000 f879 	bl	8006008 <_printf_i>
 8005f16:	e7ed      	b.n	8005ef4 <_svfiprintf_r+0x1c0>
 8005f18:	0800fbcc 	.word	0x0800fbcc
 8005f1c:	0800fbd6 	.word	0x0800fbd6
 8005f20:	00000000 	.word	0x00000000
 8005f24:	08005c7d 	.word	0x08005c7d
 8005f28:	0800fbd2 	.word	0x0800fbd2

08005f2c <_printf_common>:
 8005f2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f30:	4616      	mov	r6, r2
 8005f32:	4698      	mov	r8, r3
 8005f34:	688a      	ldr	r2, [r1, #8]
 8005f36:	690b      	ldr	r3, [r1, #16]
 8005f38:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	bfb8      	it	lt
 8005f40:	4613      	movlt	r3, r2
 8005f42:	6033      	str	r3, [r6, #0]
 8005f44:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005f48:	4607      	mov	r7, r0
 8005f4a:	460c      	mov	r4, r1
 8005f4c:	b10a      	cbz	r2, 8005f52 <_printf_common+0x26>
 8005f4e:	3301      	adds	r3, #1
 8005f50:	6033      	str	r3, [r6, #0]
 8005f52:	6823      	ldr	r3, [r4, #0]
 8005f54:	0699      	lsls	r1, r3, #26
 8005f56:	bf42      	ittt	mi
 8005f58:	6833      	ldrmi	r3, [r6, #0]
 8005f5a:	3302      	addmi	r3, #2
 8005f5c:	6033      	strmi	r3, [r6, #0]
 8005f5e:	6825      	ldr	r5, [r4, #0]
 8005f60:	f015 0506 	ands.w	r5, r5, #6
 8005f64:	d106      	bne.n	8005f74 <_printf_common+0x48>
 8005f66:	f104 0a19 	add.w	sl, r4, #25
 8005f6a:	68e3      	ldr	r3, [r4, #12]
 8005f6c:	6832      	ldr	r2, [r6, #0]
 8005f6e:	1a9b      	subs	r3, r3, r2
 8005f70:	42ab      	cmp	r3, r5
 8005f72:	dc26      	bgt.n	8005fc2 <_printf_common+0x96>
 8005f74:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005f78:	6822      	ldr	r2, [r4, #0]
 8005f7a:	3b00      	subs	r3, #0
 8005f7c:	bf18      	it	ne
 8005f7e:	2301      	movne	r3, #1
 8005f80:	0692      	lsls	r2, r2, #26
 8005f82:	d42b      	bmi.n	8005fdc <_printf_common+0xb0>
 8005f84:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005f88:	4641      	mov	r1, r8
 8005f8a:	4638      	mov	r0, r7
 8005f8c:	47c8      	blx	r9
 8005f8e:	3001      	adds	r0, #1
 8005f90:	d01e      	beq.n	8005fd0 <_printf_common+0xa4>
 8005f92:	6823      	ldr	r3, [r4, #0]
 8005f94:	6922      	ldr	r2, [r4, #16]
 8005f96:	f003 0306 	and.w	r3, r3, #6
 8005f9a:	2b04      	cmp	r3, #4
 8005f9c:	bf02      	ittt	eq
 8005f9e:	68e5      	ldreq	r5, [r4, #12]
 8005fa0:	6833      	ldreq	r3, [r6, #0]
 8005fa2:	1aed      	subeq	r5, r5, r3
 8005fa4:	68a3      	ldr	r3, [r4, #8]
 8005fa6:	bf0c      	ite	eq
 8005fa8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005fac:	2500      	movne	r5, #0
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	bfc4      	itt	gt
 8005fb2:	1a9b      	subgt	r3, r3, r2
 8005fb4:	18ed      	addgt	r5, r5, r3
 8005fb6:	2600      	movs	r6, #0
 8005fb8:	341a      	adds	r4, #26
 8005fba:	42b5      	cmp	r5, r6
 8005fbc:	d11a      	bne.n	8005ff4 <_printf_common+0xc8>
 8005fbe:	2000      	movs	r0, #0
 8005fc0:	e008      	b.n	8005fd4 <_printf_common+0xa8>
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	4652      	mov	r2, sl
 8005fc6:	4641      	mov	r1, r8
 8005fc8:	4638      	mov	r0, r7
 8005fca:	47c8      	blx	r9
 8005fcc:	3001      	adds	r0, #1
 8005fce:	d103      	bne.n	8005fd8 <_printf_common+0xac>
 8005fd0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005fd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fd8:	3501      	adds	r5, #1
 8005fda:	e7c6      	b.n	8005f6a <_printf_common+0x3e>
 8005fdc:	18e1      	adds	r1, r4, r3
 8005fde:	1c5a      	adds	r2, r3, #1
 8005fe0:	2030      	movs	r0, #48	@ 0x30
 8005fe2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005fe6:	4422      	add	r2, r4
 8005fe8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005fec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005ff0:	3302      	adds	r3, #2
 8005ff2:	e7c7      	b.n	8005f84 <_printf_common+0x58>
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	4622      	mov	r2, r4
 8005ff8:	4641      	mov	r1, r8
 8005ffa:	4638      	mov	r0, r7
 8005ffc:	47c8      	blx	r9
 8005ffe:	3001      	adds	r0, #1
 8006000:	d0e6      	beq.n	8005fd0 <_printf_common+0xa4>
 8006002:	3601      	adds	r6, #1
 8006004:	e7d9      	b.n	8005fba <_printf_common+0x8e>
	...

08006008 <_printf_i>:
 8006008:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800600c:	7e0f      	ldrb	r7, [r1, #24]
 800600e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006010:	2f78      	cmp	r7, #120	@ 0x78
 8006012:	4691      	mov	r9, r2
 8006014:	4680      	mov	r8, r0
 8006016:	460c      	mov	r4, r1
 8006018:	469a      	mov	sl, r3
 800601a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800601e:	d807      	bhi.n	8006030 <_printf_i+0x28>
 8006020:	2f62      	cmp	r7, #98	@ 0x62
 8006022:	d80a      	bhi.n	800603a <_printf_i+0x32>
 8006024:	2f00      	cmp	r7, #0
 8006026:	f000 80d1 	beq.w	80061cc <_printf_i+0x1c4>
 800602a:	2f58      	cmp	r7, #88	@ 0x58
 800602c:	f000 80b8 	beq.w	80061a0 <_printf_i+0x198>
 8006030:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006034:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006038:	e03a      	b.n	80060b0 <_printf_i+0xa8>
 800603a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800603e:	2b15      	cmp	r3, #21
 8006040:	d8f6      	bhi.n	8006030 <_printf_i+0x28>
 8006042:	a101      	add	r1, pc, #4	@ (adr r1, 8006048 <_printf_i+0x40>)
 8006044:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006048:	080060a1 	.word	0x080060a1
 800604c:	080060b5 	.word	0x080060b5
 8006050:	08006031 	.word	0x08006031
 8006054:	08006031 	.word	0x08006031
 8006058:	08006031 	.word	0x08006031
 800605c:	08006031 	.word	0x08006031
 8006060:	080060b5 	.word	0x080060b5
 8006064:	08006031 	.word	0x08006031
 8006068:	08006031 	.word	0x08006031
 800606c:	08006031 	.word	0x08006031
 8006070:	08006031 	.word	0x08006031
 8006074:	080061b3 	.word	0x080061b3
 8006078:	080060df 	.word	0x080060df
 800607c:	0800616d 	.word	0x0800616d
 8006080:	08006031 	.word	0x08006031
 8006084:	08006031 	.word	0x08006031
 8006088:	080061d5 	.word	0x080061d5
 800608c:	08006031 	.word	0x08006031
 8006090:	080060df 	.word	0x080060df
 8006094:	08006031 	.word	0x08006031
 8006098:	08006031 	.word	0x08006031
 800609c:	08006175 	.word	0x08006175
 80060a0:	6833      	ldr	r3, [r6, #0]
 80060a2:	1d1a      	adds	r2, r3, #4
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	6032      	str	r2, [r6, #0]
 80060a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80060ac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80060b0:	2301      	movs	r3, #1
 80060b2:	e09c      	b.n	80061ee <_printf_i+0x1e6>
 80060b4:	6833      	ldr	r3, [r6, #0]
 80060b6:	6820      	ldr	r0, [r4, #0]
 80060b8:	1d19      	adds	r1, r3, #4
 80060ba:	6031      	str	r1, [r6, #0]
 80060bc:	0606      	lsls	r6, r0, #24
 80060be:	d501      	bpl.n	80060c4 <_printf_i+0xbc>
 80060c0:	681d      	ldr	r5, [r3, #0]
 80060c2:	e003      	b.n	80060cc <_printf_i+0xc4>
 80060c4:	0645      	lsls	r5, r0, #25
 80060c6:	d5fb      	bpl.n	80060c0 <_printf_i+0xb8>
 80060c8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80060cc:	2d00      	cmp	r5, #0
 80060ce:	da03      	bge.n	80060d8 <_printf_i+0xd0>
 80060d0:	232d      	movs	r3, #45	@ 0x2d
 80060d2:	426d      	negs	r5, r5
 80060d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80060d8:	4858      	ldr	r0, [pc, #352]	@ (800623c <_printf_i+0x234>)
 80060da:	230a      	movs	r3, #10
 80060dc:	e011      	b.n	8006102 <_printf_i+0xfa>
 80060de:	6821      	ldr	r1, [r4, #0]
 80060e0:	6833      	ldr	r3, [r6, #0]
 80060e2:	0608      	lsls	r0, r1, #24
 80060e4:	f853 5b04 	ldr.w	r5, [r3], #4
 80060e8:	d402      	bmi.n	80060f0 <_printf_i+0xe8>
 80060ea:	0649      	lsls	r1, r1, #25
 80060ec:	bf48      	it	mi
 80060ee:	b2ad      	uxthmi	r5, r5
 80060f0:	2f6f      	cmp	r7, #111	@ 0x6f
 80060f2:	4852      	ldr	r0, [pc, #328]	@ (800623c <_printf_i+0x234>)
 80060f4:	6033      	str	r3, [r6, #0]
 80060f6:	bf14      	ite	ne
 80060f8:	230a      	movne	r3, #10
 80060fa:	2308      	moveq	r3, #8
 80060fc:	2100      	movs	r1, #0
 80060fe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006102:	6866      	ldr	r6, [r4, #4]
 8006104:	60a6      	str	r6, [r4, #8]
 8006106:	2e00      	cmp	r6, #0
 8006108:	db05      	blt.n	8006116 <_printf_i+0x10e>
 800610a:	6821      	ldr	r1, [r4, #0]
 800610c:	432e      	orrs	r6, r5
 800610e:	f021 0104 	bic.w	r1, r1, #4
 8006112:	6021      	str	r1, [r4, #0]
 8006114:	d04b      	beq.n	80061ae <_printf_i+0x1a6>
 8006116:	4616      	mov	r6, r2
 8006118:	fbb5 f1f3 	udiv	r1, r5, r3
 800611c:	fb03 5711 	mls	r7, r3, r1, r5
 8006120:	5dc7      	ldrb	r7, [r0, r7]
 8006122:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006126:	462f      	mov	r7, r5
 8006128:	42bb      	cmp	r3, r7
 800612a:	460d      	mov	r5, r1
 800612c:	d9f4      	bls.n	8006118 <_printf_i+0x110>
 800612e:	2b08      	cmp	r3, #8
 8006130:	d10b      	bne.n	800614a <_printf_i+0x142>
 8006132:	6823      	ldr	r3, [r4, #0]
 8006134:	07df      	lsls	r7, r3, #31
 8006136:	d508      	bpl.n	800614a <_printf_i+0x142>
 8006138:	6923      	ldr	r3, [r4, #16]
 800613a:	6861      	ldr	r1, [r4, #4]
 800613c:	4299      	cmp	r1, r3
 800613e:	bfde      	ittt	le
 8006140:	2330      	movle	r3, #48	@ 0x30
 8006142:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006146:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800614a:	1b92      	subs	r2, r2, r6
 800614c:	6122      	str	r2, [r4, #16]
 800614e:	f8cd a000 	str.w	sl, [sp]
 8006152:	464b      	mov	r3, r9
 8006154:	aa03      	add	r2, sp, #12
 8006156:	4621      	mov	r1, r4
 8006158:	4640      	mov	r0, r8
 800615a:	f7ff fee7 	bl	8005f2c <_printf_common>
 800615e:	3001      	adds	r0, #1
 8006160:	d14a      	bne.n	80061f8 <_printf_i+0x1f0>
 8006162:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006166:	b004      	add	sp, #16
 8006168:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800616c:	6823      	ldr	r3, [r4, #0]
 800616e:	f043 0320 	orr.w	r3, r3, #32
 8006172:	6023      	str	r3, [r4, #0]
 8006174:	4832      	ldr	r0, [pc, #200]	@ (8006240 <_printf_i+0x238>)
 8006176:	2778      	movs	r7, #120	@ 0x78
 8006178:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800617c:	6823      	ldr	r3, [r4, #0]
 800617e:	6831      	ldr	r1, [r6, #0]
 8006180:	061f      	lsls	r7, r3, #24
 8006182:	f851 5b04 	ldr.w	r5, [r1], #4
 8006186:	d402      	bmi.n	800618e <_printf_i+0x186>
 8006188:	065f      	lsls	r7, r3, #25
 800618a:	bf48      	it	mi
 800618c:	b2ad      	uxthmi	r5, r5
 800618e:	6031      	str	r1, [r6, #0]
 8006190:	07d9      	lsls	r1, r3, #31
 8006192:	bf44      	itt	mi
 8006194:	f043 0320 	orrmi.w	r3, r3, #32
 8006198:	6023      	strmi	r3, [r4, #0]
 800619a:	b11d      	cbz	r5, 80061a4 <_printf_i+0x19c>
 800619c:	2310      	movs	r3, #16
 800619e:	e7ad      	b.n	80060fc <_printf_i+0xf4>
 80061a0:	4826      	ldr	r0, [pc, #152]	@ (800623c <_printf_i+0x234>)
 80061a2:	e7e9      	b.n	8006178 <_printf_i+0x170>
 80061a4:	6823      	ldr	r3, [r4, #0]
 80061a6:	f023 0320 	bic.w	r3, r3, #32
 80061aa:	6023      	str	r3, [r4, #0]
 80061ac:	e7f6      	b.n	800619c <_printf_i+0x194>
 80061ae:	4616      	mov	r6, r2
 80061b0:	e7bd      	b.n	800612e <_printf_i+0x126>
 80061b2:	6833      	ldr	r3, [r6, #0]
 80061b4:	6825      	ldr	r5, [r4, #0]
 80061b6:	6961      	ldr	r1, [r4, #20]
 80061b8:	1d18      	adds	r0, r3, #4
 80061ba:	6030      	str	r0, [r6, #0]
 80061bc:	062e      	lsls	r6, r5, #24
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	d501      	bpl.n	80061c6 <_printf_i+0x1be>
 80061c2:	6019      	str	r1, [r3, #0]
 80061c4:	e002      	b.n	80061cc <_printf_i+0x1c4>
 80061c6:	0668      	lsls	r0, r5, #25
 80061c8:	d5fb      	bpl.n	80061c2 <_printf_i+0x1ba>
 80061ca:	8019      	strh	r1, [r3, #0]
 80061cc:	2300      	movs	r3, #0
 80061ce:	6123      	str	r3, [r4, #16]
 80061d0:	4616      	mov	r6, r2
 80061d2:	e7bc      	b.n	800614e <_printf_i+0x146>
 80061d4:	6833      	ldr	r3, [r6, #0]
 80061d6:	1d1a      	adds	r2, r3, #4
 80061d8:	6032      	str	r2, [r6, #0]
 80061da:	681e      	ldr	r6, [r3, #0]
 80061dc:	6862      	ldr	r2, [r4, #4]
 80061de:	2100      	movs	r1, #0
 80061e0:	4630      	mov	r0, r6
 80061e2:	f7f9 fffd 	bl	80001e0 <memchr>
 80061e6:	b108      	cbz	r0, 80061ec <_printf_i+0x1e4>
 80061e8:	1b80      	subs	r0, r0, r6
 80061ea:	6060      	str	r0, [r4, #4]
 80061ec:	6863      	ldr	r3, [r4, #4]
 80061ee:	6123      	str	r3, [r4, #16]
 80061f0:	2300      	movs	r3, #0
 80061f2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80061f6:	e7aa      	b.n	800614e <_printf_i+0x146>
 80061f8:	6923      	ldr	r3, [r4, #16]
 80061fa:	4632      	mov	r2, r6
 80061fc:	4649      	mov	r1, r9
 80061fe:	4640      	mov	r0, r8
 8006200:	47d0      	blx	sl
 8006202:	3001      	adds	r0, #1
 8006204:	d0ad      	beq.n	8006162 <_printf_i+0x15a>
 8006206:	6823      	ldr	r3, [r4, #0]
 8006208:	079b      	lsls	r3, r3, #30
 800620a:	d413      	bmi.n	8006234 <_printf_i+0x22c>
 800620c:	68e0      	ldr	r0, [r4, #12]
 800620e:	9b03      	ldr	r3, [sp, #12]
 8006210:	4298      	cmp	r0, r3
 8006212:	bfb8      	it	lt
 8006214:	4618      	movlt	r0, r3
 8006216:	e7a6      	b.n	8006166 <_printf_i+0x15e>
 8006218:	2301      	movs	r3, #1
 800621a:	4632      	mov	r2, r6
 800621c:	4649      	mov	r1, r9
 800621e:	4640      	mov	r0, r8
 8006220:	47d0      	blx	sl
 8006222:	3001      	adds	r0, #1
 8006224:	d09d      	beq.n	8006162 <_printf_i+0x15a>
 8006226:	3501      	adds	r5, #1
 8006228:	68e3      	ldr	r3, [r4, #12]
 800622a:	9903      	ldr	r1, [sp, #12]
 800622c:	1a5b      	subs	r3, r3, r1
 800622e:	42ab      	cmp	r3, r5
 8006230:	dcf2      	bgt.n	8006218 <_printf_i+0x210>
 8006232:	e7eb      	b.n	800620c <_printf_i+0x204>
 8006234:	2500      	movs	r5, #0
 8006236:	f104 0619 	add.w	r6, r4, #25
 800623a:	e7f5      	b.n	8006228 <_printf_i+0x220>
 800623c:	0800fbdd 	.word	0x0800fbdd
 8006240:	0800fbee 	.word	0x0800fbee

08006244 <memmove>:
 8006244:	4288      	cmp	r0, r1
 8006246:	b510      	push	{r4, lr}
 8006248:	eb01 0402 	add.w	r4, r1, r2
 800624c:	d902      	bls.n	8006254 <memmove+0x10>
 800624e:	4284      	cmp	r4, r0
 8006250:	4623      	mov	r3, r4
 8006252:	d807      	bhi.n	8006264 <memmove+0x20>
 8006254:	1e43      	subs	r3, r0, #1
 8006256:	42a1      	cmp	r1, r4
 8006258:	d008      	beq.n	800626c <memmove+0x28>
 800625a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800625e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006262:	e7f8      	b.n	8006256 <memmove+0x12>
 8006264:	4402      	add	r2, r0
 8006266:	4601      	mov	r1, r0
 8006268:	428a      	cmp	r2, r1
 800626a:	d100      	bne.n	800626e <memmove+0x2a>
 800626c:	bd10      	pop	{r4, pc}
 800626e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006272:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006276:	e7f7      	b.n	8006268 <memmove+0x24>

08006278 <_sbrk_r>:
 8006278:	b538      	push	{r3, r4, r5, lr}
 800627a:	4d06      	ldr	r5, [pc, #24]	@ (8006294 <_sbrk_r+0x1c>)
 800627c:	2300      	movs	r3, #0
 800627e:	4604      	mov	r4, r0
 8006280:	4608      	mov	r0, r1
 8006282:	602b      	str	r3, [r5, #0]
 8006284:	f7fb ff36 	bl	80020f4 <_sbrk>
 8006288:	1c43      	adds	r3, r0, #1
 800628a:	d102      	bne.n	8006292 <_sbrk_r+0x1a>
 800628c:	682b      	ldr	r3, [r5, #0]
 800628e:	b103      	cbz	r3, 8006292 <_sbrk_r+0x1a>
 8006290:	6023      	str	r3, [r4, #0]
 8006292:	bd38      	pop	{r3, r4, r5, pc}
 8006294:	20000434 	.word	0x20000434

08006298 <_realloc_r>:
 8006298:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800629c:	4607      	mov	r7, r0
 800629e:	4614      	mov	r4, r2
 80062a0:	460d      	mov	r5, r1
 80062a2:	b921      	cbnz	r1, 80062ae <_realloc_r+0x16>
 80062a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80062a8:	4611      	mov	r1, r2
 80062aa:	f7ff bc5b 	b.w	8005b64 <_malloc_r>
 80062ae:	b92a      	cbnz	r2, 80062bc <_realloc_r+0x24>
 80062b0:	f7ff fbec 	bl	8005a8c <_free_r>
 80062b4:	4625      	mov	r5, r4
 80062b6:	4628      	mov	r0, r5
 80062b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062bc:	f000 f81a 	bl	80062f4 <_malloc_usable_size_r>
 80062c0:	4284      	cmp	r4, r0
 80062c2:	4606      	mov	r6, r0
 80062c4:	d802      	bhi.n	80062cc <_realloc_r+0x34>
 80062c6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80062ca:	d8f4      	bhi.n	80062b6 <_realloc_r+0x1e>
 80062cc:	4621      	mov	r1, r4
 80062ce:	4638      	mov	r0, r7
 80062d0:	f7ff fc48 	bl	8005b64 <_malloc_r>
 80062d4:	4680      	mov	r8, r0
 80062d6:	b908      	cbnz	r0, 80062dc <_realloc_r+0x44>
 80062d8:	4645      	mov	r5, r8
 80062da:	e7ec      	b.n	80062b6 <_realloc_r+0x1e>
 80062dc:	42b4      	cmp	r4, r6
 80062de:	4622      	mov	r2, r4
 80062e0:	4629      	mov	r1, r5
 80062e2:	bf28      	it	cs
 80062e4:	4632      	movcs	r2, r6
 80062e6:	f7ff fbc3 	bl	8005a70 <memcpy>
 80062ea:	4629      	mov	r1, r5
 80062ec:	4638      	mov	r0, r7
 80062ee:	f7ff fbcd 	bl	8005a8c <_free_r>
 80062f2:	e7f1      	b.n	80062d8 <_realloc_r+0x40>

080062f4 <_malloc_usable_size_r>:
 80062f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80062f8:	1f18      	subs	r0, r3, #4
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	bfbc      	itt	lt
 80062fe:	580b      	ldrlt	r3, [r1, r0]
 8006300:	18c0      	addlt	r0, r0, r3
 8006302:	4770      	bx	lr

08006304 <_init>:
 8006304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006306:	bf00      	nop
 8006308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800630a:	bc08      	pop	{r3}
 800630c:	469e      	mov	lr, r3
 800630e:	4770      	bx	lr

08006310 <_fini>:
 8006310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006312:	bf00      	nop
 8006314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006316:	bc08      	pop	{r3}
 8006318:	469e      	mov	lr, r3
 800631a:	4770      	bx	lr
