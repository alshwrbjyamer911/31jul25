
model_a.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007548  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000044c  080076d8  080076d8  000176d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b24  08007b24  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08007b24  08007b24  00017b24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007b2c  08007b2c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b2c  08007b2c  00017b2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007b30  08007b30  00017b30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08007b34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e0  2**0
                  CONTENTS
 10 .bss          00000230  200001e0  200001e0  000201e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000410  20000410  000201e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   000110ee  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002206  00000000  00000000  000312fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fc0  00000000  00000000  00033508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ee8  00000000  00000000  000344c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020b98  00000000  00000000  000353b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001142b  00000000  00000000  00055f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cfd35  00000000  00000000  00067373  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001370a8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000570c  00000000  00000000  001370f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080076c0 	.word	0x080076c0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	080076c0 	.word	0x080076c0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2uiz>:
 8000b58:	004a      	lsls	r2, r1, #1
 8000b5a:	d211      	bcs.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d211      	bcs.n	8000b86 <__aeabi_d2uiz+0x2e>
 8000b62:	d50d      	bpl.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d40e      	bmi.n	8000b8c <__aeabi_d2uiz+0x34>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_d2uiz+0x3a>
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c4c:	f000 b9aa 	b.w	8000fa4 <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f83c 	bl	8000cd4 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__aeabi_d2lz>:
 8000c68:	b538      	push	{r3, r4, r5, lr}
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	4604      	mov	r4, r0
 8000c70:	460d      	mov	r5, r1
 8000c72:	f7ff ff33 	bl	8000adc <__aeabi_dcmplt>
 8000c76:	b928      	cbnz	r0, 8000c84 <__aeabi_d2lz+0x1c>
 8000c78:	4620      	mov	r0, r4
 8000c7a:	4629      	mov	r1, r5
 8000c7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c80:	f000 b80a 	b.w	8000c98 <__aeabi_d2ulz>
 8000c84:	4620      	mov	r0, r4
 8000c86:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c8a:	f000 f805 	bl	8000c98 <__aeabi_d2ulz>
 8000c8e:	4240      	negs	r0, r0
 8000c90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c94:	bd38      	pop	{r3, r4, r5, pc}
 8000c96:	bf00      	nop

08000c98 <__aeabi_d2ulz>:
 8000c98:	b5d0      	push	{r4, r6, r7, lr}
 8000c9a:	4b0c      	ldr	r3, [pc, #48]	; (8000ccc <__aeabi_d2ulz+0x34>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	4606      	mov	r6, r0
 8000ca0:	460f      	mov	r7, r1
 8000ca2:	f7ff fca9 	bl	80005f8 <__aeabi_dmul>
 8000ca6:	f7ff ff57 	bl	8000b58 <__aeabi_d2uiz>
 8000caa:	4604      	mov	r4, r0
 8000cac:	f7ff fc2a 	bl	8000504 <__aeabi_ui2d>
 8000cb0:	4b07      	ldr	r3, [pc, #28]	; (8000cd0 <__aeabi_d2ulz+0x38>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	f7ff fca0 	bl	80005f8 <__aeabi_dmul>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	460b      	mov	r3, r1
 8000cbc:	4630      	mov	r0, r6
 8000cbe:	4639      	mov	r1, r7
 8000cc0:	f7ff fae2 	bl	8000288 <__aeabi_dsub>
 8000cc4:	f7ff ff48 	bl	8000b58 <__aeabi_d2uiz>
 8000cc8:	4621      	mov	r1, r4
 8000cca:	bdd0      	pop	{r4, r6, r7, pc}
 8000ccc:	3df00000 	.word	0x3df00000
 8000cd0:	41f00000 	.word	0x41f00000

08000cd4 <__udivmoddi4>:
 8000cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cd8:	9d08      	ldr	r5, [sp, #32]
 8000cda:	4604      	mov	r4, r0
 8000cdc:	468e      	mov	lr, r1
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d14d      	bne.n	8000d7e <__udivmoddi4+0xaa>
 8000ce2:	428a      	cmp	r2, r1
 8000ce4:	4694      	mov	ip, r2
 8000ce6:	d969      	bls.n	8000dbc <__udivmoddi4+0xe8>
 8000ce8:	fab2 f282 	clz	r2, r2
 8000cec:	b152      	cbz	r2, 8000d04 <__udivmoddi4+0x30>
 8000cee:	fa01 f302 	lsl.w	r3, r1, r2
 8000cf2:	f1c2 0120 	rsb	r1, r2, #32
 8000cf6:	fa20 f101 	lsr.w	r1, r0, r1
 8000cfa:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cfe:	ea41 0e03 	orr.w	lr, r1, r3
 8000d02:	4094      	lsls	r4, r2
 8000d04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d08:	0c21      	lsrs	r1, r4, #16
 8000d0a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d0e:	fa1f f78c 	uxth.w	r7, ip
 8000d12:	fb08 e316 	mls	r3, r8, r6, lr
 8000d16:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d1a:	fb06 f107 	mul.w	r1, r6, r7
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	d90a      	bls.n	8000d38 <__udivmoddi4+0x64>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d2a:	f080 811f 	bcs.w	8000f6c <__udivmoddi4+0x298>
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	f240 811c 	bls.w	8000f6c <__udivmoddi4+0x298>
 8000d34:	3e02      	subs	r6, #2
 8000d36:	4463      	add	r3, ip
 8000d38:	1a5b      	subs	r3, r3, r1
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d40:	fb08 3310 	mls	r3, r8, r0, r3
 8000d44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d48:	fb00 f707 	mul.w	r7, r0, r7
 8000d4c:	42a7      	cmp	r7, r4
 8000d4e:	d90a      	bls.n	8000d66 <__udivmoddi4+0x92>
 8000d50:	eb1c 0404 	adds.w	r4, ip, r4
 8000d54:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d58:	f080 810a 	bcs.w	8000f70 <__udivmoddi4+0x29c>
 8000d5c:	42a7      	cmp	r7, r4
 8000d5e:	f240 8107 	bls.w	8000f70 <__udivmoddi4+0x29c>
 8000d62:	4464      	add	r4, ip
 8000d64:	3802      	subs	r0, #2
 8000d66:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d6a:	1be4      	subs	r4, r4, r7
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	b11d      	cbz	r5, 8000d78 <__udivmoddi4+0xa4>
 8000d70:	40d4      	lsrs	r4, r2
 8000d72:	2300      	movs	r3, #0
 8000d74:	e9c5 4300 	strd	r4, r3, [r5]
 8000d78:	4631      	mov	r1, r6
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d909      	bls.n	8000d96 <__udivmoddi4+0xc2>
 8000d82:	2d00      	cmp	r5, #0
 8000d84:	f000 80ef 	beq.w	8000f66 <__udivmoddi4+0x292>
 8000d88:	2600      	movs	r6, #0
 8000d8a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d8e:	4630      	mov	r0, r6
 8000d90:	4631      	mov	r1, r6
 8000d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d96:	fab3 f683 	clz	r6, r3
 8000d9a:	2e00      	cmp	r6, #0
 8000d9c:	d14a      	bne.n	8000e34 <__udivmoddi4+0x160>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d302      	bcc.n	8000da8 <__udivmoddi4+0xd4>
 8000da2:	4282      	cmp	r2, r0
 8000da4:	f200 80f9 	bhi.w	8000f9a <__udivmoddi4+0x2c6>
 8000da8:	1a84      	subs	r4, r0, r2
 8000daa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dae:	2001      	movs	r0, #1
 8000db0:	469e      	mov	lr, r3
 8000db2:	2d00      	cmp	r5, #0
 8000db4:	d0e0      	beq.n	8000d78 <__udivmoddi4+0xa4>
 8000db6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dba:	e7dd      	b.n	8000d78 <__udivmoddi4+0xa4>
 8000dbc:	b902      	cbnz	r2, 8000dc0 <__udivmoddi4+0xec>
 8000dbe:	deff      	udf	#255	; 0xff
 8000dc0:	fab2 f282 	clz	r2, r2
 8000dc4:	2a00      	cmp	r2, #0
 8000dc6:	f040 8092 	bne.w	8000eee <__udivmoddi4+0x21a>
 8000dca:	eba1 010c 	sub.w	r1, r1, ip
 8000dce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dd2:	fa1f fe8c 	uxth.w	lr, ip
 8000dd6:	2601      	movs	r6, #1
 8000dd8:	0c20      	lsrs	r0, r4, #16
 8000dda:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dde:	fb07 1113 	mls	r1, r7, r3, r1
 8000de2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000de6:	fb0e f003 	mul.w	r0, lr, r3
 8000dea:	4288      	cmp	r0, r1
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x12c>
 8000dee:	eb1c 0101 	adds.w	r1, ip, r1
 8000df2:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x12a>
 8000df8:	4288      	cmp	r0, r1
 8000dfa:	f200 80cb 	bhi.w	8000f94 <__udivmoddi4+0x2c0>
 8000dfe:	4643      	mov	r3, r8
 8000e00:	1a09      	subs	r1, r1, r0
 8000e02:	b2a4      	uxth	r4, r4
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1110 	mls	r1, r7, r0, r1
 8000e0c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e10:	fb0e fe00 	mul.w	lr, lr, r0
 8000e14:	45a6      	cmp	lr, r4
 8000e16:	d908      	bls.n	8000e2a <__udivmoddi4+0x156>
 8000e18:	eb1c 0404 	adds.w	r4, ip, r4
 8000e1c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e20:	d202      	bcs.n	8000e28 <__udivmoddi4+0x154>
 8000e22:	45a6      	cmp	lr, r4
 8000e24:	f200 80bb 	bhi.w	8000f9e <__udivmoddi4+0x2ca>
 8000e28:	4608      	mov	r0, r1
 8000e2a:	eba4 040e 	sub.w	r4, r4, lr
 8000e2e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e32:	e79c      	b.n	8000d6e <__udivmoddi4+0x9a>
 8000e34:	f1c6 0720 	rsb	r7, r6, #32
 8000e38:	40b3      	lsls	r3, r6
 8000e3a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e3e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e42:	fa20 f407 	lsr.w	r4, r0, r7
 8000e46:	fa01 f306 	lsl.w	r3, r1, r6
 8000e4a:	431c      	orrs	r4, r3
 8000e4c:	40f9      	lsrs	r1, r7
 8000e4e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e52:	fa00 f306 	lsl.w	r3, r0, r6
 8000e56:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e5a:	0c20      	lsrs	r0, r4, #16
 8000e5c:	fa1f fe8c 	uxth.w	lr, ip
 8000e60:	fb09 1118 	mls	r1, r9, r8, r1
 8000e64:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e68:	fb08 f00e 	mul.w	r0, r8, lr
 8000e6c:	4288      	cmp	r0, r1
 8000e6e:	fa02 f206 	lsl.w	r2, r2, r6
 8000e72:	d90b      	bls.n	8000e8c <__udivmoddi4+0x1b8>
 8000e74:	eb1c 0101 	adds.w	r1, ip, r1
 8000e78:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e7c:	f080 8088 	bcs.w	8000f90 <__udivmoddi4+0x2bc>
 8000e80:	4288      	cmp	r0, r1
 8000e82:	f240 8085 	bls.w	8000f90 <__udivmoddi4+0x2bc>
 8000e86:	f1a8 0802 	sub.w	r8, r8, #2
 8000e8a:	4461      	add	r1, ip
 8000e8c:	1a09      	subs	r1, r1, r0
 8000e8e:	b2a4      	uxth	r4, r4
 8000e90:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e94:	fb09 1110 	mls	r1, r9, r0, r1
 8000e98:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e9c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ea0:	458e      	cmp	lr, r1
 8000ea2:	d908      	bls.n	8000eb6 <__udivmoddi4+0x1e2>
 8000ea4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea8:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000eac:	d26c      	bcs.n	8000f88 <__udivmoddi4+0x2b4>
 8000eae:	458e      	cmp	lr, r1
 8000eb0:	d96a      	bls.n	8000f88 <__udivmoddi4+0x2b4>
 8000eb2:	3802      	subs	r0, #2
 8000eb4:	4461      	add	r1, ip
 8000eb6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eba:	fba0 9402 	umull	r9, r4, r0, r2
 8000ebe:	eba1 010e 	sub.w	r1, r1, lr
 8000ec2:	42a1      	cmp	r1, r4
 8000ec4:	46c8      	mov	r8, r9
 8000ec6:	46a6      	mov	lr, r4
 8000ec8:	d356      	bcc.n	8000f78 <__udivmoddi4+0x2a4>
 8000eca:	d053      	beq.n	8000f74 <__udivmoddi4+0x2a0>
 8000ecc:	b15d      	cbz	r5, 8000ee6 <__udivmoddi4+0x212>
 8000ece:	ebb3 0208 	subs.w	r2, r3, r8
 8000ed2:	eb61 010e 	sbc.w	r1, r1, lr
 8000ed6:	fa01 f707 	lsl.w	r7, r1, r7
 8000eda:	fa22 f306 	lsr.w	r3, r2, r6
 8000ede:	40f1      	lsrs	r1, r6
 8000ee0:	431f      	orrs	r7, r3
 8000ee2:	e9c5 7100 	strd	r7, r1, [r5]
 8000ee6:	2600      	movs	r6, #0
 8000ee8:	4631      	mov	r1, r6
 8000eea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eee:	f1c2 0320 	rsb	r3, r2, #32
 8000ef2:	40d8      	lsrs	r0, r3
 8000ef4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ef8:	fa21 f303 	lsr.w	r3, r1, r3
 8000efc:	4091      	lsls	r1, r2
 8000efe:	4301      	orrs	r1, r0
 8000f00:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f04:	fa1f fe8c 	uxth.w	lr, ip
 8000f08:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f0c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f10:	0c0b      	lsrs	r3, r1, #16
 8000f12:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f16:	fb00 f60e 	mul.w	r6, r0, lr
 8000f1a:	429e      	cmp	r6, r3
 8000f1c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f20:	d908      	bls.n	8000f34 <__udivmoddi4+0x260>
 8000f22:	eb1c 0303 	adds.w	r3, ip, r3
 8000f26:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f2a:	d22f      	bcs.n	8000f8c <__udivmoddi4+0x2b8>
 8000f2c:	429e      	cmp	r6, r3
 8000f2e:	d92d      	bls.n	8000f8c <__udivmoddi4+0x2b8>
 8000f30:	3802      	subs	r0, #2
 8000f32:	4463      	add	r3, ip
 8000f34:	1b9b      	subs	r3, r3, r6
 8000f36:	b289      	uxth	r1, r1
 8000f38:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f3c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f44:	fb06 f30e 	mul.w	r3, r6, lr
 8000f48:	428b      	cmp	r3, r1
 8000f4a:	d908      	bls.n	8000f5e <__udivmoddi4+0x28a>
 8000f4c:	eb1c 0101 	adds.w	r1, ip, r1
 8000f50:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000f54:	d216      	bcs.n	8000f84 <__udivmoddi4+0x2b0>
 8000f56:	428b      	cmp	r3, r1
 8000f58:	d914      	bls.n	8000f84 <__udivmoddi4+0x2b0>
 8000f5a:	3e02      	subs	r6, #2
 8000f5c:	4461      	add	r1, ip
 8000f5e:	1ac9      	subs	r1, r1, r3
 8000f60:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f64:	e738      	b.n	8000dd8 <__udivmoddi4+0x104>
 8000f66:	462e      	mov	r6, r5
 8000f68:	4628      	mov	r0, r5
 8000f6a:	e705      	b.n	8000d78 <__udivmoddi4+0xa4>
 8000f6c:	4606      	mov	r6, r0
 8000f6e:	e6e3      	b.n	8000d38 <__udivmoddi4+0x64>
 8000f70:	4618      	mov	r0, r3
 8000f72:	e6f8      	b.n	8000d66 <__udivmoddi4+0x92>
 8000f74:	454b      	cmp	r3, r9
 8000f76:	d2a9      	bcs.n	8000ecc <__udivmoddi4+0x1f8>
 8000f78:	ebb9 0802 	subs.w	r8, r9, r2
 8000f7c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f80:	3801      	subs	r0, #1
 8000f82:	e7a3      	b.n	8000ecc <__udivmoddi4+0x1f8>
 8000f84:	4646      	mov	r6, r8
 8000f86:	e7ea      	b.n	8000f5e <__udivmoddi4+0x28a>
 8000f88:	4620      	mov	r0, r4
 8000f8a:	e794      	b.n	8000eb6 <__udivmoddi4+0x1e2>
 8000f8c:	4640      	mov	r0, r8
 8000f8e:	e7d1      	b.n	8000f34 <__udivmoddi4+0x260>
 8000f90:	46d0      	mov	r8, sl
 8000f92:	e77b      	b.n	8000e8c <__udivmoddi4+0x1b8>
 8000f94:	3b02      	subs	r3, #2
 8000f96:	4461      	add	r1, ip
 8000f98:	e732      	b.n	8000e00 <__udivmoddi4+0x12c>
 8000f9a:	4630      	mov	r0, r6
 8000f9c:	e709      	b.n	8000db2 <__udivmoddi4+0xde>
 8000f9e:	4464      	add	r4, ip
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	e742      	b.n	8000e2a <__udivmoddi4+0x156>

08000fa4 <__aeabi_idiv0>:
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop

08000fa8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fac:	f000 fda8 	bl	8001b00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fb0:	f000 f812 	bl	8000fd8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fb4:	f000 fa22 	bl	80013fc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000fb8:	f000 f9a2 	bl	8001300 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000fbc:	f000 f952 	bl	8001264 <MX_TIM2_Init>
  MX_ADC1_Init();
 8000fc0:	f000 f874 	bl	80010ac <MX_ADC1_Init>
  MX_USART3_UART_Init();
 8000fc4:	f000 f9c6 	bl	8001354 <MX_USART3_UART_Init>
  MX_ADC2_Init();
 8000fc8:	f000 f8c2 	bl	8001150 <MX_ADC2_Init>
  MX_USART6_UART_Init();
 8000fcc:	f000 f9ec 	bl	80013a8 <MX_USART6_UART_Init>
  MX_SPI1_Init();
 8000fd0:	f000 f910 	bl	80011f4 <MX_SPI1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000fd4:	e7fe      	b.n	8000fd4 <main+0x2c>
	...

08000fd8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b094      	sub	sp, #80	; 0x50
 8000fdc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fde:	f107 0320 	add.w	r3, r7, #32
 8000fe2:	2230      	movs	r2, #48	; 0x30
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f003 f846 	bl	8004078 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fec:	f107 030c 	add.w	r3, r7, #12
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]
 8000ff4:	605a      	str	r2, [r3, #4]
 8000ff6:	609a      	str	r2, [r3, #8]
 8000ff8:	60da      	str	r2, [r3, #12]
 8000ffa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	60bb      	str	r3, [r7, #8]
 8001000:	4b28      	ldr	r3, [pc, #160]	; (80010a4 <SystemClock_Config+0xcc>)
 8001002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001004:	4a27      	ldr	r2, [pc, #156]	; (80010a4 <SystemClock_Config+0xcc>)
 8001006:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800100a:	6413      	str	r3, [r2, #64]	; 0x40
 800100c:	4b25      	ldr	r3, [pc, #148]	; (80010a4 <SystemClock_Config+0xcc>)
 800100e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001010:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001014:	60bb      	str	r3, [r7, #8]
 8001016:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001018:	2300      	movs	r3, #0
 800101a:	607b      	str	r3, [r7, #4]
 800101c:	4b22      	ldr	r3, [pc, #136]	; (80010a8 <SystemClock_Config+0xd0>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a21      	ldr	r2, [pc, #132]	; (80010a8 <SystemClock_Config+0xd0>)
 8001022:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001026:	6013      	str	r3, [r2, #0]
 8001028:	4b1f      	ldr	r3, [pc, #124]	; (80010a8 <SystemClock_Config+0xd0>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001030:	607b      	str	r3, [r7, #4]
 8001032:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001034:	2302      	movs	r3, #2
 8001036:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001038:	2301      	movs	r3, #1
 800103a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800103c:	2310      	movs	r3, #16
 800103e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001040:	2302      	movs	r3, #2
 8001042:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001044:	2300      	movs	r3, #0
 8001046:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001048:	2308      	movs	r3, #8
 800104a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800104c:	23a8      	movs	r3, #168	; 0xa8
 800104e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001050:	2302      	movs	r3, #2
 8001052:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001054:	2304      	movs	r3, #4
 8001056:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001058:	f107 0320 	add.w	r3, r7, #32
 800105c:	4618      	mov	r0, r3
 800105e:	f001 fc23 	bl	80028a8 <HAL_RCC_OscConfig>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001068:	f000 fa32 	bl	80014d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800106c:	230f      	movs	r3, #15
 800106e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001070:	2302      	movs	r3, #2
 8001072:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001074:	2300      	movs	r3, #0
 8001076:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001078:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800107c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800107e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001082:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001084:	f107 030c 	add.w	r3, r7, #12
 8001088:	2105      	movs	r1, #5
 800108a:	4618      	mov	r0, r3
 800108c:	f001 fe84 	bl	8002d98 <HAL_RCC_ClockConfig>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001096:	f000 fa1b 	bl	80014d0 <Error_Handler>
  }
}
 800109a:	bf00      	nop
 800109c:	3750      	adds	r7, #80	; 0x50
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	40023800 	.word	0x40023800
 80010a8:	40007000 	.word	0x40007000

080010ac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b084      	sub	sp, #16
 80010b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010b2:	463b      	mov	r3, r7
 80010b4:	2200      	movs	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	605a      	str	r2, [r3, #4]
 80010ba:	609a      	str	r2, [r3, #8]
 80010bc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80010be:	4b21      	ldr	r3, [pc, #132]	; (8001144 <MX_ADC1_Init+0x98>)
 80010c0:	4a21      	ldr	r2, [pc, #132]	; (8001148 <MX_ADC1_Init+0x9c>)
 80010c2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010c4:	4b1f      	ldr	r3, [pc, #124]	; (8001144 <MX_ADC1_Init+0x98>)
 80010c6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80010ca:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010cc:	4b1d      	ldr	r3, [pc, #116]	; (8001144 <MX_ADC1_Init+0x98>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80010d2:	4b1c      	ldr	r3, [pc, #112]	; (8001144 <MX_ADC1_Init+0x98>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010d8:	4b1a      	ldr	r3, [pc, #104]	; (8001144 <MX_ADC1_Init+0x98>)
 80010da:	2200      	movs	r2, #0
 80010dc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010de:	4b19      	ldr	r3, [pc, #100]	; (8001144 <MX_ADC1_Init+0x98>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010e6:	4b17      	ldr	r3, [pc, #92]	; (8001144 <MX_ADC1_Init+0x98>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010ec:	4b15      	ldr	r3, [pc, #84]	; (8001144 <MX_ADC1_Init+0x98>)
 80010ee:	4a17      	ldr	r2, [pc, #92]	; (800114c <MX_ADC1_Init+0xa0>)
 80010f0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010f2:	4b14      	ldr	r3, [pc, #80]	; (8001144 <MX_ADC1_Init+0x98>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80010f8:	4b12      	ldr	r3, [pc, #72]	; (8001144 <MX_ADC1_Init+0x98>)
 80010fa:	2201      	movs	r2, #1
 80010fc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010fe:	4b11      	ldr	r3, [pc, #68]	; (8001144 <MX_ADC1_Init+0x98>)
 8001100:	2200      	movs	r2, #0
 8001102:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001106:	4b0f      	ldr	r3, [pc, #60]	; (8001144 <MX_ADC1_Init+0x98>)
 8001108:	2201      	movs	r2, #1
 800110a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800110c:	480d      	ldr	r0, [pc, #52]	; (8001144 <MX_ADC1_Init+0x98>)
 800110e:	f000 fd69 	bl	8001be4 <HAL_ADC_Init>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001118:	f000 f9da 	bl	80014d0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800111c:	2300      	movs	r3, #0
 800111e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001120:	2301      	movs	r3, #1
 8001122:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8001124:	2302      	movs	r3, #2
 8001126:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001128:	463b      	mov	r3, r7
 800112a:	4619      	mov	r1, r3
 800112c:	4805      	ldr	r0, [pc, #20]	; (8001144 <MX_ADC1_Init+0x98>)
 800112e:	f000 fecb 	bl	8001ec8 <HAL_ADC_ConfigChannel>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001138:	f000 f9ca 	bl	80014d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800113c:	bf00      	nop
 800113e:	3710      	adds	r7, #16
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	200001fc 	.word	0x200001fc
 8001148:	40012000 	.word	0x40012000
 800114c:	0f000001 	.word	0x0f000001

08001150 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001156:	463b      	mov	r3, r7
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	605a      	str	r2, [r3, #4]
 800115e:	609a      	str	r2, [r3, #8]
 8001160:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001162:	4b21      	ldr	r3, [pc, #132]	; (80011e8 <MX_ADC2_Init+0x98>)
 8001164:	4a21      	ldr	r2, [pc, #132]	; (80011ec <MX_ADC2_Init+0x9c>)
 8001166:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001168:	4b1f      	ldr	r3, [pc, #124]	; (80011e8 <MX_ADC2_Init+0x98>)
 800116a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800116e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001170:	4b1d      	ldr	r3, [pc, #116]	; (80011e8 <MX_ADC2_Init+0x98>)
 8001172:	2200      	movs	r2, #0
 8001174:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8001176:	4b1c      	ldr	r3, [pc, #112]	; (80011e8 <MX_ADC2_Init+0x98>)
 8001178:	2200      	movs	r2, #0
 800117a:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800117c:	4b1a      	ldr	r3, [pc, #104]	; (80011e8 <MX_ADC2_Init+0x98>)
 800117e:	2200      	movs	r2, #0
 8001180:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001182:	4b19      	ldr	r3, [pc, #100]	; (80011e8 <MX_ADC2_Init+0x98>)
 8001184:	2200      	movs	r2, #0
 8001186:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800118a:	4b17      	ldr	r3, [pc, #92]	; (80011e8 <MX_ADC2_Init+0x98>)
 800118c:	2200      	movs	r2, #0
 800118e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001190:	4b15      	ldr	r3, [pc, #84]	; (80011e8 <MX_ADC2_Init+0x98>)
 8001192:	4a17      	ldr	r2, [pc, #92]	; (80011f0 <MX_ADC2_Init+0xa0>)
 8001194:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001196:	4b14      	ldr	r3, [pc, #80]	; (80011e8 <MX_ADC2_Init+0x98>)
 8001198:	2200      	movs	r2, #0
 800119a:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800119c:	4b12      	ldr	r3, [pc, #72]	; (80011e8 <MX_ADC2_Init+0x98>)
 800119e:	2201      	movs	r2, #1
 80011a0:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80011a2:	4b11      	ldr	r3, [pc, #68]	; (80011e8 <MX_ADC2_Init+0x98>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011aa:	4b0f      	ldr	r3, [pc, #60]	; (80011e8 <MX_ADC2_Init+0x98>)
 80011ac:	2201      	movs	r2, #1
 80011ae:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80011b0:	480d      	ldr	r0, [pc, #52]	; (80011e8 <MX_ADC2_Init+0x98>)
 80011b2:	f000 fd17 	bl	8001be4 <HAL_ADC_Init>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 80011bc:	f000 f988 	bl	80014d0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80011c0:	2301      	movs	r3, #1
 80011c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80011c4:	2301      	movs	r3, #1
 80011c6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 80011c8:	2302      	movs	r3, #2
 80011ca:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80011cc:	463b      	mov	r3, r7
 80011ce:	4619      	mov	r1, r3
 80011d0:	4805      	ldr	r0, [pc, #20]	; (80011e8 <MX_ADC2_Init+0x98>)
 80011d2:	f000 fe79 	bl	8001ec8 <HAL_ADC_ConfigChannel>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 80011dc:	f000 f978 	bl	80014d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80011e0:	bf00      	nop
 80011e2:	3710      	adds	r7, #16
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	20000244 	.word	0x20000244
 80011ec:	40012100 	.word	0x40012100
 80011f0:	0f000001 	.word	0x0f000001

080011f4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80011f8:	4b18      	ldr	r3, [pc, #96]	; (800125c <MX_SPI1_Init+0x68>)
 80011fa:	4a19      	ldr	r2, [pc, #100]	; (8001260 <MX_SPI1_Init+0x6c>)
 80011fc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011fe:	4b17      	ldr	r3, [pc, #92]	; (800125c <MX_SPI1_Init+0x68>)
 8001200:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001204:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8001206:	4b15      	ldr	r3, [pc, #84]	; (800125c <MX_SPI1_Init+0x68>)
 8001208:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800120c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800120e:	4b13      	ldr	r3, [pc, #76]	; (800125c <MX_SPI1_Init+0x68>)
 8001210:	2200      	movs	r2, #0
 8001212:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001214:	4b11      	ldr	r3, [pc, #68]	; (800125c <MX_SPI1_Init+0x68>)
 8001216:	2200      	movs	r2, #0
 8001218:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800121a:	4b10      	ldr	r3, [pc, #64]	; (800125c <MX_SPI1_Init+0x68>)
 800121c:	2200      	movs	r2, #0
 800121e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001220:	4b0e      	ldr	r3, [pc, #56]	; (800125c <MX_SPI1_Init+0x68>)
 8001222:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001226:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001228:	4b0c      	ldr	r3, [pc, #48]	; (800125c <MX_SPI1_Init+0x68>)
 800122a:	2200      	movs	r2, #0
 800122c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800122e:	4b0b      	ldr	r3, [pc, #44]	; (800125c <MX_SPI1_Init+0x68>)
 8001230:	2200      	movs	r2, #0
 8001232:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001234:	4b09      	ldr	r3, [pc, #36]	; (800125c <MX_SPI1_Init+0x68>)
 8001236:	2200      	movs	r2, #0
 8001238:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800123a:	4b08      	ldr	r3, [pc, #32]	; (800125c <MX_SPI1_Init+0x68>)
 800123c:	2200      	movs	r2, #0
 800123e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001240:	4b06      	ldr	r3, [pc, #24]	; (800125c <MX_SPI1_Init+0x68>)
 8001242:	220a      	movs	r2, #10
 8001244:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001246:	4805      	ldr	r0, [pc, #20]	; (800125c <MX_SPI1_Init+0x68>)
 8001248:	f001 ff86 	bl	8003158 <HAL_SPI_Init>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8001252:	f000 f93d 	bl	80014d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001256:	bf00      	nop
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	2000028c 	.word	0x2000028c
 8001260:	40013000 	.word	0x40013000

08001264 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b086      	sub	sp, #24
 8001268:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800126a:	f107 0308 	add.w	r3, r7, #8
 800126e:	2200      	movs	r2, #0
 8001270:	601a      	str	r2, [r3, #0]
 8001272:	605a      	str	r2, [r3, #4]
 8001274:	609a      	str	r2, [r3, #8]
 8001276:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001278:	463b      	mov	r3, r7
 800127a:	2200      	movs	r2, #0
 800127c:	601a      	str	r2, [r3, #0]
 800127e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001280:	4b1e      	ldr	r3, [pc, #120]	; (80012fc <MX_TIM2_Init+0x98>)
 8001282:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001286:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16800-1;
 8001288:	4b1c      	ldr	r3, [pc, #112]	; (80012fc <MX_TIM2_Init+0x98>)
 800128a:	f244 129f 	movw	r2, #16799	; 0x419f
 800128e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001290:	4b1a      	ldr	r3, [pc, #104]	; (80012fc <MX_TIM2_Init+0x98>)
 8001292:	2200      	movs	r2, #0
 8001294:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50000-1;
 8001296:	4b19      	ldr	r3, [pc, #100]	; (80012fc <MX_TIM2_Init+0x98>)
 8001298:	f24c 324f 	movw	r2, #49999	; 0xc34f
 800129c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800129e:	4b17      	ldr	r3, [pc, #92]	; (80012fc <MX_TIM2_Init+0x98>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012a4:	4b15      	ldr	r3, [pc, #84]	; (80012fc <MX_TIM2_Init+0x98>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012aa:	4814      	ldr	r0, [pc, #80]	; (80012fc <MX_TIM2_Init+0x98>)
 80012ac:	f001 ffdd 	bl	800326a <HAL_TIM_Base_Init>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80012b6:	f000 f90b 	bl	80014d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012be:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012c0:	f107 0308 	add.w	r3, r7, #8
 80012c4:	4619      	mov	r1, r3
 80012c6:	480d      	ldr	r0, [pc, #52]	; (80012fc <MX_TIM2_Init+0x98>)
 80012c8:	f002 f926 	bl	8003518 <HAL_TIM_ConfigClockSource>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80012d2:	f000 f8fd 	bl	80014d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012d6:	2300      	movs	r3, #0
 80012d8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012da:	2300      	movs	r3, #0
 80012dc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012de:	463b      	mov	r3, r7
 80012e0:	4619      	mov	r1, r3
 80012e2:	4806      	ldr	r0, [pc, #24]	; (80012fc <MX_TIM2_Init+0x98>)
 80012e4:	f002 fb4c 	bl	8003980 <HAL_TIMEx_MasterConfigSynchronization>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80012ee:	f000 f8ef 	bl	80014d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012f2:	bf00      	nop
 80012f4:	3718      	adds	r7, #24
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	200002e4 	.word	0x200002e4

08001300 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001304:	4b11      	ldr	r3, [pc, #68]	; (800134c <MX_USART2_UART_Init+0x4c>)
 8001306:	4a12      	ldr	r2, [pc, #72]	; (8001350 <MX_USART2_UART_Init+0x50>)
 8001308:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800130a:	4b10      	ldr	r3, [pc, #64]	; (800134c <MX_USART2_UART_Init+0x4c>)
 800130c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001310:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001312:	4b0e      	ldr	r3, [pc, #56]	; (800134c <MX_USART2_UART_Init+0x4c>)
 8001314:	2200      	movs	r2, #0
 8001316:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001318:	4b0c      	ldr	r3, [pc, #48]	; (800134c <MX_USART2_UART_Init+0x4c>)
 800131a:	2200      	movs	r2, #0
 800131c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800131e:	4b0b      	ldr	r3, [pc, #44]	; (800134c <MX_USART2_UART_Init+0x4c>)
 8001320:	2200      	movs	r2, #0
 8001322:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001324:	4b09      	ldr	r3, [pc, #36]	; (800134c <MX_USART2_UART_Init+0x4c>)
 8001326:	220c      	movs	r2, #12
 8001328:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800132a:	4b08      	ldr	r3, [pc, #32]	; (800134c <MX_USART2_UART_Init+0x4c>)
 800132c:	2200      	movs	r2, #0
 800132e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001330:	4b06      	ldr	r3, [pc, #24]	; (800134c <MX_USART2_UART_Init+0x4c>)
 8001332:	2200      	movs	r2, #0
 8001334:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001336:	4805      	ldr	r0, [pc, #20]	; (800134c <MX_USART2_UART_Init+0x4c>)
 8001338:	f002 fbb2 	bl	8003aa0 <HAL_UART_Init>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001342:	f000 f8c5 	bl	80014d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001346:	bf00      	nop
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	2000032c 	.word	0x2000032c
 8001350:	40004400 	.word	0x40004400

08001354 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001358:	4b11      	ldr	r3, [pc, #68]	; (80013a0 <MX_USART3_UART_Init+0x4c>)
 800135a:	4a12      	ldr	r2, [pc, #72]	; (80013a4 <MX_USART3_UART_Init+0x50>)
 800135c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800135e:	4b10      	ldr	r3, [pc, #64]	; (80013a0 <MX_USART3_UART_Init+0x4c>)
 8001360:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001364:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001366:	4b0e      	ldr	r3, [pc, #56]	; (80013a0 <MX_USART3_UART_Init+0x4c>)
 8001368:	2200      	movs	r2, #0
 800136a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800136c:	4b0c      	ldr	r3, [pc, #48]	; (80013a0 <MX_USART3_UART_Init+0x4c>)
 800136e:	2200      	movs	r2, #0
 8001370:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001372:	4b0b      	ldr	r3, [pc, #44]	; (80013a0 <MX_USART3_UART_Init+0x4c>)
 8001374:	2200      	movs	r2, #0
 8001376:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001378:	4b09      	ldr	r3, [pc, #36]	; (80013a0 <MX_USART3_UART_Init+0x4c>)
 800137a:	220c      	movs	r2, #12
 800137c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800137e:	4b08      	ldr	r3, [pc, #32]	; (80013a0 <MX_USART3_UART_Init+0x4c>)
 8001380:	2200      	movs	r2, #0
 8001382:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001384:	4b06      	ldr	r3, [pc, #24]	; (80013a0 <MX_USART3_UART_Init+0x4c>)
 8001386:	2200      	movs	r2, #0
 8001388:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800138a:	4805      	ldr	r0, [pc, #20]	; (80013a0 <MX_USART3_UART_Init+0x4c>)
 800138c:	f002 fb88 	bl	8003aa0 <HAL_UART_Init>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001396:	f000 f89b 	bl	80014d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800139a:	bf00      	nop
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	20000370 	.word	0x20000370
 80013a4:	40004800 	.word	0x40004800

080013a8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80013ac:	4b11      	ldr	r3, [pc, #68]	; (80013f4 <MX_USART6_UART_Init+0x4c>)
 80013ae:	4a12      	ldr	r2, [pc, #72]	; (80013f8 <MX_USART6_UART_Init+0x50>)
 80013b0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80013b2:	4b10      	ldr	r3, [pc, #64]	; (80013f4 <MX_USART6_UART_Init+0x4c>)
 80013b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013b8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80013ba:	4b0e      	ldr	r3, [pc, #56]	; (80013f4 <MX_USART6_UART_Init+0x4c>)
 80013bc:	2200      	movs	r2, #0
 80013be:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80013c0:	4b0c      	ldr	r3, [pc, #48]	; (80013f4 <MX_USART6_UART_Init+0x4c>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80013c6:	4b0b      	ldr	r3, [pc, #44]	; (80013f4 <MX_USART6_UART_Init+0x4c>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80013cc:	4b09      	ldr	r3, [pc, #36]	; (80013f4 <MX_USART6_UART_Init+0x4c>)
 80013ce:	220c      	movs	r2, #12
 80013d0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013d2:	4b08      	ldr	r3, [pc, #32]	; (80013f4 <MX_USART6_UART_Init+0x4c>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80013d8:	4b06      	ldr	r3, [pc, #24]	; (80013f4 <MX_USART6_UART_Init+0x4c>)
 80013da:	2200      	movs	r2, #0
 80013dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80013de:	4805      	ldr	r0, [pc, #20]	; (80013f4 <MX_USART6_UART_Init+0x4c>)
 80013e0:	f002 fb5e 	bl	8003aa0 <HAL_UART_Init>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80013ea:	f000 f871 	bl	80014d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80013ee:	bf00      	nop
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	200003b4 	.word	0x200003b4
 80013f8:	40011400 	.word	0x40011400

080013fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b088      	sub	sp, #32
 8001400:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001402:	f107 030c 	add.w	r3, r7, #12
 8001406:	2200      	movs	r2, #0
 8001408:	601a      	str	r2, [r3, #0]
 800140a:	605a      	str	r2, [r3, #4]
 800140c:	609a      	str	r2, [r3, #8]
 800140e:	60da      	str	r2, [r3, #12]
 8001410:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001412:	2300      	movs	r3, #0
 8001414:	60bb      	str	r3, [r7, #8]
 8001416:	4b2b      	ldr	r3, [pc, #172]	; (80014c4 <MX_GPIO_Init+0xc8>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141a:	4a2a      	ldr	r2, [pc, #168]	; (80014c4 <MX_GPIO_Init+0xc8>)
 800141c:	f043 0304 	orr.w	r3, r3, #4
 8001420:	6313      	str	r3, [r2, #48]	; 0x30
 8001422:	4b28      	ldr	r3, [pc, #160]	; (80014c4 <MX_GPIO_Init+0xc8>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001426:	f003 0304 	and.w	r3, r3, #4
 800142a:	60bb      	str	r3, [r7, #8]
 800142c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800142e:	2300      	movs	r3, #0
 8001430:	607b      	str	r3, [r7, #4]
 8001432:	4b24      	ldr	r3, [pc, #144]	; (80014c4 <MX_GPIO_Init+0xc8>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001436:	4a23      	ldr	r2, [pc, #140]	; (80014c4 <MX_GPIO_Init+0xc8>)
 8001438:	f043 0301 	orr.w	r3, r3, #1
 800143c:	6313      	str	r3, [r2, #48]	; 0x30
 800143e:	4b21      	ldr	r3, [pc, #132]	; (80014c4 <MX_GPIO_Init+0xc8>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001442:	f003 0301 	and.w	r3, r3, #1
 8001446:	607b      	str	r3, [r7, #4]
 8001448:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800144a:	2300      	movs	r3, #0
 800144c:	603b      	str	r3, [r7, #0]
 800144e:	4b1d      	ldr	r3, [pc, #116]	; (80014c4 <MX_GPIO_Init+0xc8>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001452:	4a1c      	ldr	r2, [pc, #112]	; (80014c4 <MX_GPIO_Init+0xc8>)
 8001454:	f043 0302 	orr.w	r3, r3, #2
 8001458:	6313      	str	r3, [r2, #48]	; 0x30
 800145a:	4b1a      	ldr	r3, [pc, #104]	; (80014c4 <MX_GPIO_Init+0xc8>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145e:	f003 0302 	and.w	r3, r3, #2
 8001462:	603b      	str	r3, [r7, #0]
 8001464:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MD0_Pin|MD1_Pin|MOTORD2_Pin, GPIO_PIN_RESET);
 8001466:	2200      	movs	r2, #0
 8001468:	f44f 7103 	mov.w	r1, #524	; 0x20c
 800146c:	4816      	ldr	r0, [pc, #88]	; (80014c8 <MX_GPIO_Init+0xcc>)
 800146e:	f001 fa01 	bl	8002874 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTORD1_GPIO_Port, MOTORD1_Pin, GPIO_PIN_RESET);
 8001472:	2200      	movs	r2, #0
 8001474:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001478:	4814      	ldr	r0, [pc, #80]	; (80014cc <MX_GPIO_Init+0xd0>)
 800147a:	f001 f9fb 	bl	8002874 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MD0_Pin MD1_Pin MOTORD2_Pin */
  GPIO_InitStruct.Pin = MD0_Pin|MD1_Pin|MOTORD2_Pin;
 800147e:	f44f 7303 	mov.w	r3, #524	; 0x20c
 8001482:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001484:	2301      	movs	r3, #1
 8001486:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001488:	2300      	movs	r3, #0
 800148a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800148c:	2300      	movs	r3, #0
 800148e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001490:	f107 030c 	add.w	r3, r7, #12
 8001494:	4619      	mov	r1, r3
 8001496:	480c      	ldr	r0, [pc, #48]	; (80014c8 <MX_GPIO_Init+0xcc>)
 8001498:	f001 f850 	bl	800253c <HAL_GPIO_Init>

  /*Configure GPIO pin : MOTORD1_Pin */
  GPIO_InitStruct.Pin = MOTORD1_Pin;
 800149c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014a2:	2301      	movs	r3, #1
 80014a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a6:	2300      	movs	r3, #0
 80014a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014aa:	2300      	movs	r3, #0
 80014ac:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(MOTORD1_GPIO_Port, &GPIO_InitStruct);
 80014ae:	f107 030c 	add.w	r3, r7, #12
 80014b2:	4619      	mov	r1, r3
 80014b4:	4805      	ldr	r0, [pc, #20]	; (80014cc <MX_GPIO_Init+0xd0>)
 80014b6:	f001 f841 	bl	800253c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014ba:	bf00      	nop
 80014bc:	3720      	adds	r7, #32
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	40023800 	.word	0x40023800
 80014c8:	40020800 	.word	0x40020800
 80014cc:	40020000 	.word	0x40020000

080014d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014d4:	b672      	cpsid	i
}
 80014d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014d8:	e7fe      	b.n	80014d8 <Error_Handler+0x8>
	...

080014dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014e2:	2300      	movs	r3, #0
 80014e4:	607b      	str	r3, [r7, #4]
 80014e6:	4b10      	ldr	r3, [pc, #64]	; (8001528 <HAL_MspInit+0x4c>)
 80014e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ea:	4a0f      	ldr	r2, [pc, #60]	; (8001528 <HAL_MspInit+0x4c>)
 80014ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014f0:	6453      	str	r3, [r2, #68]	; 0x44
 80014f2:	4b0d      	ldr	r3, [pc, #52]	; (8001528 <HAL_MspInit+0x4c>)
 80014f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014fa:	607b      	str	r3, [r7, #4]
 80014fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014fe:	2300      	movs	r3, #0
 8001500:	603b      	str	r3, [r7, #0]
 8001502:	4b09      	ldr	r3, [pc, #36]	; (8001528 <HAL_MspInit+0x4c>)
 8001504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001506:	4a08      	ldr	r2, [pc, #32]	; (8001528 <HAL_MspInit+0x4c>)
 8001508:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800150c:	6413      	str	r3, [r2, #64]	; 0x40
 800150e:	4b06      	ldr	r3, [pc, #24]	; (8001528 <HAL_MspInit+0x4c>)
 8001510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001512:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001516:	603b      	str	r3, [r7, #0]
 8001518:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800151a:	bf00      	nop
 800151c:	370c      	adds	r7, #12
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	40023800 	.word	0x40023800

0800152c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b08c      	sub	sp, #48	; 0x30
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001534:	f107 031c 	add.w	r3, r7, #28
 8001538:	2200      	movs	r2, #0
 800153a:	601a      	str	r2, [r3, #0]
 800153c:	605a      	str	r2, [r3, #4]
 800153e:	609a      	str	r2, [r3, #8]
 8001540:	60da      	str	r2, [r3, #12]
 8001542:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a36      	ldr	r2, [pc, #216]	; (8001624 <HAL_ADC_MspInit+0xf8>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d130      	bne.n	80015b0 <HAL_ADC_MspInit+0x84>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800154e:	2300      	movs	r3, #0
 8001550:	61bb      	str	r3, [r7, #24]
 8001552:	4b35      	ldr	r3, [pc, #212]	; (8001628 <HAL_ADC_MspInit+0xfc>)
 8001554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001556:	4a34      	ldr	r2, [pc, #208]	; (8001628 <HAL_ADC_MspInit+0xfc>)
 8001558:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800155c:	6453      	str	r3, [r2, #68]	; 0x44
 800155e:	4b32      	ldr	r3, [pc, #200]	; (8001628 <HAL_ADC_MspInit+0xfc>)
 8001560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001562:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001566:	61bb      	str	r3, [r7, #24]
 8001568:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800156a:	2300      	movs	r3, #0
 800156c:	617b      	str	r3, [r7, #20]
 800156e:	4b2e      	ldr	r3, [pc, #184]	; (8001628 <HAL_ADC_MspInit+0xfc>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001572:	4a2d      	ldr	r2, [pc, #180]	; (8001628 <HAL_ADC_MspInit+0xfc>)
 8001574:	f043 0301 	orr.w	r3, r3, #1
 8001578:	6313      	str	r3, [r2, #48]	; 0x30
 800157a:	4b2b      	ldr	r3, [pc, #172]	; (8001628 <HAL_ADC_MspInit+0xfc>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157e:	f003 0301 	and.w	r3, r3, #1
 8001582:	617b      	str	r3, [r7, #20]
 8001584:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001586:	2301      	movs	r3, #1
 8001588:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800158a:	2303      	movs	r3, #3
 800158c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158e:	2300      	movs	r3, #0
 8001590:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001592:	f107 031c 	add.w	r3, r7, #28
 8001596:	4619      	mov	r1, r3
 8001598:	4824      	ldr	r0, [pc, #144]	; (800162c <HAL_ADC_MspInit+0x100>)
 800159a:	f000 ffcf 	bl	800253c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800159e:	2200      	movs	r2, #0
 80015a0:	2100      	movs	r1, #0
 80015a2:	2012      	movs	r0, #18
 80015a4:	f000 ff93 	bl	80024ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80015a8:	2012      	movs	r0, #18
 80015aa:	f000 ffac 	bl	8002506 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80015ae:	e034      	b.n	800161a <HAL_ADC_MspInit+0xee>
  else if(hadc->Instance==ADC2)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a1e      	ldr	r2, [pc, #120]	; (8001630 <HAL_ADC_MspInit+0x104>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d12f      	bne.n	800161a <HAL_ADC_MspInit+0xee>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80015ba:	2300      	movs	r3, #0
 80015bc:	613b      	str	r3, [r7, #16]
 80015be:	4b1a      	ldr	r3, [pc, #104]	; (8001628 <HAL_ADC_MspInit+0xfc>)
 80015c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015c2:	4a19      	ldr	r2, [pc, #100]	; (8001628 <HAL_ADC_MspInit+0xfc>)
 80015c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015c8:	6453      	str	r3, [r2, #68]	; 0x44
 80015ca:	4b17      	ldr	r3, [pc, #92]	; (8001628 <HAL_ADC_MspInit+0xfc>)
 80015cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015d2:	613b      	str	r3, [r7, #16]
 80015d4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015d6:	2300      	movs	r3, #0
 80015d8:	60fb      	str	r3, [r7, #12]
 80015da:	4b13      	ldr	r3, [pc, #76]	; (8001628 <HAL_ADC_MspInit+0xfc>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015de:	4a12      	ldr	r2, [pc, #72]	; (8001628 <HAL_ADC_MspInit+0xfc>)
 80015e0:	f043 0301 	orr.w	r3, r3, #1
 80015e4:	6313      	str	r3, [r2, #48]	; 0x30
 80015e6:	4b10      	ldr	r3, [pc, #64]	; (8001628 <HAL_ADC_MspInit+0xfc>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ea:	f003 0301 	and.w	r3, r3, #1
 80015ee:	60fb      	str	r3, [r7, #12]
 80015f0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80015f2:	2302      	movs	r3, #2
 80015f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015f6:	2303      	movs	r3, #3
 80015f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fa:	2300      	movs	r3, #0
 80015fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015fe:	f107 031c 	add.w	r3, r7, #28
 8001602:	4619      	mov	r1, r3
 8001604:	4809      	ldr	r0, [pc, #36]	; (800162c <HAL_ADC_MspInit+0x100>)
 8001606:	f000 ff99 	bl	800253c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800160a:	2200      	movs	r2, #0
 800160c:	2100      	movs	r1, #0
 800160e:	2012      	movs	r0, #18
 8001610:	f000 ff5d 	bl	80024ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001614:	2012      	movs	r0, #18
 8001616:	f000 ff76 	bl	8002506 <HAL_NVIC_EnableIRQ>
}
 800161a:	bf00      	nop
 800161c:	3730      	adds	r7, #48	; 0x30
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	40012000 	.word	0x40012000
 8001628:	40023800 	.word	0x40023800
 800162c:	40020000 	.word	0x40020000
 8001630:	40012100 	.word	0x40012100

08001634 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b08a      	sub	sp, #40	; 0x28
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800163c:	f107 0314 	add.w	r3, r7, #20
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
 8001644:	605a      	str	r2, [r3, #4]
 8001646:	609a      	str	r2, [r3, #8]
 8001648:	60da      	str	r2, [r3, #12]
 800164a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a19      	ldr	r2, [pc, #100]	; (80016b8 <HAL_SPI_MspInit+0x84>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d12b      	bne.n	80016ae <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001656:	2300      	movs	r3, #0
 8001658:	613b      	str	r3, [r7, #16]
 800165a:	4b18      	ldr	r3, [pc, #96]	; (80016bc <HAL_SPI_MspInit+0x88>)
 800165c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800165e:	4a17      	ldr	r2, [pc, #92]	; (80016bc <HAL_SPI_MspInit+0x88>)
 8001660:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001664:	6453      	str	r3, [r2, #68]	; 0x44
 8001666:	4b15      	ldr	r3, [pc, #84]	; (80016bc <HAL_SPI_MspInit+0x88>)
 8001668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800166a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800166e:	613b      	str	r3, [r7, #16]
 8001670:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001672:	2300      	movs	r3, #0
 8001674:	60fb      	str	r3, [r7, #12]
 8001676:	4b11      	ldr	r3, [pc, #68]	; (80016bc <HAL_SPI_MspInit+0x88>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167a:	4a10      	ldr	r2, [pc, #64]	; (80016bc <HAL_SPI_MspInit+0x88>)
 800167c:	f043 0301 	orr.w	r3, r3, #1
 8001680:	6313      	str	r3, [r2, #48]	; 0x30
 8001682:	4b0e      	ldr	r3, [pc, #56]	; (80016bc <HAL_SPI_MspInit+0x88>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001686:	f003 0301 	and.w	r3, r3, #1
 800168a:	60fb      	str	r3, [r7, #12]
 800168c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800168e:	23a0      	movs	r3, #160	; 0xa0
 8001690:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001692:	2302      	movs	r3, #2
 8001694:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001696:	2300      	movs	r3, #0
 8001698:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800169a:	2303      	movs	r3, #3
 800169c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800169e:	2305      	movs	r3, #5
 80016a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016a2:	f107 0314 	add.w	r3, r7, #20
 80016a6:	4619      	mov	r1, r3
 80016a8:	4805      	ldr	r0, [pc, #20]	; (80016c0 <HAL_SPI_MspInit+0x8c>)
 80016aa:	f000 ff47 	bl	800253c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80016ae:	bf00      	nop
 80016b0:	3728      	adds	r7, #40	; 0x28
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	40013000 	.word	0x40013000
 80016bc:	40023800 	.word	0x40023800
 80016c0:	40020000 	.word	0x40020000

080016c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b084      	sub	sp, #16
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016d4:	d115      	bne.n	8001702 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016d6:	2300      	movs	r3, #0
 80016d8:	60fb      	str	r3, [r7, #12]
 80016da:	4b0c      	ldr	r3, [pc, #48]	; (800170c <HAL_TIM_Base_MspInit+0x48>)
 80016dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016de:	4a0b      	ldr	r2, [pc, #44]	; (800170c <HAL_TIM_Base_MspInit+0x48>)
 80016e0:	f043 0301 	orr.w	r3, r3, #1
 80016e4:	6413      	str	r3, [r2, #64]	; 0x40
 80016e6:	4b09      	ldr	r3, [pc, #36]	; (800170c <HAL_TIM_Base_MspInit+0x48>)
 80016e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ea:	f003 0301 	and.w	r3, r3, #1
 80016ee:	60fb      	str	r3, [r7, #12]
 80016f0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80016f2:	2200      	movs	r2, #0
 80016f4:	2100      	movs	r1, #0
 80016f6:	201c      	movs	r0, #28
 80016f8:	f000 fee9 	bl	80024ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80016fc:	201c      	movs	r0, #28
 80016fe:	f000 ff02 	bl	8002506 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001702:	bf00      	nop
 8001704:	3710      	adds	r7, #16
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	40023800 	.word	0x40023800

08001710 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b08e      	sub	sp, #56	; 0x38
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001718:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800171c:	2200      	movs	r2, #0
 800171e:	601a      	str	r2, [r3, #0]
 8001720:	605a      	str	r2, [r3, #4]
 8001722:	609a      	str	r2, [r3, #8]
 8001724:	60da      	str	r2, [r3, #12]
 8001726:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a4b      	ldr	r2, [pc, #300]	; (800185c <HAL_UART_MspInit+0x14c>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d12c      	bne.n	800178c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001732:	2300      	movs	r3, #0
 8001734:	623b      	str	r3, [r7, #32]
 8001736:	4b4a      	ldr	r3, [pc, #296]	; (8001860 <HAL_UART_MspInit+0x150>)
 8001738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173a:	4a49      	ldr	r2, [pc, #292]	; (8001860 <HAL_UART_MspInit+0x150>)
 800173c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001740:	6413      	str	r3, [r2, #64]	; 0x40
 8001742:	4b47      	ldr	r3, [pc, #284]	; (8001860 <HAL_UART_MspInit+0x150>)
 8001744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800174a:	623b      	str	r3, [r7, #32]
 800174c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800174e:	2300      	movs	r3, #0
 8001750:	61fb      	str	r3, [r7, #28]
 8001752:	4b43      	ldr	r3, [pc, #268]	; (8001860 <HAL_UART_MspInit+0x150>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001756:	4a42      	ldr	r2, [pc, #264]	; (8001860 <HAL_UART_MspInit+0x150>)
 8001758:	f043 0301 	orr.w	r3, r3, #1
 800175c:	6313      	str	r3, [r2, #48]	; 0x30
 800175e:	4b40      	ldr	r3, [pc, #256]	; (8001860 <HAL_UART_MspInit+0x150>)
 8001760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001762:	f003 0301 	and.w	r3, r3, #1
 8001766:	61fb      	str	r3, [r7, #28]
 8001768:	69fb      	ldr	r3, [r7, #28]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800176a:	230c      	movs	r3, #12
 800176c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800176e:	2302      	movs	r3, #2
 8001770:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001772:	2300      	movs	r3, #0
 8001774:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001776:	2303      	movs	r3, #3
 8001778:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800177a:	2307      	movs	r3, #7
 800177c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800177e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001782:	4619      	mov	r1, r3
 8001784:	4837      	ldr	r0, [pc, #220]	; (8001864 <HAL_UART_MspInit+0x154>)
 8001786:	f000 fed9 	bl	800253c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800178a:	e063      	b.n	8001854 <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART3)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a35      	ldr	r2, [pc, #212]	; (8001868 <HAL_UART_MspInit+0x158>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d12d      	bne.n	80017f2 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001796:	2300      	movs	r3, #0
 8001798:	61bb      	str	r3, [r7, #24]
 800179a:	4b31      	ldr	r3, [pc, #196]	; (8001860 <HAL_UART_MspInit+0x150>)
 800179c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179e:	4a30      	ldr	r2, [pc, #192]	; (8001860 <HAL_UART_MspInit+0x150>)
 80017a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017a4:	6413      	str	r3, [r2, #64]	; 0x40
 80017a6:	4b2e      	ldr	r3, [pc, #184]	; (8001860 <HAL_UART_MspInit+0x150>)
 80017a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017ae:	61bb      	str	r3, [r7, #24]
 80017b0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017b2:	2300      	movs	r3, #0
 80017b4:	617b      	str	r3, [r7, #20]
 80017b6:	4b2a      	ldr	r3, [pc, #168]	; (8001860 <HAL_UART_MspInit+0x150>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ba:	4a29      	ldr	r2, [pc, #164]	; (8001860 <HAL_UART_MspInit+0x150>)
 80017bc:	f043 0302 	orr.w	r3, r3, #2
 80017c0:	6313      	str	r3, [r2, #48]	; 0x30
 80017c2:	4b27      	ldr	r3, [pc, #156]	; (8001860 <HAL_UART_MspInit+0x150>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c6:	f003 0302 	and.w	r3, r3, #2
 80017ca:	617b      	str	r3, [r7, #20]
 80017cc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80017ce:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80017d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d4:	2302      	movs	r3, #2
 80017d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d8:	2300      	movs	r3, #0
 80017da:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017dc:	2303      	movs	r3, #3
 80017de:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80017e0:	2307      	movs	r3, #7
 80017e2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017e8:	4619      	mov	r1, r3
 80017ea:	4820      	ldr	r0, [pc, #128]	; (800186c <HAL_UART_MspInit+0x15c>)
 80017ec:	f000 fea6 	bl	800253c <HAL_GPIO_Init>
}
 80017f0:	e030      	b.n	8001854 <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART6)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a1e      	ldr	r2, [pc, #120]	; (8001870 <HAL_UART_MspInit+0x160>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d12b      	bne.n	8001854 <HAL_UART_MspInit+0x144>
    __HAL_RCC_USART6_CLK_ENABLE();
 80017fc:	2300      	movs	r3, #0
 80017fe:	613b      	str	r3, [r7, #16]
 8001800:	4b17      	ldr	r3, [pc, #92]	; (8001860 <HAL_UART_MspInit+0x150>)
 8001802:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001804:	4a16      	ldr	r2, [pc, #88]	; (8001860 <HAL_UART_MspInit+0x150>)
 8001806:	f043 0320 	orr.w	r3, r3, #32
 800180a:	6453      	str	r3, [r2, #68]	; 0x44
 800180c:	4b14      	ldr	r3, [pc, #80]	; (8001860 <HAL_UART_MspInit+0x150>)
 800180e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001810:	f003 0320 	and.w	r3, r3, #32
 8001814:	613b      	str	r3, [r7, #16]
 8001816:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001818:	2300      	movs	r3, #0
 800181a:	60fb      	str	r3, [r7, #12]
 800181c:	4b10      	ldr	r3, [pc, #64]	; (8001860 <HAL_UART_MspInit+0x150>)
 800181e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001820:	4a0f      	ldr	r2, [pc, #60]	; (8001860 <HAL_UART_MspInit+0x150>)
 8001822:	f043 0304 	orr.w	r3, r3, #4
 8001826:	6313      	str	r3, [r2, #48]	; 0x30
 8001828:	4b0d      	ldr	r3, [pc, #52]	; (8001860 <HAL_UART_MspInit+0x150>)
 800182a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182c:	f003 0304 	and.w	r3, r3, #4
 8001830:	60fb      	str	r3, [r7, #12]
 8001832:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001834:	23c0      	movs	r3, #192	; 0xc0
 8001836:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001838:	2302      	movs	r3, #2
 800183a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183c:	2300      	movs	r3, #0
 800183e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001840:	2303      	movs	r3, #3
 8001842:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001844:	2308      	movs	r3, #8
 8001846:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001848:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800184c:	4619      	mov	r1, r3
 800184e:	4809      	ldr	r0, [pc, #36]	; (8001874 <HAL_UART_MspInit+0x164>)
 8001850:	f000 fe74 	bl	800253c <HAL_GPIO_Init>
}
 8001854:	bf00      	nop
 8001856:	3738      	adds	r7, #56	; 0x38
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	40004400 	.word	0x40004400
 8001860:	40023800 	.word	0x40023800
 8001864:	40020000 	.word	0x40020000
 8001868:	40004800 	.word	0x40004800
 800186c:	40020400 	.word	0x40020400
 8001870:	40011400 	.word	0x40011400
 8001874:	40020800 	.word	0x40020800

08001878 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800187c:	e7fe      	b.n	800187c <NMI_Handler+0x4>

0800187e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800187e:	b480      	push	{r7}
 8001880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001882:	e7fe      	b.n	8001882 <HardFault_Handler+0x4>

08001884 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001888:	e7fe      	b.n	8001888 <MemManage_Handler+0x4>

0800188a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800188a:	b480      	push	{r7}
 800188c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800188e:	e7fe      	b.n	800188e <BusFault_Handler+0x4>

08001890 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001894:	e7fe      	b.n	8001894 <UsageFault_Handler+0x4>

08001896 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001896:	b480      	push	{r7}
 8001898:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800189a:	bf00      	nop
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr

080018a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018a8:	bf00      	nop
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr

080018b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018b2:	b480      	push	{r7}
 80018b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018b6:	bf00      	nop
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr

080018c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018c4:	f000 f96e 	bl	8001ba4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018c8:	bf00      	nop
 80018ca:	bd80      	pop	{r7, pc}

080018cc <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80018d0:	4803      	ldr	r0, [pc, #12]	; (80018e0 <ADC_IRQHandler+0x14>)
 80018d2:	f000 f9ca 	bl	8001c6a <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80018d6:	4803      	ldr	r0, [pc, #12]	; (80018e4 <ADC_IRQHandler+0x18>)
 80018d8:	f000 f9c7 	bl	8001c6a <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80018dc:	bf00      	nop
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	200001fc 	.word	0x200001fc
 80018e4:	20000244 	.word	0x20000244

080018e8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80018ec:	4802      	ldr	r0, [pc, #8]	; (80018f8 <TIM2_IRQHandler+0x10>)
 80018ee:	f001 fd0b 	bl	8003308 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80018f2:	bf00      	nop
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	200002e4 	.word	0x200002e4

080018fc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  return 1;
 8001900:	2301      	movs	r3, #1
}
 8001902:	4618      	mov	r0, r3
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr

0800190c <_kill>:

int _kill(int pid, int sig)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001916:	f002 fb85 	bl	8004024 <__errno>
 800191a:	4603      	mov	r3, r0
 800191c:	2216      	movs	r2, #22
 800191e:	601a      	str	r2, [r3, #0]
  return -1;
 8001920:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001924:	4618      	mov	r0, r3
 8001926:	3708      	adds	r7, #8
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}

0800192c <_exit>:

void _exit (int status)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001934:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001938:	6878      	ldr	r0, [r7, #4]
 800193a:	f7ff ffe7 	bl	800190c <_kill>
  while (1) {}    /* Make sure we hang here */
 800193e:	e7fe      	b.n	800193e <_exit+0x12>

08001940 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b086      	sub	sp, #24
 8001944:	af00      	add	r7, sp, #0
 8001946:	60f8      	str	r0, [r7, #12]
 8001948:	60b9      	str	r1, [r7, #8]
 800194a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800194c:	2300      	movs	r3, #0
 800194e:	617b      	str	r3, [r7, #20]
 8001950:	e00a      	b.n	8001968 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001952:	f3af 8000 	nop.w
 8001956:	4601      	mov	r1, r0
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	1c5a      	adds	r2, r3, #1
 800195c:	60ba      	str	r2, [r7, #8]
 800195e:	b2ca      	uxtb	r2, r1
 8001960:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	3301      	adds	r3, #1
 8001966:	617b      	str	r3, [r7, #20]
 8001968:	697a      	ldr	r2, [r7, #20]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	429a      	cmp	r2, r3
 800196e:	dbf0      	blt.n	8001952 <_read+0x12>
  }

  return len;
 8001970:	687b      	ldr	r3, [r7, #4]
}
 8001972:	4618      	mov	r0, r3
 8001974:	3718      	adds	r7, #24
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}

0800197a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800197a:	b580      	push	{r7, lr}
 800197c:	b086      	sub	sp, #24
 800197e:	af00      	add	r7, sp, #0
 8001980:	60f8      	str	r0, [r7, #12]
 8001982:	60b9      	str	r1, [r7, #8]
 8001984:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001986:	2300      	movs	r3, #0
 8001988:	617b      	str	r3, [r7, #20]
 800198a:	e009      	b.n	80019a0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	1c5a      	adds	r2, r3, #1
 8001990:	60ba      	str	r2, [r7, #8]
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	4618      	mov	r0, r3
 8001996:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	3301      	adds	r3, #1
 800199e:	617b      	str	r3, [r7, #20]
 80019a0:	697a      	ldr	r2, [r7, #20]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	dbf1      	blt.n	800198c <_write+0x12>
  }
  return len;
 80019a8:	687b      	ldr	r3, [r7, #4]
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3718      	adds	r7, #24
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <_close>:

int _close(int file)
{
 80019b2:	b480      	push	{r7}
 80019b4:	b083      	sub	sp, #12
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80019be:	4618      	mov	r0, r3
 80019c0:	370c      	adds	r7, #12
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr

080019ca <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019ca:	b480      	push	{r7}
 80019cc:	b083      	sub	sp, #12
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	6078      	str	r0, [r7, #4]
 80019d2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019da:	605a      	str	r2, [r3, #4]
  return 0;
 80019dc:	2300      	movs	r3, #0
}
 80019de:	4618      	mov	r0, r3
 80019e0:	370c      	adds	r7, #12
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr

080019ea <_isatty>:

int _isatty(int file)
{
 80019ea:	b480      	push	{r7}
 80019ec:	b083      	sub	sp, #12
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019f2:	2301      	movs	r3, #1
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	370c      	adds	r7, #12
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr

08001a00 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b085      	sub	sp, #20
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	60f8      	str	r0, [r7, #12]
 8001a08:	60b9      	str	r1, [r7, #8]
 8001a0a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a0c:	2300      	movs	r3, #0
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3714      	adds	r7, #20
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
	...

08001a1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b086      	sub	sp, #24
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a24:	4a14      	ldr	r2, [pc, #80]	; (8001a78 <_sbrk+0x5c>)
 8001a26:	4b15      	ldr	r3, [pc, #84]	; (8001a7c <_sbrk+0x60>)
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a30:	4b13      	ldr	r3, [pc, #76]	; (8001a80 <_sbrk+0x64>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d102      	bne.n	8001a3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a38:	4b11      	ldr	r3, [pc, #68]	; (8001a80 <_sbrk+0x64>)
 8001a3a:	4a12      	ldr	r2, [pc, #72]	; (8001a84 <_sbrk+0x68>)
 8001a3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a3e:	4b10      	ldr	r3, [pc, #64]	; (8001a80 <_sbrk+0x64>)
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4413      	add	r3, r2
 8001a46:	693a      	ldr	r2, [r7, #16]
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d207      	bcs.n	8001a5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a4c:	f002 faea 	bl	8004024 <__errno>
 8001a50:	4603      	mov	r3, r0
 8001a52:	220c      	movs	r2, #12
 8001a54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a5a:	e009      	b.n	8001a70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a5c:	4b08      	ldr	r3, [pc, #32]	; (8001a80 <_sbrk+0x64>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a62:	4b07      	ldr	r3, [pc, #28]	; (8001a80 <_sbrk+0x64>)
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4413      	add	r3, r2
 8001a6a:	4a05      	ldr	r2, [pc, #20]	; (8001a80 <_sbrk+0x64>)
 8001a6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	3718      	adds	r7, #24
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	20020000 	.word	0x20020000
 8001a7c:	00000400 	.word	0x00000400
 8001a80:	200003f8 	.word	0x200003f8
 8001a84:	20000410 	.word	0x20000410

08001a88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a8c:	4b06      	ldr	r3, [pc, #24]	; (8001aa8 <SystemInit+0x20>)
 8001a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a92:	4a05      	ldr	r2, [pc, #20]	; (8001aa8 <SystemInit+0x20>)
 8001a94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a9c:	bf00      	nop
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	e000ed00 	.word	0xe000ed00

08001aac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001aac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ae4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ab0:	480d      	ldr	r0, [pc, #52]	; (8001ae8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001ab2:	490e      	ldr	r1, [pc, #56]	; (8001aec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ab4:	4a0e      	ldr	r2, [pc, #56]	; (8001af0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ab6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ab8:	e002      	b.n	8001ac0 <LoopCopyDataInit>

08001aba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001aba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001abc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001abe:	3304      	adds	r3, #4

08001ac0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ac0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ac2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ac4:	d3f9      	bcc.n	8001aba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ac6:	4a0b      	ldr	r2, [pc, #44]	; (8001af4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ac8:	4c0b      	ldr	r4, [pc, #44]	; (8001af8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001aca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001acc:	e001      	b.n	8001ad2 <LoopFillZerobss>

08001ace <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ace:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ad0:	3204      	adds	r2, #4

08001ad2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ad2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ad4:	d3fb      	bcc.n	8001ace <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ad6:	f7ff ffd7 	bl	8001a88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ada:	f002 faa9 	bl	8004030 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ade:	f7ff fa63 	bl	8000fa8 <main>
  bx  lr    
 8001ae2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001ae4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ae8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001aec:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001af0:	08007b34 	.word	0x08007b34
  ldr r2, =_sbss
 8001af4:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001af8:	20000410 	.word	0x20000410

08001afc <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001afc:	e7fe      	b.n	8001afc <CAN1_RX0_IRQHandler>
	...

08001b00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b04:	4b0e      	ldr	r3, [pc, #56]	; (8001b40 <HAL_Init+0x40>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a0d      	ldr	r2, [pc, #52]	; (8001b40 <HAL_Init+0x40>)
 8001b0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b10:	4b0b      	ldr	r3, [pc, #44]	; (8001b40 <HAL_Init+0x40>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a0a      	ldr	r2, [pc, #40]	; (8001b40 <HAL_Init+0x40>)
 8001b16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b1c:	4b08      	ldr	r3, [pc, #32]	; (8001b40 <HAL_Init+0x40>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a07      	ldr	r2, [pc, #28]	; (8001b40 <HAL_Init+0x40>)
 8001b22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b28:	2003      	movs	r0, #3
 8001b2a:	f000 fcc5 	bl	80024b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b2e:	200f      	movs	r0, #15
 8001b30:	f000 f808 	bl	8001b44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b34:	f7ff fcd2 	bl	80014dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b38:	2300      	movs	r3, #0
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	40023c00 	.word	0x40023c00

08001b44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b4c:	4b12      	ldr	r3, [pc, #72]	; (8001b98 <HAL_InitTick+0x54>)
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	4b12      	ldr	r3, [pc, #72]	; (8001b9c <HAL_InitTick+0x58>)
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	4619      	mov	r1, r3
 8001b56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b62:	4618      	mov	r0, r3
 8001b64:	f000 fcdd 	bl	8002522 <HAL_SYSTICK_Config>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e00e      	b.n	8001b90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2b0f      	cmp	r3, #15
 8001b76:	d80a      	bhi.n	8001b8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b78:	2200      	movs	r2, #0
 8001b7a:	6879      	ldr	r1, [r7, #4]
 8001b7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b80:	f000 fca5 	bl	80024ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b84:	4a06      	ldr	r2, [pc, #24]	; (8001ba0 <HAL_InitTick+0x5c>)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	e000      	b.n	8001b90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3708      	adds	r7, #8
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	20000000 	.word	0x20000000
 8001b9c:	20000008 	.word	0x20000008
 8001ba0:	20000004 	.word	0x20000004

08001ba4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ba8:	4b06      	ldr	r3, [pc, #24]	; (8001bc4 <HAL_IncTick+0x20>)
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	461a      	mov	r2, r3
 8001bae:	4b06      	ldr	r3, [pc, #24]	; (8001bc8 <HAL_IncTick+0x24>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4413      	add	r3, r2
 8001bb4:	4a04      	ldr	r2, [pc, #16]	; (8001bc8 <HAL_IncTick+0x24>)
 8001bb6:	6013      	str	r3, [r2, #0]
}
 8001bb8:	bf00      	nop
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	20000008 	.word	0x20000008
 8001bc8:	200003fc 	.word	0x200003fc

08001bcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  return uwTick;
 8001bd0:	4b03      	ldr	r3, [pc, #12]	; (8001be0 <HAL_GetTick+0x14>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	200003fc 	.word	0x200003fc

08001be4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b084      	sub	sp, #16
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bec:	2300      	movs	r3, #0
 8001bee:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d101      	bne.n	8001bfa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e033      	b.n	8001c62 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d109      	bne.n	8001c16 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f7ff fc92 	bl	800152c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2200      	movs	r2, #0
 8001c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1a:	f003 0310 	and.w	r3, r3, #16
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d118      	bne.n	8001c54 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c26:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001c2a:	f023 0302 	bic.w	r3, r3, #2
 8001c2e:	f043 0202 	orr.w	r2, r3, #2
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f000 fa68 	bl	800210c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c46:	f023 0303 	bic.w	r3, r3, #3
 8001c4a:	f043 0201 	orr.w	r2, r3, #1
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	641a      	str	r2, [r3, #64]	; 0x40
 8001c52:	e001      	b.n	8001c58 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001c60:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3710      	adds	r7, #16
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}

08001c6a <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001c6a:	b580      	push	{r7, lr}
 8001c6c:	b086      	sub	sp, #24
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001c72:	2300      	movs	r3, #0
 8001c74:	617b      	str	r3, [r7, #20]
 8001c76:	2300      	movs	r3, #0
 8001c78:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	f003 0302 	and.w	r3, r3, #2
 8001c90:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	f003 0320 	and.w	r3, r3, #32
 8001c98:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d049      	beq.n	8001d34 <HAL_ADC_IRQHandler+0xca>
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d046      	beq.n	8001d34 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001caa:	f003 0310 	and.w	r3, r3, #16
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d105      	bne.n	8001cbe <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d12b      	bne.n	8001d24 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d127      	bne.n	8001d24 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cda:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d006      	beq.n	8001cf0 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d119      	bne.n	8001d24 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	685a      	ldr	r2, [r3, #4]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f022 0220 	bic.w	r2, r2, #32
 8001cfe:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d04:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d105      	bne.n	8001d24 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1c:	f043 0201 	orr.w	r2, r3, #1
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f000 f8b0 	bl	8001e8a <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f06f 0212 	mvn.w	r2, #18
 8001d32:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	f003 0304 	and.w	r3, r3, #4
 8001d3a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d42:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d057      	beq.n	8001dfa <HAL_ADC_IRQHandler+0x190>
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d054      	beq.n	8001dfa <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d54:	f003 0310 	and.w	r3, r3, #16
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d105      	bne.n	8001d68 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d60:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d139      	bne.n	8001dea <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d7c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d006      	beq.n	8001d92 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d12b      	bne.n	8001dea <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d124      	bne.n	8001dea <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d11d      	bne.n	8001dea <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d119      	bne.n	8001dea <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	685a      	ldr	r2, [r3, #4]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001dc4:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d105      	bne.n	8001dea <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de2:	f043 0201 	orr.w	r2, r3, #1
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f000 fa8a 	bl	8002304 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f06f 020c 	mvn.w	r2, #12
 8001df8:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	f003 0301 	and.w	r3, r3, #1
 8001e00:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e08:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d017      	beq.n	8001e40 <HAL_ADC_IRQHandler+0x1d6>
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d014      	beq.n	8001e40 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 0301 	and.w	r3, r3, #1
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d10d      	bne.n	8001e40 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e28:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f000 f834 	bl	8001e9e <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f06f 0201 	mvn.w	r2, #1
 8001e3e:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	f003 0320 	and.w	r3, r3, #32
 8001e46:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e4e:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d015      	beq.n	8001e82 <HAL_ADC_IRQHandler+0x218>
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d012      	beq.n	8001e82 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e60:	f043 0202 	orr.w	r2, r3, #2
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f06f 0220 	mvn.w	r2, #32
 8001e70:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f000 f81d 	bl	8001eb2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f06f 0220 	mvn.w	r2, #32
 8001e80:	601a      	str	r2, [r3, #0]
  }
}
 8001e82:	bf00      	nop
 8001e84:	3718      	adds	r7, #24
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}

08001e8a <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001e8a:	b480      	push	{r7}
 8001e8c:	b083      	sub	sp, #12
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001e92:	bf00      	nop
 8001e94:	370c      	adds	r7, #12
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr

08001e9e <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001e9e:	b480      	push	{r7}
 8001ea0:	b083      	sub	sp, #12
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001ea6:	bf00      	nop
 8001ea8:	370c      	adds	r7, #12
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr

08001eb2 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001eb2:	b480      	push	{r7}
 8001eb4:	b083      	sub	sp, #12
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001eba:	bf00      	nop
 8001ebc:	370c      	adds	r7, #12
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
	...

08001ec8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b085      	sub	sp, #20
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d101      	bne.n	8001ee4 <HAL_ADC_ConfigChannel+0x1c>
 8001ee0:	2302      	movs	r3, #2
 8001ee2:	e105      	b.n	80020f0 <HAL_ADC_ConfigChannel+0x228>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	2b09      	cmp	r3, #9
 8001ef2:	d925      	bls.n	8001f40 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	68d9      	ldr	r1, [r3, #12]
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	b29b      	uxth	r3, r3
 8001f00:	461a      	mov	r2, r3
 8001f02:	4613      	mov	r3, r2
 8001f04:	005b      	lsls	r3, r3, #1
 8001f06:	4413      	add	r3, r2
 8001f08:	3b1e      	subs	r3, #30
 8001f0a:	2207      	movs	r2, #7
 8001f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f10:	43da      	mvns	r2, r3
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	400a      	ands	r2, r1
 8001f18:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	68d9      	ldr	r1, [r3, #12]
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	689a      	ldr	r2, [r3, #8]
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	b29b      	uxth	r3, r3
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	005b      	lsls	r3, r3, #1
 8001f30:	4403      	add	r3, r0
 8001f32:	3b1e      	subs	r3, #30
 8001f34:	409a      	lsls	r2, r3
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	430a      	orrs	r2, r1
 8001f3c:	60da      	str	r2, [r3, #12]
 8001f3e:	e022      	b.n	8001f86 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	6919      	ldr	r1, [r3, #16]
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	b29b      	uxth	r3, r3
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	4613      	mov	r3, r2
 8001f50:	005b      	lsls	r3, r3, #1
 8001f52:	4413      	add	r3, r2
 8001f54:	2207      	movs	r2, #7
 8001f56:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5a:	43da      	mvns	r2, r3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	400a      	ands	r2, r1
 8001f62:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	6919      	ldr	r1, [r3, #16]
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	689a      	ldr	r2, [r3, #8]
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	b29b      	uxth	r3, r3
 8001f74:	4618      	mov	r0, r3
 8001f76:	4603      	mov	r3, r0
 8001f78:	005b      	lsls	r3, r3, #1
 8001f7a:	4403      	add	r3, r0
 8001f7c:	409a      	lsls	r2, r3
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	430a      	orrs	r2, r1
 8001f84:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	2b06      	cmp	r3, #6
 8001f8c:	d824      	bhi.n	8001fd8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	685a      	ldr	r2, [r3, #4]
 8001f98:	4613      	mov	r3, r2
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	4413      	add	r3, r2
 8001f9e:	3b05      	subs	r3, #5
 8001fa0:	221f      	movs	r2, #31
 8001fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa6:	43da      	mvns	r2, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	400a      	ands	r2, r1
 8001fae:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	685a      	ldr	r2, [r3, #4]
 8001fc2:	4613      	mov	r3, r2
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	4413      	add	r3, r2
 8001fc8:	3b05      	subs	r3, #5
 8001fca:	fa00 f203 	lsl.w	r2, r0, r3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	430a      	orrs	r2, r1
 8001fd4:	635a      	str	r2, [r3, #52]	; 0x34
 8001fd6:	e04c      	b.n	8002072 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	2b0c      	cmp	r3, #12
 8001fde:	d824      	bhi.n	800202a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	685a      	ldr	r2, [r3, #4]
 8001fea:	4613      	mov	r3, r2
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	4413      	add	r3, r2
 8001ff0:	3b23      	subs	r3, #35	; 0x23
 8001ff2:	221f      	movs	r2, #31
 8001ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff8:	43da      	mvns	r2, r3
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	400a      	ands	r2, r1
 8002000:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	b29b      	uxth	r3, r3
 800200e:	4618      	mov	r0, r3
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	685a      	ldr	r2, [r3, #4]
 8002014:	4613      	mov	r3, r2
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	4413      	add	r3, r2
 800201a:	3b23      	subs	r3, #35	; 0x23
 800201c:	fa00 f203 	lsl.w	r2, r0, r3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	430a      	orrs	r2, r1
 8002026:	631a      	str	r2, [r3, #48]	; 0x30
 8002028:	e023      	b.n	8002072 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	685a      	ldr	r2, [r3, #4]
 8002034:	4613      	mov	r3, r2
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	4413      	add	r3, r2
 800203a:	3b41      	subs	r3, #65	; 0x41
 800203c:	221f      	movs	r2, #31
 800203e:	fa02 f303 	lsl.w	r3, r2, r3
 8002042:	43da      	mvns	r2, r3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	400a      	ands	r2, r1
 800204a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	b29b      	uxth	r3, r3
 8002058:	4618      	mov	r0, r3
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	685a      	ldr	r2, [r3, #4]
 800205e:	4613      	mov	r3, r2
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	4413      	add	r3, r2
 8002064:	3b41      	subs	r3, #65	; 0x41
 8002066:	fa00 f203 	lsl.w	r2, r0, r3
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	430a      	orrs	r2, r1
 8002070:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002072:	4b22      	ldr	r3, [pc, #136]	; (80020fc <HAL_ADC_ConfigChannel+0x234>)
 8002074:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a21      	ldr	r2, [pc, #132]	; (8002100 <HAL_ADC_ConfigChannel+0x238>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d109      	bne.n	8002094 <HAL_ADC_ConfigChannel+0x1cc>
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	2b12      	cmp	r3, #18
 8002086:	d105      	bne.n	8002094 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a19      	ldr	r2, [pc, #100]	; (8002100 <HAL_ADC_ConfigChannel+0x238>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d123      	bne.n	80020e6 <HAL_ADC_ConfigChannel+0x21e>
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	2b10      	cmp	r3, #16
 80020a4:	d003      	beq.n	80020ae <HAL_ADC_ConfigChannel+0x1e6>
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	2b11      	cmp	r3, #17
 80020ac:	d11b      	bne.n	80020e6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	2b10      	cmp	r3, #16
 80020c0:	d111      	bne.n	80020e6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80020c2:	4b10      	ldr	r3, [pc, #64]	; (8002104 <HAL_ADC_ConfigChannel+0x23c>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a10      	ldr	r2, [pc, #64]	; (8002108 <HAL_ADC_ConfigChannel+0x240>)
 80020c8:	fba2 2303 	umull	r2, r3, r2, r3
 80020cc:	0c9a      	lsrs	r2, r3, #18
 80020ce:	4613      	mov	r3, r2
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	4413      	add	r3, r2
 80020d4:	005b      	lsls	r3, r3, #1
 80020d6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80020d8:	e002      	b.n	80020e0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	3b01      	subs	r3, #1
 80020de:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d1f9      	bne.n	80020da <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2200      	movs	r2, #0
 80020ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80020ee:	2300      	movs	r3, #0
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3714      	adds	r7, #20
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr
 80020fc:	40012300 	.word	0x40012300
 8002100:	40012000 	.word	0x40012000
 8002104:	20000000 	.word	0x20000000
 8002108:	431bde83 	.word	0x431bde83

0800210c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800210c:	b480      	push	{r7}
 800210e:	b085      	sub	sp, #20
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002114:	4b79      	ldr	r3, [pc, #484]	; (80022fc <ADC_Init+0x1f0>)
 8002116:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	685a      	ldr	r2, [r3, #4]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	431a      	orrs	r2, r3
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	685a      	ldr	r2, [r3, #4]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002140:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	6859      	ldr	r1, [r3, #4]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	691b      	ldr	r3, [r3, #16]
 800214c:	021a      	lsls	r2, r3, #8
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	430a      	orrs	r2, r1
 8002154:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	685a      	ldr	r2, [r3, #4]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002164:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	6859      	ldr	r1, [r3, #4]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	689a      	ldr	r2, [r3, #8]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	430a      	orrs	r2, r1
 8002176:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	689a      	ldr	r2, [r3, #8]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002186:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	6899      	ldr	r1, [r3, #8]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	68da      	ldr	r2, [r3, #12]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	430a      	orrs	r2, r1
 8002198:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800219e:	4a58      	ldr	r2, [pc, #352]	; (8002300 <ADC_Init+0x1f4>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d022      	beq.n	80021ea <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	689a      	ldr	r2, [r3, #8]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80021b2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	6899      	ldr	r1, [r3, #8]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	430a      	orrs	r2, r1
 80021c4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	689a      	ldr	r2, [r3, #8]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80021d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	6899      	ldr	r1, [r3, #8]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	430a      	orrs	r2, r1
 80021e6:	609a      	str	r2, [r3, #8]
 80021e8:	e00f      	b.n	800220a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	689a      	ldr	r2, [r3, #8]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80021f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	689a      	ldr	r2, [r3, #8]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002208:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	689a      	ldr	r2, [r3, #8]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f022 0202 	bic.w	r2, r2, #2
 8002218:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	6899      	ldr	r1, [r3, #8]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	7e1b      	ldrb	r3, [r3, #24]
 8002224:	005a      	lsls	r2, r3, #1
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	430a      	orrs	r2, r1
 800222c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d01b      	beq.n	8002270 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	685a      	ldr	r2, [r3, #4]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002246:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	685a      	ldr	r2, [r3, #4]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002256:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	6859      	ldr	r1, [r3, #4]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002262:	3b01      	subs	r3, #1
 8002264:	035a      	lsls	r2, r3, #13
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	430a      	orrs	r2, r1
 800226c:	605a      	str	r2, [r3, #4]
 800226e:	e007      	b.n	8002280 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	685a      	ldr	r2, [r3, #4]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800227e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800228e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	69db      	ldr	r3, [r3, #28]
 800229a:	3b01      	subs	r3, #1
 800229c:	051a      	lsls	r2, r3, #20
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	430a      	orrs	r2, r1
 80022a4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	689a      	ldr	r2, [r3, #8]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80022b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	6899      	ldr	r1, [r3, #8]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80022c2:	025a      	lsls	r2, r3, #9
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	430a      	orrs	r2, r1
 80022ca:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	689a      	ldr	r2, [r3, #8]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	6899      	ldr	r1, [r3, #8]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	695b      	ldr	r3, [r3, #20]
 80022e6:	029a      	lsls	r2, r3, #10
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	430a      	orrs	r2, r1
 80022ee:	609a      	str	r2, [r3, #8]
}
 80022f0:	bf00      	nop
 80022f2:	3714      	adds	r7, #20
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr
 80022fc:	40012300 	.word	0x40012300
 8002300:	0f000001 	.word	0x0f000001

08002304 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800230c:	bf00      	nop
 800230e:	370c      	adds	r7, #12
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr

08002318 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002318:	b480      	push	{r7}
 800231a:	b085      	sub	sp, #20
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	f003 0307 	and.w	r3, r3, #7
 8002326:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002328:	4b0c      	ldr	r3, [pc, #48]	; (800235c <__NVIC_SetPriorityGrouping+0x44>)
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800232e:	68ba      	ldr	r2, [r7, #8]
 8002330:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002334:	4013      	ands	r3, r2
 8002336:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002340:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002344:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002348:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800234a:	4a04      	ldr	r2, [pc, #16]	; (800235c <__NVIC_SetPriorityGrouping+0x44>)
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	60d3      	str	r3, [r2, #12]
}
 8002350:	bf00      	nop
 8002352:	3714      	adds	r7, #20
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr
 800235c:	e000ed00 	.word	0xe000ed00

08002360 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002364:	4b04      	ldr	r3, [pc, #16]	; (8002378 <__NVIC_GetPriorityGrouping+0x18>)
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	0a1b      	lsrs	r3, r3, #8
 800236a:	f003 0307 	and.w	r3, r3, #7
}
 800236e:	4618      	mov	r0, r3
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr
 8002378:	e000ed00 	.word	0xe000ed00

0800237c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	4603      	mov	r3, r0
 8002384:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800238a:	2b00      	cmp	r3, #0
 800238c:	db0b      	blt.n	80023a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800238e:	79fb      	ldrb	r3, [r7, #7]
 8002390:	f003 021f 	and.w	r2, r3, #31
 8002394:	4907      	ldr	r1, [pc, #28]	; (80023b4 <__NVIC_EnableIRQ+0x38>)
 8002396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800239a:	095b      	lsrs	r3, r3, #5
 800239c:	2001      	movs	r0, #1
 800239e:	fa00 f202 	lsl.w	r2, r0, r2
 80023a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023a6:	bf00      	nop
 80023a8:	370c      	adds	r7, #12
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	e000e100 	.word	0xe000e100

080023b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	4603      	mov	r3, r0
 80023c0:	6039      	str	r1, [r7, #0]
 80023c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	db0a      	blt.n	80023e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	b2da      	uxtb	r2, r3
 80023d0:	490c      	ldr	r1, [pc, #48]	; (8002404 <__NVIC_SetPriority+0x4c>)
 80023d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d6:	0112      	lsls	r2, r2, #4
 80023d8:	b2d2      	uxtb	r2, r2
 80023da:	440b      	add	r3, r1
 80023dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023e0:	e00a      	b.n	80023f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	b2da      	uxtb	r2, r3
 80023e6:	4908      	ldr	r1, [pc, #32]	; (8002408 <__NVIC_SetPriority+0x50>)
 80023e8:	79fb      	ldrb	r3, [r7, #7]
 80023ea:	f003 030f 	and.w	r3, r3, #15
 80023ee:	3b04      	subs	r3, #4
 80023f0:	0112      	lsls	r2, r2, #4
 80023f2:	b2d2      	uxtb	r2, r2
 80023f4:	440b      	add	r3, r1
 80023f6:	761a      	strb	r2, [r3, #24]
}
 80023f8:	bf00      	nop
 80023fa:	370c      	adds	r7, #12
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr
 8002404:	e000e100 	.word	0xe000e100
 8002408:	e000ed00 	.word	0xe000ed00

0800240c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800240c:	b480      	push	{r7}
 800240e:	b089      	sub	sp, #36	; 0x24
 8002410:	af00      	add	r7, sp, #0
 8002412:	60f8      	str	r0, [r7, #12]
 8002414:	60b9      	str	r1, [r7, #8]
 8002416:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	f003 0307 	and.w	r3, r3, #7
 800241e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	f1c3 0307 	rsb	r3, r3, #7
 8002426:	2b04      	cmp	r3, #4
 8002428:	bf28      	it	cs
 800242a:	2304      	movcs	r3, #4
 800242c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	3304      	adds	r3, #4
 8002432:	2b06      	cmp	r3, #6
 8002434:	d902      	bls.n	800243c <NVIC_EncodePriority+0x30>
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	3b03      	subs	r3, #3
 800243a:	e000      	b.n	800243e <NVIC_EncodePriority+0x32>
 800243c:	2300      	movs	r3, #0
 800243e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002440:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002444:	69bb      	ldr	r3, [r7, #24]
 8002446:	fa02 f303 	lsl.w	r3, r2, r3
 800244a:	43da      	mvns	r2, r3
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	401a      	ands	r2, r3
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002454:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	fa01 f303 	lsl.w	r3, r1, r3
 800245e:	43d9      	mvns	r1, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002464:	4313      	orrs	r3, r2
         );
}
 8002466:	4618      	mov	r0, r3
 8002468:	3724      	adds	r7, #36	; 0x24
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr
	...

08002474 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b082      	sub	sp, #8
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	3b01      	subs	r3, #1
 8002480:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002484:	d301      	bcc.n	800248a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002486:	2301      	movs	r3, #1
 8002488:	e00f      	b.n	80024aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800248a:	4a0a      	ldr	r2, [pc, #40]	; (80024b4 <SysTick_Config+0x40>)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	3b01      	subs	r3, #1
 8002490:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002492:	210f      	movs	r1, #15
 8002494:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002498:	f7ff ff8e 	bl	80023b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800249c:	4b05      	ldr	r3, [pc, #20]	; (80024b4 <SysTick_Config+0x40>)
 800249e:	2200      	movs	r2, #0
 80024a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024a2:	4b04      	ldr	r3, [pc, #16]	; (80024b4 <SysTick_Config+0x40>)
 80024a4:	2207      	movs	r2, #7
 80024a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024a8:	2300      	movs	r3, #0
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3708      	adds	r7, #8
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	e000e010 	.word	0xe000e010

080024b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	f7ff ff29 	bl	8002318 <__NVIC_SetPriorityGrouping>
}
 80024c6:	bf00      	nop
 80024c8:	3708      	adds	r7, #8
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}

080024ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024ce:	b580      	push	{r7, lr}
 80024d0:	b086      	sub	sp, #24
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	4603      	mov	r3, r0
 80024d6:	60b9      	str	r1, [r7, #8]
 80024d8:	607a      	str	r2, [r7, #4]
 80024da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024dc:	2300      	movs	r3, #0
 80024de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024e0:	f7ff ff3e 	bl	8002360 <__NVIC_GetPriorityGrouping>
 80024e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	68b9      	ldr	r1, [r7, #8]
 80024ea:	6978      	ldr	r0, [r7, #20]
 80024ec:	f7ff ff8e 	bl	800240c <NVIC_EncodePriority>
 80024f0:	4602      	mov	r2, r0
 80024f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024f6:	4611      	mov	r1, r2
 80024f8:	4618      	mov	r0, r3
 80024fa:	f7ff ff5d 	bl	80023b8 <__NVIC_SetPriority>
}
 80024fe:	bf00      	nop
 8002500:	3718      	adds	r7, #24
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}

08002506 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002506:	b580      	push	{r7, lr}
 8002508:	b082      	sub	sp, #8
 800250a:	af00      	add	r7, sp, #0
 800250c:	4603      	mov	r3, r0
 800250e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002510:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002514:	4618      	mov	r0, r3
 8002516:	f7ff ff31 	bl	800237c <__NVIC_EnableIRQ>
}
 800251a:	bf00      	nop
 800251c:	3708      	adds	r7, #8
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}

08002522 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002522:	b580      	push	{r7, lr}
 8002524:	b082      	sub	sp, #8
 8002526:	af00      	add	r7, sp, #0
 8002528:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f7ff ffa2 	bl	8002474 <SysTick_Config>
 8002530:	4603      	mov	r3, r0
}
 8002532:	4618      	mov	r0, r3
 8002534:	3708      	adds	r7, #8
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
	...

0800253c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800253c:	b480      	push	{r7}
 800253e:	b089      	sub	sp, #36	; 0x24
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002546:	2300      	movs	r3, #0
 8002548:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800254a:	2300      	movs	r3, #0
 800254c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800254e:	2300      	movs	r3, #0
 8002550:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002552:	2300      	movs	r3, #0
 8002554:	61fb      	str	r3, [r7, #28]
 8002556:	e16b      	b.n	8002830 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002558:	2201      	movs	r2, #1
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	fa02 f303 	lsl.w	r3, r2, r3
 8002560:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	697a      	ldr	r2, [r7, #20]
 8002568:	4013      	ands	r3, r2
 800256a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800256c:	693a      	ldr	r2, [r7, #16]
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	429a      	cmp	r2, r3
 8002572:	f040 815a 	bne.w	800282a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	f003 0303 	and.w	r3, r3, #3
 800257e:	2b01      	cmp	r3, #1
 8002580:	d005      	beq.n	800258e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800258a:	2b02      	cmp	r3, #2
 800258c:	d130      	bne.n	80025f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	005b      	lsls	r3, r3, #1
 8002598:	2203      	movs	r2, #3
 800259a:	fa02 f303 	lsl.w	r3, r2, r3
 800259e:	43db      	mvns	r3, r3
 80025a0:	69ba      	ldr	r2, [r7, #24]
 80025a2:	4013      	ands	r3, r2
 80025a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	68da      	ldr	r2, [r3, #12]
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	005b      	lsls	r3, r3, #1
 80025ae:	fa02 f303 	lsl.w	r3, r2, r3
 80025b2:	69ba      	ldr	r2, [r7, #24]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	69ba      	ldr	r2, [r7, #24]
 80025bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025c4:	2201      	movs	r2, #1
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	fa02 f303 	lsl.w	r3, r2, r3
 80025cc:	43db      	mvns	r3, r3
 80025ce:	69ba      	ldr	r2, [r7, #24]
 80025d0:	4013      	ands	r3, r2
 80025d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	091b      	lsrs	r3, r3, #4
 80025da:	f003 0201 	and.w	r2, r3, #1
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	fa02 f303 	lsl.w	r3, r2, r3
 80025e4:	69ba      	ldr	r2, [r7, #24]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	69ba      	ldr	r2, [r7, #24]
 80025ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f003 0303 	and.w	r3, r3, #3
 80025f8:	2b03      	cmp	r3, #3
 80025fa:	d017      	beq.n	800262c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	005b      	lsls	r3, r3, #1
 8002606:	2203      	movs	r2, #3
 8002608:	fa02 f303 	lsl.w	r3, r2, r3
 800260c:	43db      	mvns	r3, r3
 800260e:	69ba      	ldr	r2, [r7, #24]
 8002610:	4013      	ands	r3, r2
 8002612:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	689a      	ldr	r2, [r3, #8]
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	005b      	lsls	r3, r3, #1
 800261c:	fa02 f303 	lsl.w	r3, r2, r3
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	4313      	orrs	r3, r2
 8002624:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	69ba      	ldr	r2, [r7, #24]
 800262a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f003 0303 	and.w	r3, r3, #3
 8002634:	2b02      	cmp	r3, #2
 8002636:	d123      	bne.n	8002680 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	08da      	lsrs	r2, r3, #3
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	3208      	adds	r2, #8
 8002640:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002644:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	f003 0307 	and.w	r3, r3, #7
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	220f      	movs	r2, #15
 8002650:	fa02 f303 	lsl.w	r3, r2, r3
 8002654:	43db      	mvns	r3, r3
 8002656:	69ba      	ldr	r2, [r7, #24]
 8002658:	4013      	ands	r3, r2
 800265a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	691a      	ldr	r2, [r3, #16]
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	f003 0307 	and.w	r3, r3, #7
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	fa02 f303 	lsl.w	r3, r2, r3
 800266c:	69ba      	ldr	r2, [r7, #24]
 800266e:	4313      	orrs	r3, r2
 8002670:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	08da      	lsrs	r2, r3, #3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	3208      	adds	r2, #8
 800267a:	69b9      	ldr	r1, [r7, #24]
 800267c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	005b      	lsls	r3, r3, #1
 800268a:	2203      	movs	r2, #3
 800268c:	fa02 f303 	lsl.w	r3, r2, r3
 8002690:	43db      	mvns	r3, r3
 8002692:	69ba      	ldr	r2, [r7, #24]
 8002694:	4013      	ands	r3, r2
 8002696:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f003 0203 	and.w	r2, r3, #3
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	005b      	lsls	r3, r3, #1
 80026a4:	fa02 f303 	lsl.w	r3, r2, r3
 80026a8:	69ba      	ldr	r2, [r7, #24]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	69ba      	ldr	r2, [r7, #24]
 80026b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	f000 80b4 	beq.w	800282a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026c2:	2300      	movs	r3, #0
 80026c4:	60fb      	str	r3, [r7, #12]
 80026c6:	4b60      	ldr	r3, [pc, #384]	; (8002848 <HAL_GPIO_Init+0x30c>)
 80026c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ca:	4a5f      	ldr	r2, [pc, #380]	; (8002848 <HAL_GPIO_Init+0x30c>)
 80026cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026d0:	6453      	str	r3, [r2, #68]	; 0x44
 80026d2:	4b5d      	ldr	r3, [pc, #372]	; (8002848 <HAL_GPIO_Init+0x30c>)
 80026d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026da:	60fb      	str	r3, [r7, #12]
 80026dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026de:	4a5b      	ldr	r2, [pc, #364]	; (800284c <HAL_GPIO_Init+0x310>)
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	089b      	lsrs	r3, r3, #2
 80026e4:	3302      	adds	r3, #2
 80026e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	f003 0303 	and.w	r3, r3, #3
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	220f      	movs	r2, #15
 80026f6:	fa02 f303 	lsl.w	r3, r2, r3
 80026fa:	43db      	mvns	r3, r3
 80026fc:	69ba      	ldr	r2, [r7, #24]
 80026fe:	4013      	ands	r3, r2
 8002700:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4a52      	ldr	r2, [pc, #328]	; (8002850 <HAL_GPIO_Init+0x314>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d02b      	beq.n	8002762 <HAL_GPIO_Init+0x226>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4a51      	ldr	r2, [pc, #324]	; (8002854 <HAL_GPIO_Init+0x318>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d025      	beq.n	800275e <HAL_GPIO_Init+0x222>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4a50      	ldr	r2, [pc, #320]	; (8002858 <HAL_GPIO_Init+0x31c>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d01f      	beq.n	800275a <HAL_GPIO_Init+0x21e>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4a4f      	ldr	r2, [pc, #316]	; (800285c <HAL_GPIO_Init+0x320>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d019      	beq.n	8002756 <HAL_GPIO_Init+0x21a>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4a4e      	ldr	r2, [pc, #312]	; (8002860 <HAL_GPIO_Init+0x324>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d013      	beq.n	8002752 <HAL_GPIO_Init+0x216>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4a4d      	ldr	r2, [pc, #308]	; (8002864 <HAL_GPIO_Init+0x328>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d00d      	beq.n	800274e <HAL_GPIO_Init+0x212>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4a4c      	ldr	r2, [pc, #304]	; (8002868 <HAL_GPIO_Init+0x32c>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d007      	beq.n	800274a <HAL_GPIO_Init+0x20e>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a4b      	ldr	r2, [pc, #300]	; (800286c <HAL_GPIO_Init+0x330>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d101      	bne.n	8002746 <HAL_GPIO_Init+0x20a>
 8002742:	2307      	movs	r3, #7
 8002744:	e00e      	b.n	8002764 <HAL_GPIO_Init+0x228>
 8002746:	2308      	movs	r3, #8
 8002748:	e00c      	b.n	8002764 <HAL_GPIO_Init+0x228>
 800274a:	2306      	movs	r3, #6
 800274c:	e00a      	b.n	8002764 <HAL_GPIO_Init+0x228>
 800274e:	2305      	movs	r3, #5
 8002750:	e008      	b.n	8002764 <HAL_GPIO_Init+0x228>
 8002752:	2304      	movs	r3, #4
 8002754:	e006      	b.n	8002764 <HAL_GPIO_Init+0x228>
 8002756:	2303      	movs	r3, #3
 8002758:	e004      	b.n	8002764 <HAL_GPIO_Init+0x228>
 800275a:	2302      	movs	r3, #2
 800275c:	e002      	b.n	8002764 <HAL_GPIO_Init+0x228>
 800275e:	2301      	movs	r3, #1
 8002760:	e000      	b.n	8002764 <HAL_GPIO_Init+0x228>
 8002762:	2300      	movs	r3, #0
 8002764:	69fa      	ldr	r2, [r7, #28]
 8002766:	f002 0203 	and.w	r2, r2, #3
 800276a:	0092      	lsls	r2, r2, #2
 800276c:	4093      	lsls	r3, r2
 800276e:	69ba      	ldr	r2, [r7, #24]
 8002770:	4313      	orrs	r3, r2
 8002772:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002774:	4935      	ldr	r1, [pc, #212]	; (800284c <HAL_GPIO_Init+0x310>)
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	089b      	lsrs	r3, r3, #2
 800277a:	3302      	adds	r3, #2
 800277c:	69ba      	ldr	r2, [r7, #24]
 800277e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002782:	4b3b      	ldr	r3, [pc, #236]	; (8002870 <HAL_GPIO_Init+0x334>)
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	43db      	mvns	r3, r3
 800278c:	69ba      	ldr	r2, [r7, #24]
 800278e:	4013      	ands	r3, r2
 8002790:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d003      	beq.n	80027a6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800279e:	69ba      	ldr	r2, [r7, #24]
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	4313      	orrs	r3, r2
 80027a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027a6:	4a32      	ldr	r2, [pc, #200]	; (8002870 <HAL_GPIO_Init+0x334>)
 80027a8:	69bb      	ldr	r3, [r7, #24]
 80027aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027ac:	4b30      	ldr	r3, [pc, #192]	; (8002870 <HAL_GPIO_Init+0x334>)
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	43db      	mvns	r3, r3
 80027b6:	69ba      	ldr	r2, [r7, #24]
 80027b8:	4013      	ands	r3, r2
 80027ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d003      	beq.n	80027d0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80027c8:	69ba      	ldr	r2, [r7, #24]
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	4313      	orrs	r3, r2
 80027ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027d0:	4a27      	ldr	r2, [pc, #156]	; (8002870 <HAL_GPIO_Init+0x334>)
 80027d2:	69bb      	ldr	r3, [r7, #24]
 80027d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80027d6:	4b26      	ldr	r3, [pc, #152]	; (8002870 <HAL_GPIO_Init+0x334>)
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	43db      	mvns	r3, r3
 80027e0:	69ba      	ldr	r2, [r7, #24]
 80027e2:	4013      	ands	r3, r2
 80027e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d003      	beq.n	80027fa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80027f2:	69ba      	ldr	r2, [r7, #24]
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	4313      	orrs	r3, r2
 80027f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027fa:	4a1d      	ldr	r2, [pc, #116]	; (8002870 <HAL_GPIO_Init+0x334>)
 80027fc:	69bb      	ldr	r3, [r7, #24]
 80027fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002800:	4b1b      	ldr	r3, [pc, #108]	; (8002870 <HAL_GPIO_Init+0x334>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	43db      	mvns	r3, r3
 800280a:	69ba      	ldr	r2, [r7, #24]
 800280c:	4013      	ands	r3, r2
 800280e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002818:	2b00      	cmp	r3, #0
 800281a:	d003      	beq.n	8002824 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800281c:	69ba      	ldr	r2, [r7, #24]
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	4313      	orrs	r3, r2
 8002822:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002824:	4a12      	ldr	r2, [pc, #72]	; (8002870 <HAL_GPIO_Init+0x334>)
 8002826:	69bb      	ldr	r3, [r7, #24]
 8002828:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	3301      	adds	r3, #1
 800282e:	61fb      	str	r3, [r7, #28]
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	2b0f      	cmp	r3, #15
 8002834:	f67f ae90 	bls.w	8002558 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002838:	bf00      	nop
 800283a:	bf00      	nop
 800283c:	3724      	adds	r7, #36	; 0x24
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
 8002846:	bf00      	nop
 8002848:	40023800 	.word	0x40023800
 800284c:	40013800 	.word	0x40013800
 8002850:	40020000 	.word	0x40020000
 8002854:	40020400 	.word	0x40020400
 8002858:	40020800 	.word	0x40020800
 800285c:	40020c00 	.word	0x40020c00
 8002860:	40021000 	.word	0x40021000
 8002864:	40021400 	.word	0x40021400
 8002868:	40021800 	.word	0x40021800
 800286c:	40021c00 	.word	0x40021c00
 8002870:	40013c00 	.word	0x40013c00

08002874 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	460b      	mov	r3, r1
 800287e:	807b      	strh	r3, [r7, #2]
 8002880:	4613      	mov	r3, r2
 8002882:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002884:	787b      	ldrb	r3, [r7, #1]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d003      	beq.n	8002892 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800288a:	887a      	ldrh	r2, [r7, #2]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002890:	e003      	b.n	800289a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002892:	887b      	ldrh	r3, [r7, #2]
 8002894:	041a      	lsls	r2, r3, #16
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	619a      	str	r2, [r3, #24]
}
 800289a:	bf00      	nop
 800289c:	370c      	adds	r7, #12
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr
	...

080028a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b086      	sub	sp, #24
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d101      	bne.n	80028ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e267      	b.n	8002d8a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 0301 	and.w	r3, r3, #1
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d075      	beq.n	80029b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80028c6:	4b88      	ldr	r3, [pc, #544]	; (8002ae8 <HAL_RCC_OscConfig+0x240>)
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	f003 030c 	and.w	r3, r3, #12
 80028ce:	2b04      	cmp	r3, #4
 80028d0:	d00c      	beq.n	80028ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028d2:	4b85      	ldr	r3, [pc, #532]	; (8002ae8 <HAL_RCC_OscConfig+0x240>)
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80028da:	2b08      	cmp	r3, #8
 80028dc:	d112      	bne.n	8002904 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028de:	4b82      	ldr	r3, [pc, #520]	; (8002ae8 <HAL_RCC_OscConfig+0x240>)
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028ea:	d10b      	bne.n	8002904 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028ec:	4b7e      	ldr	r3, [pc, #504]	; (8002ae8 <HAL_RCC_OscConfig+0x240>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d05b      	beq.n	80029b0 <HAL_RCC_OscConfig+0x108>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d157      	bne.n	80029b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e242      	b.n	8002d8a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800290c:	d106      	bne.n	800291c <HAL_RCC_OscConfig+0x74>
 800290e:	4b76      	ldr	r3, [pc, #472]	; (8002ae8 <HAL_RCC_OscConfig+0x240>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a75      	ldr	r2, [pc, #468]	; (8002ae8 <HAL_RCC_OscConfig+0x240>)
 8002914:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002918:	6013      	str	r3, [r2, #0]
 800291a:	e01d      	b.n	8002958 <HAL_RCC_OscConfig+0xb0>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002924:	d10c      	bne.n	8002940 <HAL_RCC_OscConfig+0x98>
 8002926:	4b70      	ldr	r3, [pc, #448]	; (8002ae8 <HAL_RCC_OscConfig+0x240>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a6f      	ldr	r2, [pc, #444]	; (8002ae8 <HAL_RCC_OscConfig+0x240>)
 800292c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002930:	6013      	str	r3, [r2, #0]
 8002932:	4b6d      	ldr	r3, [pc, #436]	; (8002ae8 <HAL_RCC_OscConfig+0x240>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a6c      	ldr	r2, [pc, #432]	; (8002ae8 <HAL_RCC_OscConfig+0x240>)
 8002938:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800293c:	6013      	str	r3, [r2, #0]
 800293e:	e00b      	b.n	8002958 <HAL_RCC_OscConfig+0xb0>
 8002940:	4b69      	ldr	r3, [pc, #420]	; (8002ae8 <HAL_RCC_OscConfig+0x240>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a68      	ldr	r2, [pc, #416]	; (8002ae8 <HAL_RCC_OscConfig+0x240>)
 8002946:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800294a:	6013      	str	r3, [r2, #0]
 800294c:	4b66      	ldr	r3, [pc, #408]	; (8002ae8 <HAL_RCC_OscConfig+0x240>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a65      	ldr	r2, [pc, #404]	; (8002ae8 <HAL_RCC_OscConfig+0x240>)
 8002952:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002956:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d013      	beq.n	8002988 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002960:	f7ff f934 	bl	8001bcc <HAL_GetTick>
 8002964:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002966:	e008      	b.n	800297a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002968:	f7ff f930 	bl	8001bcc <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	2b64      	cmp	r3, #100	; 0x64
 8002974:	d901      	bls.n	800297a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e207      	b.n	8002d8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800297a:	4b5b      	ldr	r3, [pc, #364]	; (8002ae8 <HAL_RCC_OscConfig+0x240>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d0f0      	beq.n	8002968 <HAL_RCC_OscConfig+0xc0>
 8002986:	e014      	b.n	80029b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002988:	f7ff f920 	bl	8001bcc <HAL_GetTick>
 800298c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800298e:	e008      	b.n	80029a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002990:	f7ff f91c 	bl	8001bcc <HAL_GetTick>
 8002994:	4602      	mov	r2, r0
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	2b64      	cmp	r3, #100	; 0x64
 800299c:	d901      	bls.n	80029a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800299e:	2303      	movs	r3, #3
 80029a0:	e1f3      	b.n	8002d8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029a2:	4b51      	ldr	r3, [pc, #324]	; (8002ae8 <HAL_RCC_OscConfig+0x240>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d1f0      	bne.n	8002990 <HAL_RCC_OscConfig+0xe8>
 80029ae:	e000      	b.n	80029b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0302 	and.w	r3, r3, #2
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d063      	beq.n	8002a86 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80029be:	4b4a      	ldr	r3, [pc, #296]	; (8002ae8 <HAL_RCC_OscConfig+0x240>)
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	f003 030c 	and.w	r3, r3, #12
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d00b      	beq.n	80029e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029ca:	4b47      	ldr	r3, [pc, #284]	; (8002ae8 <HAL_RCC_OscConfig+0x240>)
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80029d2:	2b08      	cmp	r3, #8
 80029d4:	d11c      	bne.n	8002a10 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029d6:	4b44      	ldr	r3, [pc, #272]	; (8002ae8 <HAL_RCC_OscConfig+0x240>)
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d116      	bne.n	8002a10 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029e2:	4b41      	ldr	r3, [pc, #260]	; (8002ae8 <HAL_RCC_OscConfig+0x240>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0302 	and.w	r3, r3, #2
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d005      	beq.n	80029fa <HAL_RCC_OscConfig+0x152>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	68db      	ldr	r3, [r3, #12]
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d001      	beq.n	80029fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e1c7      	b.n	8002d8a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029fa:	4b3b      	ldr	r3, [pc, #236]	; (8002ae8 <HAL_RCC_OscConfig+0x240>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	691b      	ldr	r3, [r3, #16]
 8002a06:	00db      	lsls	r3, r3, #3
 8002a08:	4937      	ldr	r1, [pc, #220]	; (8002ae8 <HAL_RCC_OscConfig+0x240>)
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a0e:	e03a      	b.n	8002a86 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d020      	beq.n	8002a5a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a18:	4b34      	ldr	r3, [pc, #208]	; (8002aec <HAL_RCC_OscConfig+0x244>)
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a1e:	f7ff f8d5 	bl	8001bcc <HAL_GetTick>
 8002a22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a24:	e008      	b.n	8002a38 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a26:	f7ff f8d1 	bl	8001bcc <HAL_GetTick>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	1ad3      	subs	r3, r2, r3
 8002a30:	2b02      	cmp	r3, #2
 8002a32:	d901      	bls.n	8002a38 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002a34:	2303      	movs	r3, #3
 8002a36:	e1a8      	b.n	8002d8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a38:	4b2b      	ldr	r3, [pc, #172]	; (8002ae8 <HAL_RCC_OscConfig+0x240>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 0302 	and.w	r3, r3, #2
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d0f0      	beq.n	8002a26 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a44:	4b28      	ldr	r3, [pc, #160]	; (8002ae8 <HAL_RCC_OscConfig+0x240>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	691b      	ldr	r3, [r3, #16]
 8002a50:	00db      	lsls	r3, r3, #3
 8002a52:	4925      	ldr	r1, [pc, #148]	; (8002ae8 <HAL_RCC_OscConfig+0x240>)
 8002a54:	4313      	orrs	r3, r2
 8002a56:	600b      	str	r3, [r1, #0]
 8002a58:	e015      	b.n	8002a86 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a5a:	4b24      	ldr	r3, [pc, #144]	; (8002aec <HAL_RCC_OscConfig+0x244>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a60:	f7ff f8b4 	bl	8001bcc <HAL_GetTick>
 8002a64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a66:	e008      	b.n	8002a7a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a68:	f7ff f8b0 	bl	8001bcc <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d901      	bls.n	8002a7a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	e187      	b.n	8002d8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a7a:	4b1b      	ldr	r3, [pc, #108]	; (8002ae8 <HAL_RCC_OscConfig+0x240>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0302 	and.w	r3, r3, #2
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d1f0      	bne.n	8002a68 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0308 	and.w	r3, r3, #8
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d036      	beq.n	8002b00 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	695b      	ldr	r3, [r3, #20]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d016      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a9a:	4b15      	ldr	r3, [pc, #84]	; (8002af0 <HAL_RCC_OscConfig+0x248>)
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aa0:	f7ff f894 	bl	8001bcc <HAL_GetTick>
 8002aa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002aa6:	e008      	b.n	8002aba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002aa8:	f7ff f890 	bl	8001bcc <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d901      	bls.n	8002aba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e167      	b.n	8002d8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002aba:	4b0b      	ldr	r3, [pc, #44]	; (8002ae8 <HAL_RCC_OscConfig+0x240>)
 8002abc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002abe:	f003 0302 	and.w	r3, r3, #2
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d0f0      	beq.n	8002aa8 <HAL_RCC_OscConfig+0x200>
 8002ac6:	e01b      	b.n	8002b00 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ac8:	4b09      	ldr	r3, [pc, #36]	; (8002af0 <HAL_RCC_OscConfig+0x248>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ace:	f7ff f87d 	bl	8001bcc <HAL_GetTick>
 8002ad2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ad4:	e00e      	b.n	8002af4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ad6:	f7ff f879 	bl	8001bcc <HAL_GetTick>
 8002ada:	4602      	mov	r2, r0
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	1ad3      	subs	r3, r2, r3
 8002ae0:	2b02      	cmp	r3, #2
 8002ae2:	d907      	bls.n	8002af4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ae4:	2303      	movs	r3, #3
 8002ae6:	e150      	b.n	8002d8a <HAL_RCC_OscConfig+0x4e2>
 8002ae8:	40023800 	.word	0x40023800
 8002aec:	42470000 	.word	0x42470000
 8002af0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002af4:	4b88      	ldr	r3, [pc, #544]	; (8002d18 <HAL_RCC_OscConfig+0x470>)
 8002af6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002af8:	f003 0302 	and.w	r3, r3, #2
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d1ea      	bne.n	8002ad6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 0304 	and.w	r3, r3, #4
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	f000 8097 	beq.w	8002c3c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b12:	4b81      	ldr	r3, [pc, #516]	; (8002d18 <HAL_RCC_OscConfig+0x470>)
 8002b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d10f      	bne.n	8002b3e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b1e:	2300      	movs	r3, #0
 8002b20:	60bb      	str	r3, [r7, #8]
 8002b22:	4b7d      	ldr	r3, [pc, #500]	; (8002d18 <HAL_RCC_OscConfig+0x470>)
 8002b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b26:	4a7c      	ldr	r2, [pc, #496]	; (8002d18 <HAL_RCC_OscConfig+0x470>)
 8002b28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b2c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b2e:	4b7a      	ldr	r3, [pc, #488]	; (8002d18 <HAL_RCC_OscConfig+0x470>)
 8002b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b36:	60bb      	str	r3, [r7, #8]
 8002b38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b3e:	4b77      	ldr	r3, [pc, #476]	; (8002d1c <HAL_RCC_OscConfig+0x474>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d118      	bne.n	8002b7c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b4a:	4b74      	ldr	r3, [pc, #464]	; (8002d1c <HAL_RCC_OscConfig+0x474>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a73      	ldr	r2, [pc, #460]	; (8002d1c <HAL_RCC_OscConfig+0x474>)
 8002b50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b56:	f7ff f839 	bl	8001bcc <HAL_GetTick>
 8002b5a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b5c:	e008      	b.n	8002b70 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b5e:	f7ff f835 	bl	8001bcc <HAL_GetTick>
 8002b62:	4602      	mov	r2, r0
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	1ad3      	subs	r3, r2, r3
 8002b68:	2b02      	cmp	r3, #2
 8002b6a:	d901      	bls.n	8002b70 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002b6c:	2303      	movs	r3, #3
 8002b6e:	e10c      	b.n	8002d8a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b70:	4b6a      	ldr	r3, [pc, #424]	; (8002d1c <HAL_RCC_OscConfig+0x474>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d0f0      	beq.n	8002b5e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d106      	bne.n	8002b92 <HAL_RCC_OscConfig+0x2ea>
 8002b84:	4b64      	ldr	r3, [pc, #400]	; (8002d18 <HAL_RCC_OscConfig+0x470>)
 8002b86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b88:	4a63      	ldr	r2, [pc, #396]	; (8002d18 <HAL_RCC_OscConfig+0x470>)
 8002b8a:	f043 0301 	orr.w	r3, r3, #1
 8002b8e:	6713      	str	r3, [r2, #112]	; 0x70
 8002b90:	e01c      	b.n	8002bcc <HAL_RCC_OscConfig+0x324>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	2b05      	cmp	r3, #5
 8002b98:	d10c      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x30c>
 8002b9a:	4b5f      	ldr	r3, [pc, #380]	; (8002d18 <HAL_RCC_OscConfig+0x470>)
 8002b9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b9e:	4a5e      	ldr	r2, [pc, #376]	; (8002d18 <HAL_RCC_OscConfig+0x470>)
 8002ba0:	f043 0304 	orr.w	r3, r3, #4
 8002ba4:	6713      	str	r3, [r2, #112]	; 0x70
 8002ba6:	4b5c      	ldr	r3, [pc, #368]	; (8002d18 <HAL_RCC_OscConfig+0x470>)
 8002ba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002baa:	4a5b      	ldr	r2, [pc, #364]	; (8002d18 <HAL_RCC_OscConfig+0x470>)
 8002bac:	f043 0301 	orr.w	r3, r3, #1
 8002bb0:	6713      	str	r3, [r2, #112]	; 0x70
 8002bb2:	e00b      	b.n	8002bcc <HAL_RCC_OscConfig+0x324>
 8002bb4:	4b58      	ldr	r3, [pc, #352]	; (8002d18 <HAL_RCC_OscConfig+0x470>)
 8002bb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bb8:	4a57      	ldr	r2, [pc, #348]	; (8002d18 <HAL_RCC_OscConfig+0x470>)
 8002bba:	f023 0301 	bic.w	r3, r3, #1
 8002bbe:	6713      	str	r3, [r2, #112]	; 0x70
 8002bc0:	4b55      	ldr	r3, [pc, #340]	; (8002d18 <HAL_RCC_OscConfig+0x470>)
 8002bc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bc4:	4a54      	ldr	r2, [pc, #336]	; (8002d18 <HAL_RCC_OscConfig+0x470>)
 8002bc6:	f023 0304 	bic.w	r3, r3, #4
 8002bca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d015      	beq.n	8002c00 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bd4:	f7fe fffa 	bl	8001bcc <HAL_GetTick>
 8002bd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bda:	e00a      	b.n	8002bf2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bdc:	f7fe fff6 	bl	8001bcc <HAL_GetTick>
 8002be0:	4602      	mov	r2, r0
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d901      	bls.n	8002bf2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	e0cb      	b.n	8002d8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bf2:	4b49      	ldr	r3, [pc, #292]	; (8002d18 <HAL_RCC_OscConfig+0x470>)
 8002bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bf6:	f003 0302 	and.w	r3, r3, #2
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d0ee      	beq.n	8002bdc <HAL_RCC_OscConfig+0x334>
 8002bfe:	e014      	b.n	8002c2a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c00:	f7fe ffe4 	bl	8001bcc <HAL_GetTick>
 8002c04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c06:	e00a      	b.n	8002c1e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c08:	f7fe ffe0 	bl	8001bcc <HAL_GetTick>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d901      	bls.n	8002c1e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e0b5      	b.n	8002d8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c1e:	4b3e      	ldr	r3, [pc, #248]	; (8002d18 <HAL_RCC_OscConfig+0x470>)
 8002c20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c22:	f003 0302 	and.w	r3, r3, #2
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d1ee      	bne.n	8002c08 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c2a:	7dfb      	ldrb	r3, [r7, #23]
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d105      	bne.n	8002c3c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c30:	4b39      	ldr	r3, [pc, #228]	; (8002d18 <HAL_RCC_OscConfig+0x470>)
 8002c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c34:	4a38      	ldr	r2, [pc, #224]	; (8002d18 <HAL_RCC_OscConfig+0x470>)
 8002c36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c3a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	699b      	ldr	r3, [r3, #24]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	f000 80a1 	beq.w	8002d88 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c46:	4b34      	ldr	r3, [pc, #208]	; (8002d18 <HAL_RCC_OscConfig+0x470>)
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	f003 030c 	and.w	r3, r3, #12
 8002c4e:	2b08      	cmp	r3, #8
 8002c50:	d05c      	beq.n	8002d0c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	699b      	ldr	r3, [r3, #24]
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	d141      	bne.n	8002cde <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c5a:	4b31      	ldr	r3, [pc, #196]	; (8002d20 <HAL_RCC_OscConfig+0x478>)
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c60:	f7fe ffb4 	bl	8001bcc <HAL_GetTick>
 8002c64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c66:	e008      	b.n	8002c7a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c68:	f7fe ffb0 	bl	8001bcc <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d901      	bls.n	8002c7a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	e087      	b.n	8002d8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c7a:	4b27      	ldr	r3, [pc, #156]	; (8002d18 <HAL_RCC_OscConfig+0x470>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d1f0      	bne.n	8002c68 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	69da      	ldr	r2, [r3, #28]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6a1b      	ldr	r3, [r3, #32]
 8002c8e:	431a      	orrs	r2, r3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c94:	019b      	lsls	r3, r3, #6
 8002c96:	431a      	orrs	r2, r3
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c9c:	085b      	lsrs	r3, r3, #1
 8002c9e:	3b01      	subs	r3, #1
 8002ca0:	041b      	lsls	r3, r3, #16
 8002ca2:	431a      	orrs	r2, r3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca8:	061b      	lsls	r3, r3, #24
 8002caa:	491b      	ldr	r1, [pc, #108]	; (8002d18 <HAL_RCC_OscConfig+0x470>)
 8002cac:	4313      	orrs	r3, r2
 8002cae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cb0:	4b1b      	ldr	r3, [pc, #108]	; (8002d20 <HAL_RCC_OscConfig+0x478>)
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cb6:	f7fe ff89 	bl	8001bcc <HAL_GetTick>
 8002cba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cbc:	e008      	b.n	8002cd0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cbe:	f7fe ff85 	bl	8001bcc <HAL_GetTick>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	2b02      	cmp	r3, #2
 8002cca:	d901      	bls.n	8002cd0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002ccc:	2303      	movs	r3, #3
 8002cce:	e05c      	b.n	8002d8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cd0:	4b11      	ldr	r3, [pc, #68]	; (8002d18 <HAL_RCC_OscConfig+0x470>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d0f0      	beq.n	8002cbe <HAL_RCC_OscConfig+0x416>
 8002cdc:	e054      	b.n	8002d88 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cde:	4b10      	ldr	r3, [pc, #64]	; (8002d20 <HAL_RCC_OscConfig+0x478>)
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ce4:	f7fe ff72 	bl	8001bcc <HAL_GetTick>
 8002ce8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cea:	e008      	b.n	8002cfe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cec:	f7fe ff6e 	bl	8001bcc <HAL_GetTick>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	d901      	bls.n	8002cfe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	e045      	b.n	8002d8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cfe:	4b06      	ldr	r3, [pc, #24]	; (8002d18 <HAL_RCC_OscConfig+0x470>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d1f0      	bne.n	8002cec <HAL_RCC_OscConfig+0x444>
 8002d0a:	e03d      	b.n	8002d88 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	699b      	ldr	r3, [r3, #24]
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d107      	bne.n	8002d24 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e038      	b.n	8002d8a <HAL_RCC_OscConfig+0x4e2>
 8002d18:	40023800 	.word	0x40023800
 8002d1c:	40007000 	.word	0x40007000
 8002d20:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d24:	4b1b      	ldr	r3, [pc, #108]	; (8002d94 <HAL_RCC_OscConfig+0x4ec>)
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	699b      	ldr	r3, [r3, #24]
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d028      	beq.n	8002d84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d121      	bne.n	8002d84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d11a      	bne.n	8002d84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d4e:	68fa      	ldr	r2, [r7, #12]
 8002d50:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d54:	4013      	ands	r3, r2
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d5a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d111      	bne.n	8002d84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d6a:	085b      	lsrs	r3, r3, #1
 8002d6c:	3b01      	subs	r3, #1
 8002d6e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d107      	bne.n	8002d84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d7e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d001      	beq.n	8002d88 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	e000      	b.n	8002d8a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002d88:	2300      	movs	r3, #0
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3718      	adds	r7, #24
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	40023800 	.word	0x40023800

08002d98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b084      	sub	sp, #16
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
 8002da0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d101      	bne.n	8002dac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	e0cc      	b.n	8002f46 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002dac:	4b68      	ldr	r3, [pc, #416]	; (8002f50 <HAL_RCC_ClockConfig+0x1b8>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0307 	and.w	r3, r3, #7
 8002db4:	683a      	ldr	r2, [r7, #0]
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d90c      	bls.n	8002dd4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dba:	4b65      	ldr	r3, [pc, #404]	; (8002f50 <HAL_RCC_ClockConfig+0x1b8>)
 8002dbc:	683a      	ldr	r2, [r7, #0]
 8002dbe:	b2d2      	uxtb	r2, r2
 8002dc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dc2:	4b63      	ldr	r3, [pc, #396]	; (8002f50 <HAL_RCC_ClockConfig+0x1b8>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 0307 	and.w	r3, r3, #7
 8002dca:	683a      	ldr	r2, [r7, #0]
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d001      	beq.n	8002dd4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e0b8      	b.n	8002f46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 0302 	and.w	r3, r3, #2
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d020      	beq.n	8002e22 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0304 	and.w	r3, r3, #4
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d005      	beq.n	8002df8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002dec:	4b59      	ldr	r3, [pc, #356]	; (8002f54 <HAL_RCC_ClockConfig+0x1bc>)
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	4a58      	ldr	r2, [pc, #352]	; (8002f54 <HAL_RCC_ClockConfig+0x1bc>)
 8002df2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002df6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0308 	and.w	r3, r3, #8
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d005      	beq.n	8002e10 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e04:	4b53      	ldr	r3, [pc, #332]	; (8002f54 <HAL_RCC_ClockConfig+0x1bc>)
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	4a52      	ldr	r2, [pc, #328]	; (8002f54 <HAL_RCC_ClockConfig+0x1bc>)
 8002e0a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002e0e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e10:	4b50      	ldr	r3, [pc, #320]	; (8002f54 <HAL_RCC_ClockConfig+0x1bc>)
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	494d      	ldr	r1, [pc, #308]	; (8002f54 <HAL_RCC_ClockConfig+0x1bc>)
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0301 	and.w	r3, r3, #1
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d044      	beq.n	8002eb8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d107      	bne.n	8002e46 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e36:	4b47      	ldr	r3, [pc, #284]	; (8002f54 <HAL_RCC_ClockConfig+0x1bc>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d119      	bne.n	8002e76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e07f      	b.n	8002f46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	2b02      	cmp	r3, #2
 8002e4c:	d003      	beq.n	8002e56 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e52:	2b03      	cmp	r3, #3
 8002e54:	d107      	bne.n	8002e66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e56:	4b3f      	ldr	r3, [pc, #252]	; (8002f54 <HAL_RCC_ClockConfig+0x1bc>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d109      	bne.n	8002e76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e06f      	b.n	8002f46 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e66:	4b3b      	ldr	r3, [pc, #236]	; (8002f54 <HAL_RCC_ClockConfig+0x1bc>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0302 	and.w	r3, r3, #2
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d101      	bne.n	8002e76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e067      	b.n	8002f46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e76:	4b37      	ldr	r3, [pc, #220]	; (8002f54 <HAL_RCC_ClockConfig+0x1bc>)
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	f023 0203 	bic.w	r2, r3, #3
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	4934      	ldr	r1, [pc, #208]	; (8002f54 <HAL_RCC_ClockConfig+0x1bc>)
 8002e84:	4313      	orrs	r3, r2
 8002e86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e88:	f7fe fea0 	bl	8001bcc <HAL_GetTick>
 8002e8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e8e:	e00a      	b.n	8002ea6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e90:	f7fe fe9c 	bl	8001bcc <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d901      	bls.n	8002ea6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e04f      	b.n	8002f46 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ea6:	4b2b      	ldr	r3, [pc, #172]	; (8002f54 <HAL_RCC_ClockConfig+0x1bc>)
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	f003 020c 	and.w	r2, r3, #12
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d1eb      	bne.n	8002e90 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002eb8:	4b25      	ldr	r3, [pc, #148]	; (8002f50 <HAL_RCC_ClockConfig+0x1b8>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0307 	and.w	r3, r3, #7
 8002ec0:	683a      	ldr	r2, [r7, #0]
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d20c      	bcs.n	8002ee0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ec6:	4b22      	ldr	r3, [pc, #136]	; (8002f50 <HAL_RCC_ClockConfig+0x1b8>)
 8002ec8:	683a      	ldr	r2, [r7, #0]
 8002eca:	b2d2      	uxtb	r2, r2
 8002ecc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ece:	4b20      	ldr	r3, [pc, #128]	; (8002f50 <HAL_RCC_ClockConfig+0x1b8>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0307 	and.w	r3, r3, #7
 8002ed6:	683a      	ldr	r2, [r7, #0]
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d001      	beq.n	8002ee0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e032      	b.n	8002f46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0304 	and.w	r3, r3, #4
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d008      	beq.n	8002efe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002eec:	4b19      	ldr	r3, [pc, #100]	; (8002f54 <HAL_RCC_ClockConfig+0x1bc>)
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	4916      	ldr	r1, [pc, #88]	; (8002f54 <HAL_RCC_ClockConfig+0x1bc>)
 8002efa:	4313      	orrs	r3, r2
 8002efc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0308 	and.w	r3, r3, #8
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d009      	beq.n	8002f1e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f0a:	4b12      	ldr	r3, [pc, #72]	; (8002f54 <HAL_RCC_ClockConfig+0x1bc>)
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	691b      	ldr	r3, [r3, #16]
 8002f16:	00db      	lsls	r3, r3, #3
 8002f18:	490e      	ldr	r1, [pc, #56]	; (8002f54 <HAL_RCC_ClockConfig+0x1bc>)
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f1e:	f000 f821 	bl	8002f64 <HAL_RCC_GetSysClockFreq>
 8002f22:	4602      	mov	r2, r0
 8002f24:	4b0b      	ldr	r3, [pc, #44]	; (8002f54 <HAL_RCC_ClockConfig+0x1bc>)
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	091b      	lsrs	r3, r3, #4
 8002f2a:	f003 030f 	and.w	r3, r3, #15
 8002f2e:	490a      	ldr	r1, [pc, #40]	; (8002f58 <HAL_RCC_ClockConfig+0x1c0>)
 8002f30:	5ccb      	ldrb	r3, [r1, r3]
 8002f32:	fa22 f303 	lsr.w	r3, r2, r3
 8002f36:	4a09      	ldr	r2, [pc, #36]	; (8002f5c <HAL_RCC_ClockConfig+0x1c4>)
 8002f38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002f3a:	4b09      	ldr	r3, [pc, #36]	; (8002f60 <HAL_RCC_ClockConfig+0x1c8>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f7fe fe00 	bl	8001b44 <HAL_InitTick>

  return HAL_OK;
 8002f44:	2300      	movs	r3, #0
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3710      	adds	r7, #16
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	40023c00 	.word	0x40023c00
 8002f54:	40023800 	.word	0x40023800
 8002f58:	080076d8 	.word	0x080076d8
 8002f5c:	20000000 	.word	0x20000000
 8002f60:	20000004 	.word	0x20000004

08002f64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f68:	b090      	sub	sp, #64	; 0x40
 8002f6a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	637b      	str	r3, [r7, #52]	; 0x34
 8002f70:	2300      	movs	r3, #0
 8002f72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f74:	2300      	movs	r3, #0
 8002f76:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f7c:	4b59      	ldr	r3, [pc, #356]	; (80030e4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	f003 030c 	and.w	r3, r3, #12
 8002f84:	2b08      	cmp	r3, #8
 8002f86:	d00d      	beq.n	8002fa4 <HAL_RCC_GetSysClockFreq+0x40>
 8002f88:	2b08      	cmp	r3, #8
 8002f8a:	f200 80a1 	bhi.w	80030d0 <HAL_RCC_GetSysClockFreq+0x16c>
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d002      	beq.n	8002f98 <HAL_RCC_GetSysClockFreq+0x34>
 8002f92:	2b04      	cmp	r3, #4
 8002f94:	d003      	beq.n	8002f9e <HAL_RCC_GetSysClockFreq+0x3a>
 8002f96:	e09b      	b.n	80030d0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f98:	4b53      	ldr	r3, [pc, #332]	; (80030e8 <HAL_RCC_GetSysClockFreq+0x184>)
 8002f9a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002f9c:	e09b      	b.n	80030d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f9e:	4b53      	ldr	r3, [pc, #332]	; (80030ec <HAL_RCC_GetSysClockFreq+0x188>)
 8002fa0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002fa2:	e098      	b.n	80030d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002fa4:	4b4f      	ldr	r3, [pc, #316]	; (80030e4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002fac:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002fae:	4b4d      	ldr	r3, [pc, #308]	; (80030e4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d028      	beq.n	800300c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fba:	4b4a      	ldr	r3, [pc, #296]	; (80030e4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	099b      	lsrs	r3, r3, #6
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	623b      	str	r3, [r7, #32]
 8002fc4:	627a      	str	r2, [r7, #36]	; 0x24
 8002fc6:	6a3b      	ldr	r3, [r7, #32]
 8002fc8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002fcc:	2100      	movs	r1, #0
 8002fce:	4b47      	ldr	r3, [pc, #284]	; (80030ec <HAL_RCC_GetSysClockFreq+0x188>)
 8002fd0:	fb03 f201 	mul.w	r2, r3, r1
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	fb00 f303 	mul.w	r3, r0, r3
 8002fda:	4413      	add	r3, r2
 8002fdc:	4a43      	ldr	r2, [pc, #268]	; (80030ec <HAL_RCC_GetSysClockFreq+0x188>)
 8002fde:	fba0 1202 	umull	r1, r2, r0, r2
 8002fe2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002fe4:	460a      	mov	r2, r1
 8002fe6:	62ba      	str	r2, [r7, #40]	; 0x28
 8002fe8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002fea:	4413      	add	r3, r2
 8002fec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	61bb      	str	r3, [r7, #24]
 8002ff4:	61fa      	str	r2, [r7, #28]
 8002ff6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ffa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002ffe:	f7fd fe1b 	bl	8000c38 <__aeabi_uldivmod>
 8003002:	4602      	mov	r2, r0
 8003004:	460b      	mov	r3, r1
 8003006:	4613      	mov	r3, r2
 8003008:	63fb      	str	r3, [r7, #60]	; 0x3c
 800300a:	e053      	b.n	80030b4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800300c:	4b35      	ldr	r3, [pc, #212]	; (80030e4 <HAL_RCC_GetSysClockFreq+0x180>)
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	099b      	lsrs	r3, r3, #6
 8003012:	2200      	movs	r2, #0
 8003014:	613b      	str	r3, [r7, #16]
 8003016:	617a      	str	r2, [r7, #20]
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800301e:	f04f 0b00 	mov.w	fp, #0
 8003022:	4652      	mov	r2, sl
 8003024:	465b      	mov	r3, fp
 8003026:	f04f 0000 	mov.w	r0, #0
 800302a:	f04f 0100 	mov.w	r1, #0
 800302e:	0159      	lsls	r1, r3, #5
 8003030:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003034:	0150      	lsls	r0, r2, #5
 8003036:	4602      	mov	r2, r0
 8003038:	460b      	mov	r3, r1
 800303a:	ebb2 080a 	subs.w	r8, r2, sl
 800303e:	eb63 090b 	sbc.w	r9, r3, fp
 8003042:	f04f 0200 	mov.w	r2, #0
 8003046:	f04f 0300 	mov.w	r3, #0
 800304a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800304e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003052:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003056:	ebb2 0408 	subs.w	r4, r2, r8
 800305a:	eb63 0509 	sbc.w	r5, r3, r9
 800305e:	f04f 0200 	mov.w	r2, #0
 8003062:	f04f 0300 	mov.w	r3, #0
 8003066:	00eb      	lsls	r3, r5, #3
 8003068:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800306c:	00e2      	lsls	r2, r4, #3
 800306e:	4614      	mov	r4, r2
 8003070:	461d      	mov	r5, r3
 8003072:	eb14 030a 	adds.w	r3, r4, sl
 8003076:	603b      	str	r3, [r7, #0]
 8003078:	eb45 030b 	adc.w	r3, r5, fp
 800307c:	607b      	str	r3, [r7, #4]
 800307e:	f04f 0200 	mov.w	r2, #0
 8003082:	f04f 0300 	mov.w	r3, #0
 8003086:	e9d7 4500 	ldrd	r4, r5, [r7]
 800308a:	4629      	mov	r1, r5
 800308c:	028b      	lsls	r3, r1, #10
 800308e:	4621      	mov	r1, r4
 8003090:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003094:	4621      	mov	r1, r4
 8003096:	028a      	lsls	r2, r1, #10
 8003098:	4610      	mov	r0, r2
 800309a:	4619      	mov	r1, r3
 800309c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800309e:	2200      	movs	r2, #0
 80030a0:	60bb      	str	r3, [r7, #8]
 80030a2:	60fa      	str	r2, [r7, #12]
 80030a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80030a8:	f7fd fdc6 	bl	8000c38 <__aeabi_uldivmod>
 80030ac:	4602      	mov	r2, r0
 80030ae:	460b      	mov	r3, r1
 80030b0:	4613      	mov	r3, r2
 80030b2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80030b4:	4b0b      	ldr	r3, [pc, #44]	; (80030e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	0c1b      	lsrs	r3, r3, #16
 80030ba:	f003 0303 	and.w	r3, r3, #3
 80030be:	3301      	adds	r3, #1
 80030c0:	005b      	lsls	r3, r3, #1
 80030c2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80030c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80030c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80030cc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80030ce:	e002      	b.n	80030d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80030d0:	4b05      	ldr	r3, [pc, #20]	; (80030e8 <HAL_RCC_GetSysClockFreq+0x184>)
 80030d2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80030d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80030d8:	4618      	mov	r0, r3
 80030da:	3740      	adds	r7, #64	; 0x40
 80030dc:	46bd      	mov	sp, r7
 80030de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030e2:	bf00      	nop
 80030e4:	40023800 	.word	0x40023800
 80030e8:	00f42400 	.word	0x00f42400
 80030ec:	017d7840 	.word	0x017d7840

080030f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030f0:	b480      	push	{r7}
 80030f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030f4:	4b03      	ldr	r3, [pc, #12]	; (8003104 <HAL_RCC_GetHCLKFreq+0x14>)
 80030f6:	681b      	ldr	r3, [r3, #0]
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr
 8003102:	bf00      	nop
 8003104:	20000000 	.word	0x20000000

08003108 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800310c:	f7ff fff0 	bl	80030f0 <HAL_RCC_GetHCLKFreq>
 8003110:	4602      	mov	r2, r0
 8003112:	4b05      	ldr	r3, [pc, #20]	; (8003128 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	0a9b      	lsrs	r3, r3, #10
 8003118:	f003 0307 	and.w	r3, r3, #7
 800311c:	4903      	ldr	r1, [pc, #12]	; (800312c <HAL_RCC_GetPCLK1Freq+0x24>)
 800311e:	5ccb      	ldrb	r3, [r1, r3]
 8003120:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003124:	4618      	mov	r0, r3
 8003126:	bd80      	pop	{r7, pc}
 8003128:	40023800 	.word	0x40023800
 800312c:	080076e8 	.word	0x080076e8

08003130 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003134:	f7ff ffdc 	bl	80030f0 <HAL_RCC_GetHCLKFreq>
 8003138:	4602      	mov	r2, r0
 800313a:	4b05      	ldr	r3, [pc, #20]	; (8003150 <HAL_RCC_GetPCLK2Freq+0x20>)
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	0b5b      	lsrs	r3, r3, #13
 8003140:	f003 0307 	and.w	r3, r3, #7
 8003144:	4903      	ldr	r1, [pc, #12]	; (8003154 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003146:	5ccb      	ldrb	r3, [r1, r3]
 8003148:	fa22 f303 	lsr.w	r3, r2, r3
}
 800314c:	4618      	mov	r0, r3
 800314e:	bd80      	pop	{r7, pc}
 8003150:	40023800 	.word	0x40023800
 8003154:	080076e8 	.word	0x080076e8

08003158 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b082      	sub	sp, #8
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d101      	bne.n	800316a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e07b      	b.n	8003262 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316e:	2b00      	cmp	r3, #0
 8003170:	d108      	bne.n	8003184 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800317a:	d009      	beq.n	8003190 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2200      	movs	r2, #0
 8003180:	61da      	str	r2, [r3, #28]
 8003182:	e005      	b.n	8003190 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2200      	movs	r2, #0
 8003188:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2200      	movs	r2, #0
 800318e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2200      	movs	r2, #0
 8003194:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800319c:	b2db      	uxtb	r3, r3
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d106      	bne.n	80031b0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2200      	movs	r2, #0
 80031a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f7fe fa42 	bl	8001634 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2202      	movs	r2, #2
 80031b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031c6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80031d8:	431a      	orrs	r2, r3
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031e2:	431a      	orrs	r2, r3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	691b      	ldr	r3, [r3, #16]
 80031e8:	f003 0302 	and.w	r3, r3, #2
 80031ec:	431a      	orrs	r2, r3
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	695b      	ldr	r3, [r3, #20]
 80031f2:	f003 0301 	and.w	r3, r3, #1
 80031f6:	431a      	orrs	r2, r3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	699b      	ldr	r3, [r3, #24]
 80031fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003200:	431a      	orrs	r2, r3
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	69db      	ldr	r3, [r3, #28]
 8003206:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800320a:	431a      	orrs	r2, r3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6a1b      	ldr	r3, [r3, #32]
 8003210:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003214:	ea42 0103 	orr.w	r1, r2, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800321c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	430a      	orrs	r2, r1
 8003226:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	699b      	ldr	r3, [r3, #24]
 800322c:	0c1b      	lsrs	r3, r3, #16
 800322e:	f003 0104 	and.w	r1, r3, #4
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003236:	f003 0210 	and.w	r2, r3, #16
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	430a      	orrs	r2, r1
 8003240:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	69da      	ldr	r2, [r3, #28]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003250:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003260:	2300      	movs	r3, #0
}
 8003262:	4618      	mov	r0, r3
 8003264:	3708      	adds	r7, #8
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}

0800326a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800326a:	b580      	push	{r7, lr}
 800326c:	b082      	sub	sp, #8
 800326e:	af00      	add	r7, sp, #0
 8003270:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d101      	bne.n	800327c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	e041      	b.n	8003300 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003282:	b2db      	uxtb	r3, r3
 8003284:	2b00      	cmp	r3, #0
 8003286:	d106      	bne.n	8003296 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2200      	movs	r2, #0
 800328c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	f7fe fa17 	bl	80016c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2202      	movs	r2, #2
 800329a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	3304      	adds	r3, #4
 80032a6:	4619      	mov	r1, r3
 80032a8:	4610      	mov	r0, r2
 80032aa:	f000 fa2f 	bl	800370c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2201      	movs	r2, #1
 80032b2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2201      	movs	r2, #1
 80032ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2201      	movs	r2, #1
 80032c2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2201      	movs	r2, #1
 80032ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2201      	movs	r2, #1
 80032d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2201      	movs	r2, #1
 80032da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2201      	movs	r2, #1
 80032e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2201      	movs	r2, #1
 80032ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2201      	movs	r2, #1
 80032f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2201      	movs	r2, #1
 80032fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80032fe:	2300      	movs	r3, #0
}
 8003300:	4618      	mov	r0, r3
 8003302:	3708      	adds	r7, #8
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}

08003308 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b082      	sub	sp, #8
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	691b      	ldr	r3, [r3, #16]
 8003316:	f003 0302 	and.w	r3, r3, #2
 800331a:	2b02      	cmp	r3, #2
 800331c:	d122      	bne.n	8003364 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	f003 0302 	and.w	r3, r3, #2
 8003328:	2b02      	cmp	r3, #2
 800332a:	d11b      	bne.n	8003364 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f06f 0202 	mvn.w	r2, #2
 8003334:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2201      	movs	r2, #1
 800333a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	699b      	ldr	r3, [r3, #24]
 8003342:	f003 0303 	and.w	r3, r3, #3
 8003346:	2b00      	cmp	r3, #0
 8003348:	d003      	beq.n	8003352 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f000 f9bf 	bl	80036ce <HAL_TIM_IC_CaptureCallback>
 8003350:	e005      	b.n	800335e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f000 f9b1 	bl	80036ba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003358:	6878      	ldr	r0, [r7, #4]
 800335a:	f000 f9c2 	bl	80036e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2200      	movs	r2, #0
 8003362:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	691b      	ldr	r3, [r3, #16]
 800336a:	f003 0304 	and.w	r3, r3, #4
 800336e:	2b04      	cmp	r3, #4
 8003370:	d122      	bne.n	80033b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	f003 0304 	and.w	r3, r3, #4
 800337c:	2b04      	cmp	r3, #4
 800337e:	d11b      	bne.n	80033b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f06f 0204 	mvn.w	r2, #4
 8003388:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2202      	movs	r2, #2
 800338e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	699b      	ldr	r3, [r3, #24]
 8003396:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800339a:	2b00      	cmp	r3, #0
 800339c:	d003      	beq.n	80033a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f000 f995 	bl	80036ce <HAL_TIM_IC_CaptureCallback>
 80033a4:	e005      	b.n	80033b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f000 f987 	bl	80036ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f000 f998 	bl	80036e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	691b      	ldr	r3, [r3, #16]
 80033be:	f003 0308 	and.w	r3, r3, #8
 80033c2:	2b08      	cmp	r3, #8
 80033c4:	d122      	bne.n	800340c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	f003 0308 	and.w	r3, r3, #8
 80033d0:	2b08      	cmp	r3, #8
 80033d2:	d11b      	bne.n	800340c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f06f 0208 	mvn.w	r2, #8
 80033dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2204      	movs	r2, #4
 80033e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	69db      	ldr	r3, [r3, #28]
 80033ea:	f003 0303 	and.w	r3, r3, #3
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d003      	beq.n	80033fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f000 f96b 	bl	80036ce <HAL_TIM_IC_CaptureCallback>
 80033f8:	e005      	b.n	8003406 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f000 f95d 	bl	80036ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	f000 f96e 	bl	80036e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2200      	movs	r2, #0
 800340a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	691b      	ldr	r3, [r3, #16]
 8003412:	f003 0310 	and.w	r3, r3, #16
 8003416:	2b10      	cmp	r3, #16
 8003418:	d122      	bne.n	8003460 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	f003 0310 	and.w	r3, r3, #16
 8003424:	2b10      	cmp	r3, #16
 8003426:	d11b      	bne.n	8003460 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f06f 0210 	mvn.w	r2, #16
 8003430:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2208      	movs	r2, #8
 8003436:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	69db      	ldr	r3, [r3, #28]
 800343e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003442:	2b00      	cmp	r3, #0
 8003444:	d003      	beq.n	800344e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f000 f941 	bl	80036ce <HAL_TIM_IC_CaptureCallback>
 800344c:	e005      	b.n	800345a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f000 f933 	bl	80036ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f000 f944 	bl	80036e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	691b      	ldr	r3, [r3, #16]
 8003466:	f003 0301 	and.w	r3, r3, #1
 800346a:	2b01      	cmp	r3, #1
 800346c:	d10e      	bne.n	800348c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	f003 0301 	and.w	r3, r3, #1
 8003478:	2b01      	cmp	r3, #1
 800347a:	d107      	bne.n	800348c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f06f 0201 	mvn.w	r2, #1
 8003484:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f000 f90d 	bl	80036a6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	691b      	ldr	r3, [r3, #16]
 8003492:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003496:	2b80      	cmp	r3, #128	; 0x80
 8003498:	d10e      	bne.n	80034b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034a4:	2b80      	cmp	r3, #128	; 0x80
 80034a6:	d107      	bne.n	80034b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80034b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f000 faea 	bl	8003a8c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	691b      	ldr	r3, [r3, #16]
 80034be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034c2:	2b40      	cmp	r3, #64	; 0x40
 80034c4:	d10e      	bne.n	80034e4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034d0:	2b40      	cmp	r3, #64	; 0x40
 80034d2:	d107      	bne.n	80034e4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80034dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f000 f909 	bl	80036f6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	691b      	ldr	r3, [r3, #16]
 80034ea:	f003 0320 	and.w	r3, r3, #32
 80034ee:	2b20      	cmp	r3, #32
 80034f0:	d10e      	bne.n	8003510 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	f003 0320 	and.w	r3, r3, #32
 80034fc:	2b20      	cmp	r3, #32
 80034fe:	d107      	bne.n	8003510 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f06f 0220 	mvn.w	r2, #32
 8003508:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f000 fab4 	bl	8003a78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003510:	bf00      	nop
 8003512:	3708      	adds	r7, #8
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}

08003518 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b084      	sub	sp, #16
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003522:	2300      	movs	r3, #0
 8003524:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800352c:	2b01      	cmp	r3, #1
 800352e:	d101      	bne.n	8003534 <HAL_TIM_ConfigClockSource+0x1c>
 8003530:	2302      	movs	r3, #2
 8003532:	e0b4      	b.n	800369e <HAL_TIM_ConfigClockSource+0x186>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2201      	movs	r2, #1
 8003538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2202      	movs	r2, #2
 8003540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003552:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800355a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	68ba      	ldr	r2, [r7, #8]
 8003562:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800356c:	d03e      	beq.n	80035ec <HAL_TIM_ConfigClockSource+0xd4>
 800356e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003572:	f200 8087 	bhi.w	8003684 <HAL_TIM_ConfigClockSource+0x16c>
 8003576:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800357a:	f000 8086 	beq.w	800368a <HAL_TIM_ConfigClockSource+0x172>
 800357e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003582:	d87f      	bhi.n	8003684 <HAL_TIM_ConfigClockSource+0x16c>
 8003584:	2b70      	cmp	r3, #112	; 0x70
 8003586:	d01a      	beq.n	80035be <HAL_TIM_ConfigClockSource+0xa6>
 8003588:	2b70      	cmp	r3, #112	; 0x70
 800358a:	d87b      	bhi.n	8003684 <HAL_TIM_ConfigClockSource+0x16c>
 800358c:	2b60      	cmp	r3, #96	; 0x60
 800358e:	d050      	beq.n	8003632 <HAL_TIM_ConfigClockSource+0x11a>
 8003590:	2b60      	cmp	r3, #96	; 0x60
 8003592:	d877      	bhi.n	8003684 <HAL_TIM_ConfigClockSource+0x16c>
 8003594:	2b50      	cmp	r3, #80	; 0x50
 8003596:	d03c      	beq.n	8003612 <HAL_TIM_ConfigClockSource+0xfa>
 8003598:	2b50      	cmp	r3, #80	; 0x50
 800359a:	d873      	bhi.n	8003684 <HAL_TIM_ConfigClockSource+0x16c>
 800359c:	2b40      	cmp	r3, #64	; 0x40
 800359e:	d058      	beq.n	8003652 <HAL_TIM_ConfigClockSource+0x13a>
 80035a0:	2b40      	cmp	r3, #64	; 0x40
 80035a2:	d86f      	bhi.n	8003684 <HAL_TIM_ConfigClockSource+0x16c>
 80035a4:	2b30      	cmp	r3, #48	; 0x30
 80035a6:	d064      	beq.n	8003672 <HAL_TIM_ConfigClockSource+0x15a>
 80035a8:	2b30      	cmp	r3, #48	; 0x30
 80035aa:	d86b      	bhi.n	8003684 <HAL_TIM_ConfigClockSource+0x16c>
 80035ac:	2b20      	cmp	r3, #32
 80035ae:	d060      	beq.n	8003672 <HAL_TIM_ConfigClockSource+0x15a>
 80035b0:	2b20      	cmp	r3, #32
 80035b2:	d867      	bhi.n	8003684 <HAL_TIM_ConfigClockSource+0x16c>
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d05c      	beq.n	8003672 <HAL_TIM_ConfigClockSource+0x15a>
 80035b8:	2b10      	cmp	r3, #16
 80035ba:	d05a      	beq.n	8003672 <HAL_TIM_ConfigClockSource+0x15a>
 80035bc:	e062      	b.n	8003684 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6818      	ldr	r0, [r3, #0]
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	6899      	ldr	r1, [r3, #8]
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	685a      	ldr	r2, [r3, #4]
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	68db      	ldr	r3, [r3, #12]
 80035ce:	f000 f9b7 	bl	8003940 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80035e0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	68ba      	ldr	r2, [r7, #8]
 80035e8:	609a      	str	r2, [r3, #8]
      break;
 80035ea:	e04f      	b.n	800368c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6818      	ldr	r0, [r3, #0]
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	6899      	ldr	r1, [r3, #8]
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	685a      	ldr	r2, [r3, #4]
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	f000 f9a0 	bl	8003940 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	689a      	ldr	r2, [r3, #8]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800360e:	609a      	str	r2, [r3, #8]
      break;
 8003610:	e03c      	b.n	800368c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6818      	ldr	r0, [r3, #0]
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	6859      	ldr	r1, [r3, #4]
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	461a      	mov	r2, r3
 8003620:	f000 f914 	bl	800384c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	2150      	movs	r1, #80	; 0x50
 800362a:	4618      	mov	r0, r3
 800362c:	f000 f96d 	bl	800390a <TIM_ITRx_SetConfig>
      break;
 8003630:	e02c      	b.n	800368c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6818      	ldr	r0, [r3, #0]
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	6859      	ldr	r1, [r3, #4]
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	68db      	ldr	r3, [r3, #12]
 800363e:	461a      	mov	r2, r3
 8003640:	f000 f933 	bl	80038aa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	2160      	movs	r1, #96	; 0x60
 800364a:	4618      	mov	r0, r3
 800364c:	f000 f95d 	bl	800390a <TIM_ITRx_SetConfig>
      break;
 8003650:	e01c      	b.n	800368c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6818      	ldr	r0, [r3, #0]
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	6859      	ldr	r1, [r3, #4]
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	68db      	ldr	r3, [r3, #12]
 800365e:	461a      	mov	r2, r3
 8003660:	f000 f8f4 	bl	800384c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	2140      	movs	r1, #64	; 0x40
 800366a:	4618      	mov	r0, r3
 800366c:	f000 f94d 	bl	800390a <TIM_ITRx_SetConfig>
      break;
 8003670:	e00c      	b.n	800368c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4619      	mov	r1, r3
 800367c:	4610      	mov	r0, r2
 800367e:	f000 f944 	bl	800390a <TIM_ITRx_SetConfig>
      break;
 8003682:	e003      	b.n	800368c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	73fb      	strb	r3, [r7, #15]
      break;
 8003688:	e000      	b.n	800368c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800368a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2201      	movs	r2, #1
 8003690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2200      	movs	r2, #0
 8003698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800369c:	7bfb      	ldrb	r3, [r7, #15]
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3710      	adds	r7, #16
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}

080036a6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036a6:	b480      	push	{r7}
 80036a8:	b083      	sub	sp, #12
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80036ae:	bf00      	nop
 80036b0:	370c      	adds	r7, #12
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr

080036ba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036ba:	b480      	push	{r7}
 80036bc:	b083      	sub	sp, #12
 80036be:	af00      	add	r7, sp, #0
 80036c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80036c2:	bf00      	nop
 80036c4:	370c      	adds	r7, #12
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr

080036ce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80036ce:	b480      	push	{r7}
 80036d0:	b083      	sub	sp, #12
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80036d6:	bf00      	nop
 80036d8:	370c      	adds	r7, #12
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr

080036e2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80036e2:	b480      	push	{r7}
 80036e4:	b083      	sub	sp, #12
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80036ea:	bf00      	nop
 80036ec:	370c      	adds	r7, #12
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr

080036f6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80036f6:	b480      	push	{r7}
 80036f8:	b083      	sub	sp, #12
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80036fe:	bf00      	nop
 8003700:	370c      	adds	r7, #12
 8003702:	46bd      	mov	sp, r7
 8003704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003708:	4770      	bx	lr
	...

0800370c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800370c:	b480      	push	{r7}
 800370e:	b085      	sub	sp, #20
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
 8003714:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	4a40      	ldr	r2, [pc, #256]	; (8003820 <TIM_Base_SetConfig+0x114>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d013      	beq.n	800374c <TIM_Base_SetConfig+0x40>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800372a:	d00f      	beq.n	800374c <TIM_Base_SetConfig+0x40>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	4a3d      	ldr	r2, [pc, #244]	; (8003824 <TIM_Base_SetConfig+0x118>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d00b      	beq.n	800374c <TIM_Base_SetConfig+0x40>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	4a3c      	ldr	r2, [pc, #240]	; (8003828 <TIM_Base_SetConfig+0x11c>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d007      	beq.n	800374c <TIM_Base_SetConfig+0x40>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	4a3b      	ldr	r2, [pc, #236]	; (800382c <TIM_Base_SetConfig+0x120>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d003      	beq.n	800374c <TIM_Base_SetConfig+0x40>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	4a3a      	ldr	r2, [pc, #232]	; (8003830 <TIM_Base_SetConfig+0x124>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d108      	bne.n	800375e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003752:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	68fa      	ldr	r2, [r7, #12]
 800375a:	4313      	orrs	r3, r2
 800375c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	4a2f      	ldr	r2, [pc, #188]	; (8003820 <TIM_Base_SetConfig+0x114>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d02b      	beq.n	80037be <TIM_Base_SetConfig+0xb2>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800376c:	d027      	beq.n	80037be <TIM_Base_SetConfig+0xb2>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	4a2c      	ldr	r2, [pc, #176]	; (8003824 <TIM_Base_SetConfig+0x118>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d023      	beq.n	80037be <TIM_Base_SetConfig+0xb2>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	4a2b      	ldr	r2, [pc, #172]	; (8003828 <TIM_Base_SetConfig+0x11c>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d01f      	beq.n	80037be <TIM_Base_SetConfig+0xb2>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4a2a      	ldr	r2, [pc, #168]	; (800382c <TIM_Base_SetConfig+0x120>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d01b      	beq.n	80037be <TIM_Base_SetConfig+0xb2>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	4a29      	ldr	r2, [pc, #164]	; (8003830 <TIM_Base_SetConfig+0x124>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d017      	beq.n	80037be <TIM_Base_SetConfig+0xb2>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	4a28      	ldr	r2, [pc, #160]	; (8003834 <TIM_Base_SetConfig+0x128>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d013      	beq.n	80037be <TIM_Base_SetConfig+0xb2>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4a27      	ldr	r2, [pc, #156]	; (8003838 <TIM_Base_SetConfig+0x12c>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d00f      	beq.n	80037be <TIM_Base_SetConfig+0xb2>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	4a26      	ldr	r2, [pc, #152]	; (800383c <TIM_Base_SetConfig+0x130>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d00b      	beq.n	80037be <TIM_Base_SetConfig+0xb2>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4a25      	ldr	r2, [pc, #148]	; (8003840 <TIM_Base_SetConfig+0x134>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d007      	beq.n	80037be <TIM_Base_SetConfig+0xb2>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	4a24      	ldr	r2, [pc, #144]	; (8003844 <TIM_Base_SetConfig+0x138>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d003      	beq.n	80037be <TIM_Base_SetConfig+0xb2>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	4a23      	ldr	r2, [pc, #140]	; (8003848 <TIM_Base_SetConfig+0x13c>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d108      	bne.n	80037d0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	68db      	ldr	r3, [r3, #12]
 80037ca:	68fa      	ldr	r2, [r7, #12]
 80037cc:	4313      	orrs	r3, r2
 80037ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	695b      	ldr	r3, [r3, #20]
 80037da:	4313      	orrs	r3, r2
 80037dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	68fa      	ldr	r2, [r7, #12]
 80037e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	689a      	ldr	r2, [r3, #8]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	4a0a      	ldr	r2, [pc, #40]	; (8003820 <TIM_Base_SetConfig+0x114>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d003      	beq.n	8003804 <TIM_Base_SetConfig+0xf8>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	4a0c      	ldr	r2, [pc, #48]	; (8003830 <TIM_Base_SetConfig+0x124>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d103      	bne.n	800380c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	691a      	ldr	r2, [r3, #16]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2201      	movs	r2, #1
 8003810:	615a      	str	r2, [r3, #20]
}
 8003812:	bf00      	nop
 8003814:	3714      	adds	r7, #20
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr
 800381e:	bf00      	nop
 8003820:	40010000 	.word	0x40010000
 8003824:	40000400 	.word	0x40000400
 8003828:	40000800 	.word	0x40000800
 800382c:	40000c00 	.word	0x40000c00
 8003830:	40010400 	.word	0x40010400
 8003834:	40014000 	.word	0x40014000
 8003838:	40014400 	.word	0x40014400
 800383c:	40014800 	.word	0x40014800
 8003840:	40001800 	.word	0x40001800
 8003844:	40001c00 	.word	0x40001c00
 8003848:	40002000 	.word	0x40002000

0800384c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800384c:	b480      	push	{r7}
 800384e:	b087      	sub	sp, #28
 8003850:	af00      	add	r7, sp, #0
 8003852:	60f8      	str	r0, [r7, #12]
 8003854:	60b9      	str	r1, [r7, #8]
 8003856:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	6a1b      	ldr	r3, [r3, #32]
 800385c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	6a1b      	ldr	r3, [r3, #32]
 8003862:	f023 0201 	bic.w	r2, r3, #1
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	699b      	ldr	r3, [r3, #24]
 800386e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003876:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	011b      	lsls	r3, r3, #4
 800387c:	693a      	ldr	r2, [r7, #16]
 800387e:	4313      	orrs	r3, r2
 8003880:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	f023 030a 	bic.w	r3, r3, #10
 8003888:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800388a:	697a      	ldr	r2, [r7, #20]
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	4313      	orrs	r3, r2
 8003890:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	693a      	ldr	r2, [r7, #16]
 8003896:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	697a      	ldr	r2, [r7, #20]
 800389c:	621a      	str	r2, [r3, #32]
}
 800389e:	bf00      	nop
 80038a0:	371c      	adds	r7, #28
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr

080038aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038aa:	b480      	push	{r7}
 80038ac:	b087      	sub	sp, #28
 80038ae:	af00      	add	r7, sp, #0
 80038b0:	60f8      	str	r0, [r7, #12]
 80038b2:	60b9      	str	r1, [r7, #8]
 80038b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	6a1b      	ldr	r3, [r3, #32]
 80038ba:	f023 0210 	bic.w	r2, r3, #16
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	699b      	ldr	r3, [r3, #24]
 80038c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	6a1b      	ldr	r3, [r3, #32]
 80038cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80038d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	031b      	lsls	r3, r3, #12
 80038da:	697a      	ldr	r2, [r7, #20]
 80038dc:	4313      	orrs	r3, r2
 80038de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80038e6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	011b      	lsls	r3, r3, #4
 80038ec:	693a      	ldr	r2, [r7, #16]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	697a      	ldr	r2, [r7, #20]
 80038f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	693a      	ldr	r2, [r7, #16]
 80038fc:	621a      	str	r2, [r3, #32]
}
 80038fe:	bf00      	nop
 8003900:	371c      	adds	r7, #28
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr

0800390a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800390a:	b480      	push	{r7}
 800390c:	b085      	sub	sp, #20
 800390e:	af00      	add	r7, sp, #0
 8003910:	6078      	str	r0, [r7, #4]
 8003912:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003920:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003922:	683a      	ldr	r2, [r7, #0]
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	4313      	orrs	r3, r2
 8003928:	f043 0307 	orr.w	r3, r3, #7
 800392c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	68fa      	ldr	r2, [r7, #12]
 8003932:	609a      	str	r2, [r3, #8]
}
 8003934:	bf00      	nop
 8003936:	3714      	adds	r7, #20
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr

08003940 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003940:	b480      	push	{r7}
 8003942:	b087      	sub	sp, #28
 8003944:	af00      	add	r7, sp, #0
 8003946:	60f8      	str	r0, [r7, #12]
 8003948:	60b9      	str	r1, [r7, #8]
 800394a:	607a      	str	r2, [r7, #4]
 800394c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800395a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	021a      	lsls	r2, r3, #8
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	431a      	orrs	r2, r3
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	4313      	orrs	r3, r2
 8003968:	697a      	ldr	r2, [r7, #20]
 800396a:	4313      	orrs	r3, r2
 800396c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	697a      	ldr	r2, [r7, #20]
 8003972:	609a      	str	r2, [r3, #8]
}
 8003974:	bf00      	nop
 8003976:	371c      	adds	r7, #28
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr

08003980 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003980:	b480      	push	{r7}
 8003982:	b085      	sub	sp, #20
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
 8003988:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003990:	2b01      	cmp	r3, #1
 8003992:	d101      	bne.n	8003998 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003994:	2302      	movs	r3, #2
 8003996:	e05a      	b.n	8003a4e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2201      	movs	r2, #1
 800399c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2202      	movs	r2, #2
 80039a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	68fa      	ldr	r2, [r7, #12]
 80039c6:	4313      	orrs	r3, r2
 80039c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	68fa      	ldr	r2, [r7, #12]
 80039d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a21      	ldr	r2, [pc, #132]	; (8003a5c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d022      	beq.n	8003a22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039e4:	d01d      	beq.n	8003a22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a1d      	ldr	r2, [pc, #116]	; (8003a60 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d018      	beq.n	8003a22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a1b      	ldr	r2, [pc, #108]	; (8003a64 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d013      	beq.n	8003a22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a1a      	ldr	r2, [pc, #104]	; (8003a68 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d00e      	beq.n	8003a22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a18      	ldr	r2, [pc, #96]	; (8003a6c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d009      	beq.n	8003a22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a17      	ldr	r2, [pc, #92]	; (8003a70 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d004      	beq.n	8003a22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a15      	ldr	r2, [pc, #84]	; (8003a74 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d10c      	bne.n	8003a3c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a28:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	68ba      	ldr	r2, [r7, #8]
 8003a30:	4313      	orrs	r3, r2
 8003a32:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	68ba      	ldr	r2, [r7, #8]
 8003a3a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2200      	movs	r2, #0
 8003a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a4c:	2300      	movs	r3, #0
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3714      	adds	r7, #20
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr
 8003a5a:	bf00      	nop
 8003a5c:	40010000 	.word	0x40010000
 8003a60:	40000400 	.word	0x40000400
 8003a64:	40000800 	.word	0x40000800
 8003a68:	40000c00 	.word	0x40000c00
 8003a6c:	40010400 	.word	0x40010400
 8003a70:	40014000 	.word	0x40014000
 8003a74:	40001800 	.word	0x40001800

08003a78 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b083      	sub	sp, #12
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a80:	bf00      	nop
 8003a82:	370c      	adds	r7, #12
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr

08003a8c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b083      	sub	sp, #12
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a94:	bf00      	nop
 8003a96:	370c      	adds	r7, #12
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9e:	4770      	bx	lr

08003aa0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b082      	sub	sp, #8
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d101      	bne.n	8003ab2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e03f      	b.n	8003b32 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d106      	bne.n	8003acc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f7fd fe22 	bl	8001710 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2224      	movs	r2, #36	; 0x24
 8003ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	68da      	ldr	r2, [r3, #12]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ae2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	f000 f829 	bl	8003b3c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	691a      	ldr	r2, [r3, #16]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003af8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	695a      	ldr	r2, [r3, #20]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b08:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	68da      	ldr	r2, [r3, #12]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b18:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2220      	movs	r2, #32
 8003b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2220      	movs	r2, #32
 8003b2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b30:	2300      	movs	r3, #0
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3708      	adds	r7, #8
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}
	...

08003b3c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b40:	b0c0      	sub	sp, #256	; 0x100
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	691b      	ldr	r3, [r3, #16]
 8003b50:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b58:	68d9      	ldr	r1, [r3, #12]
 8003b5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	ea40 0301 	orr.w	r3, r0, r1
 8003b64:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003b66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b6a:	689a      	ldr	r2, [r3, #8]
 8003b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b70:	691b      	ldr	r3, [r3, #16]
 8003b72:	431a      	orrs	r2, r3
 8003b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b78:	695b      	ldr	r3, [r3, #20]
 8003b7a:	431a      	orrs	r2, r3
 8003b7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b80:	69db      	ldr	r3, [r3, #28]
 8003b82:	4313      	orrs	r3, r2
 8003b84:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	68db      	ldr	r3, [r3, #12]
 8003b90:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003b94:	f021 010c 	bic.w	r1, r1, #12
 8003b98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003ba2:	430b      	orrs	r3, r1
 8003ba4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ba6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	695b      	ldr	r3, [r3, #20]
 8003bae:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003bb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bb6:	6999      	ldr	r1, [r3, #24]
 8003bb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	ea40 0301 	orr.w	r3, r0, r1
 8003bc2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	4b8f      	ldr	r3, [pc, #572]	; (8003e08 <UART_SetConfig+0x2cc>)
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d005      	beq.n	8003bdc <UART_SetConfig+0xa0>
 8003bd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	4b8d      	ldr	r3, [pc, #564]	; (8003e0c <UART_SetConfig+0x2d0>)
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d104      	bne.n	8003be6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003bdc:	f7ff faa8 	bl	8003130 <HAL_RCC_GetPCLK2Freq>
 8003be0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003be4:	e003      	b.n	8003bee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003be6:	f7ff fa8f 	bl	8003108 <HAL_RCC_GetPCLK1Freq>
 8003bea:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003bee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bf2:	69db      	ldr	r3, [r3, #28]
 8003bf4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bf8:	f040 810c 	bne.w	8003e14 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003bfc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c00:	2200      	movs	r2, #0
 8003c02:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003c06:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003c0a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003c0e:	4622      	mov	r2, r4
 8003c10:	462b      	mov	r3, r5
 8003c12:	1891      	adds	r1, r2, r2
 8003c14:	65b9      	str	r1, [r7, #88]	; 0x58
 8003c16:	415b      	adcs	r3, r3
 8003c18:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c1a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003c1e:	4621      	mov	r1, r4
 8003c20:	eb12 0801 	adds.w	r8, r2, r1
 8003c24:	4629      	mov	r1, r5
 8003c26:	eb43 0901 	adc.w	r9, r3, r1
 8003c2a:	f04f 0200 	mov.w	r2, #0
 8003c2e:	f04f 0300 	mov.w	r3, #0
 8003c32:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c36:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c3a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c3e:	4690      	mov	r8, r2
 8003c40:	4699      	mov	r9, r3
 8003c42:	4623      	mov	r3, r4
 8003c44:	eb18 0303 	adds.w	r3, r8, r3
 8003c48:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003c4c:	462b      	mov	r3, r5
 8003c4e:	eb49 0303 	adc.w	r3, r9, r3
 8003c52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003c56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003c62:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003c66:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003c6a:	460b      	mov	r3, r1
 8003c6c:	18db      	adds	r3, r3, r3
 8003c6e:	653b      	str	r3, [r7, #80]	; 0x50
 8003c70:	4613      	mov	r3, r2
 8003c72:	eb42 0303 	adc.w	r3, r2, r3
 8003c76:	657b      	str	r3, [r7, #84]	; 0x54
 8003c78:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003c7c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003c80:	f7fc ffda 	bl	8000c38 <__aeabi_uldivmod>
 8003c84:	4602      	mov	r2, r0
 8003c86:	460b      	mov	r3, r1
 8003c88:	4b61      	ldr	r3, [pc, #388]	; (8003e10 <UART_SetConfig+0x2d4>)
 8003c8a:	fba3 2302 	umull	r2, r3, r3, r2
 8003c8e:	095b      	lsrs	r3, r3, #5
 8003c90:	011c      	lsls	r4, r3, #4
 8003c92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c96:	2200      	movs	r2, #0
 8003c98:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003c9c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003ca0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003ca4:	4642      	mov	r2, r8
 8003ca6:	464b      	mov	r3, r9
 8003ca8:	1891      	adds	r1, r2, r2
 8003caa:	64b9      	str	r1, [r7, #72]	; 0x48
 8003cac:	415b      	adcs	r3, r3
 8003cae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003cb0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003cb4:	4641      	mov	r1, r8
 8003cb6:	eb12 0a01 	adds.w	sl, r2, r1
 8003cba:	4649      	mov	r1, r9
 8003cbc:	eb43 0b01 	adc.w	fp, r3, r1
 8003cc0:	f04f 0200 	mov.w	r2, #0
 8003cc4:	f04f 0300 	mov.w	r3, #0
 8003cc8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003ccc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003cd0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003cd4:	4692      	mov	sl, r2
 8003cd6:	469b      	mov	fp, r3
 8003cd8:	4643      	mov	r3, r8
 8003cda:	eb1a 0303 	adds.w	r3, sl, r3
 8003cde:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003ce2:	464b      	mov	r3, r9
 8003ce4:	eb4b 0303 	adc.w	r3, fp, r3
 8003ce8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003cec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003cf8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003cfc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003d00:	460b      	mov	r3, r1
 8003d02:	18db      	adds	r3, r3, r3
 8003d04:	643b      	str	r3, [r7, #64]	; 0x40
 8003d06:	4613      	mov	r3, r2
 8003d08:	eb42 0303 	adc.w	r3, r2, r3
 8003d0c:	647b      	str	r3, [r7, #68]	; 0x44
 8003d0e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003d12:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003d16:	f7fc ff8f 	bl	8000c38 <__aeabi_uldivmod>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	460b      	mov	r3, r1
 8003d1e:	4611      	mov	r1, r2
 8003d20:	4b3b      	ldr	r3, [pc, #236]	; (8003e10 <UART_SetConfig+0x2d4>)
 8003d22:	fba3 2301 	umull	r2, r3, r3, r1
 8003d26:	095b      	lsrs	r3, r3, #5
 8003d28:	2264      	movs	r2, #100	; 0x64
 8003d2a:	fb02 f303 	mul.w	r3, r2, r3
 8003d2e:	1acb      	subs	r3, r1, r3
 8003d30:	00db      	lsls	r3, r3, #3
 8003d32:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003d36:	4b36      	ldr	r3, [pc, #216]	; (8003e10 <UART_SetConfig+0x2d4>)
 8003d38:	fba3 2302 	umull	r2, r3, r3, r2
 8003d3c:	095b      	lsrs	r3, r3, #5
 8003d3e:	005b      	lsls	r3, r3, #1
 8003d40:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003d44:	441c      	add	r4, r3
 8003d46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003d50:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003d54:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003d58:	4642      	mov	r2, r8
 8003d5a:	464b      	mov	r3, r9
 8003d5c:	1891      	adds	r1, r2, r2
 8003d5e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003d60:	415b      	adcs	r3, r3
 8003d62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d64:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003d68:	4641      	mov	r1, r8
 8003d6a:	1851      	adds	r1, r2, r1
 8003d6c:	6339      	str	r1, [r7, #48]	; 0x30
 8003d6e:	4649      	mov	r1, r9
 8003d70:	414b      	adcs	r3, r1
 8003d72:	637b      	str	r3, [r7, #52]	; 0x34
 8003d74:	f04f 0200 	mov.w	r2, #0
 8003d78:	f04f 0300 	mov.w	r3, #0
 8003d7c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003d80:	4659      	mov	r1, fp
 8003d82:	00cb      	lsls	r3, r1, #3
 8003d84:	4651      	mov	r1, sl
 8003d86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d8a:	4651      	mov	r1, sl
 8003d8c:	00ca      	lsls	r2, r1, #3
 8003d8e:	4610      	mov	r0, r2
 8003d90:	4619      	mov	r1, r3
 8003d92:	4603      	mov	r3, r0
 8003d94:	4642      	mov	r2, r8
 8003d96:	189b      	adds	r3, r3, r2
 8003d98:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003d9c:	464b      	mov	r3, r9
 8003d9e:	460a      	mov	r2, r1
 8003da0:	eb42 0303 	adc.w	r3, r2, r3
 8003da4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003da8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	2200      	movs	r2, #0
 8003db0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003db4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003db8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003dbc:	460b      	mov	r3, r1
 8003dbe:	18db      	adds	r3, r3, r3
 8003dc0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003dc2:	4613      	mov	r3, r2
 8003dc4:	eb42 0303 	adc.w	r3, r2, r3
 8003dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003dca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003dce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003dd2:	f7fc ff31 	bl	8000c38 <__aeabi_uldivmod>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	460b      	mov	r3, r1
 8003dda:	4b0d      	ldr	r3, [pc, #52]	; (8003e10 <UART_SetConfig+0x2d4>)
 8003ddc:	fba3 1302 	umull	r1, r3, r3, r2
 8003de0:	095b      	lsrs	r3, r3, #5
 8003de2:	2164      	movs	r1, #100	; 0x64
 8003de4:	fb01 f303 	mul.w	r3, r1, r3
 8003de8:	1ad3      	subs	r3, r2, r3
 8003dea:	00db      	lsls	r3, r3, #3
 8003dec:	3332      	adds	r3, #50	; 0x32
 8003dee:	4a08      	ldr	r2, [pc, #32]	; (8003e10 <UART_SetConfig+0x2d4>)
 8003df0:	fba2 2303 	umull	r2, r3, r2, r3
 8003df4:	095b      	lsrs	r3, r3, #5
 8003df6:	f003 0207 	and.w	r2, r3, #7
 8003dfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4422      	add	r2, r4
 8003e02:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003e04:	e105      	b.n	8004012 <UART_SetConfig+0x4d6>
 8003e06:	bf00      	nop
 8003e08:	40011000 	.word	0x40011000
 8003e0c:	40011400 	.word	0x40011400
 8003e10:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e18:	2200      	movs	r2, #0
 8003e1a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003e1e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003e22:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003e26:	4642      	mov	r2, r8
 8003e28:	464b      	mov	r3, r9
 8003e2a:	1891      	adds	r1, r2, r2
 8003e2c:	6239      	str	r1, [r7, #32]
 8003e2e:	415b      	adcs	r3, r3
 8003e30:	627b      	str	r3, [r7, #36]	; 0x24
 8003e32:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003e36:	4641      	mov	r1, r8
 8003e38:	1854      	adds	r4, r2, r1
 8003e3a:	4649      	mov	r1, r9
 8003e3c:	eb43 0501 	adc.w	r5, r3, r1
 8003e40:	f04f 0200 	mov.w	r2, #0
 8003e44:	f04f 0300 	mov.w	r3, #0
 8003e48:	00eb      	lsls	r3, r5, #3
 8003e4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e4e:	00e2      	lsls	r2, r4, #3
 8003e50:	4614      	mov	r4, r2
 8003e52:	461d      	mov	r5, r3
 8003e54:	4643      	mov	r3, r8
 8003e56:	18e3      	adds	r3, r4, r3
 8003e58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003e5c:	464b      	mov	r3, r9
 8003e5e:	eb45 0303 	adc.w	r3, r5, r3
 8003e62:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003e66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003e72:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003e76:	f04f 0200 	mov.w	r2, #0
 8003e7a:	f04f 0300 	mov.w	r3, #0
 8003e7e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003e82:	4629      	mov	r1, r5
 8003e84:	008b      	lsls	r3, r1, #2
 8003e86:	4621      	mov	r1, r4
 8003e88:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e8c:	4621      	mov	r1, r4
 8003e8e:	008a      	lsls	r2, r1, #2
 8003e90:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003e94:	f7fc fed0 	bl	8000c38 <__aeabi_uldivmod>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	460b      	mov	r3, r1
 8003e9c:	4b60      	ldr	r3, [pc, #384]	; (8004020 <UART_SetConfig+0x4e4>)
 8003e9e:	fba3 2302 	umull	r2, r3, r3, r2
 8003ea2:	095b      	lsrs	r3, r3, #5
 8003ea4:	011c      	lsls	r4, r3, #4
 8003ea6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003eaa:	2200      	movs	r2, #0
 8003eac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003eb0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003eb4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003eb8:	4642      	mov	r2, r8
 8003eba:	464b      	mov	r3, r9
 8003ebc:	1891      	adds	r1, r2, r2
 8003ebe:	61b9      	str	r1, [r7, #24]
 8003ec0:	415b      	adcs	r3, r3
 8003ec2:	61fb      	str	r3, [r7, #28]
 8003ec4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ec8:	4641      	mov	r1, r8
 8003eca:	1851      	adds	r1, r2, r1
 8003ecc:	6139      	str	r1, [r7, #16]
 8003ece:	4649      	mov	r1, r9
 8003ed0:	414b      	adcs	r3, r1
 8003ed2:	617b      	str	r3, [r7, #20]
 8003ed4:	f04f 0200 	mov.w	r2, #0
 8003ed8:	f04f 0300 	mov.w	r3, #0
 8003edc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ee0:	4659      	mov	r1, fp
 8003ee2:	00cb      	lsls	r3, r1, #3
 8003ee4:	4651      	mov	r1, sl
 8003ee6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003eea:	4651      	mov	r1, sl
 8003eec:	00ca      	lsls	r2, r1, #3
 8003eee:	4610      	mov	r0, r2
 8003ef0:	4619      	mov	r1, r3
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	4642      	mov	r2, r8
 8003ef6:	189b      	adds	r3, r3, r2
 8003ef8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003efc:	464b      	mov	r3, r9
 8003efe:	460a      	mov	r2, r1
 8003f00:	eb42 0303 	adc.w	r3, r2, r3
 8003f04:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003f08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	67bb      	str	r3, [r7, #120]	; 0x78
 8003f12:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003f14:	f04f 0200 	mov.w	r2, #0
 8003f18:	f04f 0300 	mov.w	r3, #0
 8003f1c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003f20:	4649      	mov	r1, r9
 8003f22:	008b      	lsls	r3, r1, #2
 8003f24:	4641      	mov	r1, r8
 8003f26:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f2a:	4641      	mov	r1, r8
 8003f2c:	008a      	lsls	r2, r1, #2
 8003f2e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003f32:	f7fc fe81 	bl	8000c38 <__aeabi_uldivmod>
 8003f36:	4602      	mov	r2, r0
 8003f38:	460b      	mov	r3, r1
 8003f3a:	4b39      	ldr	r3, [pc, #228]	; (8004020 <UART_SetConfig+0x4e4>)
 8003f3c:	fba3 1302 	umull	r1, r3, r3, r2
 8003f40:	095b      	lsrs	r3, r3, #5
 8003f42:	2164      	movs	r1, #100	; 0x64
 8003f44:	fb01 f303 	mul.w	r3, r1, r3
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	011b      	lsls	r3, r3, #4
 8003f4c:	3332      	adds	r3, #50	; 0x32
 8003f4e:	4a34      	ldr	r2, [pc, #208]	; (8004020 <UART_SetConfig+0x4e4>)
 8003f50:	fba2 2303 	umull	r2, r3, r2, r3
 8003f54:	095b      	lsrs	r3, r3, #5
 8003f56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f5a:	441c      	add	r4, r3
 8003f5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f60:	2200      	movs	r2, #0
 8003f62:	673b      	str	r3, [r7, #112]	; 0x70
 8003f64:	677a      	str	r2, [r7, #116]	; 0x74
 8003f66:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003f6a:	4642      	mov	r2, r8
 8003f6c:	464b      	mov	r3, r9
 8003f6e:	1891      	adds	r1, r2, r2
 8003f70:	60b9      	str	r1, [r7, #8]
 8003f72:	415b      	adcs	r3, r3
 8003f74:	60fb      	str	r3, [r7, #12]
 8003f76:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f7a:	4641      	mov	r1, r8
 8003f7c:	1851      	adds	r1, r2, r1
 8003f7e:	6039      	str	r1, [r7, #0]
 8003f80:	4649      	mov	r1, r9
 8003f82:	414b      	adcs	r3, r1
 8003f84:	607b      	str	r3, [r7, #4]
 8003f86:	f04f 0200 	mov.w	r2, #0
 8003f8a:	f04f 0300 	mov.w	r3, #0
 8003f8e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003f92:	4659      	mov	r1, fp
 8003f94:	00cb      	lsls	r3, r1, #3
 8003f96:	4651      	mov	r1, sl
 8003f98:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f9c:	4651      	mov	r1, sl
 8003f9e:	00ca      	lsls	r2, r1, #3
 8003fa0:	4610      	mov	r0, r2
 8003fa2:	4619      	mov	r1, r3
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	4642      	mov	r2, r8
 8003fa8:	189b      	adds	r3, r3, r2
 8003faa:	66bb      	str	r3, [r7, #104]	; 0x68
 8003fac:	464b      	mov	r3, r9
 8003fae:	460a      	mov	r2, r1
 8003fb0:	eb42 0303 	adc.w	r3, r2, r3
 8003fb4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003fb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	663b      	str	r3, [r7, #96]	; 0x60
 8003fc0:	667a      	str	r2, [r7, #100]	; 0x64
 8003fc2:	f04f 0200 	mov.w	r2, #0
 8003fc6:	f04f 0300 	mov.w	r3, #0
 8003fca:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003fce:	4649      	mov	r1, r9
 8003fd0:	008b      	lsls	r3, r1, #2
 8003fd2:	4641      	mov	r1, r8
 8003fd4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003fd8:	4641      	mov	r1, r8
 8003fda:	008a      	lsls	r2, r1, #2
 8003fdc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003fe0:	f7fc fe2a 	bl	8000c38 <__aeabi_uldivmod>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	460b      	mov	r3, r1
 8003fe8:	4b0d      	ldr	r3, [pc, #52]	; (8004020 <UART_SetConfig+0x4e4>)
 8003fea:	fba3 1302 	umull	r1, r3, r3, r2
 8003fee:	095b      	lsrs	r3, r3, #5
 8003ff0:	2164      	movs	r1, #100	; 0x64
 8003ff2:	fb01 f303 	mul.w	r3, r1, r3
 8003ff6:	1ad3      	subs	r3, r2, r3
 8003ff8:	011b      	lsls	r3, r3, #4
 8003ffa:	3332      	adds	r3, #50	; 0x32
 8003ffc:	4a08      	ldr	r2, [pc, #32]	; (8004020 <UART_SetConfig+0x4e4>)
 8003ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8004002:	095b      	lsrs	r3, r3, #5
 8004004:	f003 020f 	and.w	r2, r3, #15
 8004008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4422      	add	r2, r4
 8004010:	609a      	str	r2, [r3, #8]
}
 8004012:	bf00      	nop
 8004014:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004018:	46bd      	mov	sp, r7
 800401a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800401e:	bf00      	nop
 8004020:	51eb851f 	.word	0x51eb851f

08004024 <__errno>:
 8004024:	4b01      	ldr	r3, [pc, #4]	; (800402c <__errno+0x8>)
 8004026:	6818      	ldr	r0, [r3, #0]
 8004028:	4770      	bx	lr
 800402a:	bf00      	nop
 800402c:	2000000c 	.word	0x2000000c

08004030 <__libc_init_array>:
 8004030:	b570      	push	{r4, r5, r6, lr}
 8004032:	4d0d      	ldr	r5, [pc, #52]	; (8004068 <__libc_init_array+0x38>)
 8004034:	4c0d      	ldr	r4, [pc, #52]	; (800406c <__libc_init_array+0x3c>)
 8004036:	1b64      	subs	r4, r4, r5
 8004038:	10a4      	asrs	r4, r4, #2
 800403a:	2600      	movs	r6, #0
 800403c:	42a6      	cmp	r6, r4
 800403e:	d109      	bne.n	8004054 <__libc_init_array+0x24>
 8004040:	4d0b      	ldr	r5, [pc, #44]	; (8004070 <__libc_init_array+0x40>)
 8004042:	4c0c      	ldr	r4, [pc, #48]	; (8004074 <__libc_init_array+0x44>)
 8004044:	f003 fb3c 	bl	80076c0 <_init>
 8004048:	1b64      	subs	r4, r4, r5
 800404a:	10a4      	asrs	r4, r4, #2
 800404c:	2600      	movs	r6, #0
 800404e:	42a6      	cmp	r6, r4
 8004050:	d105      	bne.n	800405e <__libc_init_array+0x2e>
 8004052:	bd70      	pop	{r4, r5, r6, pc}
 8004054:	f855 3b04 	ldr.w	r3, [r5], #4
 8004058:	4798      	blx	r3
 800405a:	3601      	adds	r6, #1
 800405c:	e7ee      	b.n	800403c <__libc_init_array+0xc>
 800405e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004062:	4798      	blx	r3
 8004064:	3601      	adds	r6, #1
 8004066:	e7f2      	b.n	800404e <__libc_init_array+0x1e>
 8004068:	08007b2c 	.word	0x08007b2c
 800406c:	08007b2c 	.word	0x08007b2c
 8004070:	08007b2c 	.word	0x08007b2c
 8004074:	08007b30 	.word	0x08007b30

08004078 <memset>:
 8004078:	4402      	add	r2, r0
 800407a:	4603      	mov	r3, r0
 800407c:	4293      	cmp	r3, r2
 800407e:	d100      	bne.n	8004082 <memset+0xa>
 8004080:	4770      	bx	lr
 8004082:	f803 1b01 	strb.w	r1, [r3], #1
 8004086:	e7f9      	b.n	800407c <memset+0x4>

08004088 <_scanf_float>:
 8004088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800408c:	b087      	sub	sp, #28
 800408e:	4617      	mov	r7, r2
 8004090:	9303      	str	r3, [sp, #12]
 8004092:	688b      	ldr	r3, [r1, #8]
 8004094:	1e5a      	subs	r2, r3, #1
 8004096:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800409a:	bf83      	ittte	hi
 800409c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80040a0:	195b      	addhi	r3, r3, r5
 80040a2:	9302      	strhi	r3, [sp, #8]
 80040a4:	2300      	movls	r3, #0
 80040a6:	bf86      	itte	hi
 80040a8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80040ac:	608b      	strhi	r3, [r1, #8]
 80040ae:	9302      	strls	r3, [sp, #8]
 80040b0:	680b      	ldr	r3, [r1, #0]
 80040b2:	468b      	mov	fp, r1
 80040b4:	2500      	movs	r5, #0
 80040b6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80040ba:	f84b 3b1c 	str.w	r3, [fp], #28
 80040be:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80040c2:	4680      	mov	r8, r0
 80040c4:	460c      	mov	r4, r1
 80040c6:	465e      	mov	r6, fp
 80040c8:	46aa      	mov	sl, r5
 80040ca:	46a9      	mov	r9, r5
 80040cc:	9501      	str	r5, [sp, #4]
 80040ce:	68a2      	ldr	r2, [r4, #8]
 80040d0:	b152      	cbz	r2, 80040e8 <_scanf_float+0x60>
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	781b      	ldrb	r3, [r3, #0]
 80040d6:	2b4e      	cmp	r3, #78	; 0x4e
 80040d8:	d864      	bhi.n	80041a4 <_scanf_float+0x11c>
 80040da:	2b40      	cmp	r3, #64	; 0x40
 80040dc:	d83c      	bhi.n	8004158 <_scanf_float+0xd0>
 80040de:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80040e2:	b2c8      	uxtb	r0, r1
 80040e4:	280e      	cmp	r0, #14
 80040e6:	d93a      	bls.n	800415e <_scanf_float+0xd6>
 80040e8:	f1b9 0f00 	cmp.w	r9, #0
 80040ec:	d003      	beq.n	80040f6 <_scanf_float+0x6e>
 80040ee:	6823      	ldr	r3, [r4, #0]
 80040f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040f4:	6023      	str	r3, [r4, #0]
 80040f6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80040fa:	f1ba 0f01 	cmp.w	sl, #1
 80040fe:	f200 8113 	bhi.w	8004328 <_scanf_float+0x2a0>
 8004102:	455e      	cmp	r6, fp
 8004104:	f200 8105 	bhi.w	8004312 <_scanf_float+0x28a>
 8004108:	2501      	movs	r5, #1
 800410a:	4628      	mov	r0, r5
 800410c:	b007      	add	sp, #28
 800410e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004112:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8004116:	2a0d      	cmp	r2, #13
 8004118:	d8e6      	bhi.n	80040e8 <_scanf_float+0x60>
 800411a:	a101      	add	r1, pc, #4	; (adr r1, 8004120 <_scanf_float+0x98>)
 800411c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004120:	0800425f 	.word	0x0800425f
 8004124:	080040e9 	.word	0x080040e9
 8004128:	080040e9 	.word	0x080040e9
 800412c:	080040e9 	.word	0x080040e9
 8004130:	080042bf 	.word	0x080042bf
 8004134:	08004297 	.word	0x08004297
 8004138:	080040e9 	.word	0x080040e9
 800413c:	080040e9 	.word	0x080040e9
 8004140:	0800426d 	.word	0x0800426d
 8004144:	080040e9 	.word	0x080040e9
 8004148:	080040e9 	.word	0x080040e9
 800414c:	080040e9 	.word	0x080040e9
 8004150:	080040e9 	.word	0x080040e9
 8004154:	08004225 	.word	0x08004225
 8004158:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800415c:	e7db      	b.n	8004116 <_scanf_float+0x8e>
 800415e:	290e      	cmp	r1, #14
 8004160:	d8c2      	bhi.n	80040e8 <_scanf_float+0x60>
 8004162:	a001      	add	r0, pc, #4	; (adr r0, 8004168 <_scanf_float+0xe0>)
 8004164:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004168:	08004217 	.word	0x08004217
 800416c:	080040e9 	.word	0x080040e9
 8004170:	08004217 	.word	0x08004217
 8004174:	080042ab 	.word	0x080042ab
 8004178:	080040e9 	.word	0x080040e9
 800417c:	080041c5 	.word	0x080041c5
 8004180:	08004201 	.word	0x08004201
 8004184:	08004201 	.word	0x08004201
 8004188:	08004201 	.word	0x08004201
 800418c:	08004201 	.word	0x08004201
 8004190:	08004201 	.word	0x08004201
 8004194:	08004201 	.word	0x08004201
 8004198:	08004201 	.word	0x08004201
 800419c:	08004201 	.word	0x08004201
 80041a0:	08004201 	.word	0x08004201
 80041a4:	2b6e      	cmp	r3, #110	; 0x6e
 80041a6:	d809      	bhi.n	80041bc <_scanf_float+0x134>
 80041a8:	2b60      	cmp	r3, #96	; 0x60
 80041aa:	d8b2      	bhi.n	8004112 <_scanf_float+0x8a>
 80041ac:	2b54      	cmp	r3, #84	; 0x54
 80041ae:	d077      	beq.n	80042a0 <_scanf_float+0x218>
 80041b0:	2b59      	cmp	r3, #89	; 0x59
 80041b2:	d199      	bne.n	80040e8 <_scanf_float+0x60>
 80041b4:	2d07      	cmp	r5, #7
 80041b6:	d197      	bne.n	80040e8 <_scanf_float+0x60>
 80041b8:	2508      	movs	r5, #8
 80041ba:	e029      	b.n	8004210 <_scanf_float+0x188>
 80041bc:	2b74      	cmp	r3, #116	; 0x74
 80041be:	d06f      	beq.n	80042a0 <_scanf_float+0x218>
 80041c0:	2b79      	cmp	r3, #121	; 0x79
 80041c2:	e7f6      	b.n	80041b2 <_scanf_float+0x12a>
 80041c4:	6821      	ldr	r1, [r4, #0]
 80041c6:	05c8      	lsls	r0, r1, #23
 80041c8:	d51a      	bpl.n	8004200 <_scanf_float+0x178>
 80041ca:	9b02      	ldr	r3, [sp, #8]
 80041cc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80041d0:	6021      	str	r1, [r4, #0]
 80041d2:	f109 0901 	add.w	r9, r9, #1
 80041d6:	b11b      	cbz	r3, 80041e0 <_scanf_float+0x158>
 80041d8:	3b01      	subs	r3, #1
 80041da:	3201      	adds	r2, #1
 80041dc:	9302      	str	r3, [sp, #8]
 80041de:	60a2      	str	r2, [r4, #8]
 80041e0:	68a3      	ldr	r3, [r4, #8]
 80041e2:	3b01      	subs	r3, #1
 80041e4:	60a3      	str	r3, [r4, #8]
 80041e6:	6923      	ldr	r3, [r4, #16]
 80041e8:	3301      	adds	r3, #1
 80041ea:	6123      	str	r3, [r4, #16]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	3b01      	subs	r3, #1
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	607b      	str	r3, [r7, #4]
 80041f4:	f340 8084 	ble.w	8004300 <_scanf_float+0x278>
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	3301      	adds	r3, #1
 80041fc:	603b      	str	r3, [r7, #0]
 80041fe:	e766      	b.n	80040ce <_scanf_float+0x46>
 8004200:	eb1a 0f05 	cmn.w	sl, r5
 8004204:	f47f af70 	bne.w	80040e8 <_scanf_float+0x60>
 8004208:	6822      	ldr	r2, [r4, #0]
 800420a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800420e:	6022      	str	r2, [r4, #0]
 8004210:	f806 3b01 	strb.w	r3, [r6], #1
 8004214:	e7e4      	b.n	80041e0 <_scanf_float+0x158>
 8004216:	6822      	ldr	r2, [r4, #0]
 8004218:	0610      	lsls	r0, r2, #24
 800421a:	f57f af65 	bpl.w	80040e8 <_scanf_float+0x60>
 800421e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004222:	e7f4      	b.n	800420e <_scanf_float+0x186>
 8004224:	f1ba 0f00 	cmp.w	sl, #0
 8004228:	d10e      	bne.n	8004248 <_scanf_float+0x1c0>
 800422a:	f1b9 0f00 	cmp.w	r9, #0
 800422e:	d10e      	bne.n	800424e <_scanf_float+0x1c6>
 8004230:	6822      	ldr	r2, [r4, #0]
 8004232:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004236:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800423a:	d108      	bne.n	800424e <_scanf_float+0x1c6>
 800423c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004240:	6022      	str	r2, [r4, #0]
 8004242:	f04f 0a01 	mov.w	sl, #1
 8004246:	e7e3      	b.n	8004210 <_scanf_float+0x188>
 8004248:	f1ba 0f02 	cmp.w	sl, #2
 800424c:	d055      	beq.n	80042fa <_scanf_float+0x272>
 800424e:	2d01      	cmp	r5, #1
 8004250:	d002      	beq.n	8004258 <_scanf_float+0x1d0>
 8004252:	2d04      	cmp	r5, #4
 8004254:	f47f af48 	bne.w	80040e8 <_scanf_float+0x60>
 8004258:	3501      	adds	r5, #1
 800425a:	b2ed      	uxtb	r5, r5
 800425c:	e7d8      	b.n	8004210 <_scanf_float+0x188>
 800425e:	f1ba 0f01 	cmp.w	sl, #1
 8004262:	f47f af41 	bne.w	80040e8 <_scanf_float+0x60>
 8004266:	f04f 0a02 	mov.w	sl, #2
 800426a:	e7d1      	b.n	8004210 <_scanf_float+0x188>
 800426c:	b97d      	cbnz	r5, 800428e <_scanf_float+0x206>
 800426e:	f1b9 0f00 	cmp.w	r9, #0
 8004272:	f47f af3c 	bne.w	80040ee <_scanf_float+0x66>
 8004276:	6822      	ldr	r2, [r4, #0]
 8004278:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800427c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004280:	f47f af39 	bne.w	80040f6 <_scanf_float+0x6e>
 8004284:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004288:	6022      	str	r2, [r4, #0]
 800428a:	2501      	movs	r5, #1
 800428c:	e7c0      	b.n	8004210 <_scanf_float+0x188>
 800428e:	2d03      	cmp	r5, #3
 8004290:	d0e2      	beq.n	8004258 <_scanf_float+0x1d0>
 8004292:	2d05      	cmp	r5, #5
 8004294:	e7de      	b.n	8004254 <_scanf_float+0x1cc>
 8004296:	2d02      	cmp	r5, #2
 8004298:	f47f af26 	bne.w	80040e8 <_scanf_float+0x60>
 800429c:	2503      	movs	r5, #3
 800429e:	e7b7      	b.n	8004210 <_scanf_float+0x188>
 80042a0:	2d06      	cmp	r5, #6
 80042a2:	f47f af21 	bne.w	80040e8 <_scanf_float+0x60>
 80042a6:	2507      	movs	r5, #7
 80042a8:	e7b2      	b.n	8004210 <_scanf_float+0x188>
 80042aa:	6822      	ldr	r2, [r4, #0]
 80042ac:	0591      	lsls	r1, r2, #22
 80042ae:	f57f af1b 	bpl.w	80040e8 <_scanf_float+0x60>
 80042b2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80042b6:	6022      	str	r2, [r4, #0]
 80042b8:	f8cd 9004 	str.w	r9, [sp, #4]
 80042bc:	e7a8      	b.n	8004210 <_scanf_float+0x188>
 80042be:	6822      	ldr	r2, [r4, #0]
 80042c0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80042c4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80042c8:	d006      	beq.n	80042d8 <_scanf_float+0x250>
 80042ca:	0550      	lsls	r0, r2, #21
 80042cc:	f57f af0c 	bpl.w	80040e8 <_scanf_float+0x60>
 80042d0:	f1b9 0f00 	cmp.w	r9, #0
 80042d4:	f43f af0f 	beq.w	80040f6 <_scanf_float+0x6e>
 80042d8:	0591      	lsls	r1, r2, #22
 80042da:	bf58      	it	pl
 80042dc:	9901      	ldrpl	r1, [sp, #4]
 80042de:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80042e2:	bf58      	it	pl
 80042e4:	eba9 0101 	subpl.w	r1, r9, r1
 80042e8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80042ec:	bf58      	it	pl
 80042ee:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80042f2:	6022      	str	r2, [r4, #0]
 80042f4:	f04f 0900 	mov.w	r9, #0
 80042f8:	e78a      	b.n	8004210 <_scanf_float+0x188>
 80042fa:	f04f 0a03 	mov.w	sl, #3
 80042fe:	e787      	b.n	8004210 <_scanf_float+0x188>
 8004300:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004304:	4639      	mov	r1, r7
 8004306:	4640      	mov	r0, r8
 8004308:	4798      	blx	r3
 800430a:	2800      	cmp	r0, #0
 800430c:	f43f aedf 	beq.w	80040ce <_scanf_float+0x46>
 8004310:	e6ea      	b.n	80040e8 <_scanf_float+0x60>
 8004312:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004316:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800431a:	463a      	mov	r2, r7
 800431c:	4640      	mov	r0, r8
 800431e:	4798      	blx	r3
 8004320:	6923      	ldr	r3, [r4, #16]
 8004322:	3b01      	subs	r3, #1
 8004324:	6123      	str	r3, [r4, #16]
 8004326:	e6ec      	b.n	8004102 <_scanf_float+0x7a>
 8004328:	1e6b      	subs	r3, r5, #1
 800432a:	2b06      	cmp	r3, #6
 800432c:	d825      	bhi.n	800437a <_scanf_float+0x2f2>
 800432e:	2d02      	cmp	r5, #2
 8004330:	d836      	bhi.n	80043a0 <_scanf_float+0x318>
 8004332:	455e      	cmp	r6, fp
 8004334:	f67f aee8 	bls.w	8004108 <_scanf_float+0x80>
 8004338:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800433c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004340:	463a      	mov	r2, r7
 8004342:	4640      	mov	r0, r8
 8004344:	4798      	blx	r3
 8004346:	6923      	ldr	r3, [r4, #16]
 8004348:	3b01      	subs	r3, #1
 800434a:	6123      	str	r3, [r4, #16]
 800434c:	e7f1      	b.n	8004332 <_scanf_float+0x2aa>
 800434e:	9802      	ldr	r0, [sp, #8]
 8004350:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004354:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8004358:	9002      	str	r0, [sp, #8]
 800435a:	463a      	mov	r2, r7
 800435c:	4640      	mov	r0, r8
 800435e:	4798      	blx	r3
 8004360:	6923      	ldr	r3, [r4, #16]
 8004362:	3b01      	subs	r3, #1
 8004364:	6123      	str	r3, [r4, #16]
 8004366:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800436a:	fa5f fa8a 	uxtb.w	sl, sl
 800436e:	f1ba 0f02 	cmp.w	sl, #2
 8004372:	d1ec      	bne.n	800434e <_scanf_float+0x2c6>
 8004374:	3d03      	subs	r5, #3
 8004376:	b2ed      	uxtb	r5, r5
 8004378:	1b76      	subs	r6, r6, r5
 800437a:	6823      	ldr	r3, [r4, #0]
 800437c:	05da      	lsls	r2, r3, #23
 800437e:	d52f      	bpl.n	80043e0 <_scanf_float+0x358>
 8004380:	055b      	lsls	r3, r3, #21
 8004382:	d510      	bpl.n	80043a6 <_scanf_float+0x31e>
 8004384:	455e      	cmp	r6, fp
 8004386:	f67f aebf 	bls.w	8004108 <_scanf_float+0x80>
 800438a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800438e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004392:	463a      	mov	r2, r7
 8004394:	4640      	mov	r0, r8
 8004396:	4798      	blx	r3
 8004398:	6923      	ldr	r3, [r4, #16]
 800439a:	3b01      	subs	r3, #1
 800439c:	6123      	str	r3, [r4, #16]
 800439e:	e7f1      	b.n	8004384 <_scanf_float+0x2fc>
 80043a0:	46aa      	mov	sl, r5
 80043a2:	9602      	str	r6, [sp, #8]
 80043a4:	e7df      	b.n	8004366 <_scanf_float+0x2de>
 80043a6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80043aa:	6923      	ldr	r3, [r4, #16]
 80043ac:	2965      	cmp	r1, #101	; 0x65
 80043ae:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80043b2:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 80043b6:	6123      	str	r3, [r4, #16]
 80043b8:	d00c      	beq.n	80043d4 <_scanf_float+0x34c>
 80043ba:	2945      	cmp	r1, #69	; 0x45
 80043bc:	d00a      	beq.n	80043d4 <_scanf_float+0x34c>
 80043be:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80043c2:	463a      	mov	r2, r7
 80043c4:	4640      	mov	r0, r8
 80043c6:	4798      	blx	r3
 80043c8:	6923      	ldr	r3, [r4, #16]
 80043ca:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80043ce:	3b01      	subs	r3, #1
 80043d0:	1eb5      	subs	r5, r6, #2
 80043d2:	6123      	str	r3, [r4, #16]
 80043d4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80043d8:	463a      	mov	r2, r7
 80043da:	4640      	mov	r0, r8
 80043dc:	4798      	blx	r3
 80043de:	462e      	mov	r6, r5
 80043e0:	6825      	ldr	r5, [r4, #0]
 80043e2:	f015 0510 	ands.w	r5, r5, #16
 80043e6:	d159      	bne.n	800449c <_scanf_float+0x414>
 80043e8:	7035      	strb	r5, [r6, #0]
 80043ea:	6823      	ldr	r3, [r4, #0]
 80043ec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80043f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043f4:	d11b      	bne.n	800442e <_scanf_float+0x3a6>
 80043f6:	9b01      	ldr	r3, [sp, #4]
 80043f8:	454b      	cmp	r3, r9
 80043fa:	eba3 0209 	sub.w	r2, r3, r9
 80043fe:	d123      	bne.n	8004448 <_scanf_float+0x3c0>
 8004400:	2200      	movs	r2, #0
 8004402:	4659      	mov	r1, fp
 8004404:	4640      	mov	r0, r8
 8004406:	f000 fedd 	bl	80051c4 <_strtod_r>
 800440a:	6822      	ldr	r2, [r4, #0]
 800440c:	9b03      	ldr	r3, [sp, #12]
 800440e:	f012 0f02 	tst.w	r2, #2
 8004412:	ec57 6b10 	vmov	r6, r7, d0
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	d021      	beq.n	800445e <_scanf_float+0x3d6>
 800441a:	9903      	ldr	r1, [sp, #12]
 800441c:	1d1a      	adds	r2, r3, #4
 800441e:	600a      	str	r2, [r1, #0]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	e9c3 6700 	strd	r6, r7, [r3]
 8004426:	68e3      	ldr	r3, [r4, #12]
 8004428:	3301      	adds	r3, #1
 800442a:	60e3      	str	r3, [r4, #12]
 800442c:	e66d      	b.n	800410a <_scanf_float+0x82>
 800442e:	9b04      	ldr	r3, [sp, #16]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d0e5      	beq.n	8004400 <_scanf_float+0x378>
 8004434:	9905      	ldr	r1, [sp, #20]
 8004436:	230a      	movs	r3, #10
 8004438:	462a      	mov	r2, r5
 800443a:	3101      	adds	r1, #1
 800443c:	4640      	mov	r0, r8
 800443e:	f000 ff49 	bl	80052d4 <_strtol_r>
 8004442:	9b04      	ldr	r3, [sp, #16]
 8004444:	9e05      	ldr	r6, [sp, #20]
 8004446:	1ac2      	subs	r2, r0, r3
 8004448:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800444c:	429e      	cmp	r6, r3
 800444e:	bf28      	it	cs
 8004450:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8004454:	4912      	ldr	r1, [pc, #72]	; (80044a0 <_scanf_float+0x418>)
 8004456:	4630      	mov	r0, r6
 8004458:	f000 f82c 	bl	80044b4 <siprintf>
 800445c:	e7d0      	b.n	8004400 <_scanf_float+0x378>
 800445e:	9903      	ldr	r1, [sp, #12]
 8004460:	f012 0f04 	tst.w	r2, #4
 8004464:	f103 0204 	add.w	r2, r3, #4
 8004468:	600a      	str	r2, [r1, #0]
 800446a:	d1d9      	bne.n	8004420 <_scanf_float+0x398>
 800446c:	f8d3 8000 	ldr.w	r8, [r3]
 8004470:	ee10 2a10 	vmov	r2, s0
 8004474:	ee10 0a10 	vmov	r0, s0
 8004478:	463b      	mov	r3, r7
 800447a:	4639      	mov	r1, r7
 800447c:	f7fc fb56 	bl	8000b2c <__aeabi_dcmpun>
 8004480:	b128      	cbz	r0, 800448e <_scanf_float+0x406>
 8004482:	4808      	ldr	r0, [pc, #32]	; (80044a4 <_scanf_float+0x41c>)
 8004484:	f000 f810 	bl	80044a8 <nanf>
 8004488:	ed88 0a00 	vstr	s0, [r8]
 800448c:	e7cb      	b.n	8004426 <_scanf_float+0x39e>
 800448e:	4630      	mov	r0, r6
 8004490:	4639      	mov	r1, r7
 8004492:	f7fc fb81 	bl	8000b98 <__aeabi_d2f>
 8004496:	f8c8 0000 	str.w	r0, [r8]
 800449a:	e7c4      	b.n	8004426 <_scanf_float+0x39e>
 800449c:	2500      	movs	r5, #0
 800449e:	e634      	b.n	800410a <_scanf_float+0x82>
 80044a0:	080076f4 	.word	0x080076f4
 80044a4:	08007ac2 	.word	0x08007ac2

080044a8 <nanf>:
 80044a8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80044b0 <nanf+0x8>
 80044ac:	4770      	bx	lr
 80044ae:	bf00      	nop
 80044b0:	7fc00000 	.word	0x7fc00000

080044b4 <siprintf>:
 80044b4:	b40e      	push	{r1, r2, r3}
 80044b6:	b500      	push	{lr}
 80044b8:	b09c      	sub	sp, #112	; 0x70
 80044ba:	ab1d      	add	r3, sp, #116	; 0x74
 80044bc:	9002      	str	r0, [sp, #8]
 80044be:	9006      	str	r0, [sp, #24]
 80044c0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80044c4:	4809      	ldr	r0, [pc, #36]	; (80044ec <siprintf+0x38>)
 80044c6:	9107      	str	r1, [sp, #28]
 80044c8:	9104      	str	r1, [sp, #16]
 80044ca:	4909      	ldr	r1, [pc, #36]	; (80044f0 <siprintf+0x3c>)
 80044cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80044d0:	9105      	str	r1, [sp, #20]
 80044d2:	6800      	ldr	r0, [r0, #0]
 80044d4:	9301      	str	r3, [sp, #4]
 80044d6:	a902      	add	r1, sp, #8
 80044d8:	f002 f88a 	bl	80065f0 <_svfiprintf_r>
 80044dc:	9b02      	ldr	r3, [sp, #8]
 80044de:	2200      	movs	r2, #0
 80044e0:	701a      	strb	r2, [r3, #0]
 80044e2:	b01c      	add	sp, #112	; 0x70
 80044e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80044e8:	b003      	add	sp, #12
 80044ea:	4770      	bx	lr
 80044ec:	2000000c 	.word	0x2000000c
 80044f0:	ffff0208 	.word	0xffff0208

080044f4 <__sread>:
 80044f4:	b510      	push	{r4, lr}
 80044f6:	460c      	mov	r4, r1
 80044f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044fc:	f002 fb0c 	bl	8006b18 <_read_r>
 8004500:	2800      	cmp	r0, #0
 8004502:	bfab      	itete	ge
 8004504:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004506:	89a3      	ldrhlt	r3, [r4, #12]
 8004508:	181b      	addge	r3, r3, r0
 800450a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800450e:	bfac      	ite	ge
 8004510:	6563      	strge	r3, [r4, #84]	; 0x54
 8004512:	81a3      	strhlt	r3, [r4, #12]
 8004514:	bd10      	pop	{r4, pc}

08004516 <__swrite>:
 8004516:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800451a:	461f      	mov	r7, r3
 800451c:	898b      	ldrh	r3, [r1, #12]
 800451e:	05db      	lsls	r3, r3, #23
 8004520:	4605      	mov	r5, r0
 8004522:	460c      	mov	r4, r1
 8004524:	4616      	mov	r6, r2
 8004526:	d505      	bpl.n	8004534 <__swrite+0x1e>
 8004528:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800452c:	2302      	movs	r3, #2
 800452e:	2200      	movs	r2, #0
 8004530:	f001 fa64 	bl	80059fc <_lseek_r>
 8004534:	89a3      	ldrh	r3, [r4, #12]
 8004536:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800453a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800453e:	81a3      	strh	r3, [r4, #12]
 8004540:	4632      	mov	r2, r6
 8004542:	463b      	mov	r3, r7
 8004544:	4628      	mov	r0, r5
 8004546:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800454a:	f000 bec5 	b.w	80052d8 <_write_r>

0800454e <__sseek>:
 800454e:	b510      	push	{r4, lr}
 8004550:	460c      	mov	r4, r1
 8004552:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004556:	f001 fa51 	bl	80059fc <_lseek_r>
 800455a:	1c43      	adds	r3, r0, #1
 800455c:	89a3      	ldrh	r3, [r4, #12]
 800455e:	bf15      	itete	ne
 8004560:	6560      	strne	r0, [r4, #84]	; 0x54
 8004562:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004566:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800456a:	81a3      	strheq	r3, [r4, #12]
 800456c:	bf18      	it	ne
 800456e:	81a3      	strhne	r3, [r4, #12]
 8004570:	bd10      	pop	{r4, pc}

08004572 <__sclose>:
 8004572:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004576:	f000 bec1 	b.w	80052fc <_close_r>

0800457a <sulp>:
 800457a:	b570      	push	{r4, r5, r6, lr}
 800457c:	4604      	mov	r4, r0
 800457e:	460d      	mov	r5, r1
 8004580:	ec45 4b10 	vmov	d0, r4, r5
 8004584:	4616      	mov	r6, r2
 8004586:	f001 fddd 	bl	8006144 <__ulp>
 800458a:	ec51 0b10 	vmov	r0, r1, d0
 800458e:	b17e      	cbz	r6, 80045b0 <sulp+0x36>
 8004590:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8004594:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004598:	2b00      	cmp	r3, #0
 800459a:	dd09      	ble.n	80045b0 <sulp+0x36>
 800459c:	051b      	lsls	r3, r3, #20
 800459e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80045a2:	2400      	movs	r4, #0
 80045a4:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80045a8:	4622      	mov	r2, r4
 80045aa:	462b      	mov	r3, r5
 80045ac:	f7fc f824 	bl	80005f8 <__aeabi_dmul>
 80045b0:	bd70      	pop	{r4, r5, r6, pc}
 80045b2:	0000      	movs	r0, r0
 80045b4:	0000      	movs	r0, r0
	...

080045b8 <_strtod_l>:
 80045b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045bc:	ed2d 8b02 	vpush	{d8}
 80045c0:	b09d      	sub	sp, #116	; 0x74
 80045c2:	461f      	mov	r7, r3
 80045c4:	2300      	movs	r3, #0
 80045c6:	9318      	str	r3, [sp, #96]	; 0x60
 80045c8:	4ba2      	ldr	r3, [pc, #648]	; (8004854 <_strtod_l+0x29c>)
 80045ca:	9213      	str	r2, [sp, #76]	; 0x4c
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	9305      	str	r3, [sp, #20]
 80045d0:	4604      	mov	r4, r0
 80045d2:	4618      	mov	r0, r3
 80045d4:	4688      	mov	r8, r1
 80045d6:	f7fb fdfb 	bl	80001d0 <strlen>
 80045da:	f04f 0a00 	mov.w	sl, #0
 80045de:	4605      	mov	r5, r0
 80045e0:	f04f 0b00 	mov.w	fp, #0
 80045e4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80045e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80045ea:	781a      	ldrb	r2, [r3, #0]
 80045ec:	2a2b      	cmp	r2, #43	; 0x2b
 80045ee:	d04e      	beq.n	800468e <_strtod_l+0xd6>
 80045f0:	d83b      	bhi.n	800466a <_strtod_l+0xb2>
 80045f2:	2a0d      	cmp	r2, #13
 80045f4:	d834      	bhi.n	8004660 <_strtod_l+0xa8>
 80045f6:	2a08      	cmp	r2, #8
 80045f8:	d834      	bhi.n	8004664 <_strtod_l+0xac>
 80045fa:	2a00      	cmp	r2, #0
 80045fc:	d03e      	beq.n	800467c <_strtod_l+0xc4>
 80045fe:	2300      	movs	r3, #0
 8004600:	930a      	str	r3, [sp, #40]	; 0x28
 8004602:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8004604:	7833      	ldrb	r3, [r6, #0]
 8004606:	2b30      	cmp	r3, #48	; 0x30
 8004608:	f040 80b0 	bne.w	800476c <_strtod_l+0x1b4>
 800460c:	7873      	ldrb	r3, [r6, #1]
 800460e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8004612:	2b58      	cmp	r3, #88	; 0x58
 8004614:	d168      	bne.n	80046e8 <_strtod_l+0x130>
 8004616:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004618:	9301      	str	r3, [sp, #4]
 800461a:	ab18      	add	r3, sp, #96	; 0x60
 800461c:	9702      	str	r7, [sp, #8]
 800461e:	9300      	str	r3, [sp, #0]
 8004620:	4a8d      	ldr	r2, [pc, #564]	; (8004858 <_strtod_l+0x2a0>)
 8004622:	ab19      	add	r3, sp, #100	; 0x64
 8004624:	a917      	add	r1, sp, #92	; 0x5c
 8004626:	4620      	mov	r0, r4
 8004628:	f000 fee0 	bl	80053ec <__gethex>
 800462c:	f010 0707 	ands.w	r7, r0, #7
 8004630:	4605      	mov	r5, r0
 8004632:	d005      	beq.n	8004640 <_strtod_l+0x88>
 8004634:	2f06      	cmp	r7, #6
 8004636:	d12c      	bne.n	8004692 <_strtod_l+0xda>
 8004638:	3601      	adds	r6, #1
 800463a:	2300      	movs	r3, #0
 800463c:	9617      	str	r6, [sp, #92]	; 0x5c
 800463e:	930a      	str	r3, [sp, #40]	; 0x28
 8004640:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004642:	2b00      	cmp	r3, #0
 8004644:	f040 8590 	bne.w	8005168 <_strtod_l+0xbb0>
 8004648:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800464a:	b1eb      	cbz	r3, 8004688 <_strtod_l+0xd0>
 800464c:	4652      	mov	r2, sl
 800464e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8004652:	ec43 2b10 	vmov	d0, r2, r3
 8004656:	b01d      	add	sp, #116	; 0x74
 8004658:	ecbd 8b02 	vpop	{d8}
 800465c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004660:	2a20      	cmp	r2, #32
 8004662:	d1cc      	bne.n	80045fe <_strtod_l+0x46>
 8004664:	3301      	adds	r3, #1
 8004666:	9317      	str	r3, [sp, #92]	; 0x5c
 8004668:	e7be      	b.n	80045e8 <_strtod_l+0x30>
 800466a:	2a2d      	cmp	r2, #45	; 0x2d
 800466c:	d1c7      	bne.n	80045fe <_strtod_l+0x46>
 800466e:	2201      	movs	r2, #1
 8004670:	920a      	str	r2, [sp, #40]	; 0x28
 8004672:	1c5a      	adds	r2, r3, #1
 8004674:	9217      	str	r2, [sp, #92]	; 0x5c
 8004676:	785b      	ldrb	r3, [r3, #1]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d1c2      	bne.n	8004602 <_strtod_l+0x4a>
 800467c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800467e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8004682:	2b00      	cmp	r3, #0
 8004684:	f040 856e 	bne.w	8005164 <_strtod_l+0xbac>
 8004688:	4652      	mov	r2, sl
 800468a:	465b      	mov	r3, fp
 800468c:	e7e1      	b.n	8004652 <_strtod_l+0x9a>
 800468e:	2200      	movs	r2, #0
 8004690:	e7ee      	b.n	8004670 <_strtod_l+0xb8>
 8004692:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8004694:	b13a      	cbz	r2, 80046a6 <_strtod_l+0xee>
 8004696:	2135      	movs	r1, #53	; 0x35
 8004698:	a81a      	add	r0, sp, #104	; 0x68
 800469a:	f001 fe5e 	bl	800635a <__copybits>
 800469e:	9918      	ldr	r1, [sp, #96]	; 0x60
 80046a0:	4620      	mov	r0, r4
 80046a2:	f001 fa1d 	bl	8005ae0 <_Bfree>
 80046a6:	3f01      	subs	r7, #1
 80046a8:	2f04      	cmp	r7, #4
 80046aa:	d806      	bhi.n	80046ba <_strtod_l+0x102>
 80046ac:	e8df f007 	tbb	[pc, r7]
 80046b0:	1714030a 	.word	0x1714030a
 80046b4:	0a          	.byte	0x0a
 80046b5:	00          	.byte	0x00
 80046b6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 80046ba:	0728      	lsls	r0, r5, #28
 80046bc:	d5c0      	bpl.n	8004640 <_strtod_l+0x88>
 80046be:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80046c2:	e7bd      	b.n	8004640 <_strtod_l+0x88>
 80046c4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 80046c8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80046ca:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80046ce:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80046d2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80046d6:	e7f0      	b.n	80046ba <_strtod_l+0x102>
 80046d8:	f8df b180 	ldr.w	fp, [pc, #384]	; 800485c <_strtod_l+0x2a4>
 80046dc:	e7ed      	b.n	80046ba <_strtod_l+0x102>
 80046de:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80046e2:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80046e6:	e7e8      	b.n	80046ba <_strtod_l+0x102>
 80046e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80046ea:	1c5a      	adds	r2, r3, #1
 80046ec:	9217      	str	r2, [sp, #92]	; 0x5c
 80046ee:	785b      	ldrb	r3, [r3, #1]
 80046f0:	2b30      	cmp	r3, #48	; 0x30
 80046f2:	d0f9      	beq.n	80046e8 <_strtod_l+0x130>
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d0a3      	beq.n	8004640 <_strtod_l+0x88>
 80046f8:	2301      	movs	r3, #1
 80046fa:	f04f 0900 	mov.w	r9, #0
 80046fe:	9304      	str	r3, [sp, #16]
 8004700:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004702:	9308      	str	r3, [sp, #32]
 8004704:	f8cd 901c 	str.w	r9, [sp, #28]
 8004708:	464f      	mov	r7, r9
 800470a:	220a      	movs	r2, #10
 800470c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800470e:	7806      	ldrb	r6, [r0, #0]
 8004710:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8004714:	b2d9      	uxtb	r1, r3
 8004716:	2909      	cmp	r1, #9
 8004718:	d92a      	bls.n	8004770 <_strtod_l+0x1b8>
 800471a:	9905      	ldr	r1, [sp, #20]
 800471c:	462a      	mov	r2, r5
 800471e:	f002 fa27 	bl	8006b70 <strncmp>
 8004722:	b398      	cbz	r0, 800478c <_strtod_l+0x1d4>
 8004724:	2000      	movs	r0, #0
 8004726:	4632      	mov	r2, r6
 8004728:	463d      	mov	r5, r7
 800472a:	9005      	str	r0, [sp, #20]
 800472c:	4603      	mov	r3, r0
 800472e:	2a65      	cmp	r2, #101	; 0x65
 8004730:	d001      	beq.n	8004736 <_strtod_l+0x17e>
 8004732:	2a45      	cmp	r2, #69	; 0x45
 8004734:	d118      	bne.n	8004768 <_strtod_l+0x1b0>
 8004736:	b91d      	cbnz	r5, 8004740 <_strtod_l+0x188>
 8004738:	9a04      	ldr	r2, [sp, #16]
 800473a:	4302      	orrs	r2, r0
 800473c:	d09e      	beq.n	800467c <_strtod_l+0xc4>
 800473e:	2500      	movs	r5, #0
 8004740:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8004744:	f108 0201 	add.w	r2, r8, #1
 8004748:	9217      	str	r2, [sp, #92]	; 0x5c
 800474a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800474e:	2a2b      	cmp	r2, #43	; 0x2b
 8004750:	d075      	beq.n	800483e <_strtod_l+0x286>
 8004752:	2a2d      	cmp	r2, #45	; 0x2d
 8004754:	d07b      	beq.n	800484e <_strtod_l+0x296>
 8004756:	f04f 0c00 	mov.w	ip, #0
 800475a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800475e:	2909      	cmp	r1, #9
 8004760:	f240 8082 	bls.w	8004868 <_strtod_l+0x2b0>
 8004764:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8004768:	2600      	movs	r6, #0
 800476a:	e09d      	b.n	80048a8 <_strtod_l+0x2f0>
 800476c:	2300      	movs	r3, #0
 800476e:	e7c4      	b.n	80046fa <_strtod_l+0x142>
 8004770:	2f08      	cmp	r7, #8
 8004772:	bfd8      	it	le
 8004774:	9907      	ldrle	r1, [sp, #28]
 8004776:	f100 0001 	add.w	r0, r0, #1
 800477a:	bfda      	itte	le
 800477c:	fb02 3301 	mlale	r3, r2, r1, r3
 8004780:	9307      	strle	r3, [sp, #28]
 8004782:	fb02 3909 	mlagt	r9, r2, r9, r3
 8004786:	3701      	adds	r7, #1
 8004788:	9017      	str	r0, [sp, #92]	; 0x5c
 800478a:	e7bf      	b.n	800470c <_strtod_l+0x154>
 800478c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800478e:	195a      	adds	r2, r3, r5
 8004790:	9217      	str	r2, [sp, #92]	; 0x5c
 8004792:	5d5a      	ldrb	r2, [r3, r5]
 8004794:	2f00      	cmp	r7, #0
 8004796:	d037      	beq.n	8004808 <_strtod_l+0x250>
 8004798:	9005      	str	r0, [sp, #20]
 800479a:	463d      	mov	r5, r7
 800479c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80047a0:	2b09      	cmp	r3, #9
 80047a2:	d912      	bls.n	80047ca <_strtod_l+0x212>
 80047a4:	2301      	movs	r3, #1
 80047a6:	e7c2      	b.n	800472e <_strtod_l+0x176>
 80047a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80047aa:	1c5a      	adds	r2, r3, #1
 80047ac:	9217      	str	r2, [sp, #92]	; 0x5c
 80047ae:	785a      	ldrb	r2, [r3, #1]
 80047b0:	3001      	adds	r0, #1
 80047b2:	2a30      	cmp	r2, #48	; 0x30
 80047b4:	d0f8      	beq.n	80047a8 <_strtod_l+0x1f0>
 80047b6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80047ba:	2b08      	cmp	r3, #8
 80047bc:	f200 84d9 	bhi.w	8005172 <_strtod_l+0xbba>
 80047c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80047c2:	9005      	str	r0, [sp, #20]
 80047c4:	2000      	movs	r0, #0
 80047c6:	9308      	str	r3, [sp, #32]
 80047c8:	4605      	mov	r5, r0
 80047ca:	3a30      	subs	r2, #48	; 0x30
 80047cc:	f100 0301 	add.w	r3, r0, #1
 80047d0:	d014      	beq.n	80047fc <_strtod_l+0x244>
 80047d2:	9905      	ldr	r1, [sp, #20]
 80047d4:	4419      	add	r1, r3
 80047d6:	9105      	str	r1, [sp, #20]
 80047d8:	462b      	mov	r3, r5
 80047da:	eb00 0e05 	add.w	lr, r0, r5
 80047de:	210a      	movs	r1, #10
 80047e0:	4573      	cmp	r3, lr
 80047e2:	d113      	bne.n	800480c <_strtod_l+0x254>
 80047e4:	182b      	adds	r3, r5, r0
 80047e6:	2b08      	cmp	r3, #8
 80047e8:	f105 0501 	add.w	r5, r5, #1
 80047ec:	4405      	add	r5, r0
 80047ee:	dc1c      	bgt.n	800482a <_strtod_l+0x272>
 80047f0:	9907      	ldr	r1, [sp, #28]
 80047f2:	230a      	movs	r3, #10
 80047f4:	fb03 2301 	mla	r3, r3, r1, r2
 80047f8:	9307      	str	r3, [sp, #28]
 80047fa:	2300      	movs	r3, #0
 80047fc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80047fe:	1c51      	adds	r1, r2, #1
 8004800:	9117      	str	r1, [sp, #92]	; 0x5c
 8004802:	7852      	ldrb	r2, [r2, #1]
 8004804:	4618      	mov	r0, r3
 8004806:	e7c9      	b.n	800479c <_strtod_l+0x1e4>
 8004808:	4638      	mov	r0, r7
 800480a:	e7d2      	b.n	80047b2 <_strtod_l+0x1fa>
 800480c:	2b08      	cmp	r3, #8
 800480e:	dc04      	bgt.n	800481a <_strtod_l+0x262>
 8004810:	9e07      	ldr	r6, [sp, #28]
 8004812:	434e      	muls	r6, r1
 8004814:	9607      	str	r6, [sp, #28]
 8004816:	3301      	adds	r3, #1
 8004818:	e7e2      	b.n	80047e0 <_strtod_l+0x228>
 800481a:	f103 0c01 	add.w	ip, r3, #1
 800481e:	f1bc 0f10 	cmp.w	ip, #16
 8004822:	bfd8      	it	le
 8004824:	fb01 f909 	mulle.w	r9, r1, r9
 8004828:	e7f5      	b.n	8004816 <_strtod_l+0x25e>
 800482a:	2d10      	cmp	r5, #16
 800482c:	bfdc      	itt	le
 800482e:	230a      	movle	r3, #10
 8004830:	fb03 2909 	mlale	r9, r3, r9, r2
 8004834:	e7e1      	b.n	80047fa <_strtod_l+0x242>
 8004836:	2300      	movs	r3, #0
 8004838:	9305      	str	r3, [sp, #20]
 800483a:	2301      	movs	r3, #1
 800483c:	e77c      	b.n	8004738 <_strtod_l+0x180>
 800483e:	f04f 0c00 	mov.w	ip, #0
 8004842:	f108 0202 	add.w	r2, r8, #2
 8004846:	9217      	str	r2, [sp, #92]	; 0x5c
 8004848:	f898 2002 	ldrb.w	r2, [r8, #2]
 800484c:	e785      	b.n	800475a <_strtod_l+0x1a2>
 800484e:	f04f 0c01 	mov.w	ip, #1
 8004852:	e7f6      	b.n	8004842 <_strtod_l+0x28a>
 8004854:	080078d0 	.word	0x080078d0
 8004858:	08007708 	.word	0x08007708
 800485c:	7ff00000 	.word	0x7ff00000
 8004860:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004862:	1c51      	adds	r1, r2, #1
 8004864:	9117      	str	r1, [sp, #92]	; 0x5c
 8004866:	7852      	ldrb	r2, [r2, #1]
 8004868:	2a30      	cmp	r2, #48	; 0x30
 800486a:	d0f9      	beq.n	8004860 <_strtod_l+0x2a8>
 800486c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8004870:	2908      	cmp	r1, #8
 8004872:	f63f af79 	bhi.w	8004768 <_strtod_l+0x1b0>
 8004876:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800487a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800487c:	9206      	str	r2, [sp, #24]
 800487e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004880:	1c51      	adds	r1, r2, #1
 8004882:	9117      	str	r1, [sp, #92]	; 0x5c
 8004884:	7852      	ldrb	r2, [r2, #1]
 8004886:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800488a:	2e09      	cmp	r6, #9
 800488c:	d937      	bls.n	80048fe <_strtod_l+0x346>
 800488e:	9e06      	ldr	r6, [sp, #24]
 8004890:	1b89      	subs	r1, r1, r6
 8004892:	2908      	cmp	r1, #8
 8004894:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8004898:	dc02      	bgt.n	80048a0 <_strtod_l+0x2e8>
 800489a:	4576      	cmp	r6, lr
 800489c:	bfa8      	it	ge
 800489e:	4676      	movge	r6, lr
 80048a0:	f1bc 0f00 	cmp.w	ip, #0
 80048a4:	d000      	beq.n	80048a8 <_strtod_l+0x2f0>
 80048a6:	4276      	negs	r6, r6
 80048a8:	2d00      	cmp	r5, #0
 80048aa:	d14d      	bne.n	8004948 <_strtod_l+0x390>
 80048ac:	9904      	ldr	r1, [sp, #16]
 80048ae:	4301      	orrs	r1, r0
 80048b0:	f47f aec6 	bne.w	8004640 <_strtod_l+0x88>
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	f47f aee1 	bne.w	800467c <_strtod_l+0xc4>
 80048ba:	2a69      	cmp	r2, #105	; 0x69
 80048bc:	d027      	beq.n	800490e <_strtod_l+0x356>
 80048be:	dc24      	bgt.n	800490a <_strtod_l+0x352>
 80048c0:	2a49      	cmp	r2, #73	; 0x49
 80048c2:	d024      	beq.n	800490e <_strtod_l+0x356>
 80048c4:	2a4e      	cmp	r2, #78	; 0x4e
 80048c6:	f47f aed9 	bne.w	800467c <_strtod_l+0xc4>
 80048ca:	499f      	ldr	r1, [pc, #636]	; (8004b48 <_strtod_l+0x590>)
 80048cc:	a817      	add	r0, sp, #92	; 0x5c
 80048ce:	f000 ffe5 	bl	800589c <__match>
 80048d2:	2800      	cmp	r0, #0
 80048d4:	f43f aed2 	beq.w	800467c <_strtod_l+0xc4>
 80048d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80048da:	781b      	ldrb	r3, [r3, #0]
 80048dc:	2b28      	cmp	r3, #40	; 0x28
 80048de:	d12d      	bne.n	800493c <_strtod_l+0x384>
 80048e0:	499a      	ldr	r1, [pc, #616]	; (8004b4c <_strtod_l+0x594>)
 80048e2:	aa1a      	add	r2, sp, #104	; 0x68
 80048e4:	a817      	add	r0, sp, #92	; 0x5c
 80048e6:	f000 ffed 	bl	80058c4 <__hexnan>
 80048ea:	2805      	cmp	r0, #5
 80048ec:	d126      	bne.n	800493c <_strtod_l+0x384>
 80048ee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80048f0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80048f4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80048f8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80048fc:	e6a0      	b.n	8004640 <_strtod_l+0x88>
 80048fe:	210a      	movs	r1, #10
 8004900:	fb01 2e0e 	mla	lr, r1, lr, r2
 8004904:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8004908:	e7b9      	b.n	800487e <_strtod_l+0x2c6>
 800490a:	2a6e      	cmp	r2, #110	; 0x6e
 800490c:	e7db      	b.n	80048c6 <_strtod_l+0x30e>
 800490e:	4990      	ldr	r1, [pc, #576]	; (8004b50 <_strtod_l+0x598>)
 8004910:	a817      	add	r0, sp, #92	; 0x5c
 8004912:	f000 ffc3 	bl	800589c <__match>
 8004916:	2800      	cmp	r0, #0
 8004918:	f43f aeb0 	beq.w	800467c <_strtod_l+0xc4>
 800491c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800491e:	498d      	ldr	r1, [pc, #564]	; (8004b54 <_strtod_l+0x59c>)
 8004920:	3b01      	subs	r3, #1
 8004922:	a817      	add	r0, sp, #92	; 0x5c
 8004924:	9317      	str	r3, [sp, #92]	; 0x5c
 8004926:	f000 ffb9 	bl	800589c <__match>
 800492a:	b910      	cbnz	r0, 8004932 <_strtod_l+0x37a>
 800492c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800492e:	3301      	adds	r3, #1
 8004930:	9317      	str	r3, [sp, #92]	; 0x5c
 8004932:	f8df b230 	ldr.w	fp, [pc, #560]	; 8004b64 <_strtod_l+0x5ac>
 8004936:	f04f 0a00 	mov.w	sl, #0
 800493a:	e681      	b.n	8004640 <_strtod_l+0x88>
 800493c:	4886      	ldr	r0, [pc, #536]	; (8004b58 <_strtod_l+0x5a0>)
 800493e:	f002 f8ff 	bl	8006b40 <nan>
 8004942:	ec5b ab10 	vmov	sl, fp, d0
 8004946:	e67b      	b.n	8004640 <_strtod_l+0x88>
 8004948:	9b05      	ldr	r3, [sp, #20]
 800494a:	9807      	ldr	r0, [sp, #28]
 800494c:	1af3      	subs	r3, r6, r3
 800494e:	2f00      	cmp	r7, #0
 8004950:	bf08      	it	eq
 8004952:	462f      	moveq	r7, r5
 8004954:	2d10      	cmp	r5, #16
 8004956:	9306      	str	r3, [sp, #24]
 8004958:	46a8      	mov	r8, r5
 800495a:	bfa8      	it	ge
 800495c:	f04f 0810 	movge.w	r8, #16
 8004960:	f7fb fdd0 	bl	8000504 <__aeabi_ui2d>
 8004964:	2d09      	cmp	r5, #9
 8004966:	4682      	mov	sl, r0
 8004968:	468b      	mov	fp, r1
 800496a:	dd13      	ble.n	8004994 <_strtod_l+0x3dc>
 800496c:	4b7b      	ldr	r3, [pc, #492]	; (8004b5c <_strtod_l+0x5a4>)
 800496e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8004972:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8004976:	f7fb fe3f 	bl	80005f8 <__aeabi_dmul>
 800497a:	4682      	mov	sl, r0
 800497c:	4648      	mov	r0, r9
 800497e:	468b      	mov	fp, r1
 8004980:	f7fb fdc0 	bl	8000504 <__aeabi_ui2d>
 8004984:	4602      	mov	r2, r0
 8004986:	460b      	mov	r3, r1
 8004988:	4650      	mov	r0, sl
 800498a:	4659      	mov	r1, fp
 800498c:	f7fb fc7e 	bl	800028c <__adddf3>
 8004990:	4682      	mov	sl, r0
 8004992:	468b      	mov	fp, r1
 8004994:	2d0f      	cmp	r5, #15
 8004996:	dc38      	bgt.n	8004a0a <_strtod_l+0x452>
 8004998:	9b06      	ldr	r3, [sp, #24]
 800499a:	2b00      	cmp	r3, #0
 800499c:	f43f ae50 	beq.w	8004640 <_strtod_l+0x88>
 80049a0:	dd24      	ble.n	80049ec <_strtod_l+0x434>
 80049a2:	2b16      	cmp	r3, #22
 80049a4:	dc0b      	bgt.n	80049be <_strtod_l+0x406>
 80049a6:	496d      	ldr	r1, [pc, #436]	; (8004b5c <_strtod_l+0x5a4>)
 80049a8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80049ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80049b0:	4652      	mov	r2, sl
 80049b2:	465b      	mov	r3, fp
 80049b4:	f7fb fe20 	bl	80005f8 <__aeabi_dmul>
 80049b8:	4682      	mov	sl, r0
 80049ba:	468b      	mov	fp, r1
 80049bc:	e640      	b.n	8004640 <_strtod_l+0x88>
 80049be:	9a06      	ldr	r2, [sp, #24]
 80049c0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80049c4:	4293      	cmp	r3, r2
 80049c6:	db20      	blt.n	8004a0a <_strtod_l+0x452>
 80049c8:	4c64      	ldr	r4, [pc, #400]	; (8004b5c <_strtod_l+0x5a4>)
 80049ca:	f1c5 050f 	rsb	r5, r5, #15
 80049ce:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80049d2:	4652      	mov	r2, sl
 80049d4:	465b      	mov	r3, fp
 80049d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80049da:	f7fb fe0d 	bl	80005f8 <__aeabi_dmul>
 80049de:	9b06      	ldr	r3, [sp, #24]
 80049e0:	1b5d      	subs	r5, r3, r5
 80049e2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80049e6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80049ea:	e7e3      	b.n	80049b4 <_strtod_l+0x3fc>
 80049ec:	9b06      	ldr	r3, [sp, #24]
 80049ee:	3316      	adds	r3, #22
 80049f0:	db0b      	blt.n	8004a0a <_strtod_l+0x452>
 80049f2:	9b05      	ldr	r3, [sp, #20]
 80049f4:	1b9e      	subs	r6, r3, r6
 80049f6:	4b59      	ldr	r3, [pc, #356]	; (8004b5c <_strtod_l+0x5a4>)
 80049f8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80049fc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004a00:	4650      	mov	r0, sl
 8004a02:	4659      	mov	r1, fp
 8004a04:	f7fb ff22 	bl	800084c <__aeabi_ddiv>
 8004a08:	e7d6      	b.n	80049b8 <_strtod_l+0x400>
 8004a0a:	9b06      	ldr	r3, [sp, #24]
 8004a0c:	eba5 0808 	sub.w	r8, r5, r8
 8004a10:	4498      	add	r8, r3
 8004a12:	f1b8 0f00 	cmp.w	r8, #0
 8004a16:	dd74      	ble.n	8004b02 <_strtod_l+0x54a>
 8004a18:	f018 030f 	ands.w	r3, r8, #15
 8004a1c:	d00a      	beq.n	8004a34 <_strtod_l+0x47c>
 8004a1e:	494f      	ldr	r1, [pc, #316]	; (8004b5c <_strtod_l+0x5a4>)
 8004a20:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004a24:	4652      	mov	r2, sl
 8004a26:	465b      	mov	r3, fp
 8004a28:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004a2c:	f7fb fde4 	bl	80005f8 <__aeabi_dmul>
 8004a30:	4682      	mov	sl, r0
 8004a32:	468b      	mov	fp, r1
 8004a34:	f038 080f 	bics.w	r8, r8, #15
 8004a38:	d04f      	beq.n	8004ada <_strtod_l+0x522>
 8004a3a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8004a3e:	dd22      	ble.n	8004a86 <_strtod_l+0x4ce>
 8004a40:	2500      	movs	r5, #0
 8004a42:	462e      	mov	r6, r5
 8004a44:	9507      	str	r5, [sp, #28]
 8004a46:	9505      	str	r5, [sp, #20]
 8004a48:	2322      	movs	r3, #34	; 0x22
 8004a4a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8004b64 <_strtod_l+0x5ac>
 8004a4e:	6023      	str	r3, [r4, #0]
 8004a50:	f04f 0a00 	mov.w	sl, #0
 8004a54:	9b07      	ldr	r3, [sp, #28]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	f43f adf2 	beq.w	8004640 <_strtod_l+0x88>
 8004a5c:	9918      	ldr	r1, [sp, #96]	; 0x60
 8004a5e:	4620      	mov	r0, r4
 8004a60:	f001 f83e 	bl	8005ae0 <_Bfree>
 8004a64:	9905      	ldr	r1, [sp, #20]
 8004a66:	4620      	mov	r0, r4
 8004a68:	f001 f83a 	bl	8005ae0 <_Bfree>
 8004a6c:	4631      	mov	r1, r6
 8004a6e:	4620      	mov	r0, r4
 8004a70:	f001 f836 	bl	8005ae0 <_Bfree>
 8004a74:	9907      	ldr	r1, [sp, #28]
 8004a76:	4620      	mov	r0, r4
 8004a78:	f001 f832 	bl	8005ae0 <_Bfree>
 8004a7c:	4629      	mov	r1, r5
 8004a7e:	4620      	mov	r0, r4
 8004a80:	f001 f82e 	bl	8005ae0 <_Bfree>
 8004a84:	e5dc      	b.n	8004640 <_strtod_l+0x88>
 8004a86:	4b36      	ldr	r3, [pc, #216]	; (8004b60 <_strtod_l+0x5a8>)
 8004a88:	9304      	str	r3, [sp, #16]
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8004a90:	4650      	mov	r0, sl
 8004a92:	4659      	mov	r1, fp
 8004a94:	4699      	mov	r9, r3
 8004a96:	f1b8 0f01 	cmp.w	r8, #1
 8004a9a:	dc21      	bgt.n	8004ae0 <_strtod_l+0x528>
 8004a9c:	b10b      	cbz	r3, 8004aa2 <_strtod_l+0x4ea>
 8004a9e:	4682      	mov	sl, r0
 8004aa0:	468b      	mov	fp, r1
 8004aa2:	4b2f      	ldr	r3, [pc, #188]	; (8004b60 <_strtod_l+0x5a8>)
 8004aa4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8004aa8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8004aac:	4652      	mov	r2, sl
 8004aae:	465b      	mov	r3, fp
 8004ab0:	e9d9 0100 	ldrd	r0, r1, [r9]
 8004ab4:	f7fb fda0 	bl	80005f8 <__aeabi_dmul>
 8004ab8:	4b2a      	ldr	r3, [pc, #168]	; (8004b64 <_strtod_l+0x5ac>)
 8004aba:	460a      	mov	r2, r1
 8004abc:	400b      	ands	r3, r1
 8004abe:	492a      	ldr	r1, [pc, #168]	; (8004b68 <_strtod_l+0x5b0>)
 8004ac0:	428b      	cmp	r3, r1
 8004ac2:	4682      	mov	sl, r0
 8004ac4:	d8bc      	bhi.n	8004a40 <_strtod_l+0x488>
 8004ac6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8004aca:	428b      	cmp	r3, r1
 8004acc:	bf86      	itte	hi
 8004ace:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8004b6c <_strtod_l+0x5b4>
 8004ad2:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 8004ad6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8004ada:	2300      	movs	r3, #0
 8004adc:	9304      	str	r3, [sp, #16]
 8004ade:	e084      	b.n	8004bea <_strtod_l+0x632>
 8004ae0:	f018 0f01 	tst.w	r8, #1
 8004ae4:	d005      	beq.n	8004af2 <_strtod_l+0x53a>
 8004ae6:	9b04      	ldr	r3, [sp, #16]
 8004ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aec:	f7fb fd84 	bl	80005f8 <__aeabi_dmul>
 8004af0:	2301      	movs	r3, #1
 8004af2:	9a04      	ldr	r2, [sp, #16]
 8004af4:	3208      	adds	r2, #8
 8004af6:	f109 0901 	add.w	r9, r9, #1
 8004afa:	ea4f 0868 	mov.w	r8, r8, asr #1
 8004afe:	9204      	str	r2, [sp, #16]
 8004b00:	e7c9      	b.n	8004a96 <_strtod_l+0x4de>
 8004b02:	d0ea      	beq.n	8004ada <_strtod_l+0x522>
 8004b04:	f1c8 0800 	rsb	r8, r8, #0
 8004b08:	f018 020f 	ands.w	r2, r8, #15
 8004b0c:	d00a      	beq.n	8004b24 <_strtod_l+0x56c>
 8004b0e:	4b13      	ldr	r3, [pc, #76]	; (8004b5c <_strtod_l+0x5a4>)
 8004b10:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004b14:	4650      	mov	r0, sl
 8004b16:	4659      	mov	r1, fp
 8004b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b1c:	f7fb fe96 	bl	800084c <__aeabi_ddiv>
 8004b20:	4682      	mov	sl, r0
 8004b22:	468b      	mov	fp, r1
 8004b24:	ea5f 1828 	movs.w	r8, r8, asr #4
 8004b28:	d0d7      	beq.n	8004ada <_strtod_l+0x522>
 8004b2a:	f1b8 0f1f 	cmp.w	r8, #31
 8004b2e:	dd1f      	ble.n	8004b70 <_strtod_l+0x5b8>
 8004b30:	2500      	movs	r5, #0
 8004b32:	462e      	mov	r6, r5
 8004b34:	9507      	str	r5, [sp, #28]
 8004b36:	9505      	str	r5, [sp, #20]
 8004b38:	2322      	movs	r3, #34	; 0x22
 8004b3a:	f04f 0a00 	mov.w	sl, #0
 8004b3e:	f04f 0b00 	mov.w	fp, #0
 8004b42:	6023      	str	r3, [r4, #0]
 8004b44:	e786      	b.n	8004a54 <_strtod_l+0x49c>
 8004b46:	bf00      	nop
 8004b48:	08007702 	.word	0x08007702
 8004b4c:	0800771c 	.word	0x0800771c
 8004b50:	080076f9 	.word	0x080076f9
 8004b54:	080076fc 	.word	0x080076fc
 8004b58:	08007ac2 	.word	0x08007ac2
 8004b5c:	08007980 	.word	0x08007980
 8004b60:	08007958 	.word	0x08007958
 8004b64:	7ff00000 	.word	0x7ff00000
 8004b68:	7ca00000 	.word	0x7ca00000
 8004b6c:	7fefffff 	.word	0x7fefffff
 8004b70:	f018 0310 	ands.w	r3, r8, #16
 8004b74:	bf18      	it	ne
 8004b76:	236a      	movne	r3, #106	; 0x6a
 8004b78:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8004f28 <_strtod_l+0x970>
 8004b7c:	9304      	str	r3, [sp, #16]
 8004b7e:	4650      	mov	r0, sl
 8004b80:	4659      	mov	r1, fp
 8004b82:	2300      	movs	r3, #0
 8004b84:	f018 0f01 	tst.w	r8, #1
 8004b88:	d004      	beq.n	8004b94 <_strtod_l+0x5dc>
 8004b8a:	e9d9 2300 	ldrd	r2, r3, [r9]
 8004b8e:	f7fb fd33 	bl	80005f8 <__aeabi_dmul>
 8004b92:	2301      	movs	r3, #1
 8004b94:	ea5f 0868 	movs.w	r8, r8, asr #1
 8004b98:	f109 0908 	add.w	r9, r9, #8
 8004b9c:	d1f2      	bne.n	8004b84 <_strtod_l+0x5cc>
 8004b9e:	b10b      	cbz	r3, 8004ba4 <_strtod_l+0x5ec>
 8004ba0:	4682      	mov	sl, r0
 8004ba2:	468b      	mov	fp, r1
 8004ba4:	9b04      	ldr	r3, [sp, #16]
 8004ba6:	b1c3      	cbz	r3, 8004bda <_strtod_l+0x622>
 8004ba8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8004bac:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	4659      	mov	r1, fp
 8004bb4:	dd11      	ble.n	8004bda <_strtod_l+0x622>
 8004bb6:	2b1f      	cmp	r3, #31
 8004bb8:	f340 8124 	ble.w	8004e04 <_strtod_l+0x84c>
 8004bbc:	2b34      	cmp	r3, #52	; 0x34
 8004bbe:	bfde      	ittt	le
 8004bc0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8004bc4:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 8004bc8:	fa03 f202 	lslle.w	r2, r3, r2
 8004bcc:	f04f 0a00 	mov.w	sl, #0
 8004bd0:	bfcc      	ite	gt
 8004bd2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8004bd6:	ea02 0b01 	andle.w	fp, r2, r1
 8004bda:	2200      	movs	r2, #0
 8004bdc:	2300      	movs	r3, #0
 8004bde:	4650      	mov	r0, sl
 8004be0:	4659      	mov	r1, fp
 8004be2:	f7fb ff71 	bl	8000ac8 <__aeabi_dcmpeq>
 8004be6:	2800      	cmp	r0, #0
 8004be8:	d1a2      	bne.n	8004b30 <_strtod_l+0x578>
 8004bea:	9b07      	ldr	r3, [sp, #28]
 8004bec:	9300      	str	r3, [sp, #0]
 8004bee:	9908      	ldr	r1, [sp, #32]
 8004bf0:	462b      	mov	r3, r5
 8004bf2:	463a      	mov	r2, r7
 8004bf4:	4620      	mov	r0, r4
 8004bf6:	f000 ffdb 	bl	8005bb0 <__s2b>
 8004bfa:	9007      	str	r0, [sp, #28]
 8004bfc:	2800      	cmp	r0, #0
 8004bfe:	f43f af1f 	beq.w	8004a40 <_strtod_l+0x488>
 8004c02:	9b05      	ldr	r3, [sp, #20]
 8004c04:	1b9e      	subs	r6, r3, r6
 8004c06:	9b06      	ldr	r3, [sp, #24]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	bfb4      	ite	lt
 8004c0c:	4633      	movlt	r3, r6
 8004c0e:	2300      	movge	r3, #0
 8004c10:	930c      	str	r3, [sp, #48]	; 0x30
 8004c12:	9b06      	ldr	r3, [sp, #24]
 8004c14:	2500      	movs	r5, #0
 8004c16:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004c1a:	9312      	str	r3, [sp, #72]	; 0x48
 8004c1c:	462e      	mov	r6, r5
 8004c1e:	9b07      	ldr	r3, [sp, #28]
 8004c20:	4620      	mov	r0, r4
 8004c22:	6859      	ldr	r1, [r3, #4]
 8004c24:	f000 ff1c 	bl	8005a60 <_Balloc>
 8004c28:	9005      	str	r0, [sp, #20]
 8004c2a:	2800      	cmp	r0, #0
 8004c2c:	f43f af0c 	beq.w	8004a48 <_strtod_l+0x490>
 8004c30:	9b07      	ldr	r3, [sp, #28]
 8004c32:	691a      	ldr	r2, [r3, #16]
 8004c34:	3202      	adds	r2, #2
 8004c36:	f103 010c 	add.w	r1, r3, #12
 8004c3a:	0092      	lsls	r2, r2, #2
 8004c3c:	300c      	adds	r0, #12
 8004c3e:	f000 ff01 	bl	8005a44 <memcpy>
 8004c42:	ec4b ab10 	vmov	d0, sl, fp
 8004c46:	aa1a      	add	r2, sp, #104	; 0x68
 8004c48:	a919      	add	r1, sp, #100	; 0x64
 8004c4a:	4620      	mov	r0, r4
 8004c4c:	f001 faf6 	bl	800623c <__d2b>
 8004c50:	ec4b ab18 	vmov	d8, sl, fp
 8004c54:	9018      	str	r0, [sp, #96]	; 0x60
 8004c56:	2800      	cmp	r0, #0
 8004c58:	f43f aef6 	beq.w	8004a48 <_strtod_l+0x490>
 8004c5c:	2101      	movs	r1, #1
 8004c5e:	4620      	mov	r0, r4
 8004c60:	f001 f840 	bl	8005ce4 <__i2b>
 8004c64:	4606      	mov	r6, r0
 8004c66:	2800      	cmp	r0, #0
 8004c68:	f43f aeee 	beq.w	8004a48 <_strtod_l+0x490>
 8004c6c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004c6e:	9904      	ldr	r1, [sp, #16]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	bfab      	itete	ge
 8004c74:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8004c76:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8004c78:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8004c7a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8004c7e:	bfac      	ite	ge
 8004c80:	eb03 0902 	addge.w	r9, r3, r2
 8004c84:	1ad7      	sublt	r7, r2, r3
 8004c86:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8004c88:	eba3 0801 	sub.w	r8, r3, r1
 8004c8c:	4490      	add	r8, r2
 8004c8e:	4ba1      	ldr	r3, [pc, #644]	; (8004f14 <_strtod_l+0x95c>)
 8004c90:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8004c94:	4598      	cmp	r8, r3
 8004c96:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8004c9a:	f280 80c7 	bge.w	8004e2c <_strtod_l+0x874>
 8004c9e:	eba3 0308 	sub.w	r3, r3, r8
 8004ca2:	2b1f      	cmp	r3, #31
 8004ca4:	eba2 0203 	sub.w	r2, r2, r3
 8004ca8:	f04f 0101 	mov.w	r1, #1
 8004cac:	f300 80b1 	bgt.w	8004e12 <_strtod_l+0x85a>
 8004cb0:	fa01 f303 	lsl.w	r3, r1, r3
 8004cb4:	930d      	str	r3, [sp, #52]	; 0x34
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	9308      	str	r3, [sp, #32]
 8004cba:	eb09 0802 	add.w	r8, r9, r2
 8004cbe:	9b04      	ldr	r3, [sp, #16]
 8004cc0:	45c1      	cmp	r9, r8
 8004cc2:	4417      	add	r7, r2
 8004cc4:	441f      	add	r7, r3
 8004cc6:	464b      	mov	r3, r9
 8004cc8:	bfa8      	it	ge
 8004cca:	4643      	movge	r3, r8
 8004ccc:	42bb      	cmp	r3, r7
 8004cce:	bfa8      	it	ge
 8004cd0:	463b      	movge	r3, r7
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	bfc2      	ittt	gt
 8004cd6:	eba8 0803 	subgt.w	r8, r8, r3
 8004cda:	1aff      	subgt	r7, r7, r3
 8004cdc:	eba9 0903 	subgt.w	r9, r9, r3
 8004ce0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	dd17      	ble.n	8004d16 <_strtod_l+0x75e>
 8004ce6:	4631      	mov	r1, r6
 8004ce8:	461a      	mov	r2, r3
 8004cea:	4620      	mov	r0, r4
 8004cec:	f001 f8ba 	bl	8005e64 <__pow5mult>
 8004cf0:	4606      	mov	r6, r0
 8004cf2:	2800      	cmp	r0, #0
 8004cf4:	f43f aea8 	beq.w	8004a48 <_strtod_l+0x490>
 8004cf8:	4601      	mov	r1, r0
 8004cfa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8004cfc:	4620      	mov	r0, r4
 8004cfe:	f001 f807 	bl	8005d10 <__multiply>
 8004d02:	900b      	str	r0, [sp, #44]	; 0x2c
 8004d04:	2800      	cmp	r0, #0
 8004d06:	f43f ae9f 	beq.w	8004a48 <_strtod_l+0x490>
 8004d0a:	9918      	ldr	r1, [sp, #96]	; 0x60
 8004d0c:	4620      	mov	r0, r4
 8004d0e:	f000 fee7 	bl	8005ae0 <_Bfree>
 8004d12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004d14:	9318      	str	r3, [sp, #96]	; 0x60
 8004d16:	f1b8 0f00 	cmp.w	r8, #0
 8004d1a:	f300 808c 	bgt.w	8004e36 <_strtod_l+0x87e>
 8004d1e:	9b06      	ldr	r3, [sp, #24]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	dd08      	ble.n	8004d36 <_strtod_l+0x77e>
 8004d24:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004d26:	9905      	ldr	r1, [sp, #20]
 8004d28:	4620      	mov	r0, r4
 8004d2a:	f001 f89b 	bl	8005e64 <__pow5mult>
 8004d2e:	9005      	str	r0, [sp, #20]
 8004d30:	2800      	cmp	r0, #0
 8004d32:	f43f ae89 	beq.w	8004a48 <_strtod_l+0x490>
 8004d36:	2f00      	cmp	r7, #0
 8004d38:	dd08      	ble.n	8004d4c <_strtod_l+0x794>
 8004d3a:	9905      	ldr	r1, [sp, #20]
 8004d3c:	463a      	mov	r2, r7
 8004d3e:	4620      	mov	r0, r4
 8004d40:	f001 f8ea 	bl	8005f18 <__lshift>
 8004d44:	9005      	str	r0, [sp, #20]
 8004d46:	2800      	cmp	r0, #0
 8004d48:	f43f ae7e 	beq.w	8004a48 <_strtod_l+0x490>
 8004d4c:	f1b9 0f00 	cmp.w	r9, #0
 8004d50:	dd08      	ble.n	8004d64 <_strtod_l+0x7ac>
 8004d52:	4631      	mov	r1, r6
 8004d54:	464a      	mov	r2, r9
 8004d56:	4620      	mov	r0, r4
 8004d58:	f001 f8de 	bl	8005f18 <__lshift>
 8004d5c:	4606      	mov	r6, r0
 8004d5e:	2800      	cmp	r0, #0
 8004d60:	f43f ae72 	beq.w	8004a48 <_strtod_l+0x490>
 8004d64:	9a05      	ldr	r2, [sp, #20]
 8004d66:	9918      	ldr	r1, [sp, #96]	; 0x60
 8004d68:	4620      	mov	r0, r4
 8004d6a:	f001 f961 	bl	8006030 <__mdiff>
 8004d6e:	4605      	mov	r5, r0
 8004d70:	2800      	cmp	r0, #0
 8004d72:	f43f ae69 	beq.w	8004a48 <_strtod_l+0x490>
 8004d76:	68c3      	ldr	r3, [r0, #12]
 8004d78:	930b      	str	r3, [sp, #44]	; 0x2c
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	60c3      	str	r3, [r0, #12]
 8004d7e:	4631      	mov	r1, r6
 8004d80:	f001 f93a 	bl	8005ff8 <__mcmp>
 8004d84:	2800      	cmp	r0, #0
 8004d86:	da60      	bge.n	8004e4a <_strtod_l+0x892>
 8004d88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004d8a:	ea53 030a 	orrs.w	r3, r3, sl
 8004d8e:	f040 8082 	bne.w	8004e96 <_strtod_l+0x8de>
 8004d92:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d17d      	bne.n	8004e96 <_strtod_l+0x8de>
 8004d9a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004d9e:	0d1b      	lsrs	r3, r3, #20
 8004da0:	051b      	lsls	r3, r3, #20
 8004da2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8004da6:	d976      	bls.n	8004e96 <_strtod_l+0x8de>
 8004da8:	696b      	ldr	r3, [r5, #20]
 8004daa:	b913      	cbnz	r3, 8004db2 <_strtod_l+0x7fa>
 8004dac:	692b      	ldr	r3, [r5, #16]
 8004dae:	2b01      	cmp	r3, #1
 8004db0:	dd71      	ble.n	8004e96 <_strtod_l+0x8de>
 8004db2:	4629      	mov	r1, r5
 8004db4:	2201      	movs	r2, #1
 8004db6:	4620      	mov	r0, r4
 8004db8:	f001 f8ae 	bl	8005f18 <__lshift>
 8004dbc:	4631      	mov	r1, r6
 8004dbe:	4605      	mov	r5, r0
 8004dc0:	f001 f91a 	bl	8005ff8 <__mcmp>
 8004dc4:	2800      	cmp	r0, #0
 8004dc6:	dd66      	ble.n	8004e96 <_strtod_l+0x8de>
 8004dc8:	9904      	ldr	r1, [sp, #16]
 8004dca:	4a53      	ldr	r2, [pc, #332]	; (8004f18 <_strtod_l+0x960>)
 8004dcc:	465b      	mov	r3, fp
 8004dce:	2900      	cmp	r1, #0
 8004dd0:	f000 8081 	beq.w	8004ed6 <_strtod_l+0x91e>
 8004dd4:	ea02 010b 	and.w	r1, r2, fp
 8004dd8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8004ddc:	dc7b      	bgt.n	8004ed6 <_strtod_l+0x91e>
 8004dde:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8004de2:	f77f aea9 	ble.w	8004b38 <_strtod_l+0x580>
 8004de6:	4b4d      	ldr	r3, [pc, #308]	; (8004f1c <_strtod_l+0x964>)
 8004de8:	4650      	mov	r0, sl
 8004dea:	4659      	mov	r1, fp
 8004dec:	2200      	movs	r2, #0
 8004dee:	f7fb fc03 	bl	80005f8 <__aeabi_dmul>
 8004df2:	460b      	mov	r3, r1
 8004df4:	4303      	orrs	r3, r0
 8004df6:	bf08      	it	eq
 8004df8:	2322      	moveq	r3, #34	; 0x22
 8004dfa:	4682      	mov	sl, r0
 8004dfc:	468b      	mov	fp, r1
 8004dfe:	bf08      	it	eq
 8004e00:	6023      	streq	r3, [r4, #0]
 8004e02:	e62b      	b.n	8004a5c <_strtod_l+0x4a4>
 8004e04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004e08:	fa02 f303 	lsl.w	r3, r2, r3
 8004e0c:	ea03 0a0a 	and.w	sl, r3, sl
 8004e10:	e6e3      	b.n	8004bda <_strtod_l+0x622>
 8004e12:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8004e16:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8004e1a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8004e1e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8004e22:	fa01 f308 	lsl.w	r3, r1, r8
 8004e26:	9308      	str	r3, [sp, #32]
 8004e28:	910d      	str	r1, [sp, #52]	; 0x34
 8004e2a:	e746      	b.n	8004cba <_strtod_l+0x702>
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	9308      	str	r3, [sp, #32]
 8004e30:	2301      	movs	r3, #1
 8004e32:	930d      	str	r3, [sp, #52]	; 0x34
 8004e34:	e741      	b.n	8004cba <_strtod_l+0x702>
 8004e36:	9918      	ldr	r1, [sp, #96]	; 0x60
 8004e38:	4642      	mov	r2, r8
 8004e3a:	4620      	mov	r0, r4
 8004e3c:	f001 f86c 	bl	8005f18 <__lshift>
 8004e40:	9018      	str	r0, [sp, #96]	; 0x60
 8004e42:	2800      	cmp	r0, #0
 8004e44:	f47f af6b 	bne.w	8004d1e <_strtod_l+0x766>
 8004e48:	e5fe      	b.n	8004a48 <_strtod_l+0x490>
 8004e4a:	465f      	mov	r7, fp
 8004e4c:	d16e      	bne.n	8004f2c <_strtod_l+0x974>
 8004e4e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004e50:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004e54:	b342      	cbz	r2, 8004ea8 <_strtod_l+0x8f0>
 8004e56:	4a32      	ldr	r2, [pc, #200]	; (8004f20 <_strtod_l+0x968>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d128      	bne.n	8004eae <_strtod_l+0x8f6>
 8004e5c:	9b04      	ldr	r3, [sp, #16]
 8004e5e:	4651      	mov	r1, sl
 8004e60:	b1eb      	cbz	r3, 8004e9e <_strtod_l+0x8e6>
 8004e62:	4b2d      	ldr	r3, [pc, #180]	; (8004f18 <_strtod_l+0x960>)
 8004e64:	403b      	ands	r3, r7
 8004e66:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8004e6a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004e6e:	d819      	bhi.n	8004ea4 <_strtod_l+0x8ec>
 8004e70:	0d1b      	lsrs	r3, r3, #20
 8004e72:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004e76:	fa02 f303 	lsl.w	r3, r2, r3
 8004e7a:	4299      	cmp	r1, r3
 8004e7c:	d117      	bne.n	8004eae <_strtod_l+0x8f6>
 8004e7e:	4b29      	ldr	r3, [pc, #164]	; (8004f24 <_strtod_l+0x96c>)
 8004e80:	429f      	cmp	r7, r3
 8004e82:	d102      	bne.n	8004e8a <_strtod_l+0x8d2>
 8004e84:	3101      	adds	r1, #1
 8004e86:	f43f addf 	beq.w	8004a48 <_strtod_l+0x490>
 8004e8a:	4b23      	ldr	r3, [pc, #140]	; (8004f18 <_strtod_l+0x960>)
 8004e8c:	403b      	ands	r3, r7
 8004e8e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8004e92:	f04f 0a00 	mov.w	sl, #0
 8004e96:	9b04      	ldr	r3, [sp, #16]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d1a4      	bne.n	8004de6 <_strtod_l+0x82e>
 8004e9c:	e5de      	b.n	8004a5c <_strtod_l+0x4a4>
 8004e9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004ea2:	e7ea      	b.n	8004e7a <_strtod_l+0x8c2>
 8004ea4:	4613      	mov	r3, r2
 8004ea6:	e7e8      	b.n	8004e7a <_strtod_l+0x8c2>
 8004ea8:	ea53 030a 	orrs.w	r3, r3, sl
 8004eac:	d08c      	beq.n	8004dc8 <_strtod_l+0x810>
 8004eae:	9b08      	ldr	r3, [sp, #32]
 8004eb0:	b1db      	cbz	r3, 8004eea <_strtod_l+0x932>
 8004eb2:	423b      	tst	r3, r7
 8004eb4:	d0ef      	beq.n	8004e96 <_strtod_l+0x8de>
 8004eb6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004eb8:	9a04      	ldr	r2, [sp, #16]
 8004eba:	4650      	mov	r0, sl
 8004ebc:	4659      	mov	r1, fp
 8004ebe:	b1c3      	cbz	r3, 8004ef2 <_strtod_l+0x93a>
 8004ec0:	f7ff fb5b 	bl	800457a <sulp>
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	460b      	mov	r3, r1
 8004ec8:	ec51 0b18 	vmov	r0, r1, d8
 8004ecc:	f7fb f9de 	bl	800028c <__adddf3>
 8004ed0:	4682      	mov	sl, r0
 8004ed2:	468b      	mov	fp, r1
 8004ed4:	e7df      	b.n	8004e96 <_strtod_l+0x8de>
 8004ed6:	4013      	ands	r3, r2
 8004ed8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8004edc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8004ee0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8004ee4:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8004ee8:	e7d5      	b.n	8004e96 <_strtod_l+0x8de>
 8004eea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004eec:	ea13 0f0a 	tst.w	r3, sl
 8004ef0:	e7e0      	b.n	8004eb4 <_strtod_l+0x8fc>
 8004ef2:	f7ff fb42 	bl	800457a <sulp>
 8004ef6:	4602      	mov	r2, r0
 8004ef8:	460b      	mov	r3, r1
 8004efa:	ec51 0b18 	vmov	r0, r1, d8
 8004efe:	f7fb f9c3 	bl	8000288 <__aeabi_dsub>
 8004f02:	2200      	movs	r2, #0
 8004f04:	2300      	movs	r3, #0
 8004f06:	4682      	mov	sl, r0
 8004f08:	468b      	mov	fp, r1
 8004f0a:	f7fb fddd 	bl	8000ac8 <__aeabi_dcmpeq>
 8004f0e:	2800      	cmp	r0, #0
 8004f10:	d0c1      	beq.n	8004e96 <_strtod_l+0x8de>
 8004f12:	e611      	b.n	8004b38 <_strtod_l+0x580>
 8004f14:	fffffc02 	.word	0xfffffc02
 8004f18:	7ff00000 	.word	0x7ff00000
 8004f1c:	39500000 	.word	0x39500000
 8004f20:	000fffff 	.word	0x000fffff
 8004f24:	7fefffff 	.word	0x7fefffff
 8004f28:	08007730 	.word	0x08007730
 8004f2c:	4631      	mov	r1, r6
 8004f2e:	4628      	mov	r0, r5
 8004f30:	f001 f9e0 	bl	80062f4 <__ratio>
 8004f34:	ec59 8b10 	vmov	r8, r9, d0
 8004f38:	ee10 0a10 	vmov	r0, s0
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004f42:	4649      	mov	r1, r9
 8004f44:	f7fb fdd4 	bl	8000af0 <__aeabi_dcmple>
 8004f48:	2800      	cmp	r0, #0
 8004f4a:	d07a      	beq.n	8005042 <_strtod_l+0xa8a>
 8004f4c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d04a      	beq.n	8004fe8 <_strtod_l+0xa30>
 8004f52:	4b95      	ldr	r3, [pc, #596]	; (80051a8 <_strtod_l+0xbf0>)
 8004f54:	2200      	movs	r2, #0
 8004f56:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004f5a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80051a8 <_strtod_l+0xbf0>
 8004f5e:	f04f 0800 	mov.w	r8, #0
 8004f62:	4b92      	ldr	r3, [pc, #584]	; (80051ac <_strtod_l+0xbf4>)
 8004f64:	403b      	ands	r3, r7
 8004f66:	930d      	str	r3, [sp, #52]	; 0x34
 8004f68:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004f6a:	4b91      	ldr	r3, [pc, #580]	; (80051b0 <_strtod_l+0xbf8>)
 8004f6c:	429a      	cmp	r2, r3
 8004f6e:	f040 80b0 	bne.w	80050d2 <_strtod_l+0xb1a>
 8004f72:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004f76:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8004f7a:	ec4b ab10 	vmov	d0, sl, fp
 8004f7e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004f82:	f001 f8df 	bl	8006144 <__ulp>
 8004f86:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004f8a:	ec53 2b10 	vmov	r2, r3, d0
 8004f8e:	f7fb fb33 	bl	80005f8 <__aeabi_dmul>
 8004f92:	4652      	mov	r2, sl
 8004f94:	465b      	mov	r3, fp
 8004f96:	f7fb f979 	bl	800028c <__adddf3>
 8004f9a:	460b      	mov	r3, r1
 8004f9c:	4983      	ldr	r1, [pc, #524]	; (80051ac <_strtod_l+0xbf4>)
 8004f9e:	4a85      	ldr	r2, [pc, #532]	; (80051b4 <_strtod_l+0xbfc>)
 8004fa0:	4019      	ands	r1, r3
 8004fa2:	4291      	cmp	r1, r2
 8004fa4:	4682      	mov	sl, r0
 8004fa6:	d960      	bls.n	800506a <_strtod_l+0xab2>
 8004fa8:	ee18 3a90 	vmov	r3, s17
 8004fac:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d104      	bne.n	8004fbe <_strtod_l+0xa06>
 8004fb4:	ee18 3a10 	vmov	r3, s16
 8004fb8:	3301      	adds	r3, #1
 8004fba:	f43f ad45 	beq.w	8004a48 <_strtod_l+0x490>
 8004fbe:	f8df b200 	ldr.w	fp, [pc, #512]	; 80051c0 <_strtod_l+0xc08>
 8004fc2:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8004fc6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8004fc8:	4620      	mov	r0, r4
 8004fca:	f000 fd89 	bl	8005ae0 <_Bfree>
 8004fce:	9905      	ldr	r1, [sp, #20]
 8004fd0:	4620      	mov	r0, r4
 8004fd2:	f000 fd85 	bl	8005ae0 <_Bfree>
 8004fd6:	4631      	mov	r1, r6
 8004fd8:	4620      	mov	r0, r4
 8004fda:	f000 fd81 	bl	8005ae0 <_Bfree>
 8004fde:	4629      	mov	r1, r5
 8004fe0:	4620      	mov	r0, r4
 8004fe2:	f000 fd7d 	bl	8005ae0 <_Bfree>
 8004fe6:	e61a      	b.n	8004c1e <_strtod_l+0x666>
 8004fe8:	f1ba 0f00 	cmp.w	sl, #0
 8004fec:	d11b      	bne.n	8005026 <_strtod_l+0xa6e>
 8004fee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004ff2:	b9f3      	cbnz	r3, 8005032 <_strtod_l+0xa7a>
 8004ff4:	4b6c      	ldr	r3, [pc, #432]	; (80051a8 <_strtod_l+0xbf0>)
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	4640      	mov	r0, r8
 8004ffa:	4649      	mov	r1, r9
 8004ffc:	f7fb fd6e 	bl	8000adc <__aeabi_dcmplt>
 8005000:	b9d0      	cbnz	r0, 8005038 <_strtod_l+0xa80>
 8005002:	4640      	mov	r0, r8
 8005004:	4649      	mov	r1, r9
 8005006:	4b6c      	ldr	r3, [pc, #432]	; (80051b8 <_strtod_l+0xc00>)
 8005008:	2200      	movs	r2, #0
 800500a:	f7fb faf5 	bl	80005f8 <__aeabi_dmul>
 800500e:	4680      	mov	r8, r0
 8005010:	4689      	mov	r9, r1
 8005012:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005016:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800501a:	9315      	str	r3, [sp, #84]	; 0x54
 800501c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8005020:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005024:	e79d      	b.n	8004f62 <_strtod_l+0x9aa>
 8005026:	f1ba 0f01 	cmp.w	sl, #1
 800502a:	d102      	bne.n	8005032 <_strtod_l+0xa7a>
 800502c:	2f00      	cmp	r7, #0
 800502e:	f43f ad83 	beq.w	8004b38 <_strtod_l+0x580>
 8005032:	4b62      	ldr	r3, [pc, #392]	; (80051bc <_strtod_l+0xc04>)
 8005034:	2200      	movs	r2, #0
 8005036:	e78e      	b.n	8004f56 <_strtod_l+0x99e>
 8005038:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80051b8 <_strtod_l+0xc00>
 800503c:	f04f 0800 	mov.w	r8, #0
 8005040:	e7e7      	b.n	8005012 <_strtod_l+0xa5a>
 8005042:	4b5d      	ldr	r3, [pc, #372]	; (80051b8 <_strtod_l+0xc00>)
 8005044:	4640      	mov	r0, r8
 8005046:	4649      	mov	r1, r9
 8005048:	2200      	movs	r2, #0
 800504a:	f7fb fad5 	bl	80005f8 <__aeabi_dmul>
 800504e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005050:	4680      	mov	r8, r0
 8005052:	4689      	mov	r9, r1
 8005054:	b933      	cbnz	r3, 8005064 <_strtod_l+0xaac>
 8005056:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800505a:	900e      	str	r0, [sp, #56]	; 0x38
 800505c:	930f      	str	r3, [sp, #60]	; 0x3c
 800505e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8005062:	e7dd      	b.n	8005020 <_strtod_l+0xa68>
 8005064:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8005068:	e7f9      	b.n	800505e <_strtod_l+0xaa6>
 800506a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800506e:	9b04      	ldr	r3, [sp, #16]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d1a8      	bne.n	8004fc6 <_strtod_l+0xa0e>
 8005074:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005078:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800507a:	0d1b      	lsrs	r3, r3, #20
 800507c:	051b      	lsls	r3, r3, #20
 800507e:	429a      	cmp	r2, r3
 8005080:	d1a1      	bne.n	8004fc6 <_strtod_l+0xa0e>
 8005082:	4640      	mov	r0, r8
 8005084:	4649      	mov	r1, r9
 8005086:	f7fb fdef 	bl	8000c68 <__aeabi_d2lz>
 800508a:	f7fb fa87 	bl	800059c <__aeabi_l2d>
 800508e:	4602      	mov	r2, r0
 8005090:	460b      	mov	r3, r1
 8005092:	4640      	mov	r0, r8
 8005094:	4649      	mov	r1, r9
 8005096:	f7fb f8f7 	bl	8000288 <__aeabi_dsub>
 800509a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800509c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80050a0:	ea43 030a 	orr.w	r3, r3, sl
 80050a4:	4313      	orrs	r3, r2
 80050a6:	4680      	mov	r8, r0
 80050a8:	4689      	mov	r9, r1
 80050aa:	d055      	beq.n	8005158 <_strtod_l+0xba0>
 80050ac:	a336      	add	r3, pc, #216	; (adr r3, 8005188 <_strtod_l+0xbd0>)
 80050ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050b2:	f7fb fd13 	bl	8000adc <__aeabi_dcmplt>
 80050b6:	2800      	cmp	r0, #0
 80050b8:	f47f acd0 	bne.w	8004a5c <_strtod_l+0x4a4>
 80050bc:	a334      	add	r3, pc, #208	; (adr r3, 8005190 <_strtod_l+0xbd8>)
 80050be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050c2:	4640      	mov	r0, r8
 80050c4:	4649      	mov	r1, r9
 80050c6:	f7fb fd27 	bl	8000b18 <__aeabi_dcmpgt>
 80050ca:	2800      	cmp	r0, #0
 80050cc:	f43f af7b 	beq.w	8004fc6 <_strtod_l+0xa0e>
 80050d0:	e4c4      	b.n	8004a5c <_strtod_l+0x4a4>
 80050d2:	9b04      	ldr	r3, [sp, #16]
 80050d4:	b333      	cbz	r3, 8005124 <_strtod_l+0xb6c>
 80050d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80050d8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80050dc:	d822      	bhi.n	8005124 <_strtod_l+0xb6c>
 80050de:	a32e      	add	r3, pc, #184	; (adr r3, 8005198 <_strtod_l+0xbe0>)
 80050e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050e4:	4640      	mov	r0, r8
 80050e6:	4649      	mov	r1, r9
 80050e8:	f7fb fd02 	bl	8000af0 <__aeabi_dcmple>
 80050ec:	b1a0      	cbz	r0, 8005118 <_strtod_l+0xb60>
 80050ee:	4649      	mov	r1, r9
 80050f0:	4640      	mov	r0, r8
 80050f2:	f7fb fd31 	bl	8000b58 <__aeabi_d2uiz>
 80050f6:	2801      	cmp	r0, #1
 80050f8:	bf38      	it	cc
 80050fa:	2001      	movcc	r0, #1
 80050fc:	f7fb fa02 	bl	8000504 <__aeabi_ui2d>
 8005100:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005102:	4680      	mov	r8, r0
 8005104:	4689      	mov	r9, r1
 8005106:	bb23      	cbnz	r3, 8005152 <_strtod_l+0xb9a>
 8005108:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800510c:	9010      	str	r0, [sp, #64]	; 0x40
 800510e:	9311      	str	r3, [sp, #68]	; 0x44
 8005110:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005114:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005118:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800511a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800511c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8005120:	1a9b      	subs	r3, r3, r2
 8005122:	9309      	str	r3, [sp, #36]	; 0x24
 8005124:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005128:	eeb0 0a48 	vmov.f32	s0, s16
 800512c:	eef0 0a68 	vmov.f32	s1, s17
 8005130:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005134:	f001 f806 	bl	8006144 <__ulp>
 8005138:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800513c:	ec53 2b10 	vmov	r2, r3, d0
 8005140:	f7fb fa5a 	bl	80005f8 <__aeabi_dmul>
 8005144:	ec53 2b18 	vmov	r2, r3, d8
 8005148:	f7fb f8a0 	bl	800028c <__adddf3>
 800514c:	4682      	mov	sl, r0
 800514e:	468b      	mov	fp, r1
 8005150:	e78d      	b.n	800506e <_strtod_l+0xab6>
 8005152:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8005156:	e7db      	b.n	8005110 <_strtod_l+0xb58>
 8005158:	a311      	add	r3, pc, #68	; (adr r3, 80051a0 <_strtod_l+0xbe8>)
 800515a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800515e:	f7fb fcbd 	bl	8000adc <__aeabi_dcmplt>
 8005162:	e7b2      	b.n	80050ca <_strtod_l+0xb12>
 8005164:	2300      	movs	r3, #0
 8005166:	930a      	str	r3, [sp, #40]	; 0x28
 8005168:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800516a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800516c:	6013      	str	r3, [r2, #0]
 800516e:	f7ff ba6b 	b.w	8004648 <_strtod_l+0x90>
 8005172:	2a65      	cmp	r2, #101	; 0x65
 8005174:	f43f ab5f 	beq.w	8004836 <_strtod_l+0x27e>
 8005178:	2a45      	cmp	r2, #69	; 0x45
 800517a:	f43f ab5c 	beq.w	8004836 <_strtod_l+0x27e>
 800517e:	2301      	movs	r3, #1
 8005180:	f7ff bb94 	b.w	80048ac <_strtod_l+0x2f4>
 8005184:	f3af 8000 	nop.w
 8005188:	94a03595 	.word	0x94a03595
 800518c:	3fdfffff 	.word	0x3fdfffff
 8005190:	35afe535 	.word	0x35afe535
 8005194:	3fe00000 	.word	0x3fe00000
 8005198:	ffc00000 	.word	0xffc00000
 800519c:	41dfffff 	.word	0x41dfffff
 80051a0:	94a03595 	.word	0x94a03595
 80051a4:	3fcfffff 	.word	0x3fcfffff
 80051a8:	3ff00000 	.word	0x3ff00000
 80051ac:	7ff00000 	.word	0x7ff00000
 80051b0:	7fe00000 	.word	0x7fe00000
 80051b4:	7c9fffff 	.word	0x7c9fffff
 80051b8:	3fe00000 	.word	0x3fe00000
 80051bc:	bff00000 	.word	0xbff00000
 80051c0:	7fefffff 	.word	0x7fefffff

080051c4 <_strtod_r>:
 80051c4:	4b01      	ldr	r3, [pc, #4]	; (80051cc <_strtod_r+0x8>)
 80051c6:	f7ff b9f7 	b.w	80045b8 <_strtod_l>
 80051ca:	bf00      	nop
 80051cc:	20000074 	.word	0x20000074

080051d0 <_strtol_l.constprop.0>:
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051d6:	d001      	beq.n	80051dc <_strtol_l.constprop.0+0xc>
 80051d8:	2b24      	cmp	r3, #36	; 0x24
 80051da:	d906      	bls.n	80051ea <_strtol_l.constprop.0+0x1a>
 80051dc:	f7fe ff22 	bl	8004024 <__errno>
 80051e0:	2316      	movs	r3, #22
 80051e2:	6003      	str	r3, [r0, #0]
 80051e4:	2000      	movs	r0, #0
 80051e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051ea:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80052d0 <_strtol_l.constprop.0+0x100>
 80051ee:	460d      	mov	r5, r1
 80051f0:	462e      	mov	r6, r5
 80051f2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80051f6:	f814 700c 	ldrb.w	r7, [r4, ip]
 80051fa:	f017 0708 	ands.w	r7, r7, #8
 80051fe:	d1f7      	bne.n	80051f0 <_strtol_l.constprop.0+0x20>
 8005200:	2c2d      	cmp	r4, #45	; 0x2d
 8005202:	d132      	bne.n	800526a <_strtol_l.constprop.0+0x9a>
 8005204:	782c      	ldrb	r4, [r5, #0]
 8005206:	2701      	movs	r7, #1
 8005208:	1cb5      	adds	r5, r6, #2
 800520a:	2b00      	cmp	r3, #0
 800520c:	d05b      	beq.n	80052c6 <_strtol_l.constprop.0+0xf6>
 800520e:	2b10      	cmp	r3, #16
 8005210:	d109      	bne.n	8005226 <_strtol_l.constprop.0+0x56>
 8005212:	2c30      	cmp	r4, #48	; 0x30
 8005214:	d107      	bne.n	8005226 <_strtol_l.constprop.0+0x56>
 8005216:	782c      	ldrb	r4, [r5, #0]
 8005218:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800521c:	2c58      	cmp	r4, #88	; 0x58
 800521e:	d14d      	bne.n	80052bc <_strtol_l.constprop.0+0xec>
 8005220:	786c      	ldrb	r4, [r5, #1]
 8005222:	2310      	movs	r3, #16
 8005224:	3502      	adds	r5, #2
 8005226:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800522a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800522e:	f04f 0c00 	mov.w	ip, #0
 8005232:	fbb8 f9f3 	udiv	r9, r8, r3
 8005236:	4666      	mov	r6, ip
 8005238:	fb03 8a19 	mls	sl, r3, r9, r8
 800523c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8005240:	f1be 0f09 	cmp.w	lr, #9
 8005244:	d816      	bhi.n	8005274 <_strtol_l.constprop.0+0xa4>
 8005246:	4674      	mov	r4, lr
 8005248:	42a3      	cmp	r3, r4
 800524a:	dd24      	ble.n	8005296 <_strtol_l.constprop.0+0xc6>
 800524c:	f1bc 0f00 	cmp.w	ip, #0
 8005250:	db1e      	blt.n	8005290 <_strtol_l.constprop.0+0xc0>
 8005252:	45b1      	cmp	r9, r6
 8005254:	d31c      	bcc.n	8005290 <_strtol_l.constprop.0+0xc0>
 8005256:	d101      	bne.n	800525c <_strtol_l.constprop.0+0x8c>
 8005258:	45a2      	cmp	sl, r4
 800525a:	db19      	blt.n	8005290 <_strtol_l.constprop.0+0xc0>
 800525c:	fb06 4603 	mla	r6, r6, r3, r4
 8005260:	f04f 0c01 	mov.w	ip, #1
 8005264:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005268:	e7e8      	b.n	800523c <_strtol_l.constprop.0+0x6c>
 800526a:	2c2b      	cmp	r4, #43	; 0x2b
 800526c:	bf04      	itt	eq
 800526e:	782c      	ldrbeq	r4, [r5, #0]
 8005270:	1cb5      	addeq	r5, r6, #2
 8005272:	e7ca      	b.n	800520a <_strtol_l.constprop.0+0x3a>
 8005274:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8005278:	f1be 0f19 	cmp.w	lr, #25
 800527c:	d801      	bhi.n	8005282 <_strtol_l.constprop.0+0xb2>
 800527e:	3c37      	subs	r4, #55	; 0x37
 8005280:	e7e2      	b.n	8005248 <_strtol_l.constprop.0+0x78>
 8005282:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8005286:	f1be 0f19 	cmp.w	lr, #25
 800528a:	d804      	bhi.n	8005296 <_strtol_l.constprop.0+0xc6>
 800528c:	3c57      	subs	r4, #87	; 0x57
 800528e:	e7db      	b.n	8005248 <_strtol_l.constprop.0+0x78>
 8005290:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8005294:	e7e6      	b.n	8005264 <_strtol_l.constprop.0+0x94>
 8005296:	f1bc 0f00 	cmp.w	ip, #0
 800529a:	da05      	bge.n	80052a8 <_strtol_l.constprop.0+0xd8>
 800529c:	2322      	movs	r3, #34	; 0x22
 800529e:	6003      	str	r3, [r0, #0]
 80052a0:	4646      	mov	r6, r8
 80052a2:	b942      	cbnz	r2, 80052b6 <_strtol_l.constprop.0+0xe6>
 80052a4:	4630      	mov	r0, r6
 80052a6:	e79e      	b.n	80051e6 <_strtol_l.constprop.0+0x16>
 80052a8:	b107      	cbz	r7, 80052ac <_strtol_l.constprop.0+0xdc>
 80052aa:	4276      	negs	r6, r6
 80052ac:	2a00      	cmp	r2, #0
 80052ae:	d0f9      	beq.n	80052a4 <_strtol_l.constprop.0+0xd4>
 80052b0:	f1bc 0f00 	cmp.w	ip, #0
 80052b4:	d000      	beq.n	80052b8 <_strtol_l.constprop.0+0xe8>
 80052b6:	1e69      	subs	r1, r5, #1
 80052b8:	6011      	str	r1, [r2, #0]
 80052ba:	e7f3      	b.n	80052a4 <_strtol_l.constprop.0+0xd4>
 80052bc:	2430      	movs	r4, #48	; 0x30
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d1b1      	bne.n	8005226 <_strtol_l.constprop.0+0x56>
 80052c2:	2308      	movs	r3, #8
 80052c4:	e7af      	b.n	8005226 <_strtol_l.constprop.0+0x56>
 80052c6:	2c30      	cmp	r4, #48	; 0x30
 80052c8:	d0a5      	beq.n	8005216 <_strtol_l.constprop.0+0x46>
 80052ca:	230a      	movs	r3, #10
 80052cc:	e7ab      	b.n	8005226 <_strtol_l.constprop.0+0x56>
 80052ce:	bf00      	nop
 80052d0:	08007759 	.word	0x08007759

080052d4 <_strtol_r>:
 80052d4:	f7ff bf7c 	b.w	80051d0 <_strtol_l.constprop.0>

080052d8 <_write_r>:
 80052d8:	b538      	push	{r3, r4, r5, lr}
 80052da:	4d07      	ldr	r5, [pc, #28]	; (80052f8 <_write_r+0x20>)
 80052dc:	4604      	mov	r4, r0
 80052de:	4608      	mov	r0, r1
 80052e0:	4611      	mov	r1, r2
 80052e2:	2200      	movs	r2, #0
 80052e4:	602a      	str	r2, [r5, #0]
 80052e6:	461a      	mov	r2, r3
 80052e8:	f7fc fb47 	bl	800197a <_write>
 80052ec:	1c43      	adds	r3, r0, #1
 80052ee:	d102      	bne.n	80052f6 <_write_r+0x1e>
 80052f0:	682b      	ldr	r3, [r5, #0]
 80052f2:	b103      	cbz	r3, 80052f6 <_write_r+0x1e>
 80052f4:	6023      	str	r3, [r4, #0]
 80052f6:	bd38      	pop	{r3, r4, r5, pc}
 80052f8:	20000408 	.word	0x20000408

080052fc <_close_r>:
 80052fc:	b538      	push	{r3, r4, r5, lr}
 80052fe:	4d06      	ldr	r5, [pc, #24]	; (8005318 <_close_r+0x1c>)
 8005300:	2300      	movs	r3, #0
 8005302:	4604      	mov	r4, r0
 8005304:	4608      	mov	r0, r1
 8005306:	602b      	str	r3, [r5, #0]
 8005308:	f7fc fb53 	bl	80019b2 <_close>
 800530c:	1c43      	adds	r3, r0, #1
 800530e:	d102      	bne.n	8005316 <_close_r+0x1a>
 8005310:	682b      	ldr	r3, [r5, #0]
 8005312:	b103      	cbz	r3, 8005316 <_close_r+0x1a>
 8005314:	6023      	str	r3, [r4, #0]
 8005316:	bd38      	pop	{r3, r4, r5, pc}
 8005318:	20000408 	.word	0x20000408

0800531c <rshift>:
 800531c:	6903      	ldr	r3, [r0, #16]
 800531e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8005322:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005326:	ea4f 1261 	mov.w	r2, r1, asr #5
 800532a:	f100 0414 	add.w	r4, r0, #20
 800532e:	dd45      	ble.n	80053bc <rshift+0xa0>
 8005330:	f011 011f 	ands.w	r1, r1, #31
 8005334:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8005338:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800533c:	d10c      	bne.n	8005358 <rshift+0x3c>
 800533e:	f100 0710 	add.w	r7, r0, #16
 8005342:	4629      	mov	r1, r5
 8005344:	42b1      	cmp	r1, r6
 8005346:	d334      	bcc.n	80053b2 <rshift+0x96>
 8005348:	1a9b      	subs	r3, r3, r2
 800534a:	009b      	lsls	r3, r3, #2
 800534c:	1eea      	subs	r2, r5, #3
 800534e:	4296      	cmp	r6, r2
 8005350:	bf38      	it	cc
 8005352:	2300      	movcc	r3, #0
 8005354:	4423      	add	r3, r4
 8005356:	e015      	b.n	8005384 <rshift+0x68>
 8005358:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800535c:	f1c1 0820 	rsb	r8, r1, #32
 8005360:	40cf      	lsrs	r7, r1
 8005362:	f105 0e04 	add.w	lr, r5, #4
 8005366:	46a1      	mov	r9, r4
 8005368:	4576      	cmp	r6, lr
 800536a:	46f4      	mov	ip, lr
 800536c:	d815      	bhi.n	800539a <rshift+0x7e>
 800536e:	1a9a      	subs	r2, r3, r2
 8005370:	0092      	lsls	r2, r2, #2
 8005372:	3a04      	subs	r2, #4
 8005374:	3501      	adds	r5, #1
 8005376:	42ae      	cmp	r6, r5
 8005378:	bf38      	it	cc
 800537a:	2200      	movcc	r2, #0
 800537c:	18a3      	adds	r3, r4, r2
 800537e:	50a7      	str	r7, [r4, r2]
 8005380:	b107      	cbz	r7, 8005384 <rshift+0x68>
 8005382:	3304      	adds	r3, #4
 8005384:	1b1a      	subs	r2, r3, r4
 8005386:	42a3      	cmp	r3, r4
 8005388:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800538c:	bf08      	it	eq
 800538e:	2300      	moveq	r3, #0
 8005390:	6102      	str	r2, [r0, #16]
 8005392:	bf08      	it	eq
 8005394:	6143      	streq	r3, [r0, #20]
 8005396:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800539a:	f8dc c000 	ldr.w	ip, [ip]
 800539e:	fa0c fc08 	lsl.w	ip, ip, r8
 80053a2:	ea4c 0707 	orr.w	r7, ip, r7
 80053a6:	f849 7b04 	str.w	r7, [r9], #4
 80053aa:	f85e 7b04 	ldr.w	r7, [lr], #4
 80053ae:	40cf      	lsrs	r7, r1
 80053b0:	e7da      	b.n	8005368 <rshift+0x4c>
 80053b2:	f851 cb04 	ldr.w	ip, [r1], #4
 80053b6:	f847 cf04 	str.w	ip, [r7, #4]!
 80053ba:	e7c3      	b.n	8005344 <rshift+0x28>
 80053bc:	4623      	mov	r3, r4
 80053be:	e7e1      	b.n	8005384 <rshift+0x68>

080053c0 <__hexdig_fun>:
 80053c0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80053c4:	2b09      	cmp	r3, #9
 80053c6:	d802      	bhi.n	80053ce <__hexdig_fun+0xe>
 80053c8:	3820      	subs	r0, #32
 80053ca:	b2c0      	uxtb	r0, r0
 80053cc:	4770      	bx	lr
 80053ce:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80053d2:	2b05      	cmp	r3, #5
 80053d4:	d801      	bhi.n	80053da <__hexdig_fun+0x1a>
 80053d6:	3847      	subs	r0, #71	; 0x47
 80053d8:	e7f7      	b.n	80053ca <__hexdig_fun+0xa>
 80053da:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80053de:	2b05      	cmp	r3, #5
 80053e0:	d801      	bhi.n	80053e6 <__hexdig_fun+0x26>
 80053e2:	3827      	subs	r0, #39	; 0x27
 80053e4:	e7f1      	b.n	80053ca <__hexdig_fun+0xa>
 80053e6:	2000      	movs	r0, #0
 80053e8:	4770      	bx	lr
	...

080053ec <__gethex>:
 80053ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053f0:	ed2d 8b02 	vpush	{d8}
 80053f4:	b089      	sub	sp, #36	; 0x24
 80053f6:	ee08 0a10 	vmov	s16, r0
 80053fa:	9304      	str	r3, [sp, #16]
 80053fc:	4bb4      	ldr	r3, [pc, #720]	; (80056d0 <__gethex+0x2e4>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	9301      	str	r3, [sp, #4]
 8005402:	4618      	mov	r0, r3
 8005404:	468b      	mov	fp, r1
 8005406:	4690      	mov	r8, r2
 8005408:	f7fa fee2 	bl	80001d0 <strlen>
 800540c:	9b01      	ldr	r3, [sp, #4]
 800540e:	f8db 2000 	ldr.w	r2, [fp]
 8005412:	4403      	add	r3, r0
 8005414:	4682      	mov	sl, r0
 8005416:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800541a:	9305      	str	r3, [sp, #20]
 800541c:	1c93      	adds	r3, r2, #2
 800541e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8005422:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8005426:	32fe      	adds	r2, #254	; 0xfe
 8005428:	18d1      	adds	r1, r2, r3
 800542a:	461f      	mov	r7, r3
 800542c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8005430:	9100      	str	r1, [sp, #0]
 8005432:	2830      	cmp	r0, #48	; 0x30
 8005434:	d0f8      	beq.n	8005428 <__gethex+0x3c>
 8005436:	f7ff ffc3 	bl	80053c0 <__hexdig_fun>
 800543a:	4604      	mov	r4, r0
 800543c:	2800      	cmp	r0, #0
 800543e:	d13a      	bne.n	80054b6 <__gethex+0xca>
 8005440:	9901      	ldr	r1, [sp, #4]
 8005442:	4652      	mov	r2, sl
 8005444:	4638      	mov	r0, r7
 8005446:	f001 fb93 	bl	8006b70 <strncmp>
 800544a:	4605      	mov	r5, r0
 800544c:	2800      	cmp	r0, #0
 800544e:	d168      	bne.n	8005522 <__gethex+0x136>
 8005450:	f817 000a 	ldrb.w	r0, [r7, sl]
 8005454:	eb07 060a 	add.w	r6, r7, sl
 8005458:	f7ff ffb2 	bl	80053c0 <__hexdig_fun>
 800545c:	2800      	cmp	r0, #0
 800545e:	d062      	beq.n	8005526 <__gethex+0x13a>
 8005460:	4633      	mov	r3, r6
 8005462:	7818      	ldrb	r0, [r3, #0]
 8005464:	2830      	cmp	r0, #48	; 0x30
 8005466:	461f      	mov	r7, r3
 8005468:	f103 0301 	add.w	r3, r3, #1
 800546c:	d0f9      	beq.n	8005462 <__gethex+0x76>
 800546e:	f7ff ffa7 	bl	80053c0 <__hexdig_fun>
 8005472:	2301      	movs	r3, #1
 8005474:	fab0 f480 	clz	r4, r0
 8005478:	0964      	lsrs	r4, r4, #5
 800547a:	4635      	mov	r5, r6
 800547c:	9300      	str	r3, [sp, #0]
 800547e:	463a      	mov	r2, r7
 8005480:	4616      	mov	r6, r2
 8005482:	3201      	adds	r2, #1
 8005484:	7830      	ldrb	r0, [r6, #0]
 8005486:	f7ff ff9b 	bl	80053c0 <__hexdig_fun>
 800548a:	2800      	cmp	r0, #0
 800548c:	d1f8      	bne.n	8005480 <__gethex+0x94>
 800548e:	9901      	ldr	r1, [sp, #4]
 8005490:	4652      	mov	r2, sl
 8005492:	4630      	mov	r0, r6
 8005494:	f001 fb6c 	bl	8006b70 <strncmp>
 8005498:	b980      	cbnz	r0, 80054bc <__gethex+0xd0>
 800549a:	b94d      	cbnz	r5, 80054b0 <__gethex+0xc4>
 800549c:	eb06 050a 	add.w	r5, r6, sl
 80054a0:	462a      	mov	r2, r5
 80054a2:	4616      	mov	r6, r2
 80054a4:	3201      	adds	r2, #1
 80054a6:	7830      	ldrb	r0, [r6, #0]
 80054a8:	f7ff ff8a 	bl	80053c0 <__hexdig_fun>
 80054ac:	2800      	cmp	r0, #0
 80054ae:	d1f8      	bne.n	80054a2 <__gethex+0xb6>
 80054b0:	1bad      	subs	r5, r5, r6
 80054b2:	00ad      	lsls	r5, r5, #2
 80054b4:	e004      	b.n	80054c0 <__gethex+0xd4>
 80054b6:	2400      	movs	r4, #0
 80054b8:	4625      	mov	r5, r4
 80054ba:	e7e0      	b.n	800547e <__gethex+0x92>
 80054bc:	2d00      	cmp	r5, #0
 80054be:	d1f7      	bne.n	80054b0 <__gethex+0xc4>
 80054c0:	7833      	ldrb	r3, [r6, #0]
 80054c2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80054c6:	2b50      	cmp	r3, #80	; 0x50
 80054c8:	d13b      	bne.n	8005542 <__gethex+0x156>
 80054ca:	7873      	ldrb	r3, [r6, #1]
 80054cc:	2b2b      	cmp	r3, #43	; 0x2b
 80054ce:	d02c      	beq.n	800552a <__gethex+0x13e>
 80054d0:	2b2d      	cmp	r3, #45	; 0x2d
 80054d2:	d02e      	beq.n	8005532 <__gethex+0x146>
 80054d4:	1c71      	adds	r1, r6, #1
 80054d6:	f04f 0900 	mov.w	r9, #0
 80054da:	7808      	ldrb	r0, [r1, #0]
 80054dc:	f7ff ff70 	bl	80053c0 <__hexdig_fun>
 80054e0:	1e43      	subs	r3, r0, #1
 80054e2:	b2db      	uxtb	r3, r3
 80054e4:	2b18      	cmp	r3, #24
 80054e6:	d82c      	bhi.n	8005542 <__gethex+0x156>
 80054e8:	f1a0 0210 	sub.w	r2, r0, #16
 80054ec:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80054f0:	f7ff ff66 	bl	80053c0 <__hexdig_fun>
 80054f4:	1e43      	subs	r3, r0, #1
 80054f6:	b2db      	uxtb	r3, r3
 80054f8:	2b18      	cmp	r3, #24
 80054fa:	d91d      	bls.n	8005538 <__gethex+0x14c>
 80054fc:	f1b9 0f00 	cmp.w	r9, #0
 8005500:	d000      	beq.n	8005504 <__gethex+0x118>
 8005502:	4252      	negs	r2, r2
 8005504:	4415      	add	r5, r2
 8005506:	f8cb 1000 	str.w	r1, [fp]
 800550a:	b1e4      	cbz	r4, 8005546 <__gethex+0x15a>
 800550c:	9b00      	ldr	r3, [sp, #0]
 800550e:	2b00      	cmp	r3, #0
 8005510:	bf14      	ite	ne
 8005512:	2700      	movne	r7, #0
 8005514:	2706      	moveq	r7, #6
 8005516:	4638      	mov	r0, r7
 8005518:	b009      	add	sp, #36	; 0x24
 800551a:	ecbd 8b02 	vpop	{d8}
 800551e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005522:	463e      	mov	r6, r7
 8005524:	4625      	mov	r5, r4
 8005526:	2401      	movs	r4, #1
 8005528:	e7ca      	b.n	80054c0 <__gethex+0xd4>
 800552a:	f04f 0900 	mov.w	r9, #0
 800552e:	1cb1      	adds	r1, r6, #2
 8005530:	e7d3      	b.n	80054da <__gethex+0xee>
 8005532:	f04f 0901 	mov.w	r9, #1
 8005536:	e7fa      	b.n	800552e <__gethex+0x142>
 8005538:	230a      	movs	r3, #10
 800553a:	fb03 0202 	mla	r2, r3, r2, r0
 800553e:	3a10      	subs	r2, #16
 8005540:	e7d4      	b.n	80054ec <__gethex+0x100>
 8005542:	4631      	mov	r1, r6
 8005544:	e7df      	b.n	8005506 <__gethex+0x11a>
 8005546:	1bf3      	subs	r3, r6, r7
 8005548:	3b01      	subs	r3, #1
 800554a:	4621      	mov	r1, r4
 800554c:	2b07      	cmp	r3, #7
 800554e:	dc0b      	bgt.n	8005568 <__gethex+0x17c>
 8005550:	ee18 0a10 	vmov	r0, s16
 8005554:	f000 fa84 	bl	8005a60 <_Balloc>
 8005558:	4604      	mov	r4, r0
 800555a:	b940      	cbnz	r0, 800556e <__gethex+0x182>
 800555c:	4b5d      	ldr	r3, [pc, #372]	; (80056d4 <__gethex+0x2e8>)
 800555e:	4602      	mov	r2, r0
 8005560:	21de      	movs	r1, #222	; 0xde
 8005562:	485d      	ldr	r0, [pc, #372]	; (80056d8 <__gethex+0x2ec>)
 8005564:	f001 fb26 	bl	8006bb4 <__assert_func>
 8005568:	3101      	adds	r1, #1
 800556a:	105b      	asrs	r3, r3, #1
 800556c:	e7ee      	b.n	800554c <__gethex+0x160>
 800556e:	f100 0914 	add.w	r9, r0, #20
 8005572:	f04f 0b00 	mov.w	fp, #0
 8005576:	f1ca 0301 	rsb	r3, sl, #1
 800557a:	f8cd 9008 	str.w	r9, [sp, #8]
 800557e:	f8cd b000 	str.w	fp, [sp]
 8005582:	9306      	str	r3, [sp, #24]
 8005584:	42b7      	cmp	r7, r6
 8005586:	d340      	bcc.n	800560a <__gethex+0x21e>
 8005588:	9802      	ldr	r0, [sp, #8]
 800558a:	9b00      	ldr	r3, [sp, #0]
 800558c:	f840 3b04 	str.w	r3, [r0], #4
 8005590:	eba0 0009 	sub.w	r0, r0, r9
 8005594:	1080      	asrs	r0, r0, #2
 8005596:	0146      	lsls	r6, r0, #5
 8005598:	6120      	str	r0, [r4, #16]
 800559a:	4618      	mov	r0, r3
 800559c:	f000 fb52 	bl	8005c44 <__hi0bits>
 80055a0:	1a30      	subs	r0, r6, r0
 80055a2:	f8d8 6000 	ldr.w	r6, [r8]
 80055a6:	42b0      	cmp	r0, r6
 80055a8:	dd63      	ble.n	8005672 <__gethex+0x286>
 80055aa:	1b87      	subs	r7, r0, r6
 80055ac:	4639      	mov	r1, r7
 80055ae:	4620      	mov	r0, r4
 80055b0:	f000 fef6 	bl	80063a0 <__any_on>
 80055b4:	4682      	mov	sl, r0
 80055b6:	b1a8      	cbz	r0, 80055e4 <__gethex+0x1f8>
 80055b8:	1e7b      	subs	r3, r7, #1
 80055ba:	1159      	asrs	r1, r3, #5
 80055bc:	f003 021f 	and.w	r2, r3, #31
 80055c0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80055c4:	f04f 0a01 	mov.w	sl, #1
 80055c8:	fa0a f202 	lsl.w	r2, sl, r2
 80055cc:	420a      	tst	r2, r1
 80055ce:	d009      	beq.n	80055e4 <__gethex+0x1f8>
 80055d0:	4553      	cmp	r3, sl
 80055d2:	dd05      	ble.n	80055e0 <__gethex+0x1f4>
 80055d4:	1eb9      	subs	r1, r7, #2
 80055d6:	4620      	mov	r0, r4
 80055d8:	f000 fee2 	bl	80063a0 <__any_on>
 80055dc:	2800      	cmp	r0, #0
 80055de:	d145      	bne.n	800566c <__gethex+0x280>
 80055e0:	f04f 0a02 	mov.w	sl, #2
 80055e4:	4639      	mov	r1, r7
 80055e6:	4620      	mov	r0, r4
 80055e8:	f7ff fe98 	bl	800531c <rshift>
 80055ec:	443d      	add	r5, r7
 80055ee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80055f2:	42ab      	cmp	r3, r5
 80055f4:	da4c      	bge.n	8005690 <__gethex+0x2a4>
 80055f6:	ee18 0a10 	vmov	r0, s16
 80055fa:	4621      	mov	r1, r4
 80055fc:	f000 fa70 	bl	8005ae0 <_Bfree>
 8005600:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005602:	2300      	movs	r3, #0
 8005604:	6013      	str	r3, [r2, #0]
 8005606:	27a3      	movs	r7, #163	; 0xa3
 8005608:	e785      	b.n	8005516 <__gethex+0x12a>
 800560a:	1e73      	subs	r3, r6, #1
 800560c:	9a05      	ldr	r2, [sp, #20]
 800560e:	9303      	str	r3, [sp, #12]
 8005610:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005614:	4293      	cmp	r3, r2
 8005616:	d019      	beq.n	800564c <__gethex+0x260>
 8005618:	f1bb 0f20 	cmp.w	fp, #32
 800561c:	d107      	bne.n	800562e <__gethex+0x242>
 800561e:	9b02      	ldr	r3, [sp, #8]
 8005620:	9a00      	ldr	r2, [sp, #0]
 8005622:	f843 2b04 	str.w	r2, [r3], #4
 8005626:	9302      	str	r3, [sp, #8]
 8005628:	2300      	movs	r3, #0
 800562a:	9300      	str	r3, [sp, #0]
 800562c:	469b      	mov	fp, r3
 800562e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8005632:	f7ff fec5 	bl	80053c0 <__hexdig_fun>
 8005636:	9b00      	ldr	r3, [sp, #0]
 8005638:	f000 000f 	and.w	r0, r0, #15
 800563c:	fa00 f00b 	lsl.w	r0, r0, fp
 8005640:	4303      	orrs	r3, r0
 8005642:	9300      	str	r3, [sp, #0]
 8005644:	f10b 0b04 	add.w	fp, fp, #4
 8005648:	9b03      	ldr	r3, [sp, #12]
 800564a:	e00d      	b.n	8005668 <__gethex+0x27c>
 800564c:	9b03      	ldr	r3, [sp, #12]
 800564e:	9a06      	ldr	r2, [sp, #24]
 8005650:	4413      	add	r3, r2
 8005652:	42bb      	cmp	r3, r7
 8005654:	d3e0      	bcc.n	8005618 <__gethex+0x22c>
 8005656:	4618      	mov	r0, r3
 8005658:	9901      	ldr	r1, [sp, #4]
 800565a:	9307      	str	r3, [sp, #28]
 800565c:	4652      	mov	r2, sl
 800565e:	f001 fa87 	bl	8006b70 <strncmp>
 8005662:	9b07      	ldr	r3, [sp, #28]
 8005664:	2800      	cmp	r0, #0
 8005666:	d1d7      	bne.n	8005618 <__gethex+0x22c>
 8005668:	461e      	mov	r6, r3
 800566a:	e78b      	b.n	8005584 <__gethex+0x198>
 800566c:	f04f 0a03 	mov.w	sl, #3
 8005670:	e7b8      	b.n	80055e4 <__gethex+0x1f8>
 8005672:	da0a      	bge.n	800568a <__gethex+0x29e>
 8005674:	1a37      	subs	r7, r6, r0
 8005676:	4621      	mov	r1, r4
 8005678:	ee18 0a10 	vmov	r0, s16
 800567c:	463a      	mov	r2, r7
 800567e:	f000 fc4b 	bl	8005f18 <__lshift>
 8005682:	1bed      	subs	r5, r5, r7
 8005684:	4604      	mov	r4, r0
 8005686:	f100 0914 	add.w	r9, r0, #20
 800568a:	f04f 0a00 	mov.w	sl, #0
 800568e:	e7ae      	b.n	80055ee <__gethex+0x202>
 8005690:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8005694:	42a8      	cmp	r0, r5
 8005696:	dd72      	ble.n	800577e <__gethex+0x392>
 8005698:	1b45      	subs	r5, r0, r5
 800569a:	42ae      	cmp	r6, r5
 800569c:	dc36      	bgt.n	800570c <__gethex+0x320>
 800569e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80056a2:	2b02      	cmp	r3, #2
 80056a4:	d02a      	beq.n	80056fc <__gethex+0x310>
 80056a6:	2b03      	cmp	r3, #3
 80056a8:	d02c      	beq.n	8005704 <__gethex+0x318>
 80056aa:	2b01      	cmp	r3, #1
 80056ac:	d11c      	bne.n	80056e8 <__gethex+0x2fc>
 80056ae:	42ae      	cmp	r6, r5
 80056b0:	d11a      	bne.n	80056e8 <__gethex+0x2fc>
 80056b2:	2e01      	cmp	r6, #1
 80056b4:	d112      	bne.n	80056dc <__gethex+0x2f0>
 80056b6:	9a04      	ldr	r2, [sp, #16]
 80056b8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80056bc:	6013      	str	r3, [r2, #0]
 80056be:	2301      	movs	r3, #1
 80056c0:	6123      	str	r3, [r4, #16]
 80056c2:	f8c9 3000 	str.w	r3, [r9]
 80056c6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80056c8:	2762      	movs	r7, #98	; 0x62
 80056ca:	601c      	str	r4, [r3, #0]
 80056cc:	e723      	b.n	8005516 <__gethex+0x12a>
 80056ce:	bf00      	nop
 80056d0:	080078d0 	.word	0x080078d0
 80056d4:	08007859 	.word	0x08007859
 80056d8:	0800786a 	.word	0x0800786a
 80056dc:	1e71      	subs	r1, r6, #1
 80056de:	4620      	mov	r0, r4
 80056e0:	f000 fe5e 	bl	80063a0 <__any_on>
 80056e4:	2800      	cmp	r0, #0
 80056e6:	d1e6      	bne.n	80056b6 <__gethex+0x2ca>
 80056e8:	ee18 0a10 	vmov	r0, s16
 80056ec:	4621      	mov	r1, r4
 80056ee:	f000 f9f7 	bl	8005ae0 <_Bfree>
 80056f2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80056f4:	2300      	movs	r3, #0
 80056f6:	6013      	str	r3, [r2, #0]
 80056f8:	2750      	movs	r7, #80	; 0x50
 80056fa:	e70c      	b.n	8005516 <__gethex+0x12a>
 80056fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d1f2      	bne.n	80056e8 <__gethex+0x2fc>
 8005702:	e7d8      	b.n	80056b6 <__gethex+0x2ca>
 8005704:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005706:	2b00      	cmp	r3, #0
 8005708:	d1d5      	bne.n	80056b6 <__gethex+0x2ca>
 800570a:	e7ed      	b.n	80056e8 <__gethex+0x2fc>
 800570c:	1e6f      	subs	r7, r5, #1
 800570e:	f1ba 0f00 	cmp.w	sl, #0
 8005712:	d131      	bne.n	8005778 <__gethex+0x38c>
 8005714:	b127      	cbz	r7, 8005720 <__gethex+0x334>
 8005716:	4639      	mov	r1, r7
 8005718:	4620      	mov	r0, r4
 800571a:	f000 fe41 	bl	80063a0 <__any_on>
 800571e:	4682      	mov	sl, r0
 8005720:	117b      	asrs	r3, r7, #5
 8005722:	2101      	movs	r1, #1
 8005724:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8005728:	f007 071f 	and.w	r7, r7, #31
 800572c:	fa01 f707 	lsl.w	r7, r1, r7
 8005730:	421f      	tst	r7, r3
 8005732:	4629      	mov	r1, r5
 8005734:	4620      	mov	r0, r4
 8005736:	bf18      	it	ne
 8005738:	f04a 0a02 	orrne.w	sl, sl, #2
 800573c:	1b76      	subs	r6, r6, r5
 800573e:	f7ff fded 	bl	800531c <rshift>
 8005742:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8005746:	2702      	movs	r7, #2
 8005748:	f1ba 0f00 	cmp.w	sl, #0
 800574c:	d048      	beq.n	80057e0 <__gethex+0x3f4>
 800574e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005752:	2b02      	cmp	r3, #2
 8005754:	d015      	beq.n	8005782 <__gethex+0x396>
 8005756:	2b03      	cmp	r3, #3
 8005758:	d017      	beq.n	800578a <__gethex+0x39e>
 800575a:	2b01      	cmp	r3, #1
 800575c:	d109      	bne.n	8005772 <__gethex+0x386>
 800575e:	f01a 0f02 	tst.w	sl, #2
 8005762:	d006      	beq.n	8005772 <__gethex+0x386>
 8005764:	f8d9 0000 	ldr.w	r0, [r9]
 8005768:	ea4a 0a00 	orr.w	sl, sl, r0
 800576c:	f01a 0f01 	tst.w	sl, #1
 8005770:	d10e      	bne.n	8005790 <__gethex+0x3a4>
 8005772:	f047 0710 	orr.w	r7, r7, #16
 8005776:	e033      	b.n	80057e0 <__gethex+0x3f4>
 8005778:	f04f 0a01 	mov.w	sl, #1
 800577c:	e7d0      	b.n	8005720 <__gethex+0x334>
 800577e:	2701      	movs	r7, #1
 8005780:	e7e2      	b.n	8005748 <__gethex+0x35c>
 8005782:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005784:	f1c3 0301 	rsb	r3, r3, #1
 8005788:	9315      	str	r3, [sp, #84]	; 0x54
 800578a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800578c:	2b00      	cmp	r3, #0
 800578e:	d0f0      	beq.n	8005772 <__gethex+0x386>
 8005790:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8005794:	f104 0314 	add.w	r3, r4, #20
 8005798:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800579c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80057a0:	f04f 0c00 	mov.w	ip, #0
 80057a4:	4618      	mov	r0, r3
 80057a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80057aa:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 80057ae:	d01c      	beq.n	80057ea <__gethex+0x3fe>
 80057b0:	3201      	adds	r2, #1
 80057b2:	6002      	str	r2, [r0, #0]
 80057b4:	2f02      	cmp	r7, #2
 80057b6:	f104 0314 	add.w	r3, r4, #20
 80057ba:	d13f      	bne.n	800583c <__gethex+0x450>
 80057bc:	f8d8 2000 	ldr.w	r2, [r8]
 80057c0:	3a01      	subs	r2, #1
 80057c2:	42b2      	cmp	r2, r6
 80057c4:	d10a      	bne.n	80057dc <__gethex+0x3f0>
 80057c6:	1171      	asrs	r1, r6, #5
 80057c8:	2201      	movs	r2, #1
 80057ca:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80057ce:	f006 061f 	and.w	r6, r6, #31
 80057d2:	fa02 f606 	lsl.w	r6, r2, r6
 80057d6:	421e      	tst	r6, r3
 80057d8:	bf18      	it	ne
 80057da:	4617      	movne	r7, r2
 80057dc:	f047 0720 	orr.w	r7, r7, #32
 80057e0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80057e2:	601c      	str	r4, [r3, #0]
 80057e4:	9b04      	ldr	r3, [sp, #16]
 80057e6:	601d      	str	r5, [r3, #0]
 80057e8:	e695      	b.n	8005516 <__gethex+0x12a>
 80057ea:	4299      	cmp	r1, r3
 80057ec:	f843 cc04 	str.w	ip, [r3, #-4]
 80057f0:	d8d8      	bhi.n	80057a4 <__gethex+0x3b8>
 80057f2:	68a3      	ldr	r3, [r4, #8]
 80057f4:	459b      	cmp	fp, r3
 80057f6:	db19      	blt.n	800582c <__gethex+0x440>
 80057f8:	6861      	ldr	r1, [r4, #4]
 80057fa:	ee18 0a10 	vmov	r0, s16
 80057fe:	3101      	adds	r1, #1
 8005800:	f000 f92e 	bl	8005a60 <_Balloc>
 8005804:	4681      	mov	r9, r0
 8005806:	b918      	cbnz	r0, 8005810 <__gethex+0x424>
 8005808:	4b1a      	ldr	r3, [pc, #104]	; (8005874 <__gethex+0x488>)
 800580a:	4602      	mov	r2, r0
 800580c:	2184      	movs	r1, #132	; 0x84
 800580e:	e6a8      	b.n	8005562 <__gethex+0x176>
 8005810:	6922      	ldr	r2, [r4, #16]
 8005812:	3202      	adds	r2, #2
 8005814:	f104 010c 	add.w	r1, r4, #12
 8005818:	0092      	lsls	r2, r2, #2
 800581a:	300c      	adds	r0, #12
 800581c:	f000 f912 	bl	8005a44 <memcpy>
 8005820:	4621      	mov	r1, r4
 8005822:	ee18 0a10 	vmov	r0, s16
 8005826:	f000 f95b 	bl	8005ae0 <_Bfree>
 800582a:	464c      	mov	r4, r9
 800582c:	6923      	ldr	r3, [r4, #16]
 800582e:	1c5a      	adds	r2, r3, #1
 8005830:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005834:	6122      	str	r2, [r4, #16]
 8005836:	2201      	movs	r2, #1
 8005838:	615a      	str	r2, [r3, #20]
 800583a:	e7bb      	b.n	80057b4 <__gethex+0x3c8>
 800583c:	6922      	ldr	r2, [r4, #16]
 800583e:	455a      	cmp	r2, fp
 8005840:	dd0b      	ble.n	800585a <__gethex+0x46e>
 8005842:	2101      	movs	r1, #1
 8005844:	4620      	mov	r0, r4
 8005846:	f7ff fd69 	bl	800531c <rshift>
 800584a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800584e:	3501      	adds	r5, #1
 8005850:	42ab      	cmp	r3, r5
 8005852:	f6ff aed0 	blt.w	80055f6 <__gethex+0x20a>
 8005856:	2701      	movs	r7, #1
 8005858:	e7c0      	b.n	80057dc <__gethex+0x3f0>
 800585a:	f016 061f 	ands.w	r6, r6, #31
 800585e:	d0fa      	beq.n	8005856 <__gethex+0x46a>
 8005860:	4453      	add	r3, sl
 8005862:	f1c6 0620 	rsb	r6, r6, #32
 8005866:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800586a:	f000 f9eb 	bl	8005c44 <__hi0bits>
 800586e:	42b0      	cmp	r0, r6
 8005870:	dbe7      	blt.n	8005842 <__gethex+0x456>
 8005872:	e7f0      	b.n	8005856 <__gethex+0x46a>
 8005874:	08007859 	.word	0x08007859

08005878 <L_shift>:
 8005878:	f1c2 0208 	rsb	r2, r2, #8
 800587c:	0092      	lsls	r2, r2, #2
 800587e:	b570      	push	{r4, r5, r6, lr}
 8005880:	f1c2 0620 	rsb	r6, r2, #32
 8005884:	6843      	ldr	r3, [r0, #4]
 8005886:	6804      	ldr	r4, [r0, #0]
 8005888:	fa03 f506 	lsl.w	r5, r3, r6
 800588c:	432c      	orrs	r4, r5
 800588e:	40d3      	lsrs	r3, r2
 8005890:	6004      	str	r4, [r0, #0]
 8005892:	f840 3f04 	str.w	r3, [r0, #4]!
 8005896:	4288      	cmp	r0, r1
 8005898:	d3f4      	bcc.n	8005884 <L_shift+0xc>
 800589a:	bd70      	pop	{r4, r5, r6, pc}

0800589c <__match>:
 800589c:	b530      	push	{r4, r5, lr}
 800589e:	6803      	ldr	r3, [r0, #0]
 80058a0:	3301      	adds	r3, #1
 80058a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80058a6:	b914      	cbnz	r4, 80058ae <__match+0x12>
 80058a8:	6003      	str	r3, [r0, #0]
 80058aa:	2001      	movs	r0, #1
 80058ac:	bd30      	pop	{r4, r5, pc}
 80058ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80058b2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80058b6:	2d19      	cmp	r5, #25
 80058b8:	bf98      	it	ls
 80058ba:	3220      	addls	r2, #32
 80058bc:	42a2      	cmp	r2, r4
 80058be:	d0f0      	beq.n	80058a2 <__match+0x6>
 80058c0:	2000      	movs	r0, #0
 80058c2:	e7f3      	b.n	80058ac <__match+0x10>

080058c4 <__hexnan>:
 80058c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058c8:	680b      	ldr	r3, [r1, #0]
 80058ca:	115e      	asrs	r6, r3, #5
 80058cc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80058d0:	f013 031f 	ands.w	r3, r3, #31
 80058d4:	b087      	sub	sp, #28
 80058d6:	bf18      	it	ne
 80058d8:	3604      	addne	r6, #4
 80058da:	2500      	movs	r5, #0
 80058dc:	1f37      	subs	r7, r6, #4
 80058de:	4690      	mov	r8, r2
 80058e0:	6802      	ldr	r2, [r0, #0]
 80058e2:	9301      	str	r3, [sp, #4]
 80058e4:	4682      	mov	sl, r0
 80058e6:	f846 5c04 	str.w	r5, [r6, #-4]
 80058ea:	46b9      	mov	r9, r7
 80058ec:	463c      	mov	r4, r7
 80058ee:	9502      	str	r5, [sp, #8]
 80058f0:	46ab      	mov	fp, r5
 80058f2:	7851      	ldrb	r1, [r2, #1]
 80058f4:	1c53      	adds	r3, r2, #1
 80058f6:	9303      	str	r3, [sp, #12]
 80058f8:	b341      	cbz	r1, 800594c <__hexnan+0x88>
 80058fa:	4608      	mov	r0, r1
 80058fc:	9205      	str	r2, [sp, #20]
 80058fe:	9104      	str	r1, [sp, #16]
 8005900:	f7ff fd5e 	bl	80053c0 <__hexdig_fun>
 8005904:	2800      	cmp	r0, #0
 8005906:	d14f      	bne.n	80059a8 <__hexnan+0xe4>
 8005908:	9904      	ldr	r1, [sp, #16]
 800590a:	9a05      	ldr	r2, [sp, #20]
 800590c:	2920      	cmp	r1, #32
 800590e:	d818      	bhi.n	8005942 <__hexnan+0x7e>
 8005910:	9b02      	ldr	r3, [sp, #8]
 8005912:	459b      	cmp	fp, r3
 8005914:	dd13      	ble.n	800593e <__hexnan+0x7a>
 8005916:	454c      	cmp	r4, r9
 8005918:	d206      	bcs.n	8005928 <__hexnan+0x64>
 800591a:	2d07      	cmp	r5, #7
 800591c:	dc04      	bgt.n	8005928 <__hexnan+0x64>
 800591e:	462a      	mov	r2, r5
 8005920:	4649      	mov	r1, r9
 8005922:	4620      	mov	r0, r4
 8005924:	f7ff ffa8 	bl	8005878 <L_shift>
 8005928:	4544      	cmp	r4, r8
 800592a:	d950      	bls.n	80059ce <__hexnan+0x10a>
 800592c:	2300      	movs	r3, #0
 800592e:	f1a4 0904 	sub.w	r9, r4, #4
 8005932:	f844 3c04 	str.w	r3, [r4, #-4]
 8005936:	f8cd b008 	str.w	fp, [sp, #8]
 800593a:	464c      	mov	r4, r9
 800593c:	461d      	mov	r5, r3
 800593e:	9a03      	ldr	r2, [sp, #12]
 8005940:	e7d7      	b.n	80058f2 <__hexnan+0x2e>
 8005942:	2929      	cmp	r1, #41	; 0x29
 8005944:	d156      	bne.n	80059f4 <__hexnan+0x130>
 8005946:	3202      	adds	r2, #2
 8005948:	f8ca 2000 	str.w	r2, [sl]
 800594c:	f1bb 0f00 	cmp.w	fp, #0
 8005950:	d050      	beq.n	80059f4 <__hexnan+0x130>
 8005952:	454c      	cmp	r4, r9
 8005954:	d206      	bcs.n	8005964 <__hexnan+0xa0>
 8005956:	2d07      	cmp	r5, #7
 8005958:	dc04      	bgt.n	8005964 <__hexnan+0xa0>
 800595a:	462a      	mov	r2, r5
 800595c:	4649      	mov	r1, r9
 800595e:	4620      	mov	r0, r4
 8005960:	f7ff ff8a 	bl	8005878 <L_shift>
 8005964:	4544      	cmp	r4, r8
 8005966:	d934      	bls.n	80059d2 <__hexnan+0x10e>
 8005968:	f1a8 0204 	sub.w	r2, r8, #4
 800596c:	4623      	mov	r3, r4
 800596e:	f853 1b04 	ldr.w	r1, [r3], #4
 8005972:	f842 1f04 	str.w	r1, [r2, #4]!
 8005976:	429f      	cmp	r7, r3
 8005978:	d2f9      	bcs.n	800596e <__hexnan+0xaa>
 800597a:	1b3b      	subs	r3, r7, r4
 800597c:	f023 0303 	bic.w	r3, r3, #3
 8005980:	3304      	adds	r3, #4
 8005982:	3401      	adds	r4, #1
 8005984:	3e03      	subs	r6, #3
 8005986:	42b4      	cmp	r4, r6
 8005988:	bf88      	it	hi
 800598a:	2304      	movhi	r3, #4
 800598c:	4443      	add	r3, r8
 800598e:	2200      	movs	r2, #0
 8005990:	f843 2b04 	str.w	r2, [r3], #4
 8005994:	429f      	cmp	r7, r3
 8005996:	d2fb      	bcs.n	8005990 <__hexnan+0xcc>
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	b91b      	cbnz	r3, 80059a4 <__hexnan+0xe0>
 800599c:	4547      	cmp	r7, r8
 800599e:	d127      	bne.n	80059f0 <__hexnan+0x12c>
 80059a0:	2301      	movs	r3, #1
 80059a2:	603b      	str	r3, [r7, #0]
 80059a4:	2005      	movs	r0, #5
 80059a6:	e026      	b.n	80059f6 <__hexnan+0x132>
 80059a8:	3501      	adds	r5, #1
 80059aa:	2d08      	cmp	r5, #8
 80059ac:	f10b 0b01 	add.w	fp, fp, #1
 80059b0:	dd06      	ble.n	80059c0 <__hexnan+0xfc>
 80059b2:	4544      	cmp	r4, r8
 80059b4:	d9c3      	bls.n	800593e <__hexnan+0x7a>
 80059b6:	2300      	movs	r3, #0
 80059b8:	f844 3c04 	str.w	r3, [r4, #-4]
 80059bc:	2501      	movs	r5, #1
 80059be:	3c04      	subs	r4, #4
 80059c0:	6822      	ldr	r2, [r4, #0]
 80059c2:	f000 000f 	and.w	r0, r0, #15
 80059c6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80059ca:	6022      	str	r2, [r4, #0]
 80059cc:	e7b7      	b.n	800593e <__hexnan+0x7a>
 80059ce:	2508      	movs	r5, #8
 80059d0:	e7b5      	b.n	800593e <__hexnan+0x7a>
 80059d2:	9b01      	ldr	r3, [sp, #4]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d0df      	beq.n	8005998 <__hexnan+0xd4>
 80059d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80059dc:	f1c3 0320 	rsb	r3, r3, #32
 80059e0:	fa22 f303 	lsr.w	r3, r2, r3
 80059e4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80059e8:	401a      	ands	r2, r3
 80059ea:	f846 2c04 	str.w	r2, [r6, #-4]
 80059ee:	e7d3      	b.n	8005998 <__hexnan+0xd4>
 80059f0:	3f04      	subs	r7, #4
 80059f2:	e7d1      	b.n	8005998 <__hexnan+0xd4>
 80059f4:	2004      	movs	r0, #4
 80059f6:	b007      	add	sp, #28
 80059f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080059fc <_lseek_r>:
 80059fc:	b538      	push	{r3, r4, r5, lr}
 80059fe:	4d07      	ldr	r5, [pc, #28]	; (8005a1c <_lseek_r+0x20>)
 8005a00:	4604      	mov	r4, r0
 8005a02:	4608      	mov	r0, r1
 8005a04:	4611      	mov	r1, r2
 8005a06:	2200      	movs	r2, #0
 8005a08:	602a      	str	r2, [r5, #0]
 8005a0a:	461a      	mov	r2, r3
 8005a0c:	f7fb fff8 	bl	8001a00 <_lseek>
 8005a10:	1c43      	adds	r3, r0, #1
 8005a12:	d102      	bne.n	8005a1a <_lseek_r+0x1e>
 8005a14:	682b      	ldr	r3, [r5, #0]
 8005a16:	b103      	cbz	r3, 8005a1a <_lseek_r+0x1e>
 8005a18:	6023      	str	r3, [r4, #0]
 8005a1a:	bd38      	pop	{r3, r4, r5, pc}
 8005a1c:	20000408 	.word	0x20000408

08005a20 <__ascii_mbtowc>:
 8005a20:	b082      	sub	sp, #8
 8005a22:	b901      	cbnz	r1, 8005a26 <__ascii_mbtowc+0x6>
 8005a24:	a901      	add	r1, sp, #4
 8005a26:	b142      	cbz	r2, 8005a3a <__ascii_mbtowc+0x1a>
 8005a28:	b14b      	cbz	r3, 8005a3e <__ascii_mbtowc+0x1e>
 8005a2a:	7813      	ldrb	r3, [r2, #0]
 8005a2c:	600b      	str	r3, [r1, #0]
 8005a2e:	7812      	ldrb	r2, [r2, #0]
 8005a30:	1e10      	subs	r0, r2, #0
 8005a32:	bf18      	it	ne
 8005a34:	2001      	movne	r0, #1
 8005a36:	b002      	add	sp, #8
 8005a38:	4770      	bx	lr
 8005a3a:	4610      	mov	r0, r2
 8005a3c:	e7fb      	b.n	8005a36 <__ascii_mbtowc+0x16>
 8005a3e:	f06f 0001 	mvn.w	r0, #1
 8005a42:	e7f8      	b.n	8005a36 <__ascii_mbtowc+0x16>

08005a44 <memcpy>:
 8005a44:	440a      	add	r2, r1
 8005a46:	4291      	cmp	r1, r2
 8005a48:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005a4c:	d100      	bne.n	8005a50 <memcpy+0xc>
 8005a4e:	4770      	bx	lr
 8005a50:	b510      	push	{r4, lr}
 8005a52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a56:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a5a:	4291      	cmp	r1, r2
 8005a5c:	d1f9      	bne.n	8005a52 <memcpy+0xe>
 8005a5e:	bd10      	pop	{r4, pc}

08005a60 <_Balloc>:
 8005a60:	b570      	push	{r4, r5, r6, lr}
 8005a62:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005a64:	4604      	mov	r4, r0
 8005a66:	460d      	mov	r5, r1
 8005a68:	b976      	cbnz	r6, 8005a88 <_Balloc+0x28>
 8005a6a:	2010      	movs	r0, #16
 8005a6c:	f001 fa8c 	bl	8006f88 <malloc>
 8005a70:	4602      	mov	r2, r0
 8005a72:	6260      	str	r0, [r4, #36]	; 0x24
 8005a74:	b920      	cbnz	r0, 8005a80 <_Balloc+0x20>
 8005a76:	4b18      	ldr	r3, [pc, #96]	; (8005ad8 <_Balloc+0x78>)
 8005a78:	4818      	ldr	r0, [pc, #96]	; (8005adc <_Balloc+0x7c>)
 8005a7a:	2166      	movs	r1, #102	; 0x66
 8005a7c:	f001 f89a 	bl	8006bb4 <__assert_func>
 8005a80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005a84:	6006      	str	r6, [r0, #0]
 8005a86:	60c6      	str	r6, [r0, #12]
 8005a88:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005a8a:	68f3      	ldr	r3, [r6, #12]
 8005a8c:	b183      	cbz	r3, 8005ab0 <_Balloc+0x50>
 8005a8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005a90:	68db      	ldr	r3, [r3, #12]
 8005a92:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005a96:	b9b8      	cbnz	r0, 8005ac8 <_Balloc+0x68>
 8005a98:	2101      	movs	r1, #1
 8005a9a:	fa01 f605 	lsl.w	r6, r1, r5
 8005a9e:	1d72      	adds	r2, r6, #5
 8005aa0:	0092      	lsls	r2, r2, #2
 8005aa2:	4620      	mov	r0, r4
 8005aa4:	f000 fc9d 	bl	80063e2 <_calloc_r>
 8005aa8:	b160      	cbz	r0, 8005ac4 <_Balloc+0x64>
 8005aaa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005aae:	e00e      	b.n	8005ace <_Balloc+0x6e>
 8005ab0:	2221      	movs	r2, #33	; 0x21
 8005ab2:	2104      	movs	r1, #4
 8005ab4:	4620      	mov	r0, r4
 8005ab6:	f000 fc94 	bl	80063e2 <_calloc_r>
 8005aba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005abc:	60f0      	str	r0, [r6, #12]
 8005abe:	68db      	ldr	r3, [r3, #12]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d1e4      	bne.n	8005a8e <_Balloc+0x2e>
 8005ac4:	2000      	movs	r0, #0
 8005ac6:	bd70      	pop	{r4, r5, r6, pc}
 8005ac8:	6802      	ldr	r2, [r0, #0]
 8005aca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005ace:	2300      	movs	r3, #0
 8005ad0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005ad4:	e7f7      	b.n	8005ac6 <_Balloc+0x66>
 8005ad6:	bf00      	nop
 8005ad8:	080078e4 	.word	0x080078e4
 8005adc:	080078fb 	.word	0x080078fb

08005ae0 <_Bfree>:
 8005ae0:	b570      	push	{r4, r5, r6, lr}
 8005ae2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005ae4:	4605      	mov	r5, r0
 8005ae6:	460c      	mov	r4, r1
 8005ae8:	b976      	cbnz	r6, 8005b08 <_Bfree+0x28>
 8005aea:	2010      	movs	r0, #16
 8005aec:	f001 fa4c 	bl	8006f88 <malloc>
 8005af0:	4602      	mov	r2, r0
 8005af2:	6268      	str	r0, [r5, #36]	; 0x24
 8005af4:	b920      	cbnz	r0, 8005b00 <_Bfree+0x20>
 8005af6:	4b09      	ldr	r3, [pc, #36]	; (8005b1c <_Bfree+0x3c>)
 8005af8:	4809      	ldr	r0, [pc, #36]	; (8005b20 <_Bfree+0x40>)
 8005afa:	218a      	movs	r1, #138	; 0x8a
 8005afc:	f001 f85a 	bl	8006bb4 <__assert_func>
 8005b00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005b04:	6006      	str	r6, [r0, #0]
 8005b06:	60c6      	str	r6, [r0, #12]
 8005b08:	b13c      	cbz	r4, 8005b1a <_Bfree+0x3a>
 8005b0a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005b0c:	6862      	ldr	r2, [r4, #4]
 8005b0e:	68db      	ldr	r3, [r3, #12]
 8005b10:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005b14:	6021      	str	r1, [r4, #0]
 8005b16:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005b1a:	bd70      	pop	{r4, r5, r6, pc}
 8005b1c:	080078e4 	.word	0x080078e4
 8005b20:	080078fb 	.word	0x080078fb

08005b24 <__multadd>:
 8005b24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b28:	690d      	ldr	r5, [r1, #16]
 8005b2a:	4607      	mov	r7, r0
 8005b2c:	460c      	mov	r4, r1
 8005b2e:	461e      	mov	r6, r3
 8005b30:	f101 0c14 	add.w	ip, r1, #20
 8005b34:	2000      	movs	r0, #0
 8005b36:	f8dc 3000 	ldr.w	r3, [ip]
 8005b3a:	b299      	uxth	r1, r3
 8005b3c:	fb02 6101 	mla	r1, r2, r1, r6
 8005b40:	0c1e      	lsrs	r6, r3, #16
 8005b42:	0c0b      	lsrs	r3, r1, #16
 8005b44:	fb02 3306 	mla	r3, r2, r6, r3
 8005b48:	b289      	uxth	r1, r1
 8005b4a:	3001      	adds	r0, #1
 8005b4c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005b50:	4285      	cmp	r5, r0
 8005b52:	f84c 1b04 	str.w	r1, [ip], #4
 8005b56:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005b5a:	dcec      	bgt.n	8005b36 <__multadd+0x12>
 8005b5c:	b30e      	cbz	r6, 8005ba2 <__multadd+0x7e>
 8005b5e:	68a3      	ldr	r3, [r4, #8]
 8005b60:	42ab      	cmp	r3, r5
 8005b62:	dc19      	bgt.n	8005b98 <__multadd+0x74>
 8005b64:	6861      	ldr	r1, [r4, #4]
 8005b66:	4638      	mov	r0, r7
 8005b68:	3101      	adds	r1, #1
 8005b6a:	f7ff ff79 	bl	8005a60 <_Balloc>
 8005b6e:	4680      	mov	r8, r0
 8005b70:	b928      	cbnz	r0, 8005b7e <__multadd+0x5a>
 8005b72:	4602      	mov	r2, r0
 8005b74:	4b0c      	ldr	r3, [pc, #48]	; (8005ba8 <__multadd+0x84>)
 8005b76:	480d      	ldr	r0, [pc, #52]	; (8005bac <__multadd+0x88>)
 8005b78:	21b5      	movs	r1, #181	; 0xb5
 8005b7a:	f001 f81b 	bl	8006bb4 <__assert_func>
 8005b7e:	6922      	ldr	r2, [r4, #16]
 8005b80:	3202      	adds	r2, #2
 8005b82:	f104 010c 	add.w	r1, r4, #12
 8005b86:	0092      	lsls	r2, r2, #2
 8005b88:	300c      	adds	r0, #12
 8005b8a:	f7ff ff5b 	bl	8005a44 <memcpy>
 8005b8e:	4621      	mov	r1, r4
 8005b90:	4638      	mov	r0, r7
 8005b92:	f7ff ffa5 	bl	8005ae0 <_Bfree>
 8005b96:	4644      	mov	r4, r8
 8005b98:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005b9c:	3501      	adds	r5, #1
 8005b9e:	615e      	str	r6, [r3, #20]
 8005ba0:	6125      	str	r5, [r4, #16]
 8005ba2:	4620      	mov	r0, r4
 8005ba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ba8:	08007859 	.word	0x08007859
 8005bac:	080078fb 	.word	0x080078fb

08005bb0 <__s2b>:
 8005bb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005bb4:	460c      	mov	r4, r1
 8005bb6:	4615      	mov	r5, r2
 8005bb8:	461f      	mov	r7, r3
 8005bba:	2209      	movs	r2, #9
 8005bbc:	3308      	adds	r3, #8
 8005bbe:	4606      	mov	r6, r0
 8005bc0:	fb93 f3f2 	sdiv	r3, r3, r2
 8005bc4:	2100      	movs	r1, #0
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	429a      	cmp	r2, r3
 8005bca:	db09      	blt.n	8005be0 <__s2b+0x30>
 8005bcc:	4630      	mov	r0, r6
 8005bce:	f7ff ff47 	bl	8005a60 <_Balloc>
 8005bd2:	b940      	cbnz	r0, 8005be6 <__s2b+0x36>
 8005bd4:	4602      	mov	r2, r0
 8005bd6:	4b19      	ldr	r3, [pc, #100]	; (8005c3c <__s2b+0x8c>)
 8005bd8:	4819      	ldr	r0, [pc, #100]	; (8005c40 <__s2b+0x90>)
 8005bda:	21ce      	movs	r1, #206	; 0xce
 8005bdc:	f000 ffea 	bl	8006bb4 <__assert_func>
 8005be0:	0052      	lsls	r2, r2, #1
 8005be2:	3101      	adds	r1, #1
 8005be4:	e7f0      	b.n	8005bc8 <__s2b+0x18>
 8005be6:	9b08      	ldr	r3, [sp, #32]
 8005be8:	6143      	str	r3, [r0, #20]
 8005bea:	2d09      	cmp	r5, #9
 8005bec:	f04f 0301 	mov.w	r3, #1
 8005bf0:	6103      	str	r3, [r0, #16]
 8005bf2:	dd16      	ble.n	8005c22 <__s2b+0x72>
 8005bf4:	f104 0909 	add.w	r9, r4, #9
 8005bf8:	46c8      	mov	r8, r9
 8005bfa:	442c      	add	r4, r5
 8005bfc:	f818 3b01 	ldrb.w	r3, [r8], #1
 8005c00:	4601      	mov	r1, r0
 8005c02:	3b30      	subs	r3, #48	; 0x30
 8005c04:	220a      	movs	r2, #10
 8005c06:	4630      	mov	r0, r6
 8005c08:	f7ff ff8c 	bl	8005b24 <__multadd>
 8005c0c:	45a0      	cmp	r8, r4
 8005c0e:	d1f5      	bne.n	8005bfc <__s2b+0x4c>
 8005c10:	f1a5 0408 	sub.w	r4, r5, #8
 8005c14:	444c      	add	r4, r9
 8005c16:	1b2d      	subs	r5, r5, r4
 8005c18:	1963      	adds	r3, r4, r5
 8005c1a:	42bb      	cmp	r3, r7
 8005c1c:	db04      	blt.n	8005c28 <__s2b+0x78>
 8005c1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c22:	340a      	adds	r4, #10
 8005c24:	2509      	movs	r5, #9
 8005c26:	e7f6      	b.n	8005c16 <__s2b+0x66>
 8005c28:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005c2c:	4601      	mov	r1, r0
 8005c2e:	3b30      	subs	r3, #48	; 0x30
 8005c30:	220a      	movs	r2, #10
 8005c32:	4630      	mov	r0, r6
 8005c34:	f7ff ff76 	bl	8005b24 <__multadd>
 8005c38:	e7ee      	b.n	8005c18 <__s2b+0x68>
 8005c3a:	bf00      	nop
 8005c3c:	08007859 	.word	0x08007859
 8005c40:	080078fb 	.word	0x080078fb

08005c44 <__hi0bits>:
 8005c44:	0c03      	lsrs	r3, r0, #16
 8005c46:	041b      	lsls	r3, r3, #16
 8005c48:	b9d3      	cbnz	r3, 8005c80 <__hi0bits+0x3c>
 8005c4a:	0400      	lsls	r0, r0, #16
 8005c4c:	2310      	movs	r3, #16
 8005c4e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005c52:	bf04      	itt	eq
 8005c54:	0200      	lsleq	r0, r0, #8
 8005c56:	3308      	addeq	r3, #8
 8005c58:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005c5c:	bf04      	itt	eq
 8005c5e:	0100      	lsleq	r0, r0, #4
 8005c60:	3304      	addeq	r3, #4
 8005c62:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005c66:	bf04      	itt	eq
 8005c68:	0080      	lsleq	r0, r0, #2
 8005c6a:	3302      	addeq	r3, #2
 8005c6c:	2800      	cmp	r0, #0
 8005c6e:	db05      	blt.n	8005c7c <__hi0bits+0x38>
 8005c70:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005c74:	f103 0301 	add.w	r3, r3, #1
 8005c78:	bf08      	it	eq
 8005c7a:	2320      	moveq	r3, #32
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	4770      	bx	lr
 8005c80:	2300      	movs	r3, #0
 8005c82:	e7e4      	b.n	8005c4e <__hi0bits+0xa>

08005c84 <__lo0bits>:
 8005c84:	6803      	ldr	r3, [r0, #0]
 8005c86:	f013 0207 	ands.w	r2, r3, #7
 8005c8a:	4601      	mov	r1, r0
 8005c8c:	d00b      	beq.n	8005ca6 <__lo0bits+0x22>
 8005c8e:	07da      	lsls	r2, r3, #31
 8005c90:	d423      	bmi.n	8005cda <__lo0bits+0x56>
 8005c92:	0798      	lsls	r0, r3, #30
 8005c94:	bf49      	itett	mi
 8005c96:	085b      	lsrmi	r3, r3, #1
 8005c98:	089b      	lsrpl	r3, r3, #2
 8005c9a:	2001      	movmi	r0, #1
 8005c9c:	600b      	strmi	r3, [r1, #0]
 8005c9e:	bf5c      	itt	pl
 8005ca0:	600b      	strpl	r3, [r1, #0]
 8005ca2:	2002      	movpl	r0, #2
 8005ca4:	4770      	bx	lr
 8005ca6:	b298      	uxth	r0, r3
 8005ca8:	b9a8      	cbnz	r0, 8005cd6 <__lo0bits+0x52>
 8005caa:	0c1b      	lsrs	r3, r3, #16
 8005cac:	2010      	movs	r0, #16
 8005cae:	b2da      	uxtb	r2, r3
 8005cb0:	b90a      	cbnz	r2, 8005cb6 <__lo0bits+0x32>
 8005cb2:	3008      	adds	r0, #8
 8005cb4:	0a1b      	lsrs	r3, r3, #8
 8005cb6:	071a      	lsls	r2, r3, #28
 8005cb8:	bf04      	itt	eq
 8005cba:	091b      	lsreq	r3, r3, #4
 8005cbc:	3004      	addeq	r0, #4
 8005cbe:	079a      	lsls	r2, r3, #30
 8005cc0:	bf04      	itt	eq
 8005cc2:	089b      	lsreq	r3, r3, #2
 8005cc4:	3002      	addeq	r0, #2
 8005cc6:	07da      	lsls	r2, r3, #31
 8005cc8:	d403      	bmi.n	8005cd2 <__lo0bits+0x4e>
 8005cca:	085b      	lsrs	r3, r3, #1
 8005ccc:	f100 0001 	add.w	r0, r0, #1
 8005cd0:	d005      	beq.n	8005cde <__lo0bits+0x5a>
 8005cd2:	600b      	str	r3, [r1, #0]
 8005cd4:	4770      	bx	lr
 8005cd6:	4610      	mov	r0, r2
 8005cd8:	e7e9      	b.n	8005cae <__lo0bits+0x2a>
 8005cda:	2000      	movs	r0, #0
 8005cdc:	4770      	bx	lr
 8005cde:	2020      	movs	r0, #32
 8005ce0:	4770      	bx	lr
	...

08005ce4 <__i2b>:
 8005ce4:	b510      	push	{r4, lr}
 8005ce6:	460c      	mov	r4, r1
 8005ce8:	2101      	movs	r1, #1
 8005cea:	f7ff feb9 	bl	8005a60 <_Balloc>
 8005cee:	4602      	mov	r2, r0
 8005cf0:	b928      	cbnz	r0, 8005cfe <__i2b+0x1a>
 8005cf2:	4b05      	ldr	r3, [pc, #20]	; (8005d08 <__i2b+0x24>)
 8005cf4:	4805      	ldr	r0, [pc, #20]	; (8005d0c <__i2b+0x28>)
 8005cf6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005cfa:	f000 ff5b 	bl	8006bb4 <__assert_func>
 8005cfe:	2301      	movs	r3, #1
 8005d00:	6144      	str	r4, [r0, #20]
 8005d02:	6103      	str	r3, [r0, #16]
 8005d04:	bd10      	pop	{r4, pc}
 8005d06:	bf00      	nop
 8005d08:	08007859 	.word	0x08007859
 8005d0c:	080078fb 	.word	0x080078fb

08005d10 <__multiply>:
 8005d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d14:	4691      	mov	r9, r2
 8005d16:	690a      	ldr	r2, [r1, #16]
 8005d18:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005d1c:	429a      	cmp	r2, r3
 8005d1e:	bfb8      	it	lt
 8005d20:	460b      	movlt	r3, r1
 8005d22:	460c      	mov	r4, r1
 8005d24:	bfbc      	itt	lt
 8005d26:	464c      	movlt	r4, r9
 8005d28:	4699      	movlt	r9, r3
 8005d2a:	6927      	ldr	r7, [r4, #16]
 8005d2c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005d30:	68a3      	ldr	r3, [r4, #8]
 8005d32:	6861      	ldr	r1, [r4, #4]
 8005d34:	eb07 060a 	add.w	r6, r7, sl
 8005d38:	42b3      	cmp	r3, r6
 8005d3a:	b085      	sub	sp, #20
 8005d3c:	bfb8      	it	lt
 8005d3e:	3101      	addlt	r1, #1
 8005d40:	f7ff fe8e 	bl	8005a60 <_Balloc>
 8005d44:	b930      	cbnz	r0, 8005d54 <__multiply+0x44>
 8005d46:	4602      	mov	r2, r0
 8005d48:	4b44      	ldr	r3, [pc, #272]	; (8005e5c <__multiply+0x14c>)
 8005d4a:	4845      	ldr	r0, [pc, #276]	; (8005e60 <__multiply+0x150>)
 8005d4c:	f240 115d 	movw	r1, #349	; 0x15d
 8005d50:	f000 ff30 	bl	8006bb4 <__assert_func>
 8005d54:	f100 0514 	add.w	r5, r0, #20
 8005d58:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005d5c:	462b      	mov	r3, r5
 8005d5e:	2200      	movs	r2, #0
 8005d60:	4543      	cmp	r3, r8
 8005d62:	d321      	bcc.n	8005da8 <__multiply+0x98>
 8005d64:	f104 0314 	add.w	r3, r4, #20
 8005d68:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005d6c:	f109 0314 	add.w	r3, r9, #20
 8005d70:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005d74:	9202      	str	r2, [sp, #8]
 8005d76:	1b3a      	subs	r2, r7, r4
 8005d78:	3a15      	subs	r2, #21
 8005d7a:	f022 0203 	bic.w	r2, r2, #3
 8005d7e:	3204      	adds	r2, #4
 8005d80:	f104 0115 	add.w	r1, r4, #21
 8005d84:	428f      	cmp	r7, r1
 8005d86:	bf38      	it	cc
 8005d88:	2204      	movcc	r2, #4
 8005d8a:	9201      	str	r2, [sp, #4]
 8005d8c:	9a02      	ldr	r2, [sp, #8]
 8005d8e:	9303      	str	r3, [sp, #12]
 8005d90:	429a      	cmp	r2, r3
 8005d92:	d80c      	bhi.n	8005dae <__multiply+0x9e>
 8005d94:	2e00      	cmp	r6, #0
 8005d96:	dd03      	ble.n	8005da0 <__multiply+0x90>
 8005d98:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d05a      	beq.n	8005e56 <__multiply+0x146>
 8005da0:	6106      	str	r6, [r0, #16]
 8005da2:	b005      	add	sp, #20
 8005da4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005da8:	f843 2b04 	str.w	r2, [r3], #4
 8005dac:	e7d8      	b.n	8005d60 <__multiply+0x50>
 8005dae:	f8b3 a000 	ldrh.w	sl, [r3]
 8005db2:	f1ba 0f00 	cmp.w	sl, #0
 8005db6:	d024      	beq.n	8005e02 <__multiply+0xf2>
 8005db8:	f104 0e14 	add.w	lr, r4, #20
 8005dbc:	46a9      	mov	r9, r5
 8005dbe:	f04f 0c00 	mov.w	ip, #0
 8005dc2:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005dc6:	f8d9 1000 	ldr.w	r1, [r9]
 8005dca:	fa1f fb82 	uxth.w	fp, r2
 8005dce:	b289      	uxth	r1, r1
 8005dd0:	fb0a 110b 	mla	r1, sl, fp, r1
 8005dd4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8005dd8:	f8d9 2000 	ldr.w	r2, [r9]
 8005ddc:	4461      	add	r1, ip
 8005dde:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005de2:	fb0a c20b 	mla	r2, sl, fp, ip
 8005de6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005dea:	b289      	uxth	r1, r1
 8005dec:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005df0:	4577      	cmp	r7, lr
 8005df2:	f849 1b04 	str.w	r1, [r9], #4
 8005df6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005dfa:	d8e2      	bhi.n	8005dc2 <__multiply+0xb2>
 8005dfc:	9a01      	ldr	r2, [sp, #4]
 8005dfe:	f845 c002 	str.w	ip, [r5, r2]
 8005e02:	9a03      	ldr	r2, [sp, #12]
 8005e04:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005e08:	3304      	adds	r3, #4
 8005e0a:	f1b9 0f00 	cmp.w	r9, #0
 8005e0e:	d020      	beq.n	8005e52 <__multiply+0x142>
 8005e10:	6829      	ldr	r1, [r5, #0]
 8005e12:	f104 0c14 	add.w	ip, r4, #20
 8005e16:	46ae      	mov	lr, r5
 8005e18:	f04f 0a00 	mov.w	sl, #0
 8005e1c:	f8bc b000 	ldrh.w	fp, [ip]
 8005e20:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005e24:	fb09 220b 	mla	r2, r9, fp, r2
 8005e28:	4492      	add	sl, r2
 8005e2a:	b289      	uxth	r1, r1
 8005e2c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8005e30:	f84e 1b04 	str.w	r1, [lr], #4
 8005e34:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005e38:	f8be 1000 	ldrh.w	r1, [lr]
 8005e3c:	0c12      	lsrs	r2, r2, #16
 8005e3e:	fb09 1102 	mla	r1, r9, r2, r1
 8005e42:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8005e46:	4567      	cmp	r7, ip
 8005e48:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005e4c:	d8e6      	bhi.n	8005e1c <__multiply+0x10c>
 8005e4e:	9a01      	ldr	r2, [sp, #4]
 8005e50:	50a9      	str	r1, [r5, r2]
 8005e52:	3504      	adds	r5, #4
 8005e54:	e79a      	b.n	8005d8c <__multiply+0x7c>
 8005e56:	3e01      	subs	r6, #1
 8005e58:	e79c      	b.n	8005d94 <__multiply+0x84>
 8005e5a:	bf00      	nop
 8005e5c:	08007859 	.word	0x08007859
 8005e60:	080078fb 	.word	0x080078fb

08005e64 <__pow5mult>:
 8005e64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e68:	4615      	mov	r5, r2
 8005e6a:	f012 0203 	ands.w	r2, r2, #3
 8005e6e:	4606      	mov	r6, r0
 8005e70:	460f      	mov	r7, r1
 8005e72:	d007      	beq.n	8005e84 <__pow5mult+0x20>
 8005e74:	4c25      	ldr	r4, [pc, #148]	; (8005f0c <__pow5mult+0xa8>)
 8005e76:	3a01      	subs	r2, #1
 8005e78:	2300      	movs	r3, #0
 8005e7a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005e7e:	f7ff fe51 	bl	8005b24 <__multadd>
 8005e82:	4607      	mov	r7, r0
 8005e84:	10ad      	asrs	r5, r5, #2
 8005e86:	d03d      	beq.n	8005f04 <__pow5mult+0xa0>
 8005e88:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005e8a:	b97c      	cbnz	r4, 8005eac <__pow5mult+0x48>
 8005e8c:	2010      	movs	r0, #16
 8005e8e:	f001 f87b 	bl	8006f88 <malloc>
 8005e92:	4602      	mov	r2, r0
 8005e94:	6270      	str	r0, [r6, #36]	; 0x24
 8005e96:	b928      	cbnz	r0, 8005ea4 <__pow5mult+0x40>
 8005e98:	4b1d      	ldr	r3, [pc, #116]	; (8005f10 <__pow5mult+0xac>)
 8005e9a:	481e      	ldr	r0, [pc, #120]	; (8005f14 <__pow5mult+0xb0>)
 8005e9c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005ea0:	f000 fe88 	bl	8006bb4 <__assert_func>
 8005ea4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005ea8:	6004      	str	r4, [r0, #0]
 8005eaa:	60c4      	str	r4, [r0, #12]
 8005eac:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005eb0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005eb4:	b94c      	cbnz	r4, 8005eca <__pow5mult+0x66>
 8005eb6:	f240 2171 	movw	r1, #625	; 0x271
 8005eba:	4630      	mov	r0, r6
 8005ebc:	f7ff ff12 	bl	8005ce4 <__i2b>
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	f8c8 0008 	str.w	r0, [r8, #8]
 8005ec6:	4604      	mov	r4, r0
 8005ec8:	6003      	str	r3, [r0, #0]
 8005eca:	f04f 0900 	mov.w	r9, #0
 8005ece:	07eb      	lsls	r3, r5, #31
 8005ed0:	d50a      	bpl.n	8005ee8 <__pow5mult+0x84>
 8005ed2:	4639      	mov	r1, r7
 8005ed4:	4622      	mov	r2, r4
 8005ed6:	4630      	mov	r0, r6
 8005ed8:	f7ff ff1a 	bl	8005d10 <__multiply>
 8005edc:	4639      	mov	r1, r7
 8005ede:	4680      	mov	r8, r0
 8005ee0:	4630      	mov	r0, r6
 8005ee2:	f7ff fdfd 	bl	8005ae0 <_Bfree>
 8005ee6:	4647      	mov	r7, r8
 8005ee8:	106d      	asrs	r5, r5, #1
 8005eea:	d00b      	beq.n	8005f04 <__pow5mult+0xa0>
 8005eec:	6820      	ldr	r0, [r4, #0]
 8005eee:	b938      	cbnz	r0, 8005f00 <__pow5mult+0x9c>
 8005ef0:	4622      	mov	r2, r4
 8005ef2:	4621      	mov	r1, r4
 8005ef4:	4630      	mov	r0, r6
 8005ef6:	f7ff ff0b 	bl	8005d10 <__multiply>
 8005efa:	6020      	str	r0, [r4, #0]
 8005efc:	f8c0 9000 	str.w	r9, [r0]
 8005f00:	4604      	mov	r4, r0
 8005f02:	e7e4      	b.n	8005ece <__pow5mult+0x6a>
 8005f04:	4638      	mov	r0, r7
 8005f06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f0a:	bf00      	nop
 8005f0c:	08007a48 	.word	0x08007a48
 8005f10:	080078e4 	.word	0x080078e4
 8005f14:	080078fb 	.word	0x080078fb

08005f18 <__lshift>:
 8005f18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f1c:	460c      	mov	r4, r1
 8005f1e:	6849      	ldr	r1, [r1, #4]
 8005f20:	6923      	ldr	r3, [r4, #16]
 8005f22:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005f26:	68a3      	ldr	r3, [r4, #8]
 8005f28:	4607      	mov	r7, r0
 8005f2a:	4691      	mov	r9, r2
 8005f2c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005f30:	f108 0601 	add.w	r6, r8, #1
 8005f34:	42b3      	cmp	r3, r6
 8005f36:	db0b      	blt.n	8005f50 <__lshift+0x38>
 8005f38:	4638      	mov	r0, r7
 8005f3a:	f7ff fd91 	bl	8005a60 <_Balloc>
 8005f3e:	4605      	mov	r5, r0
 8005f40:	b948      	cbnz	r0, 8005f56 <__lshift+0x3e>
 8005f42:	4602      	mov	r2, r0
 8005f44:	4b2a      	ldr	r3, [pc, #168]	; (8005ff0 <__lshift+0xd8>)
 8005f46:	482b      	ldr	r0, [pc, #172]	; (8005ff4 <__lshift+0xdc>)
 8005f48:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005f4c:	f000 fe32 	bl	8006bb4 <__assert_func>
 8005f50:	3101      	adds	r1, #1
 8005f52:	005b      	lsls	r3, r3, #1
 8005f54:	e7ee      	b.n	8005f34 <__lshift+0x1c>
 8005f56:	2300      	movs	r3, #0
 8005f58:	f100 0114 	add.w	r1, r0, #20
 8005f5c:	f100 0210 	add.w	r2, r0, #16
 8005f60:	4618      	mov	r0, r3
 8005f62:	4553      	cmp	r3, sl
 8005f64:	db37      	blt.n	8005fd6 <__lshift+0xbe>
 8005f66:	6920      	ldr	r0, [r4, #16]
 8005f68:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005f6c:	f104 0314 	add.w	r3, r4, #20
 8005f70:	f019 091f 	ands.w	r9, r9, #31
 8005f74:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005f78:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005f7c:	d02f      	beq.n	8005fde <__lshift+0xc6>
 8005f7e:	f1c9 0e20 	rsb	lr, r9, #32
 8005f82:	468a      	mov	sl, r1
 8005f84:	f04f 0c00 	mov.w	ip, #0
 8005f88:	681a      	ldr	r2, [r3, #0]
 8005f8a:	fa02 f209 	lsl.w	r2, r2, r9
 8005f8e:	ea42 020c 	orr.w	r2, r2, ip
 8005f92:	f84a 2b04 	str.w	r2, [sl], #4
 8005f96:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f9a:	4298      	cmp	r0, r3
 8005f9c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8005fa0:	d8f2      	bhi.n	8005f88 <__lshift+0x70>
 8005fa2:	1b03      	subs	r3, r0, r4
 8005fa4:	3b15      	subs	r3, #21
 8005fa6:	f023 0303 	bic.w	r3, r3, #3
 8005faa:	3304      	adds	r3, #4
 8005fac:	f104 0215 	add.w	r2, r4, #21
 8005fb0:	4290      	cmp	r0, r2
 8005fb2:	bf38      	it	cc
 8005fb4:	2304      	movcc	r3, #4
 8005fb6:	f841 c003 	str.w	ip, [r1, r3]
 8005fba:	f1bc 0f00 	cmp.w	ip, #0
 8005fbe:	d001      	beq.n	8005fc4 <__lshift+0xac>
 8005fc0:	f108 0602 	add.w	r6, r8, #2
 8005fc4:	3e01      	subs	r6, #1
 8005fc6:	4638      	mov	r0, r7
 8005fc8:	612e      	str	r6, [r5, #16]
 8005fca:	4621      	mov	r1, r4
 8005fcc:	f7ff fd88 	bl	8005ae0 <_Bfree>
 8005fd0:	4628      	mov	r0, r5
 8005fd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fd6:	f842 0f04 	str.w	r0, [r2, #4]!
 8005fda:	3301      	adds	r3, #1
 8005fdc:	e7c1      	b.n	8005f62 <__lshift+0x4a>
 8005fde:	3904      	subs	r1, #4
 8005fe0:	f853 2b04 	ldr.w	r2, [r3], #4
 8005fe4:	f841 2f04 	str.w	r2, [r1, #4]!
 8005fe8:	4298      	cmp	r0, r3
 8005fea:	d8f9      	bhi.n	8005fe0 <__lshift+0xc8>
 8005fec:	e7ea      	b.n	8005fc4 <__lshift+0xac>
 8005fee:	bf00      	nop
 8005ff0:	08007859 	.word	0x08007859
 8005ff4:	080078fb 	.word	0x080078fb

08005ff8 <__mcmp>:
 8005ff8:	b530      	push	{r4, r5, lr}
 8005ffa:	6902      	ldr	r2, [r0, #16]
 8005ffc:	690c      	ldr	r4, [r1, #16]
 8005ffe:	1b12      	subs	r2, r2, r4
 8006000:	d10e      	bne.n	8006020 <__mcmp+0x28>
 8006002:	f100 0314 	add.w	r3, r0, #20
 8006006:	3114      	adds	r1, #20
 8006008:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800600c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006010:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006014:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006018:	42a5      	cmp	r5, r4
 800601a:	d003      	beq.n	8006024 <__mcmp+0x2c>
 800601c:	d305      	bcc.n	800602a <__mcmp+0x32>
 800601e:	2201      	movs	r2, #1
 8006020:	4610      	mov	r0, r2
 8006022:	bd30      	pop	{r4, r5, pc}
 8006024:	4283      	cmp	r3, r0
 8006026:	d3f3      	bcc.n	8006010 <__mcmp+0x18>
 8006028:	e7fa      	b.n	8006020 <__mcmp+0x28>
 800602a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800602e:	e7f7      	b.n	8006020 <__mcmp+0x28>

08006030 <__mdiff>:
 8006030:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006034:	460c      	mov	r4, r1
 8006036:	4606      	mov	r6, r0
 8006038:	4611      	mov	r1, r2
 800603a:	4620      	mov	r0, r4
 800603c:	4690      	mov	r8, r2
 800603e:	f7ff ffdb 	bl	8005ff8 <__mcmp>
 8006042:	1e05      	subs	r5, r0, #0
 8006044:	d110      	bne.n	8006068 <__mdiff+0x38>
 8006046:	4629      	mov	r1, r5
 8006048:	4630      	mov	r0, r6
 800604a:	f7ff fd09 	bl	8005a60 <_Balloc>
 800604e:	b930      	cbnz	r0, 800605e <__mdiff+0x2e>
 8006050:	4b3a      	ldr	r3, [pc, #232]	; (800613c <__mdiff+0x10c>)
 8006052:	4602      	mov	r2, r0
 8006054:	f240 2132 	movw	r1, #562	; 0x232
 8006058:	4839      	ldr	r0, [pc, #228]	; (8006140 <__mdiff+0x110>)
 800605a:	f000 fdab 	bl	8006bb4 <__assert_func>
 800605e:	2301      	movs	r3, #1
 8006060:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006064:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006068:	bfa4      	itt	ge
 800606a:	4643      	movge	r3, r8
 800606c:	46a0      	movge	r8, r4
 800606e:	4630      	mov	r0, r6
 8006070:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006074:	bfa6      	itte	ge
 8006076:	461c      	movge	r4, r3
 8006078:	2500      	movge	r5, #0
 800607a:	2501      	movlt	r5, #1
 800607c:	f7ff fcf0 	bl	8005a60 <_Balloc>
 8006080:	b920      	cbnz	r0, 800608c <__mdiff+0x5c>
 8006082:	4b2e      	ldr	r3, [pc, #184]	; (800613c <__mdiff+0x10c>)
 8006084:	4602      	mov	r2, r0
 8006086:	f44f 7110 	mov.w	r1, #576	; 0x240
 800608a:	e7e5      	b.n	8006058 <__mdiff+0x28>
 800608c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006090:	6926      	ldr	r6, [r4, #16]
 8006092:	60c5      	str	r5, [r0, #12]
 8006094:	f104 0914 	add.w	r9, r4, #20
 8006098:	f108 0514 	add.w	r5, r8, #20
 800609c:	f100 0e14 	add.w	lr, r0, #20
 80060a0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80060a4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80060a8:	f108 0210 	add.w	r2, r8, #16
 80060ac:	46f2      	mov	sl, lr
 80060ae:	2100      	movs	r1, #0
 80060b0:	f859 3b04 	ldr.w	r3, [r9], #4
 80060b4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80060b8:	fa1f f883 	uxth.w	r8, r3
 80060bc:	fa11 f18b 	uxtah	r1, r1, fp
 80060c0:	0c1b      	lsrs	r3, r3, #16
 80060c2:	eba1 0808 	sub.w	r8, r1, r8
 80060c6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80060ca:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80060ce:	fa1f f888 	uxth.w	r8, r8
 80060d2:	1419      	asrs	r1, r3, #16
 80060d4:	454e      	cmp	r6, r9
 80060d6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80060da:	f84a 3b04 	str.w	r3, [sl], #4
 80060de:	d8e7      	bhi.n	80060b0 <__mdiff+0x80>
 80060e0:	1b33      	subs	r3, r6, r4
 80060e2:	3b15      	subs	r3, #21
 80060e4:	f023 0303 	bic.w	r3, r3, #3
 80060e8:	3304      	adds	r3, #4
 80060ea:	3415      	adds	r4, #21
 80060ec:	42a6      	cmp	r6, r4
 80060ee:	bf38      	it	cc
 80060f0:	2304      	movcc	r3, #4
 80060f2:	441d      	add	r5, r3
 80060f4:	4473      	add	r3, lr
 80060f6:	469e      	mov	lr, r3
 80060f8:	462e      	mov	r6, r5
 80060fa:	4566      	cmp	r6, ip
 80060fc:	d30e      	bcc.n	800611c <__mdiff+0xec>
 80060fe:	f10c 0203 	add.w	r2, ip, #3
 8006102:	1b52      	subs	r2, r2, r5
 8006104:	f022 0203 	bic.w	r2, r2, #3
 8006108:	3d03      	subs	r5, #3
 800610a:	45ac      	cmp	ip, r5
 800610c:	bf38      	it	cc
 800610e:	2200      	movcc	r2, #0
 8006110:	441a      	add	r2, r3
 8006112:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006116:	b17b      	cbz	r3, 8006138 <__mdiff+0x108>
 8006118:	6107      	str	r7, [r0, #16]
 800611a:	e7a3      	b.n	8006064 <__mdiff+0x34>
 800611c:	f856 8b04 	ldr.w	r8, [r6], #4
 8006120:	fa11 f288 	uxtah	r2, r1, r8
 8006124:	1414      	asrs	r4, r2, #16
 8006126:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800612a:	b292      	uxth	r2, r2
 800612c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006130:	f84e 2b04 	str.w	r2, [lr], #4
 8006134:	1421      	asrs	r1, r4, #16
 8006136:	e7e0      	b.n	80060fa <__mdiff+0xca>
 8006138:	3f01      	subs	r7, #1
 800613a:	e7ea      	b.n	8006112 <__mdiff+0xe2>
 800613c:	08007859 	.word	0x08007859
 8006140:	080078fb 	.word	0x080078fb

08006144 <__ulp>:
 8006144:	b082      	sub	sp, #8
 8006146:	ed8d 0b00 	vstr	d0, [sp]
 800614a:	9b01      	ldr	r3, [sp, #4]
 800614c:	4912      	ldr	r1, [pc, #72]	; (8006198 <__ulp+0x54>)
 800614e:	4019      	ands	r1, r3
 8006150:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8006154:	2900      	cmp	r1, #0
 8006156:	dd05      	ble.n	8006164 <__ulp+0x20>
 8006158:	2200      	movs	r2, #0
 800615a:	460b      	mov	r3, r1
 800615c:	ec43 2b10 	vmov	d0, r2, r3
 8006160:	b002      	add	sp, #8
 8006162:	4770      	bx	lr
 8006164:	4249      	negs	r1, r1
 8006166:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800616a:	ea4f 5021 	mov.w	r0, r1, asr #20
 800616e:	f04f 0200 	mov.w	r2, #0
 8006172:	f04f 0300 	mov.w	r3, #0
 8006176:	da04      	bge.n	8006182 <__ulp+0x3e>
 8006178:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800617c:	fa41 f300 	asr.w	r3, r1, r0
 8006180:	e7ec      	b.n	800615c <__ulp+0x18>
 8006182:	f1a0 0114 	sub.w	r1, r0, #20
 8006186:	291e      	cmp	r1, #30
 8006188:	bfda      	itte	le
 800618a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800618e:	fa20 f101 	lsrle.w	r1, r0, r1
 8006192:	2101      	movgt	r1, #1
 8006194:	460a      	mov	r2, r1
 8006196:	e7e1      	b.n	800615c <__ulp+0x18>
 8006198:	7ff00000 	.word	0x7ff00000

0800619c <__b2d>:
 800619c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800619e:	6905      	ldr	r5, [r0, #16]
 80061a0:	f100 0714 	add.w	r7, r0, #20
 80061a4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80061a8:	1f2e      	subs	r6, r5, #4
 80061aa:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80061ae:	4620      	mov	r0, r4
 80061b0:	f7ff fd48 	bl	8005c44 <__hi0bits>
 80061b4:	f1c0 0320 	rsb	r3, r0, #32
 80061b8:	280a      	cmp	r0, #10
 80061ba:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8006238 <__b2d+0x9c>
 80061be:	600b      	str	r3, [r1, #0]
 80061c0:	dc14      	bgt.n	80061ec <__b2d+0x50>
 80061c2:	f1c0 0e0b 	rsb	lr, r0, #11
 80061c6:	fa24 f10e 	lsr.w	r1, r4, lr
 80061ca:	42b7      	cmp	r7, r6
 80061cc:	ea41 030c 	orr.w	r3, r1, ip
 80061d0:	bf34      	ite	cc
 80061d2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80061d6:	2100      	movcs	r1, #0
 80061d8:	3015      	adds	r0, #21
 80061da:	fa04 f000 	lsl.w	r0, r4, r0
 80061de:	fa21 f10e 	lsr.w	r1, r1, lr
 80061e2:	ea40 0201 	orr.w	r2, r0, r1
 80061e6:	ec43 2b10 	vmov	d0, r2, r3
 80061ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061ec:	42b7      	cmp	r7, r6
 80061ee:	bf3a      	itte	cc
 80061f0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80061f4:	f1a5 0608 	subcc.w	r6, r5, #8
 80061f8:	2100      	movcs	r1, #0
 80061fa:	380b      	subs	r0, #11
 80061fc:	d017      	beq.n	800622e <__b2d+0x92>
 80061fe:	f1c0 0c20 	rsb	ip, r0, #32
 8006202:	fa04 f500 	lsl.w	r5, r4, r0
 8006206:	42be      	cmp	r6, r7
 8006208:	fa21 f40c 	lsr.w	r4, r1, ip
 800620c:	ea45 0504 	orr.w	r5, r5, r4
 8006210:	bf8c      	ite	hi
 8006212:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8006216:	2400      	movls	r4, #0
 8006218:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800621c:	fa01 f000 	lsl.w	r0, r1, r0
 8006220:	fa24 f40c 	lsr.w	r4, r4, ip
 8006224:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006228:	ea40 0204 	orr.w	r2, r0, r4
 800622c:	e7db      	b.n	80061e6 <__b2d+0x4a>
 800622e:	ea44 030c 	orr.w	r3, r4, ip
 8006232:	460a      	mov	r2, r1
 8006234:	e7d7      	b.n	80061e6 <__b2d+0x4a>
 8006236:	bf00      	nop
 8006238:	3ff00000 	.word	0x3ff00000

0800623c <__d2b>:
 800623c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006240:	4689      	mov	r9, r1
 8006242:	2101      	movs	r1, #1
 8006244:	ec57 6b10 	vmov	r6, r7, d0
 8006248:	4690      	mov	r8, r2
 800624a:	f7ff fc09 	bl	8005a60 <_Balloc>
 800624e:	4604      	mov	r4, r0
 8006250:	b930      	cbnz	r0, 8006260 <__d2b+0x24>
 8006252:	4602      	mov	r2, r0
 8006254:	4b25      	ldr	r3, [pc, #148]	; (80062ec <__d2b+0xb0>)
 8006256:	4826      	ldr	r0, [pc, #152]	; (80062f0 <__d2b+0xb4>)
 8006258:	f240 310a 	movw	r1, #778	; 0x30a
 800625c:	f000 fcaa 	bl	8006bb4 <__assert_func>
 8006260:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006264:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006268:	bb35      	cbnz	r5, 80062b8 <__d2b+0x7c>
 800626a:	2e00      	cmp	r6, #0
 800626c:	9301      	str	r3, [sp, #4]
 800626e:	d028      	beq.n	80062c2 <__d2b+0x86>
 8006270:	4668      	mov	r0, sp
 8006272:	9600      	str	r6, [sp, #0]
 8006274:	f7ff fd06 	bl	8005c84 <__lo0bits>
 8006278:	9900      	ldr	r1, [sp, #0]
 800627a:	b300      	cbz	r0, 80062be <__d2b+0x82>
 800627c:	9a01      	ldr	r2, [sp, #4]
 800627e:	f1c0 0320 	rsb	r3, r0, #32
 8006282:	fa02 f303 	lsl.w	r3, r2, r3
 8006286:	430b      	orrs	r3, r1
 8006288:	40c2      	lsrs	r2, r0
 800628a:	6163      	str	r3, [r4, #20]
 800628c:	9201      	str	r2, [sp, #4]
 800628e:	9b01      	ldr	r3, [sp, #4]
 8006290:	61a3      	str	r3, [r4, #24]
 8006292:	2b00      	cmp	r3, #0
 8006294:	bf14      	ite	ne
 8006296:	2202      	movne	r2, #2
 8006298:	2201      	moveq	r2, #1
 800629a:	6122      	str	r2, [r4, #16]
 800629c:	b1d5      	cbz	r5, 80062d4 <__d2b+0x98>
 800629e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80062a2:	4405      	add	r5, r0
 80062a4:	f8c9 5000 	str.w	r5, [r9]
 80062a8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80062ac:	f8c8 0000 	str.w	r0, [r8]
 80062b0:	4620      	mov	r0, r4
 80062b2:	b003      	add	sp, #12
 80062b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80062b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80062bc:	e7d5      	b.n	800626a <__d2b+0x2e>
 80062be:	6161      	str	r1, [r4, #20]
 80062c0:	e7e5      	b.n	800628e <__d2b+0x52>
 80062c2:	a801      	add	r0, sp, #4
 80062c4:	f7ff fcde 	bl	8005c84 <__lo0bits>
 80062c8:	9b01      	ldr	r3, [sp, #4]
 80062ca:	6163      	str	r3, [r4, #20]
 80062cc:	2201      	movs	r2, #1
 80062ce:	6122      	str	r2, [r4, #16]
 80062d0:	3020      	adds	r0, #32
 80062d2:	e7e3      	b.n	800629c <__d2b+0x60>
 80062d4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80062d8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80062dc:	f8c9 0000 	str.w	r0, [r9]
 80062e0:	6918      	ldr	r0, [r3, #16]
 80062e2:	f7ff fcaf 	bl	8005c44 <__hi0bits>
 80062e6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80062ea:	e7df      	b.n	80062ac <__d2b+0x70>
 80062ec:	08007859 	.word	0x08007859
 80062f0:	080078fb 	.word	0x080078fb

080062f4 <__ratio>:
 80062f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062f8:	4688      	mov	r8, r1
 80062fa:	4669      	mov	r1, sp
 80062fc:	4681      	mov	r9, r0
 80062fe:	f7ff ff4d 	bl	800619c <__b2d>
 8006302:	a901      	add	r1, sp, #4
 8006304:	4640      	mov	r0, r8
 8006306:	ec55 4b10 	vmov	r4, r5, d0
 800630a:	f7ff ff47 	bl	800619c <__b2d>
 800630e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006312:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8006316:	eba3 0c02 	sub.w	ip, r3, r2
 800631a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800631e:	1a9b      	subs	r3, r3, r2
 8006320:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8006324:	ec51 0b10 	vmov	r0, r1, d0
 8006328:	2b00      	cmp	r3, #0
 800632a:	bfd6      	itet	le
 800632c:	460a      	movle	r2, r1
 800632e:	462a      	movgt	r2, r5
 8006330:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006334:	468b      	mov	fp, r1
 8006336:	462f      	mov	r7, r5
 8006338:	bfd4      	ite	le
 800633a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800633e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8006342:	4620      	mov	r0, r4
 8006344:	ee10 2a10 	vmov	r2, s0
 8006348:	465b      	mov	r3, fp
 800634a:	4639      	mov	r1, r7
 800634c:	f7fa fa7e 	bl	800084c <__aeabi_ddiv>
 8006350:	ec41 0b10 	vmov	d0, r0, r1
 8006354:	b003      	add	sp, #12
 8006356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800635a <__copybits>:
 800635a:	3901      	subs	r1, #1
 800635c:	b570      	push	{r4, r5, r6, lr}
 800635e:	1149      	asrs	r1, r1, #5
 8006360:	6914      	ldr	r4, [r2, #16]
 8006362:	3101      	adds	r1, #1
 8006364:	f102 0314 	add.w	r3, r2, #20
 8006368:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800636c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006370:	1f05      	subs	r5, r0, #4
 8006372:	42a3      	cmp	r3, r4
 8006374:	d30c      	bcc.n	8006390 <__copybits+0x36>
 8006376:	1aa3      	subs	r3, r4, r2
 8006378:	3b11      	subs	r3, #17
 800637a:	f023 0303 	bic.w	r3, r3, #3
 800637e:	3211      	adds	r2, #17
 8006380:	42a2      	cmp	r2, r4
 8006382:	bf88      	it	hi
 8006384:	2300      	movhi	r3, #0
 8006386:	4418      	add	r0, r3
 8006388:	2300      	movs	r3, #0
 800638a:	4288      	cmp	r0, r1
 800638c:	d305      	bcc.n	800639a <__copybits+0x40>
 800638e:	bd70      	pop	{r4, r5, r6, pc}
 8006390:	f853 6b04 	ldr.w	r6, [r3], #4
 8006394:	f845 6f04 	str.w	r6, [r5, #4]!
 8006398:	e7eb      	b.n	8006372 <__copybits+0x18>
 800639a:	f840 3b04 	str.w	r3, [r0], #4
 800639e:	e7f4      	b.n	800638a <__copybits+0x30>

080063a0 <__any_on>:
 80063a0:	f100 0214 	add.w	r2, r0, #20
 80063a4:	6900      	ldr	r0, [r0, #16]
 80063a6:	114b      	asrs	r3, r1, #5
 80063a8:	4298      	cmp	r0, r3
 80063aa:	b510      	push	{r4, lr}
 80063ac:	db11      	blt.n	80063d2 <__any_on+0x32>
 80063ae:	dd0a      	ble.n	80063c6 <__any_on+0x26>
 80063b0:	f011 011f 	ands.w	r1, r1, #31
 80063b4:	d007      	beq.n	80063c6 <__any_on+0x26>
 80063b6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80063ba:	fa24 f001 	lsr.w	r0, r4, r1
 80063be:	fa00 f101 	lsl.w	r1, r0, r1
 80063c2:	428c      	cmp	r4, r1
 80063c4:	d10b      	bne.n	80063de <__any_on+0x3e>
 80063c6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d803      	bhi.n	80063d6 <__any_on+0x36>
 80063ce:	2000      	movs	r0, #0
 80063d0:	bd10      	pop	{r4, pc}
 80063d2:	4603      	mov	r3, r0
 80063d4:	e7f7      	b.n	80063c6 <__any_on+0x26>
 80063d6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80063da:	2900      	cmp	r1, #0
 80063dc:	d0f5      	beq.n	80063ca <__any_on+0x2a>
 80063de:	2001      	movs	r0, #1
 80063e0:	e7f6      	b.n	80063d0 <__any_on+0x30>

080063e2 <_calloc_r>:
 80063e2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80063e4:	fba1 2402 	umull	r2, r4, r1, r2
 80063e8:	b94c      	cbnz	r4, 80063fe <_calloc_r+0x1c>
 80063ea:	4611      	mov	r1, r2
 80063ec:	9201      	str	r2, [sp, #4]
 80063ee:	f000 f82f 	bl	8006450 <_malloc_r>
 80063f2:	9a01      	ldr	r2, [sp, #4]
 80063f4:	4605      	mov	r5, r0
 80063f6:	b930      	cbnz	r0, 8006406 <_calloc_r+0x24>
 80063f8:	4628      	mov	r0, r5
 80063fa:	b003      	add	sp, #12
 80063fc:	bd30      	pop	{r4, r5, pc}
 80063fe:	220c      	movs	r2, #12
 8006400:	6002      	str	r2, [r0, #0]
 8006402:	2500      	movs	r5, #0
 8006404:	e7f8      	b.n	80063f8 <_calloc_r+0x16>
 8006406:	4621      	mov	r1, r4
 8006408:	f7fd fe36 	bl	8004078 <memset>
 800640c:	e7f4      	b.n	80063f8 <_calloc_r+0x16>
	...

08006410 <sbrk_aligned>:
 8006410:	b570      	push	{r4, r5, r6, lr}
 8006412:	4e0e      	ldr	r6, [pc, #56]	; (800644c <sbrk_aligned+0x3c>)
 8006414:	460c      	mov	r4, r1
 8006416:	6831      	ldr	r1, [r6, #0]
 8006418:	4605      	mov	r5, r0
 800641a:	b911      	cbnz	r1, 8006422 <sbrk_aligned+0x12>
 800641c:	f000 fb98 	bl	8006b50 <_sbrk_r>
 8006420:	6030      	str	r0, [r6, #0]
 8006422:	4621      	mov	r1, r4
 8006424:	4628      	mov	r0, r5
 8006426:	f000 fb93 	bl	8006b50 <_sbrk_r>
 800642a:	1c43      	adds	r3, r0, #1
 800642c:	d00a      	beq.n	8006444 <sbrk_aligned+0x34>
 800642e:	1cc4      	adds	r4, r0, #3
 8006430:	f024 0403 	bic.w	r4, r4, #3
 8006434:	42a0      	cmp	r0, r4
 8006436:	d007      	beq.n	8006448 <sbrk_aligned+0x38>
 8006438:	1a21      	subs	r1, r4, r0
 800643a:	4628      	mov	r0, r5
 800643c:	f000 fb88 	bl	8006b50 <_sbrk_r>
 8006440:	3001      	adds	r0, #1
 8006442:	d101      	bne.n	8006448 <sbrk_aligned+0x38>
 8006444:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006448:	4620      	mov	r0, r4
 800644a:	bd70      	pop	{r4, r5, r6, pc}
 800644c:	20000404 	.word	0x20000404

08006450 <_malloc_r>:
 8006450:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006454:	1ccd      	adds	r5, r1, #3
 8006456:	f025 0503 	bic.w	r5, r5, #3
 800645a:	3508      	adds	r5, #8
 800645c:	2d0c      	cmp	r5, #12
 800645e:	bf38      	it	cc
 8006460:	250c      	movcc	r5, #12
 8006462:	2d00      	cmp	r5, #0
 8006464:	4607      	mov	r7, r0
 8006466:	db01      	blt.n	800646c <_malloc_r+0x1c>
 8006468:	42a9      	cmp	r1, r5
 800646a:	d905      	bls.n	8006478 <_malloc_r+0x28>
 800646c:	230c      	movs	r3, #12
 800646e:	603b      	str	r3, [r7, #0]
 8006470:	2600      	movs	r6, #0
 8006472:	4630      	mov	r0, r6
 8006474:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006478:	4e2e      	ldr	r6, [pc, #184]	; (8006534 <_malloc_r+0xe4>)
 800647a:	f000 fda7 	bl	8006fcc <__malloc_lock>
 800647e:	6833      	ldr	r3, [r6, #0]
 8006480:	461c      	mov	r4, r3
 8006482:	bb34      	cbnz	r4, 80064d2 <_malloc_r+0x82>
 8006484:	4629      	mov	r1, r5
 8006486:	4638      	mov	r0, r7
 8006488:	f7ff ffc2 	bl	8006410 <sbrk_aligned>
 800648c:	1c43      	adds	r3, r0, #1
 800648e:	4604      	mov	r4, r0
 8006490:	d14d      	bne.n	800652e <_malloc_r+0xde>
 8006492:	6834      	ldr	r4, [r6, #0]
 8006494:	4626      	mov	r6, r4
 8006496:	2e00      	cmp	r6, #0
 8006498:	d140      	bne.n	800651c <_malloc_r+0xcc>
 800649a:	6823      	ldr	r3, [r4, #0]
 800649c:	4631      	mov	r1, r6
 800649e:	4638      	mov	r0, r7
 80064a0:	eb04 0803 	add.w	r8, r4, r3
 80064a4:	f000 fb54 	bl	8006b50 <_sbrk_r>
 80064a8:	4580      	cmp	r8, r0
 80064aa:	d13a      	bne.n	8006522 <_malloc_r+0xd2>
 80064ac:	6821      	ldr	r1, [r4, #0]
 80064ae:	3503      	adds	r5, #3
 80064b0:	1a6d      	subs	r5, r5, r1
 80064b2:	f025 0503 	bic.w	r5, r5, #3
 80064b6:	3508      	adds	r5, #8
 80064b8:	2d0c      	cmp	r5, #12
 80064ba:	bf38      	it	cc
 80064bc:	250c      	movcc	r5, #12
 80064be:	4629      	mov	r1, r5
 80064c0:	4638      	mov	r0, r7
 80064c2:	f7ff ffa5 	bl	8006410 <sbrk_aligned>
 80064c6:	3001      	adds	r0, #1
 80064c8:	d02b      	beq.n	8006522 <_malloc_r+0xd2>
 80064ca:	6823      	ldr	r3, [r4, #0]
 80064cc:	442b      	add	r3, r5
 80064ce:	6023      	str	r3, [r4, #0]
 80064d0:	e00e      	b.n	80064f0 <_malloc_r+0xa0>
 80064d2:	6822      	ldr	r2, [r4, #0]
 80064d4:	1b52      	subs	r2, r2, r5
 80064d6:	d41e      	bmi.n	8006516 <_malloc_r+0xc6>
 80064d8:	2a0b      	cmp	r2, #11
 80064da:	d916      	bls.n	800650a <_malloc_r+0xba>
 80064dc:	1961      	adds	r1, r4, r5
 80064de:	42a3      	cmp	r3, r4
 80064e0:	6025      	str	r5, [r4, #0]
 80064e2:	bf18      	it	ne
 80064e4:	6059      	strne	r1, [r3, #4]
 80064e6:	6863      	ldr	r3, [r4, #4]
 80064e8:	bf08      	it	eq
 80064ea:	6031      	streq	r1, [r6, #0]
 80064ec:	5162      	str	r2, [r4, r5]
 80064ee:	604b      	str	r3, [r1, #4]
 80064f0:	4638      	mov	r0, r7
 80064f2:	f104 060b 	add.w	r6, r4, #11
 80064f6:	f000 fd6f 	bl	8006fd8 <__malloc_unlock>
 80064fa:	f026 0607 	bic.w	r6, r6, #7
 80064fe:	1d23      	adds	r3, r4, #4
 8006500:	1af2      	subs	r2, r6, r3
 8006502:	d0b6      	beq.n	8006472 <_malloc_r+0x22>
 8006504:	1b9b      	subs	r3, r3, r6
 8006506:	50a3      	str	r3, [r4, r2]
 8006508:	e7b3      	b.n	8006472 <_malloc_r+0x22>
 800650a:	6862      	ldr	r2, [r4, #4]
 800650c:	42a3      	cmp	r3, r4
 800650e:	bf0c      	ite	eq
 8006510:	6032      	streq	r2, [r6, #0]
 8006512:	605a      	strne	r2, [r3, #4]
 8006514:	e7ec      	b.n	80064f0 <_malloc_r+0xa0>
 8006516:	4623      	mov	r3, r4
 8006518:	6864      	ldr	r4, [r4, #4]
 800651a:	e7b2      	b.n	8006482 <_malloc_r+0x32>
 800651c:	4634      	mov	r4, r6
 800651e:	6876      	ldr	r6, [r6, #4]
 8006520:	e7b9      	b.n	8006496 <_malloc_r+0x46>
 8006522:	230c      	movs	r3, #12
 8006524:	603b      	str	r3, [r7, #0]
 8006526:	4638      	mov	r0, r7
 8006528:	f000 fd56 	bl	8006fd8 <__malloc_unlock>
 800652c:	e7a1      	b.n	8006472 <_malloc_r+0x22>
 800652e:	6025      	str	r5, [r4, #0]
 8006530:	e7de      	b.n	80064f0 <_malloc_r+0xa0>
 8006532:	bf00      	nop
 8006534:	20000400 	.word	0x20000400

08006538 <__ssputs_r>:
 8006538:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800653c:	688e      	ldr	r6, [r1, #8]
 800653e:	429e      	cmp	r6, r3
 8006540:	4682      	mov	sl, r0
 8006542:	460c      	mov	r4, r1
 8006544:	4690      	mov	r8, r2
 8006546:	461f      	mov	r7, r3
 8006548:	d838      	bhi.n	80065bc <__ssputs_r+0x84>
 800654a:	898a      	ldrh	r2, [r1, #12]
 800654c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006550:	d032      	beq.n	80065b8 <__ssputs_r+0x80>
 8006552:	6825      	ldr	r5, [r4, #0]
 8006554:	6909      	ldr	r1, [r1, #16]
 8006556:	eba5 0901 	sub.w	r9, r5, r1
 800655a:	6965      	ldr	r5, [r4, #20]
 800655c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006560:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006564:	3301      	adds	r3, #1
 8006566:	444b      	add	r3, r9
 8006568:	106d      	asrs	r5, r5, #1
 800656a:	429d      	cmp	r5, r3
 800656c:	bf38      	it	cc
 800656e:	461d      	movcc	r5, r3
 8006570:	0553      	lsls	r3, r2, #21
 8006572:	d531      	bpl.n	80065d8 <__ssputs_r+0xa0>
 8006574:	4629      	mov	r1, r5
 8006576:	f7ff ff6b 	bl	8006450 <_malloc_r>
 800657a:	4606      	mov	r6, r0
 800657c:	b950      	cbnz	r0, 8006594 <__ssputs_r+0x5c>
 800657e:	230c      	movs	r3, #12
 8006580:	f8ca 3000 	str.w	r3, [sl]
 8006584:	89a3      	ldrh	r3, [r4, #12]
 8006586:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800658a:	81a3      	strh	r3, [r4, #12]
 800658c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006590:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006594:	6921      	ldr	r1, [r4, #16]
 8006596:	464a      	mov	r2, r9
 8006598:	f7ff fa54 	bl	8005a44 <memcpy>
 800659c:	89a3      	ldrh	r3, [r4, #12]
 800659e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80065a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065a6:	81a3      	strh	r3, [r4, #12]
 80065a8:	6126      	str	r6, [r4, #16]
 80065aa:	6165      	str	r5, [r4, #20]
 80065ac:	444e      	add	r6, r9
 80065ae:	eba5 0509 	sub.w	r5, r5, r9
 80065b2:	6026      	str	r6, [r4, #0]
 80065b4:	60a5      	str	r5, [r4, #8]
 80065b6:	463e      	mov	r6, r7
 80065b8:	42be      	cmp	r6, r7
 80065ba:	d900      	bls.n	80065be <__ssputs_r+0x86>
 80065bc:	463e      	mov	r6, r7
 80065be:	6820      	ldr	r0, [r4, #0]
 80065c0:	4632      	mov	r2, r6
 80065c2:	4641      	mov	r1, r8
 80065c4:	f000 fce8 	bl	8006f98 <memmove>
 80065c8:	68a3      	ldr	r3, [r4, #8]
 80065ca:	1b9b      	subs	r3, r3, r6
 80065cc:	60a3      	str	r3, [r4, #8]
 80065ce:	6823      	ldr	r3, [r4, #0]
 80065d0:	4433      	add	r3, r6
 80065d2:	6023      	str	r3, [r4, #0]
 80065d4:	2000      	movs	r0, #0
 80065d6:	e7db      	b.n	8006590 <__ssputs_r+0x58>
 80065d8:	462a      	mov	r2, r5
 80065da:	f000 fd4f 	bl	800707c <_realloc_r>
 80065de:	4606      	mov	r6, r0
 80065e0:	2800      	cmp	r0, #0
 80065e2:	d1e1      	bne.n	80065a8 <__ssputs_r+0x70>
 80065e4:	6921      	ldr	r1, [r4, #16]
 80065e6:	4650      	mov	r0, sl
 80065e8:	f000 fcfc 	bl	8006fe4 <_free_r>
 80065ec:	e7c7      	b.n	800657e <__ssputs_r+0x46>
	...

080065f0 <_svfiprintf_r>:
 80065f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065f4:	4698      	mov	r8, r3
 80065f6:	898b      	ldrh	r3, [r1, #12]
 80065f8:	061b      	lsls	r3, r3, #24
 80065fa:	b09d      	sub	sp, #116	; 0x74
 80065fc:	4607      	mov	r7, r0
 80065fe:	460d      	mov	r5, r1
 8006600:	4614      	mov	r4, r2
 8006602:	d50e      	bpl.n	8006622 <_svfiprintf_r+0x32>
 8006604:	690b      	ldr	r3, [r1, #16]
 8006606:	b963      	cbnz	r3, 8006622 <_svfiprintf_r+0x32>
 8006608:	2140      	movs	r1, #64	; 0x40
 800660a:	f7ff ff21 	bl	8006450 <_malloc_r>
 800660e:	6028      	str	r0, [r5, #0]
 8006610:	6128      	str	r0, [r5, #16]
 8006612:	b920      	cbnz	r0, 800661e <_svfiprintf_r+0x2e>
 8006614:	230c      	movs	r3, #12
 8006616:	603b      	str	r3, [r7, #0]
 8006618:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800661c:	e0d1      	b.n	80067c2 <_svfiprintf_r+0x1d2>
 800661e:	2340      	movs	r3, #64	; 0x40
 8006620:	616b      	str	r3, [r5, #20]
 8006622:	2300      	movs	r3, #0
 8006624:	9309      	str	r3, [sp, #36]	; 0x24
 8006626:	2320      	movs	r3, #32
 8006628:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800662c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006630:	2330      	movs	r3, #48	; 0x30
 8006632:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80067dc <_svfiprintf_r+0x1ec>
 8006636:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800663a:	f04f 0901 	mov.w	r9, #1
 800663e:	4623      	mov	r3, r4
 8006640:	469a      	mov	sl, r3
 8006642:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006646:	b10a      	cbz	r2, 800664c <_svfiprintf_r+0x5c>
 8006648:	2a25      	cmp	r2, #37	; 0x25
 800664a:	d1f9      	bne.n	8006640 <_svfiprintf_r+0x50>
 800664c:	ebba 0b04 	subs.w	fp, sl, r4
 8006650:	d00b      	beq.n	800666a <_svfiprintf_r+0x7a>
 8006652:	465b      	mov	r3, fp
 8006654:	4622      	mov	r2, r4
 8006656:	4629      	mov	r1, r5
 8006658:	4638      	mov	r0, r7
 800665a:	f7ff ff6d 	bl	8006538 <__ssputs_r>
 800665e:	3001      	adds	r0, #1
 8006660:	f000 80aa 	beq.w	80067b8 <_svfiprintf_r+0x1c8>
 8006664:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006666:	445a      	add	r2, fp
 8006668:	9209      	str	r2, [sp, #36]	; 0x24
 800666a:	f89a 3000 	ldrb.w	r3, [sl]
 800666e:	2b00      	cmp	r3, #0
 8006670:	f000 80a2 	beq.w	80067b8 <_svfiprintf_r+0x1c8>
 8006674:	2300      	movs	r3, #0
 8006676:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800667a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800667e:	f10a 0a01 	add.w	sl, sl, #1
 8006682:	9304      	str	r3, [sp, #16]
 8006684:	9307      	str	r3, [sp, #28]
 8006686:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800668a:	931a      	str	r3, [sp, #104]	; 0x68
 800668c:	4654      	mov	r4, sl
 800668e:	2205      	movs	r2, #5
 8006690:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006694:	4851      	ldr	r0, [pc, #324]	; (80067dc <_svfiprintf_r+0x1ec>)
 8006696:	f7f9 fda3 	bl	80001e0 <memchr>
 800669a:	9a04      	ldr	r2, [sp, #16]
 800669c:	b9d8      	cbnz	r0, 80066d6 <_svfiprintf_r+0xe6>
 800669e:	06d0      	lsls	r0, r2, #27
 80066a0:	bf44      	itt	mi
 80066a2:	2320      	movmi	r3, #32
 80066a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80066a8:	0711      	lsls	r1, r2, #28
 80066aa:	bf44      	itt	mi
 80066ac:	232b      	movmi	r3, #43	; 0x2b
 80066ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80066b2:	f89a 3000 	ldrb.w	r3, [sl]
 80066b6:	2b2a      	cmp	r3, #42	; 0x2a
 80066b8:	d015      	beq.n	80066e6 <_svfiprintf_r+0xf6>
 80066ba:	9a07      	ldr	r2, [sp, #28]
 80066bc:	4654      	mov	r4, sl
 80066be:	2000      	movs	r0, #0
 80066c0:	f04f 0c0a 	mov.w	ip, #10
 80066c4:	4621      	mov	r1, r4
 80066c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80066ca:	3b30      	subs	r3, #48	; 0x30
 80066cc:	2b09      	cmp	r3, #9
 80066ce:	d94e      	bls.n	800676e <_svfiprintf_r+0x17e>
 80066d0:	b1b0      	cbz	r0, 8006700 <_svfiprintf_r+0x110>
 80066d2:	9207      	str	r2, [sp, #28]
 80066d4:	e014      	b.n	8006700 <_svfiprintf_r+0x110>
 80066d6:	eba0 0308 	sub.w	r3, r0, r8
 80066da:	fa09 f303 	lsl.w	r3, r9, r3
 80066de:	4313      	orrs	r3, r2
 80066e0:	9304      	str	r3, [sp, #16]
 80066e2:	46a2      	mov	sl, r4
 80066e4:	e7d2      	b.n	800668c <_svfiprintf_r+0x9c>
 80066e6:	9b03      	ldr	r3, [sp, #12]
 80066e8:	1d19      	adds	r1, r3, #4
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	9103      	str	r1, [sp, #12]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	bfbb      	ittet	lt
 80066f2:	425b      	neglt	r3, r3
 80066f4:	f042 0202 	orrlt.w	r2, r2, #2
 80066f8:	9307      	strge	r3, [sp, #28]
 80066fa:	9307      	strlt	r3, [sp, #28]
 80066fc:	bfb8      	it	lt
 80066fe:	9204      	strlt	r2, [sp, #16]
 8006700:	7823      	ldrb	r3, [r4, #0]
 8006702:	2b2e      	cmp	r3, #46	; 0x2e
 8006704:	d10c      	bne.n	8006720 <_svfiprintf_r+0x130>
 8006706:	7863      	ldrb	r3, [r4, #1]
 8006708:	2b2a      	cmp	r3, #42	; 0x2a
 800670a:	d135      	bne.n	8006778 <_svfiprintf_r+0x188>
 800670c:	9b03      	ldr	r3, [sp, #12]
 800670e:	1d1a      	adds	r2, r3, #4
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	9203      	str	r2, [sp, #12]
 8006714:	2b00      	cmp	r3, #0
 8006716:	bfb8      	it	lt
 8006718:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800671c:	3402      	adds	r4, #2
 800671e:	9305      	str	r3, [sp, #20]
 8006720:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80067ec <_svfiprintf_r+0x1fc>
 8006724:	7821      	ldrb	r1, [r4, #0]
 8006726:	2203      	movs	r2, #3
 8006728:	4650      	mov	r0, sl
 800672a:	f7f9 fd59 	bl	80001e0 <memchr>
 800672e:	b140      	cbz	r0, 8006742 <_svfiprintf_r+0x152>
 8006730:	2340      	movs	r3, #64	; 0x40
 8006732:	eba0 000a 	sub.w	r0, r0, sl
 8006736:	fa03 f000 	lsl.w	r0, r3, r0
 800673a:	9b04      	ldr	r3, [sp, #16]
 800673c:	4303      	orrs	r3, r0
 800673e:	3401      	adds	r4, #1
 8006740:	9304      	str	r3, [sp, #16]
 8006742:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006746:	4826      	ldr	r0, [pc, #152]	; (80067e0 <_svfiprintf_r+0x1f0>)
 8006748:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800674c:	2206      	movs	r2, #6
 800674e:	f7f9 fd47 	bl	80001e0 <memchr>
 8006752:	2800      	cmp	r0, #0
 8006754:	d038      	beq.n	80067c8 <_svfiprintf_r+0x1d8>
 8006756:	4b23      	ldr	r3, [pc, #140]	; (80067e4 <_svfiprintf_r+0x1f4>)
 8006758:	bb1b      	cbnz	r3, 80067a2 <_svfiprintf_r+0x1b2>
 800675a:	9b03      	ldr	r3, [sp, #12]
 800675c:	3307      	adds	r3, #7
 800675e:	f023 0307 	bic.w	r3, r3, #7
 8006762:	3308      	adds	r3, #8
 8006764:	9303      	str	r3, [sp, #12]
 8006766:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006768:	4433      	add	r3, r6
 800676a:	9309      	str	r3, [sp, #36]	; 0x24
 800676c:	e767      	b.n	800663e <_svfiprintf_r+0x4e>
 800676e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006772:	460c      	mov	r4, r1
 8006774:	2001      	movs	r0, #1
 8006776:	e7a5      	b.n	80066c4 <_svfiprintf_r+0xd4>
 8006778:	2300      	movs	r3, #0
 800677a:	3401      	adds	r4, #1
 800677c:	9305      	str	r3, [sp, #20]
 800677e:	4619      	mov	r1, r3
 8006780:	f04f 0c0a 	mov.w	ip, #10
 8006784:	4620      	mov	r0, r4
 8006786:	f810 2b01 	ldrb.w	r2, [r0], #1
 800678a:	3a30      	subs	r2, #48	; 0x30
 800678c:	2a09      	cmp	r2, #9
 800678e:	d903      	bls.n	8006798 <_svfiprintf_r+0x1a8>
 8006790:	2b00      	cmp	r3, #0
 8006792:	d0c5      	beq.n	8006720 <_svfiprintf_r+0x130>
 8006794:	9105      	str	r1, [sp, #20]
 8006796:	e7c3      	b.n	8006720 <_svfiprintf_r+0x130>
 8006798:	fb0c 2101 	mla	r1, ip, r1, r2
 800679c:	4604      	mov	r4, r0
 800679e:	2301      	movs	r3, #1
 80067a0:	e7f0      	b.n	8006784 <_svfiprintf_r+0x194>
 80067a2:	ab03      	add	r3, sp, #12
 80067a4:	9300      	str	r3, [sp, #0]
 80067a6:	462a      	mov	r2, r5
 80067a8:	4b0f      	ldr	r3, [pc, #60]	; (80067e8 <_svfiprintf_r+0x1f8>)
 80067aa:	a904      	add	r1, sp, #16
 80067ac:	4638      	mov	r0, r7
 80067ae:	f3af 8000 	nop.w
 80067b2:	1c42      	adds	r2, r0, #1
 80067b4:	4606      	mov	r6, r0
 80067b6:	d1d6      	bne.n	8006766 <_svfiprintf_r+0x176>
 80067b8:	89ab      	ldrh	r3, [r5, #12]
 80067ba:	065b      	lsls	r3, r3, #25
 80067bc:	f53f af2c 	bmi.w	8006618 <_svfiprintf_r+0x28>
 80067c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80067c2:	b01d      	add	sp, #116	; 0x74
 80067c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067c8:	ab03      	add	r3, sp, #12
 80067ca:	9300      	str	r3, [sp, #0]
 80067cc:	462a      	mov	r2, r5
 80067ce:	4b06      	ldr	r3, [pc, #24]	; (80067e8 <_svfiprintf_r+0x1f8>)
 80067d0:	a904      	add	r1, sp, #16
 80067d2:	4638      	mov	r0, r7
 80067d4:	f000 f87a 	bl	80068cc <_printf_i>
 80067d8:	e7eb      	b.n	80067b2 <_svfiprintf_r+0x1c2>
 80067da:	bf00      	nop
 80067dc:	08007a54 	.word	0x08007a54
 80067e0:	08007a5e 	.word	0x08007a5e
 80067e4:	00000000 	.word	0x00000000
 80067e8:	08006539 	.word	0x08006539
 80067ec:	08007a5a 	.word	0x08007a5a

080067f0 <_printf_common>:
 80067f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067f4:	4616      	mov	r6, r2
 80067f6:	4699      	mov	r9, r3
 80067f8:	688a      	ldr	r2, [r1, #8]
 80067fa:	690b      	ldr	r3, [r1, #16]
 80067fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006800:	4293      	cmp	r3, r2
 8006802:	bfb8      	it	lt
 8006804:	4613      	movlt	r3, r2
 8006806:	6033      	str	r3, [r6, #0]
 8006808:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800680c:	4607      	mov	r7, r0
 800680e:	460c      	mov	r4, r1
 8006810:	b10a      	cbz	r2, 8006816 <_printf_common+0x26>
 8006812:	3301      	adds	r3, #1
 8006814:	6033      	str	r3, [r6, #0]
 8006816:	6823      	ldr	r3, [r4, #0]
 8006818:	0699      	lsls	r1, r3, #26
 800681a:	bf42      	ittt	mi
 800681c:	6833      	ldrmi	r3, [r6, #0]
 800681e:	3302      	addmi	r3, #2
 8006820:	6033      	strmi	r3, [r6, #0]
 8006822:	6825      	ldr	r5, [r4, #0]
 8006824:	f015 0506 	ands.w	r5, r5, #6
 8006828:	d106      	bne.n	8006838 <_printf_common+0x48>
 800682a:	f104 0a19 	add.w	sl, r4, #25
 800682e:	68e3      	ldr	r3, [r4, #12]
 8006830:	6832      	ldr	r2, [r6, #0]
 8006832:	1a9b      	subs	r3, r3, r2
 8006834:	42ab      	cmp	r3, r5
 8006836:	dc26      	bgt.n	8006886 <_printf_common+0x96>
 8006838:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800683c:	1e13      	subs	r3, r2, #0
 800683e:	6822      	ldr	r2, [r4, #0]
 8006840:	bf18      	it	ne
 8006842:	2301      	movne	r3, #1
 8006844:	0692      	lsls	r2, r2, #26
 8006846:	d42b      	bmi.n	80068a0 <_printf_common+0xb0>
 8006848:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800684c:	4649      	mov	r1, r9
 800684e:	4638      	mov	r0, r7
 8006850:	47c0      	blx	r8
 8006852:	3001      	adds	r0, #1
 8006854:	d01e      	beq.n	8006894 <_printf_common+0xa4>
 8006856:	6823      	ldr	r3, [r4, #0]
 8006858:	68e5      	ldr	r5, [r4, #12]
 800685a:	6832      	ldr	r2, [r6, #0]
 800685c:	f003 0306 	and.w	r3, r3, #6
 8006860:	2b04      	cmp	r3, #4
 8006862:	bf08      	it	eq
 8006864:	1aad      	subeq	r5, r5, r2
 8006866:	68a3      	ldr	r3, [r4, #8]
 8006868:	6922      	ldr	r2, [r4, #16]
 800686a:	bf0c      	ite	eq
 800686c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006870:	2500      	movne	r5, #0
 8006872:	4293      	cmp	r3, r2
 8006874:	bfc4      	itt	gt
 8006876:	1a9b      	subgt	r3, r3, r2
 8006878:	18ed      	addgt	r5, r5, r3
 800687a:	2600      	movs	r6, #0
 800687c:	341a      	adds	r4, #26
 800687e:	42b5      	cmp	r5, r6
 8006880:	d11a      	bne.n	80068b8 <_printf_common+0xc8>
 8006882:	2000      	movs	r0, #0
 8006884:	e008      	b.n	8006898 <_printf_common+0xa8>
 8006886:	2301      	movs	r3, #1
 8006888:	4652      	mov	r2, sl
 800688a:	4649      	mov	r1, r9
 800688c:	4638      	mov	r0, r7
 800688e:	47c0      	blx	r8
 8006890:	3001      	adds	r0, #1
 8006892:	d103      	bne.n	800689c <_printf_common+0xac>
 8006894:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006898:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800689c:	3501      	adds	r5, #1
 800689e:	e7c6      	b.n	800682e <_printf_common+0x3e>
 80068a0:	18e1      	adds	r1, r4, r3
 80068a2:	1c5a      	adds	r2, r3, #1
 80068a4:	2030      	movs	r0, #48	; 0x30
 80068a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80068aa:	4422      	add	r2, r4
 80068ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80068b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80068b4:	3302      	adds	r3, #2
 80068b6:	e7c7      	b.n	8006848 <_printf_common+0x58>
 80068b8:	2301      	movs	r3, #1
 80068ba:	4622      	mov	r2, r4
 80068bc:	4649      	mov	r1, r9
 80068be:	4638      	mov	r0, r7
 80068c0:	47c0      	blx	r8
 80068c2:	3001      	adds	r0, #1
 80068c4:	d0e6      	beq.n	8006894 <_printf_common+0xa4>
 80068c6:	3601      	adds	r6, #1
 80068c8:	e7d9      	b.n	800687e <_printf_common+0x8e>
	...

080068cc <_printf_i>:
 80068cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80068d0:	7e0f      	ldrb	r7, [r1, #24]
 80068d2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80068d4:	2f78      	cmp	r7, #120	; 0x78
 80068d6:	4691      	mov	r9, r2
 80068d8:	4680      	mov	r8, r0
 80068da:	460c      	mov	r4, r1
 80068dc:	469a      	mov	sl, r3
 80068de:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80068e2:	d807      	bhi.n	80068f4 <_printf_i+0x28>
 80068e4:	2f62      	cmp	r7, #98	; 0x62
 80068e6:	d80a      	bhi.n	80068fe <_printf_i+0x32>
 80068e8:	2f00      	cmp	r7, #0
 80068ea:	f000 80d8 	beq.w	8006a9e <_printf_i+0x1d2>
 80068ee:	2f58      	cmp	r7, #88	; 0x58
 80068f0:	f000 80a3 	beq.w	8006a3a <_printf_i+0x16e>
 80068f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80068f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80068fc:	e03a      	b.n	8006974 <_printf_i+0xa8>
 80068fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006902:	2b15      	cmp	r3, #21
 8006904:	d8f6      	bhi.n	80068f4 <_printf_i+0x28>
 8006906:	a101      	add	r1, pc, #4	; (adr r1, 800690c <_printf_i+0x40>)
 8006908:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800690c:	08006965 	.word	0x08006965
 8006910:	08006979 	.word	0x08006979
 8006914:	080068f5 	.word	0x080068f5
 8006918:	080068f5 	.word	0x080068f5
 800691c:	080068f5 	.word	0x080068f5
 8006920:	080068f5 	.word	0x080068f5
 8006924:	08006979 	.word	0x08006979
 8006928:	080068f5 	.word	0x080068f5
 800692c:	080068f5 	.word	0x080068f5
 8006930:	080068f5 	.word	0x080068f5
 8006934:	080068f5 	.word	0x080068f5
 8006938:	08006a85 	.word	0x08006a85
 800693c:	080069a9 	.word	0x080069a9
 8006940:	08006a67 	.word	0x08006a67
 8006944:	080068f5 	.word	0x080068f5
 8006948:	080068f5 	.word	0x080068f5
 800694c:	08006aa7 	.word	0x08006aa7
 8006950:	080068f5 	.word	0x080068f5
 8006954:	080069a9 	.word	0x080069a9
 8006958:	080068f5 	.word	0x080068f5
 800695c:	080068f5 	.word	0x080068f5
 8006960:	08006a6f 	.word	0x08006a6f
 8006964:	682b      	ldr	r3, [r5, #0]
 8006966:	1d1a      	adds	r2, r3, #4
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	602a      	str	r2, [r5, #0]
 800696c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006970:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006974:	2301      	movs	r3, #1
 8006976:	e0a3      	b.n	8006ac0 <_printf_i+0x1f4>
 8006978:	6820      	ldr	r0, [r4, #0]
 800697a:	6829      	ldr	r1, [r5, #0]
 800697c:	0606      	lsls	r6, r0, #24
 800697e:	f101 0304 	add.w	r3, r1, #4
 8006982:	d50a      	bpl.n	800699a <_printf_i+0xce>
 8006984:	680e      	ldr	r6, [r1, #0]
 8006986:	602b      	str	r3, [r5, #0]
 8006988:	2e00      	cmp	r6, #0
 800698a:	da03      	bge.n	8006994 <_printf_i+0xc8>
 800698c:	232d      	movs	r3, #45	; 0x2d
 800698e:	4276      	negs	r6, r6
 8006990:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006994:	485e      	ldr	r0, [pc, #376]	; (8006b10 <_printf_i+0x244>)
 8006996:	230a      	movs	r3, #10
 8006998:	e019      	b.n	80069ce <_printf_i+0x102>
 800699a:	680e      	ldr	r6, [r1, #0]
 800699c:	602b      	str	r3, [r5, #0]
 800699e:	f010 0f40 	tst.w	r0, #64	; 0x40
 80069a2:	bf18      	it	ne
 80069a4:	b236      	sxthne	r6, r6
 80069a6:	e7ef      	b.n	8006988 <_printf_i+0xbc>
 80069a8:	682b      	ldr	r3, [r5, #0]
 80069aa:	6820      	ldr	r0, [r4, #0]
 80069ac:	1d19      	adds	r1, r3, #4
 80069ae:	6029      	str	r1, [r5, #0]
 80069b0:	0601      	lsls	r1, r0, #24
 80069b2:	d501      	bpl.n	80069b8 <_printf_i+0xec>
 80069b4:	681e      	ldr	r6, [r3, #0]
 80069b6:	e002      	b.n	80069be <_printf_i+0xf2>
 80069b8:	0646      	lsls	r6, r0, #25
 80069ba:	d5fb      	bpl.n	80069b4 <_printf_i+0xe8>
 80069bc:	881e      	ldrh	r6, [r3, #0]
 80069be:	4854      	ldr	r0, [pc, #336]	; (8006b10 <_printf_i+0x244>)
 80069c0:	2f6f      	cmp	r7, #111	; 0x6f
 80069c2:	bf0c      	ite	eq
 80069c4:	2308      	moveq	r3, #8
 80069c6:	230a      	movne	r3, #10
 80069c8:	2100      	movs	r1, #0
 80069ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80069ce:	6865      	ldr	r5, [r4, #4]
 80069d0:	60a5      	str	r5, [r4, #8]
 80069d2:	2d00      	cmp	r5, #0
 80069d4:	bfa2      	ittt	ge
 80069d6:	6821      	ldrge	r1, [r4, #0]
 80069d8:	f021 0104 	bicge.w	r1, r1, #4
 80069dc:	6021      	strge	r1, [r4, #0]
 80069de:	b90e      	cbnz	r6, 80069e4 <_printf_i+0x118>
 80069e0:	2d00      	cmp	r5, #0
 80069e2:	d04d      	beq.n	8006a80 <_printf_i+0x1b4>
 80069e4:	4615      	mov	r5, r2
 80069e6:	fbb6 f1f3 	udiv	r1, r6, r3
 80069ea:	fb03 6711 	mls	r7, r3, r1, r6
 80069ee:	5dc7      	ldrb	r7, [r0, r7]
 80069f0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80069f4:	4637      	mov	r7, r6
 80069f6:	42bb      	cmp	r3, r7
 80069f8:	460e      	mov	r6, r1
 80069fa:	d9f4      	bls.n	80069e6 <_printf_i+0x11a>
 80069fc:	2b08      	cmp	r3, #8
 80069fe:	d10b      	bne.n	8006a18 <_printf_i+0x14c>
 8006a00:	6823      	ldr	r3, [r4, #0]
 8006a02:	07de      	lsls	r6, r3, #31
 8006a04:	d508      	bpl.n	8006a18 <_printf_i+0x14c>
 8006a06:	6923      	ldr	r3, [r4, #16]
 8006a08:	6861      	ldr	r1, [r4, #4]
 8006a0a:	4299      	cmp	r1, r3
 8006a0c:	bfde      	ittt	le
 8006a0e:	2330      	movle	r3, #48	; 0x30
 8006a10:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006a14:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006a18:	1b52      	subs	r2, r2, r5
 8006a1a:	6122      	str	r2, [r4, #16]
 8006a1c:	f8cd a000 	str.w	sl, [sp]
 8006a20:	464b      	mov	r3, r9
 8006a22:	aa03      	add	r2, sp, #12
 8006a24:	4621      	mov	r1, r4
 8006a26:	4640      	mov	r0, r8
 8006a28:	f7ff fee2 	bl	80067f0 <_printf_common>
 8006a2c:	3001      	adds	r0, #1
 8006a2e:	d14c      	bne.n	8006aca <_printf_i+0x1fe>
 8006a30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006a34:	b004      	add	sp, #16
 8006a36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a3a:	4835      	ldr	r0, [pc, #212]	; (8006b10 <_printf_i+0x244>)
 8006a3c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006a40:	6829      	ldr	r1, [r5, #0]
 8006a42:	6823      	ldr	r3, [r4, #0]
 8006a44:	f851 6b04 	ldr.w	r6, [r1], #4
 8006a48:	6029      	str	r1, [r5, #0]
 8006a4a:	061d      	lsls	r5, r3, #24
 8006a4c:	d514      	bpl.n	8006a78 <_printf_i+0x1ac>
 8006a4e:	07df      	lsls	r7, r3, #31
 8006a50:	bf44      	itt	mi
 8006a52:	f043 0320 	orrmi.w	r3, r3, #32
 8006a56:	6023      	strmi	r3, [r4, #0]
 8006a58:	b91e      	cbnz	r6, 8006a62 <_printf_i+0x196>
 8006a5a:	6823      	ldr	r3, [r4, #0]
 8006a5c:	f023 0320 	bic.w	r3, r3, #32
 8006a60:	6023      	str	r3, [r4, #0]
 8006a62:	2310      	movs	r3, #16
 8006a64:	e7b0      	b.n	80069c8 <_printf_i+0xfc>
 8006a66:	6823      	ldr	r3, [r4, #0]
 8006a68:	f043 0320 	orr.w	r3, r3, #32
 8006a6c:	6023      	str	r3, [r4, #0]
 8006a6e:	2378      	movs	r3, #120	; 0x78
 8006a70:	4828      	ldr	r0, [pc, #160]	; (8006b14 <_printf_i+0x248>)
 8006a72:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006a76:	e7e3      	b.n	8006a40 <_printf_i+0x174>
 8006a78:	0659      	lsls	r1, r3, #25
 8006a7a:	bf48      	it	mi
 8006a7c:	b2b6      	uxthmi	r6, r6
 8006a7e:	e7e6      	b.n	8006a4e <_printf_i+0x182>
 8006a80:	4615      	mov	r5, r2
 8006a82:	e7bb      	b.n	80069fc <_printf_i+0x130>
 8006a84:	682b      	ldr	r3, [r5, #0]
 8006a86:	6826      	ldr	r6, [r4, #0]
 8006a88:	6961      	ldr	r1, [r4, #20]
 8006a8a:	1d18      	adds	r0, r3, #4
 8006a8c:	6028      	str	r0, [r5, #0]
 8006a8e:	0635      	lsls	r5, r6, #24
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	d501      	bpl.n	8006a98 <_printf_i+0x1cc>
 8006a94:	6019      	str	r1, [r3, #0]
 8006a96:	e002      	b.n	8006a9e <_printf_i+0x1d2>
 8006a98:	0670      	lsls	r0, r6, #25
 8006a9a:	d5fb      	bpl.n	8006a94 <_printf_i+0x1c8>
 8006a9c:	8019      	strh	r1, [r3, #0]
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	6123      	str	r3, [r4, #16]
 8006aa2:	4615      	mov	r5, r2
 8006aa4:	e7ba      	b.n	8006a1c <_printf_i+0x150>
 8006aa6:	682b      	ldr	r3, [r5, #0]
 8006aa8:	1d1a      	adds	r2, r3, #4
 8006aaa:	602a      	str	r2, [r5, #0]
 8006aac:	681d      	ldr	r5, [r3, #0]
 8006aae:	6862      	ldr	r2, [r4, #4]
 8006ab0:	2100      	movs	r1, #0
 8006ab2:	4628      	mov	r0, r5
 8006ab4:	f7f9 fb94 	bl	80001e0 <memchr>
 8006ab8:	b108      	cbz	r0, 8006abe <_printf_i+0x1f2>
 8006aba:	1b40      	subs	r0, r0, r5
 8006abc:	6060      	str	r0, [r4, #4]
 8006abe:	6863      	ldr	r3, [r4, #4]
 8006ac0:	6123      	str	r3, [r4, #16]
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ac8:	e7a8      	b.n	8006a1c <_printf_i+0x150>
 8006aca:	6923      	ldr	r3, [r4, #16]
 8006acc:	462a      	mov	r2, r5
 8006ace:	4649      	mov	r1, r9
 8006ad0:	4640      	mov	r0, r8
 8006ad2:	47d0      	blx	sl
 8006ad4:	3001      	adds	r0, #1
 8006ad6:	d0ab      	beq.n	8006a30 <_printf_i+0x164>
 8006ad8:	6823      	ldr	r3, [r4, #0]
 8006ada:	079b      	lsls	r3, r3, #30
 8006adc:	d413      	bmi.n	8006b06 <_printf_i+0x23a>
 8006ade:	68e0      	ldr	r0, [r4, #12]
 8006ae0:	9b03      	ldr	r3, [sp, #12]
 8006ae2:	4298      	cmp	r0, r3
 8006ae4:	bfb8      	it	lt
 8006ae6:	4618      	movlt	r0, r3
 8006ae8:	e7a4      	b.n	8006a34 <_printf_i+0x168>
 8006aea:	2301      	movs	r3, #1
 8006aec:	4632      	mov	r2, r6
 8006aee:	4649      	mov	r1, r9
 8006af0:	4640      	mov	r0, r8
 8006af2:	47d0      	blx	sl
 8006af4:	3001      	adds	r0, #1
 8006af6:	d09b      	beq.n	8006a30 <_printf_i+0x164>
 8006af8:	3501      	adds	r5, #1
 8006afa:	68e3      	ldr	r3, [r4, #12]
 8006afc:	9903      	ldr	r1, [sp, #12]
 8006afe:	1a5b      	subs	r3, r3, r1
 8006b00:	42ab      	cmp	r3, r5
 8006b02:	dcf2      	bgt.n	8006aea <_printf_i+0x21e>
 8006b04:	e7eb      	b.n	8006ade <_printf_i+0x212>
 8006b06:	2500      	movs	r5, #0
 8006b08:	f104 0619 	add.w	r6, r4, #25
 8006b0c:	e7f5      	b.n	8006afa <_printf_i+0x22e>
 8006b0e:	bf00      	nop
 8006b10:	08007a65 	.word	0x08007a65
 8006b14:	08007a76 	.word	0x08007a76

08006b18 <_read_r>:
 8006b18:	b538      	push	{r3, r4, r5, lr}
 8006b1a:	4d07      	ldr	r5, [pc, #28]	; (8006b38 <_read_r+0x20>)
 8006b1c:	4604      	mov	r4, r0
 8006b1e:	4608      	mov	r0, r1
 8006b20:	4611      	mov	r1, r2
 8006b22:	2200      	movs	r2, #0
 8006b24:	602a      	str	r2, [r5, #0]
 8006b26:	461a      	mov	r2, r3
 8006b28:	f7fa ff0a 	bl	8001940 <_read>
 8006b2c:	1c43      	adds	r3, r0, #1
 8006b2e:	d102      	bne.n	8006b36 <_read_r+0x1e>
 8006b30:	682b      	ldr	r3, [r5, #0]
 8006b32:	b103      	cbz	r3, 8006b36 <_read_r+0x1e>
 8006b34:	6023      	str	r3, [r4, #0]
 8006b36:	bd38      	pop	{r3, r4, r5, pc}
 8006b38:	20000408 	.word	0x20000408
 8006b3c:	00000000 	.word	0x00000000

08006b40 <nan>:
 8006b40:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8006b48 <nan+0x8>
 8006b44:	4770      	bx	lr
 8006b46:	bf00      	nop
 8006b48:	00000000 	.word	0x00000000
 8006b4c:	7ff80000 	.word	0x7ff80000

08006b50 <_sbrk_r>:
 8006b50:	b538      	push	{r3, r4, r5, lr}
 8006b52:	4d06      	ldr	r5, [pc, #24]	; (8006b6c <_sbrk_r+0x1c>)
 8006b54:	2300      	movs	r3, #0
 8006b56:	4604      	mov	r4, r0
 8006b58:	4608      	mov	r0, r1
 8006b5a:	602b      	str	r3, [r5, #0]
 8006b5c:	f7fa ff5e 	bl	8001a1c <_sbrk>
 8006b60:	1c43      	adds	r3, r0, #1
 8006b62:	d102      	bne.n	8006b6a <_sbrk_r+0x1a>
 8006b64:	682b      	ldr	r3, [r5, #0]
 8006b66:	b103      	cbz	r3, 8006b6a <_sbrk_r+0x1a>
 8006b68:	6023      	str	r3, [r4, #0]
 8006b6a:	bd38      	pop	{r3, r4, r5, pc}
 8006b6c:	20000408 	.word	0x20000408

08006b70 <strncmp>:
 8006b70:	b510      	push	{r4, lr}
 8006b72:	b17a      	cbz	r2, 8006b94 <strncmp+0x24>
 8006b74:	4603      	mov	r3, r0
 8006b76:	3901      	subs	r1, #1
 8006b78:	1884      	adds	r4, r0, r2
 8006b7a:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006b7e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8006b82:	4290      	cmp	r0, r2
 8006b84:	d101      	bne.n	8006b8a <strncmp+0x1a>
 8006b86:	42a3      	cmp	r3, r4
 8006b88:	d101      	bne.n	8006b8e <strncmp+0x1e>
 8006b8a:	1a80      	subs	r0, r0, r2
 8006b8c:	bd10      	pop	{r4, pc}
 8006b8e:	2800      	cmp	r0, #0
 8006b90:	d1f3      	bne.n	8006b7a <strncmp+0xa>
 8006b92:	e7fa      	b.n	8006b8a <strncmp+0x1a>
 8006b94:	4610      	mov	r0, r2
 8006b96:	e7f9      	b.n	8006b8c <strncmp+0x1c>

08006b98 <__ascii_wctomb>:
 8006b98:	b149      	cbz	r1, 8006bae <__ascii_wctomb+0x16>
 8006b9a:	2aff      	cmp	r2, #255	; 0xff
 8006b9c:	bf85      	ittet	hi
 8006b9e:	238a      	movhi	r3, #138	; 0x8a
 8006ba0:	6003      	strhi	r3, [r0, #0]
 8006ba2:	700a      	strbls	r2, [r1, #0]
 8006ba4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8006ba8:	bf98      	it	ls
 8006baa:	2001      	movls	r0, #1
 8006bac:	4770      	bx	lr
 8006bae:	4608      	mov	r0, r1
 8006bb0:	4770      	bx	lr
	...

08006bb4 <__assert_func>:
 8006bb4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006bb6:	4614      	mov	r4, r2
 8006bb8:	461a      	mov	r2, r3
 8006bba:	4b09      	ldr	r3, [pc, #36]	; (8006be0 <__assert_func+0x2c>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4605      	mov	r5, r0
 8006bc0:	68d8      	ldr	r0, [r3, #12]
 8006bc2:	b14c      	cbz	r4, 8006bd8 <__assert_func+0x24>
 8006bc4:	4b07      	ldr	r3, [pc, #28]	; (8006be4 <__assert_func+0x30>)
 8006bc6:	9100      	str	r1, [sp, #0]
 8006bc8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006bcc:	4906      	ldr	r1, [pc, #24]	; (8006be8 <__assert_func+0x34>)
 8006bce:	462b      	mov	r3, r5
 8006bd0:	f000 f9a6 	bl	8006f20 <fiprintf>
 8006bd4:	f000 fc9a 	bl	800750c <abort>
 8006bd8:	4b04      	ldr	r3, [pc, #16]	; (8006bec <__assert_func+0x38>)
 8006bda:	461c      	mov	r4, r3
 8006bdc:	e7f3      	b.n	8006bc6 <__assert_func+0x12>
 8006bde:	bf00      	nop
 8006be0:	2000000c 	.word	0x2000000c
 8006be4:	08007a87 	.word	0x08007a87
 8006be8:	08007a94 	.word	0x08007a94
 8006bec:	08007ac2 	.word	0x08007ac2

08006bf0 <__sflush_r>:
 8006bf0:	898a      	ldrh	r2, [r1, #12]
 8006bf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bf6:	4605      	mov	r5, r0
 8006bf8:	0710      	lsls	r0, r2, #28
 8006bfa:	460c      	mov	r4, r1
 8006bfc:	d458      	bmi.n	8006cb0 <__sflush_r+0xc0>
 8006bfe:	684b      	ldr	r3, [r1, #4]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	dc05      	bgt.n	8006c10 <__sflush_r+0x20>
 8006c04:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	dc02      	bgt.n	8006c10 <__sflush_r+0x20>
 8006c0a:	2000      	movs	r0, #0
 8006c0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c10:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006c12:	2e00      	cmp	r6, #0
 8006c14:	d0f9      	beq.n	8006c0a <__sflush_r+0x1a>
 8006c16:	2300      	movs	r3, #0
 8006c18:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006c1c:	682f      	ldr	r7, [r5, #0]
 8006c1e:	602b      	str	r3, [r5, #0]
 8006c20:	d032      	beq.n	8006c88 <__sflush_r+0x98>
 8006c22:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006c24:	89a3      	ldrh	r3, [r4, #12]
 8006c26:	075a      	lsls	r2, r3, #29
 8006c28:	d505      	bpl.n	8006c36 <__sflush_r+0x46>
 8006c2a:	6863      	ldr	r3, [r4, #4]
 8006c2c:	1ac0      	subs	r0, r0, r3
 8006c2e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006c30:	b10b      	cbz	r3, 8006c36 <__sflush_r+0x46>
 8006c32:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006c34:	1ac0      	subs	r0, r0, r3
 8006c36:	2300      	movs	r3, #0
 8006c38:	4602      	mov	r2, r0
 8006c3a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006c3c:	6a21      	ldr	r1, [r4, #32]
 8006c3e:	4628      	mov	r0, r5
 8006c40:	47b0      	blx	r6
 8006c42:	1c43      	adds	r3, r0, #1
 8006c44:	89a3      	ldrh	r3, [r4, #12]
 8006c46:	d106      	bne.n	8006c56 <__sflush_r+0x66>
 8006c48:	6829      	ldr	r1, [r5, #0]
 8006c4a:	291d      	cmp	r1, #29
 8006c4c:	d82c      	bhi.n	8006ca8 <__sflush_r+0xb8>
 8006c4e:	4a2a      	ldr	r2, [pc, #168]	; (8006cf8 <__sflush_r+0x108>)
 8006c50:	40ca      	lsrs	r2, r1
 8006c52:	07d6      	lsls	r6, r2, #31
 8006c54:	d528      	bpl.n	8006ca8 <__sflush_r+0xb8>
 8006c56:	2200      	movs	r2, #0
 8006c58:	6062      	str	r2, [r4, #4]
 8006c5a:	04d9      	lsls	r1, r3, #19
 8006c5c:	6922      	ldr	r2, [r4, #16]
 8006c5e:	6022      	str	r2, [r4, #0]
 8006c60:	d504      	bpl.n	8006c6c <__sflush_r+0x7c>
 8006c62:	1c42      	adds	r2, r0, #1
 8006c64:	d101      	bne.n	8006c6a <__sflush_r+0x7a>
 8006c66:	682b      	ldr	r3, [r5, #0]
 8006c68:	b903      	cbnz	r3, 8006c6c <__sflush_r+0x7c>
 8006c6a:	6560      	str	r0, [r4, #84]	; 0x54
 8006c6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006c6e:	602f      	str	r7, [r5, #0]
 8006c70:	2900      	cmp	r1, #0
 8006c72:	d0ca      	beq.n	8006c0a <__sflush_r+0x1a>
 8006c74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006c78:	4299      	cmp	r1, r3
 8006c7a:	d002      	beq.n	8006c82 <__sflush_r+0x92>
 8006c7c:	4628      	mov	r0, r5
 8006c7e:	f000 f9b1 	bl	8006fe4 <_free_r>
 8006c82:	2000      	movs	r0, #0
 8006c84:	6360      	str	r0, [r4, #52]	; 0x34
 8006c86:	e7c1      	b.n	8006c0c <__sflush_r+0x1c>
 8006c88:	6a21      	ldr	r1, [r4, #32]
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	4628      	mov	r0, r5
 8006c8e:	47b0      	blx	r6
 8006c90:	1c41      	adds	r1, r0, #1
 8006c92:	d1c7      	bne.n	8006c24 <__sflush_r+0x34>
 8006c94:	682b      	ldr	r3, [r5, #0]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d0c4      	beq.n	8006c24 <__sflush_r+0x34>
 8006c9a:	2b1d      	cmp	r3, #29
 8006c9c:	d001      	beq.n	8006ca2 <__sflush_r+0xb2>
 8006c9e:	2b16      	cmp	r3, #22
 8006ca0:	d101      	bne.n	8006ca6 <__sflush_r+0xb6>
 8006ca2:	602f      	str	r7, [r5, #0]
 8006ca4:	e7b1      	b.n	8006c0a <__sflush_r+0x1a>
 8006ca6:	89a3      	ldrh	r3, [r4, #12]
 8006ca8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006cac:	81a3      	strh	r3, [r4, #12]
 8006cae:	e7ad      	b.n	8006c0c <__sflush_r+0x1c>
 8006cb0:	690f      	ldr	r7, [r1, #16]
 8006cb2:	2f00      	cmp	r7, #0
 8006cb4:	d0a9      	beq.n	8006c0a <__sflush_r+0x1a>
 8006cb6:	0793      	lsls	r3, r2, #30
 8006cb8:	680e      	ldr	r6, [r1, #0]
 8006cba:	bf08      	it	eq
 8006cbc:	694b      	ldreq	r3, [r1, #20]
 8006cbe:	600f      	str	r7, [r1, #0]
 8006cc0:	bf18      	it	ne
 8006cc2:	2300      	movne	r3, #0
 8006cc4:	eba6 0807 	sub.w	r8, r6, r7
 8006cc8:	608b      	str	r3, [r1, #8]
 8006cca:	f1b8 0f00 	cmp.w	r8, #0
 8006cce:	dd9c      	ble.n	8006c0a <__sflush_r+0x1a>
 8006cd0:	6a21      	ldr	r1, [r4, #32]
 8006cd2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006cd4:	4643      	mov	r3, r8
 8006cd6:	463a      	mov	r2, r7
 8006cd8:	4628      	mov	r0, r5
 8006cda:	47b0      	blx	r6
 8006cdc:	2800      	cmp	r0, #0
 8006cde:	dc06      	bgt.n	8006cee <__sflush_r+0xfe>
 8006ce0:	89a3      	ldrh	r3, [r4, #12]
 8006ce2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ce6:	81a3      	strh	r3, [r4, #12]
 8006ce8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006cec:	e78e      	b.n	8006c0c <__sflush_r+0x1c>
 8006cee:	4407      	add	r7, r0
 8006cf0:	eba8 0800 	sub.w	r8, r8, r0
 8006cf4:	e7e9      	b.n	8006cca <__sflush_r+0xda>
 8006cf6:	bf00      	nop
 8006cf8:	20400001 	.word	0x20400001

08006cfc <_fflush_r>:
 8006cfc:	b538      	push	{r3, r4, r5, lr}
 8006cfe:	690b      	ldr	r3, [r1, #16]
 8006d00:	4605      	mov	r5, r0
 8006d02:	460c      	mov	r4, r1
 8006d04:	b913      	cbnz	r3, 8006d0c <_fflush_r+0x10>
 8006d06:	2500      	movs	r5, #0
 8006d08:	4628      	mov	r0, r5
 8006d0a:	bd38      	pop	{r3, r4, r5, pc}
 8006d0c:	b118      	cbz	r0, 8006d16 <_fflush_r+0x1a>
 8006d0e:	6983      	ldr	r3, [r0, #24]
 8006d10:	b90b      	cbnz	r3, 8006d16 <_fflush_r+0x1a>
 8006d12:	f000 f887 	bl	8006e24 <__sinit>
 8006d16:	4b14      	ldr	r3, [pc, #80]	; (8006d68 <_fflush_r+0x6c>)
 8006d18:	429c      	cmp	r4, r3
 8006d1a:	d11b      	bne.n	8006d54 <_fflush_r+0x58>
 8006d1c:	686c      	ldr	r4, [r5, #4]
 8006d1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d0ef      	beq.n	8006d06 <_fflush_r+0xa>
 8006d26:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006d28:	07d0      	lsls	r0, r2, #31
 8006d2a:	d404      	bmi.n	8006d36 <_fflush_r+0x3a>
 8006d2c:	0599      	lsls	r1, r3, #22
 8006d2e:	d402      	bmi.n	8006d36 <_fflush_r+0x3a>
 8006d30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d32:	f000 f927 	bl	8006f84 <__retarget_lock_acquire_recursive>
 8006d36:	4628      	mov	r0, r5
 8006d38:	4621      	mov	r1, r4
 8006d3a:	f7ff ff59 	bl	8006bf0 <__sflush_r>
 8006d3e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006d40:	07da      	lsls	r2, r3, #31
 8006d42:	4605      	mov	r5, r0
 8006d44:	d4e0      	bmi.n	8006d08 <_fflush_r+0xc>
 8006d46:	89a3      	ldrh	r3, [r4, #12]
 8006d48:	059b      	lsls	r3, r3, #22
 8006d4a:	d4dd      	bmi.n	8006d08 <_fflush_r+0xc>
 8006d4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d4e:	f000 f91a 	bl	8006f86 <__retarget_lock_release_recursive>
 8006d52:	e7d9      	b.n	8006d08 <_fflush_r+0xc>
 8006d54:	4b05      	ldr	r3, [pc, #20]	; (8006d6c <_fflush_r+0x70>)
 8006d56:	429c      	cmp	r4, r3
 8006d58:	d101      	bne.n	8006d5e <_fflush_r+0x62>
 8006d5a:	68ac      	ldr	r4, [r5, #8]
 8006d5c:	e7df      	b.n	8006d1e <_fflush_r+0x22>
 8006d5e:	4b04      	ldr	r3, [pc, #16]	; (8006d70 <_fflush_r+0x74>)
 8006d60:	429c      	cmp	r4, r3
 8006d62:	bf08      	it	eq
 8006d64:	68ec      	ldreq	r4, [r5, #12]
 8006d66:	e7da      	b.n	8006d1e <_fflush_r+0x22>
 8006d68:	08007ae4 	.word	0x08007ae4
 8006d6c:	08007b04 	.word	0x08007b04
 8006d70:	08007ac4 	.word	0x08007ac4

08006d74 <std>:
 8006d74:	2300      	movs	r3, #0
 8006d76:	b510      	push	{r4, lr}
 8006d78:	4604      	mov	r4, r0
 8006d7a:	e9c0 3300 	strd	r3, r3, [r0]
 8006d7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006d82:	6083      	str	r3, [r0, #8]
 8006d84:	8181      	strh	r1, [r0, #12]
 8006d86:	6643      	str	r3, [r0, #100]	; 0x64
 8006d88:	81c2      	strh	r2, [r0, #14]
 8006d8a:	6183      	str	r3, [r0, #24]
 8006d8c:	4619      	mov	r1, r3
 8006d8e:	2208      	movs	r2, #8
 8006d90:	305c      	adds	r0, #92	; 0x5c
 8006d92:	f7fd f971 	bl	8004078 <memset>
 8006d96:	4b05      	ldr	r3, [pc, #20]	; (8006dac <std+0x38>)
 8006d98:	6263      	str	r3, [r4, #36]	; 0x24
 8006d9a:	4b05      	ldr	r3, [pc, #20]	; (8006db0 <std+0x3c>)
 8006d9c:	62a3      	str	r3, [r4, #40]	; 0x28
 8006d9e:	4b05      	ldr	r3, [pc, #20]	; (8006db4 <std+0x40>)
 8006da0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006da2:	4b05      	ldr	r3, [pc, #20]	; (8006db8 <std+0x44>)
 8006da4:	6224      	str	r4, [r4, #32]
 8006da6:	6323      	str	r3, [r4, #48]	; 0x30
 8006da8:	bd10      	pop	{r4, pc}
 8006daa:	bf00      	nop
 8006dac:	080044f5 	.word	0x080044f5
 8006db0:	08004517 	.word	0x08004517
 8006db4:	0800454f 	.word	0x0800454f
 8006db8:	08004573 	.word	0x08004573

08006dbc <_cleanup_r>:
 8006dbc:	4901      	ldr	r1, [pc, #4]	; (8006dc4 <_cleanup_r+0x8>)
 8006dbe:	f000 b8c1 	b.w	8006f44 <_fwalk_reent>
 8006dc2:	bf00      	nop
 8006dc4:	08006cfd 	.word	0x08006cfd

08006dc8 <__sfmoreglue>:
 8006dc8:	b570      	push	{r4, r5, r6, lr}
 8006dca:	2268      	movs	r2, #104	; 0x68
 8006dcc:	1e4d      	subs	r5, r1, #1
 8006dce:	4355      	muls	r5, r2
 8006dd0:	460e      	mov	r6, r1
 8006dd2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006dd6:	f7ff fb3b 	bl	8006450 <_malloc_r>
 8006dda:	4604      	mov	r4, r0
 8006ddc:	b140      	cbz	r0, 8006df0 <__sfmoreglue+0x28>
 8006dde:	2100      	movs	r1, #0
 8006de0:	e9c0 1600 	strd	r1, r6, [r0]
 8006de4:	300c      	adds	r0, #12
 8006de6:	60a0      	str	r0, [r4, #8]
 8006de8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006dec:	f7fd f944 	bl	8004078 <memset>
 8006df0:	4620      	mov	r0, r4
 8006df2:	bd70      	pop	{r4, r5, r6, pc}

08006df4 <__sfp_lock_acquire>:
 8006df4:	4801      	ldr	r0, [pc, #4]	; (8006dfc <__sfp_lock_acquire+0x8>)
 8006df6:	f000 b8c5 	b.w	8006f84 <__retarget_lock_acquire_recursive>
 8006dfa:	bf00      	nop
 8006dfc:	2000040d 	.word	0x2000040d

08006e00 <__sfp_lock_release>:
 8006e00:	4801      	ldr	r0, [pc, #4]	; (8006e08 <__sfp_lock_release+0x8>)
 8006e02:	f000 b8c0 	b.w	8006f86 <__retarget_lock_release_recursive>
 8006e06:	bf00      	nop
 8006e08:	2000040d 	.word	0x2000040d

08006e0c <__sinit_lock_acquire>:
 8006e0c:	4801      	ldr	r0, [pc, #4]	; (8006e14 <__sinit_lock_acquire+0x8>)
 8006e0e:	f000 b8b9 	b.w	8006f84 <__retarget_lock_acquire_recursive>
 8006e12:	bf00      	nop
 8006e14:	2000040e 	.word	0x2000040e

08006e18 <__sinit_lock_release>:
 8006e18:	4801      	ldr	r0, [pc, #4]	; (8006e20 <__sinit_lock_release+0x8>)
 8006e1a:	f000 b8b4 	b.w	8006f86 <__retarget_lock_release_recursive>
 8006e1e:	bf00      	nop
 8006e20:	2000040e 	.word	0x2000040e

08006e24 <__sinit>:
 8006e24:	b510      	push	{r4, lr}
 8006e26:	4604      	mov	r4, r0
 8006e28:	f7ff fff0 	bl	8006e0c <__sinit_lock_acquire>
 8006e2c:	69a3      	ldr	r3, [r4, #24]
 8006e2e:	b11b      	cbz	r3, 8006e38 <__sinit+0x14>
 8006e30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e34:	f7ff bff0 	b.w	8006e18 <__sinit_lock_release>
 8006e38:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006e3c:	6523      	str	r3, [r4, #80]	; 0x50
 8006e3e:	4b13      	ldr	r3, [pc, #76]	; (8006e8c <__sinit+0x68>)
 8006e40:	4a13      	ldr	r2, [pc, #76]	; (8006e90 <__sinit+0x6c>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	62a2      	str	r2, [r4, #40]	; 0x28
 8006e46:	42a3      	cmp	r3, r4
 8006e48:	bf04      	itt	eq
 8006e4a:	2301      	moveq	r3, #1
 8006e4c:	61a3      	streq	r3, [r4, #24]
 8006e4e:	4620      	mov	r0, r4
 8006e50:	f000 f820 	bl	8006e94 <__sfp>
 8006e54:	6060      	str	r0, [r4, #4]
 8006e56:	4620      	mov	r0, r4
 8006e58:	f000 f81c 	bl	8006e94 <__sfp>
 8006e5c:	60a0      	str	r0, [r4, #8]
 8006e5e:	4620      	mov	r0, r4
 8006e60:	f000 f818 	bl	8006e94 <__sfp>
 8006e64:	2200      	movs	r2, #0
 8006e66:	60e0      	str	r0, [r4, #12]
 8006e68:	2104      	movs	r1, #4
 8006e6a:	6860      	ldr	r0, [r4, #4]
 8006e6c:	f7ff ff82 	bl	8006d74 <std>
 8006e70:	68a0      	ldr	r0, [r4, #8]
 8006e72:	2201      	movs	r2, #1
 8006e74:	2109      	movs	r1, #9
 8006e76:	f7ff ff7d 	bl	8006d74 <std>
 8006e7a:	68e0      	ldr	r0, [r4, #12]
 8006e7c:	2202      	movs	r2, #2
 8006e7e:	2112      	movs	r1, #18
 8006e80:	f7ff ff78 	bl	8006d74 <std>
 8006e84:	2301      	movs	r3, #1
 8006e86:	61a3      	str	r3, [r4, #24]
 8006e88:	e7d2      	b.n	8006e30 <__sinit+0xc>
 8006e8a:	bf00      	nop
 8006e8c:	080076f0 	.word	0x080076f0
 8006e90:	08006dbd 	.word	0x08006dbd

08006e94 <__sfp>:
 8006e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e96:	4607      	mov	r7, r0
 8006e98:	f7ff ffac 	bl	8006df4 <__sfp_lock_acquire>
 8006e9c:	4b1e      	ldr	r3, [pc, #120]	; (8006f18 <__sfp+0x84>)
 8006e9e:	681e      	ldr	r6, [r3, #0]
 8006ea0:	69b3      	ldr	r3, [r6, #24]
 8006ea2:	b913      	cbnz	r3, 8006eaa <__sfp+0x16>
 8006ea4:	4630      	mov	r0, r6
 8006ea6:	f7ff ffbd 	bl	8006e24 <__sinit>
 8006eaa:	3648      	adds	r6, #72	; 0x48
 8006eac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006eb0:	3b01      	subs	r3, #1
 8006eb2:	d503      	bpl.n	8006ebc <__sfp+0x28>
 8006eb4:	6833      	ldr	r3, [r6, #0]
 8006eb6:	b30b      	cbz	r3, 8006efc <__sfp+0x68>
 8006eb8:	6836      	ldr	r6, [r6, #0]
 8006eba:	e7f7      	b.n	8006eac <__sfp+0x18>
 8006ebc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006ec0:	b9d5      	cbnz	r5, 8006ef8 <__sfp+0x64>
 8006ec2:	4b16      	ldr	r3, [pc, #88]	; (8006f1c <__sfp+0x88>)
 8006ec4:	60e3      	str	r3, [r4, #12]
 8006ec6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006eca:	6665      	str	r5, [r4, #100]	; 0x64
 8006ecc:	f000 f859 	bl	8006f82 <__retarget_lock_init_recursive>
 8006ed0:	f7ff ff96 	bl	8006e00 <__sfp_lock_release>
 8006ed4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006ed8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006edc:	6025      	str	r5, [r4, #0]
 8006ede:	61a5      	str	r5, [r4, #24]
 8006ee0:	2208      	movs	r2, #8
 8006ee2:	4629      	mov	r1, r5
 8006ee4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006ee8:	f7fd f8c6 	bl	8004078 <memset>
 8006eec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006ef0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006ef4:	4620      	mov	r0, r4
 8006ef6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ef8:	3468      	adds	r4, #104	; 0x68
 8006efa:	e7d9      	b.n	8006eb0 <__sfp+0x1c>
 8006efc:	2104      	movs	r1, #4
 8006efe:	4638      	mov	r0, r7
 8006f00:	f7ff ff62 	bl	8006dc8 <__sfmoreglue>
 8006f04:	4604      	mov	r4, r0
 8006f06:	6030      	str	r0, [r6, #0]
 8006f08:	2800      	cmp	r0, #0
 8006f0a:	d1d5      	bne.n	8006eb8 <__sfp+0x24>
 8006f0c:	f7ff ff78 	bl	8006e00 <__sfp_lock_release>
 8006f10:	230c      	movs	r3, #12
 8006f12:	603b      	str	r3, [r7, #0]
 8006f14:	e7ee      	b.n	8006ef4 <__sfp+0x60>
 8006f16:	bf00      	nop
 8006f18:	080076f0 	.word	0x080076f0
 8006f1c:	ffff0001 	.word	0xffff0001

08006f20 <fiprintf>:
 8006f20:	b40e      	push	{r1, r2, r3}
 8006f22:	b503      	push	{r0, r1, lr}
 8006f24:	4601      	mov	r1, r0
 8006f26:	ab03      	add	r3, sp, #12
 8006f28:	4805      	ldr	r0, [pc, #20]	; (8006f40 <fiprintf+0x20>)
 8006f2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f2e:	6800      	ldr	r0, [r0, #0]
 8006f30:	9301      	str	r3, [sp, #4]
 8006f32:	f000 f8fb 	bl	800712c <_vfiprintf_r>
 8006f36:	b002      	add	sp, #8
 8006f38:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f3c:	b003      	add	sp, #12
 8006f3e:	4770      	bx	lr
 8006f40:	2000000c 	.word	0x2000000c

08006f44 <_fwalk_reent>:
 8006f44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f48:	4606      	mov	r6, r0
 8006f4a:	4688      	mov	r8, r1
 8006f4c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006f50:	2700      	movs	r7, #0
 8006f52:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006f56:	f1b9 0901 	subs.w	r9, r9, #1
 8006f5a:	d505      	bpl.n	8006f68 <_fwalk_reent+0x24>
 8006f5c:	6824      	ldr	r4, [r4, #0]
 8006f5e:	2c00      	cmp	r4, #0
 8006f60:	d1f7      	bne.n	8006f52 <_fwalk_reent+0xe>
 8006f62:	4638      	mov	r0, r7
 8006f64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f68:	89ab      	ldrh	r3, [r5, #12]
 8006f6a:	2b01      	cmp	r3, #1
 8006f6c:	d907      	bls.n	8006f7e <_fwalk_reent+0x3a>
 8006f6e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006f72:	3301      	adds	r3, #1
 8006f74:	d003      	beq.n	8006f7e <_fwalk_reent+0x3a>
 8006f76:	4629      	mov	r1, r5
 8006f78:	4630      	mov	r0, r6
 8006f7a:	47c0      	blx	r8
 8006f7c:	4307      	orrs	r7, r0
 8006f7e:	3568      	adds	r5, #104	; 0x68
 8006f80:	e7e9      	b.n	8006f56 <_fwalk_reent+0x12>

08006f82 <__retarget_lock_init_recursive>:
 8006f82:	4770      	bx	lr

08006f84 <__retarget_lock_acquire_recursive>:
 8006f84:	4770      	bx	lr

08006f86 <__retarget_lock_release_recursive>:
 8006f86:	4770      	bx	lr

08006f88 <malloc>:
 8006f88:	4b02      	ldr	r3, [pc, #8]	; (8006f94 <malloc+0xc>)
 8006f8a:	4601      	mov	r1, r0
 8006f8c:	6818      	ldr	r0, [r3, #0]
 8006f8e:	f7ff ba5f 	b.w	8006450 <_malloc_r>
 8006f92:	bf00      	nop
 8006f94:	2000000c 	.word	0x2000000c

08006f98 <memmove>:
 8006f98:	4288      	cmp	r0, r1
 8006f9a:	b510      	push	{r4, lr}
 8006f9c:	eb01 0402 	add.w	r4, r1, r2
 8006fa0:	d902      	bls.n	8006fa8 <memmove+0x10>
 8006fa2:	4284      	cmp	r4, r0
 8006fa4:	4623      	mov	r3, r4
 8006fa6:	d807      	bhi.n	8006fb8 <memmove+0x20>
 8006fa8:	1e43      	subs	r3, r0, #1
 8006faa:	42a1      	cmp	r1, r4
 8006fac:	d008      	beq.n	8006fc0 <memmove+0x28>
 8006fae:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006fb2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006fb6:	e7f8      	b.n	8006faa <memmove+0x12>
 8006fb8:	4402      	add	r2, r0
 8006fba:	4601      	mov	r1, r0
 8006fbc:	428a      	cmp	r2, r1
 8006fbe:	d100      	bne.n	8006fc2 <memmove+0x2a>
 8006fc0:	bd10      	pop	{r4, pc}
 8006fc2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006fc6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006fca:	e7f7      	b.n	8006fbc <memmove+0x24>

08006fcc <__malloc_lock>:
 8006fcc:	4801      	ldr	r0, [pc, #4]	; (8006fd4 <__malloc_lock+0x8>)
 8006fce:	f7ff bfd9 	b.w	8006f84 <__retarget_lock_acquire_recursive>
 8006fd2:	bf00      	nop
 8006fd4:	2000040c 	.word	0x2000040c

08006fd8 <__malloc_unlock>:
 8006fd8:	4801      	ldr	r0, [pc, #4]	; (8006fe0 <__malloc_unlock+0x8>)
 8006fda:	f7ff bfd4 	b.w	8006f86 <__retarget_lock_release_recursive>
 8006fde:	bf00      	nop
 8006fe0:	2000040c 	.word	0x2000040c

08006fe4 <_free_r>:
 8006fe4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006fe6:	2900      	cmp	r1, #0
 8006fe8:	d044      	beq.n	8007074 <_free_r+0x90>
 8006fea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006fee:	9001      	str	r0, [sp, #4]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	f1a1 0404 	sub.w	r4, r1, #4
 8006ff6:	bfb8      	it	lt
 8006ff8:	18e4      	addlt	r4, r4, r3
 8006ffa:	f7ff ffe7 	bl	8006fcc <__malloc_lock>
 8006ffe:	4a1e      	ldr	r2, [pc, #120]	; (8007078 <_free_r+0x94>)
 8007000:	9801      	ldr	r0, [sp, #4]
 8007002:	6813      	ldr	r3, [r2, #0]
 8007004:	b933      	cbnz	r3, 8007014 <_free_r+0x30>
 8007006:	6063      	str	r3, [r4, #4]
 8007008:	6014      	str	r4, [r2, #0]
 800700a:	b003      	add	sp, #12
 800700c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007010:	f7ff bfe2 	b.w	8006fd8 <__malloc_unlock>
 8007014:	42a3      	cmp	r3, r4
 8007016:	d908      	bls.n	800702a <_free_r+0x46>
 8007018:	6825      	ldr	r5, [r4, #0]
 800701a:	1961      	adds	r1, r4, r5
 800701c:	428b      	cmp	r3, r1
 800701e:	bf01      	itttt	eq
 8007020:	6819      	ldreq	r1, [r3, #0]
 8007022:	685b      	ldreq	r3, [r3, #4]
 8007024:	1949      	addeq	r1, r1, r5
 8007026:	6021      	streq	r1, [r4, #0]
 8007028:	e7ed      	b.n	8007006 <_free_r+0x22>
 800702a:	461a      	mov	r2, r3
 800702c:	685b      	ldr	r3, [r3, #4]
 800702e:	b10b      	cbz	r3, 8007034 <_free_r+0x50>
 8007030:	42a3      	cmp	r3, r4
 8007032:	d9fa      	bls.n	800702a <_free_r+0x46>
 8007034:	6811      	ldr	r1, [r2, #0]
 8007036:	1855      	adds	r5, r2, r1
 8007038:	42a5      	cmp	r5, r4
 800703a:	d10b      	bne.n	8007054 <_free_r+0x70>
 800703c:	6824      	ldr	r4, [r4, #0]
 800703e:	4421      	add	r1, r4
 8007040:	1854      	adds	r4, r2, r1
 8007042:	42a3      	cmp	r3, r4
 8007044:	6011      	str	r1, [r2, #0]
 8007046:	d1e0      	bne.n	800700a <_free_r+0x26>
 8007048:	681c      	ldr	r4, [r3, #0]
 800704a:	685b      	ldr	r3, [r3, #4]
 800704c:	6053      	str	r3, [r2, #4]
 800704e:	4421      	add	r1, r4
 8007050:	6011      	str	r1, [r2, #0]
 8007052:	e7da      	b.n	800700a <_free_r+0x26>
 8007054:	d902      	bls.n	800705c <_free_r+0x78>
 8007056:	230c      	movs	r3, #12
 8007058:	6003      	str	r3, [r0, #0]
 800705a:	e7d6      	b.n	800700a <_free_r+0x26>
 800705c:	6825      	ldr	r5, [r4, #0]
 800705e:	1961      	adds	r1, r4, r5
 8007060:	428b      	cmp	r3, r1
 8007062:	bf04      	itt	eq
 8007064:	6819      	ldreq	r1, [r3, #0]
 8007066:	685b      	ldreq	r3, [r3, #4]
 8007068:	6063      	str	r3, [r4, #4]
 800706a:	bf04      	itt	eq
 800706c:	1949      	addeq	r1, r1, r5
 800706e:	6021      	streq	r1, [r4, #0]
 8007070:	6054      	str	r4, [r2, #4]
 8007072:	e7ca      	b.n	800700a <_free_r+0x26>
 8007074:	b003      	add	sp, #12
 8007076:	bd30      	pop	{r4, r5, pc}
 8007078:	20000400 	.word	0x20000400

0800707c <_realloc_r>:
 800707c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007080:	4680      	mov	r8, r0
 8007082:	4614      	mov	r4, r2
 8007084:	460e      	mov	r6, r1
 8007086:	b921      	cbnz	r1, 8007092 <_realloc_r+0x16>
 8007088:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800708c:	4611      	mov	r1, r2
 800708e:	f7ff b9df 	b.w	8006450 <_malloc_r>
 8007092:	b92a      	cbnz	r2, 80070a0 <_realloc_r+0x24>
 8007094:	f7ff ffa6 	bl	8006fe4 <_free_r>
 8007098:	4625      	mov	r5, r4
 800709a:	4628      	mov	r0, r5
 800709c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070a0:	f000 faa0 	bl	80075e4 <_malloc_usable_size_r>
 80070a4:	4284      	cmp	r4, r0
 80070a6:	4607      	mov	r7, r0
 80070a8:	d802      	bhi.n	80070b0 <_realloc_r+0x34>
 80070aa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80070ae:	d812      	bhi.n	80070d6 <_realloc_r+0x5a>
 80070b0:	4621      	mov	r1, r4
 80070b2:	4640      	mov	r0, r8
 80070b4:	f7ff f9cc 	bl	8006450 <_malloc_r>
 80070b8:	4605      	mov	r5, r0
 80070ba:	2800      	cmp	r0, #0
 80070bc:	d0ed      	beq.n	800709a <_realloc_r+0x1e>
 80070be:	42bc      	cmp	r4, r7
 80070c0:	4622      	mov	r2, r4
 80070c2:	4631      	mov	r1, r6
 80070c4:	bf28      	it	cs
 80070c6:	463a      	movcs	r2, r7
 80070c8:	f7fe fcbc 	bl	8005a44 <memcpy>
 80070cc:	4631      	mov	r1, r6
 80070ce:	4640      	mov	r0, r8
 80070d0:	f7ff ff88 	bl	8006fe4 <_free_r>
 80070d4:	e7e1      	b.n	800709a <_realloc_r+0x1e>
 80070d6:	4635      	mov	r5, r6
 80070d8:	e7df      	b.n	800709a <_realloc_r+0x1e>

080070da <__sfputc_r>:
 80070da:	6893      	ldr	r3, [r2, #8]
 80070dc:	3b01      	subs	r3, #1
 80070de:	2b00      	cmp	r3, #0
 80070e0:	b410      	push	{r4}
 80070e2:	6093      	str	r3, [r2, #8]
 80070e4:	da08      	bge.n	80070f8 <__sfputc_r+0x1e>
 80070e6:	6994      	ldr	r4, [r2, #24]
 80070e8:	42a3      	cmp	r3, r4
 80070ea:	db01      	blt.n	80070f0 <__sfputc_r+0x16>
 80070ec:	290a      	cmp	r1, #10
 80070ee:	d103      	bne.n	80070f8 <__sfputc_r+0x1e>
 80070f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80070f4:	f000 b94a 	b.w	800738c <__swbuf_r>
 80070f8:	6813      	ldr	r3, [r2, #0]
 80070fa:	1c58      	adds	r0, r3, #1
 80070fc:	6010      	str	r0, [r2, #0]
 80070fe:	7019      	strb	r1, [r3, #0]
 8007100:	4608      	mov	r0, r1
 8007102:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007106:	4770      	bx	lr

08007108 <__sfputs_r>:
 8007108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800710a:	4606      	mov	r6, r0
 800710c:	460f      	mov	r7, r1
 800710e:	4614      	mov	r4, r2
 8007110:	18d5      	adds	r5, r2, r3
 8007112:	42ac      	cmp	r4, r5
 8007114:	d101      	bne.n	800711a <__sfputs_r+0x12>
 8007116:	2000      	movs	r0, #0
 8007118:	e007      	b.n	800712a <__sfputs_r+0x22>
 800711a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800711e:	463a      	mov	r2, r7
 8007120:	4630      	mov	r0, r6
 8007122:	f7ff ffda 	bl	80070da <__sfputc_r>
 8007126:	1c43      	adds	r3, r0, #1
 8007128:	d1f3      	bne.n	8007112 <__sfputs_r+0xa>
 800712a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800712c <_vfiprintf_r>:
 800712c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007130:	460d      	mov	r5, r1
 8007132:	b09d      	sub	sp, #116	; 0x74
 8007134:	4614      	mov	r4, r2
 8007136:	4698      	mov	r8, r3
 8007138:	4606      	mov	r6, r0
 800713a:	b118      	cbz	r0, 8007144 <_vfiprintf_r+0x18>
 800713c:	6983      	ldr	r3, [r0, #24]
 800713e:	b90b      	cbnz	r3, 8007144 <_vfiprintf_r+0x18>
 8007140:	f7ff fe70 	bl	8006e24 <__sinit>
 8007144:	4b89      	ldr	r3, [pc, #548]	; (800736c <_vfiprintf_r+0x240>)
 8007146:	429d      	cmp	r5, r3
 8007148:	d11b      	bne.n	8007182 <_vfiprintf_r+0x56>
 800714a:	6875      	ldr	r5, [r6, #4]
 800714c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800714e:	07d9      	lsls	r1, r3, #31
 8007150:	d405      	bmi.n	800715e <_vfiprintf_r+0x32>
 8007152:	89ab      	ldrh	r3, [r5, #12]
 8007154:	059a      	lsls	r2, r3, #22
 8007156:	d402      	bmi.n	800715e <_vfiprintf_r+0x32>
 8007158:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800715a:	f7ff ff13 	bl	8006f84 <__retarget_lock_acquire_recursive>
 800715e:	89ab      	ldrh	r3, [r5, #12]
 8007160:	071b      	lsls	r3, r3, #28
 8007162:	d501      	bpl.n	8007168 <_vfiprintf_r+0x3c>
 8007164:	692b      	ldr	r3, [r5, #16]
 8007166:	b9eb      	cbnz	r3, 80071a4 <_vfiprintf_r+0x78>
 8007168:	4629      	mov	r1, r5
 800716a:	4630      	mov	r0, r6
 800716c:	f000 f960 	bl	8007430 <__swsetup_r>
 8007170:	b1c0      	cbz	r0, 80071a4 <_vfiprintf_r+0x78>
 8007172:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007174:	07dc      	lsls	r4, r3, #31
 8007176:	d50e      	bpl.n	8007196 <_vfiprintf_r+0x6a>
 8007178:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800717c:	b01d      	add	sp, #116	; 0x74
 800717e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007182:	4b7b      	ldr	r3, [pc, #492]	; (8007370 <_vfiprintf_r+0x244>)
 8007184:	429d      	cmp	r5, r3
 8007186:	d101      	bne.n	800718c <_vfiprintf_r+0x60>
 8007188:	68b5      	ldr	r5, [r6, #8]
 800718a:	e7df      	b.n	800714c <_vfiprintf_r+0x20>
 800718c:	4b79      	ldr	r3, [pc, #484]	; (8007374 <_vfiprintf_r+0x248>)
 800718e:	429d      	cmp	r5, r3
 8007190:	bf08      	it	eq
 8007192:	68f5      	ldreq	r5, [r6, #12]
 8007194:	e7da      	b.n	800714c <_vfiprintf_r+0x20>
 8007196:	89ab      	ldrh	r3, [r5, #12]
 8007198:	0598      	lsls	r0, r3, #22
 800719a:	d4ed      	bmi.n	8007178 <_vfiprintf_r+0x4c>
 800719c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800719e:	f7ff fef2 	bl	8006f86 <__retarget_lock_release_recursive>
 80071a2:	e7e9      	b.n	8007178 <_vfiprintf_r+0x4c>
 80071a4:	2300      	movs	r3, #0
 80071a6:	9309      	str	r3, [sp, #36]	; 0x24
 80071a8:	2320      	movs	r3, #32
 80071aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80071ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80071b2:	2330      	movs	r3, #48	; 0x30
 80071b4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007378 <_vfiprintf_r+0x24c>
 80071b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80071bc:	f04f 0901 	mov.w	r9, #1
 80071c0:	4623      	mov	r3, r4
 80071c2:	469a      	mov	sl, r3
 80071c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80071c8:	b10a      	cbz	r2, 80071ce <_vfiprintf_r+0xa2>
 80071ca:	2a25      	cmp	r2, #37	; 0x25
 80071cc:	d1f9      	bne.n	80071c2 <_vfiprintf_r+0x96>
 80071ce:	ebba 0b04 	subs.w	fp, sl, r4
 80071d2:	d00b      	beq.n	80071ec <_vfiprintf_r+0xc0>
 80071d4:	465b      	mov	r3, fp
 80071d6:	4622      	mov	r2, r4
 80071d8:	4629      	mov	r1, r5
 80071da:	4630      	mov	r0, r6
 80071dc:	f7ff ff94 	bl	8007108 <__sfputs_r>
 80071e0:	3001      	adds	r0, #1
 80071e2:	f000 80aa 	beq.w	800733a <_vfiprintf_r+0x20e>
 80071e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80071e8:	445a      	add	r2, fp
 80071ea:	9209      	str	r2, [sp, #36]	; 0x24
 80071ec:	f89a 3000 	ldrb.w	r3, [sl]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	f000 80a2 	beq.w	800733a <_vfiprintf_r+0x20e>
 80071f6:	2300      	movs	r3, #0
 80071f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80071fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007200:	f10a 0a01 	add.w	sl, sl, #1
 8007204:	9304      	str	r3, [sp, #16]
 8007206:	9307      	str	r3, [sp, #28]
 8007208:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800720c:	931a      	str	r3, [sp, #104]	; 0x68
 800720e:	4654      	mov	r4, sl
 8007210:	2205      	movs	r2, #5
 8007212:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007216:	4858      	ldr	r0, [pc, #352]	; (8007378 <_vfiprintf_r+0x24c>)
 8007218:	f7f8 ffe2 	bl	80001e0 <memchr>
 800721c:	9a04      	ldr	r2, [sp, #16]
 800721e:	b9d8      	cbnz	r0, 8007258 <_vfiprintf_r+0x12c>
 8007220:	06d1      	lsls	r1, r2, #27
 8007222:	bf44      	itt	mi
 8007224:	2320      	movmi	r3, #32
 8007226:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800722a:	0713      	lsls	r3, r2, #28
 800722c:	bf44      	itt	mi
 800722e:	232b      	movmi	r3, #43	; 0x2b
 8007230:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007234:	f89a 3000 	ldrb.w	r3, [sl]
 8007238:	2b2a      	cmp	r3, #42	; 0x2a
 800723a:	d015      	beq.n	8007268 <_vfiprintf_r+0x13c>
 800723c:	9a07      	ldr	r2, [sp, #28]
 800723e:	4654      	mov	r4, sl
 8007240:	2000      	movs	r0, #0
 8007242:	f04f 0c0a 	mov.w	ip, #10
 8007246:	4621      	mov	r1, r4
 8007248:	f811 3b01 	ldrb.w	r3, [r1], #1
 800724c:	3b30      	subs	r3, #48	; 0x30
 800724e:	2b09      	cmp	r3, #9
 8007250:	d94e      	bls.n	80072f0 <_vfiprintf_r+0x1c4>
 8007252:	b1b0      	cbz	r0, 8007282 <_vfiprintf_r+0x156>
 8007254:	9207      	str	r2, [sp, #28]
 8007256:	e014      	b.n	8007282 <_vfiprintf_r+0x156>
 8007258:	eba0 0308 	sub.w	r3, r0, r8
 800725c:	fa09 f303 	lsl.w	r3, r9, r3
 8007260:	4313      	orrs	r3, r2
 8007262:	9304      	str	r3, [sp, #16]
 8007264:	46a2      	mov	sl, r4
 8007266:	e7d2      	b.n	800720e <_vfiprintf_r+0xe2>
 8007268:	9b03      	ldr	r3, [sp, #12]
 800726a:	1d19      	adds	r1, r3, #4
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	9103      	str	r1, [sp, #12]
 8007270:	2b00      	cmp	r3, #0
 8007272:	bfbb      	ittet	lt
 8007274:	425b      	neglt	r3, r3
 8007276:	f042 0202 	orrlt.w	r2, r2, #2
 800727a:	9307      	strge	r3, [sp, #28]
 800727c:	9307      	strlt	r3, [sp, #28]
 800727e:	bfb8      	it	lt
 8007280:	9204      	strlt	r2, [sp, #16]
 8007282:	7823      	ldrb	r3, [r4, #0]
 8007284:	2b2e      	cmp	r3, #46	; 0x2e
 8007286:	d10c      	bne.n	80072a2 <_vfiprintf_r+0x176>
 8007288:	7863      	ldrb	r3, [r4, #1]
 800728a:	2b2a      	cmp	r3, #42	; 0x2a
 800728c:	d135      	bne.n	80072fa <_vfiprintf_r+0x1ce>
 800728e:	9b03      	ldr	r3, [sp, #12]
 8007290:	1d1a      	adds	r2, r3, #4
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	9203      	str	r2, [sp, #12]
 8007296:	2b00      	cmp	r3, #0
 8007298:	bfb8      	it	lt
 800729a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800729e:	3402      	adds	r4, #2
 80072a0:	9305      	str	r3, [sp, #20]
 80072a2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007388 <_vfiprintf_r+0x25c>
 80072a6:	7821      	ldrb	r1, [r4, #0]
 80072a8:	2203      	movs	r2, #3
 80072aa:	4650      	mov	r0, sl
 80072ac:	f7f8 ff98 	bl	80001e0 <memchr>
 80072b0:	b140      	cbz	r0, 80072c4 <_vfiprintf_r+0x198>
 80072b2:	2340      	movs	r3, #64	; 0x40
 80072b4:	eba0 000a 	sub.w	r0, r0, sl
 80072b8:	fa03 f000 	lsl.w	r0, r3, r0
 80072bc:	9b04      	ldr	r3, [sp, #16]
 80072be:	4303      	orrs	r3, r0
 80072c0:	3401      	adds	r4, #1
 80072c2:	9304      	str	r3, [sp, #16]
 80072c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072c8:	482c      	ldr	r0, [pc, #176]	; (800737c <_vfiprintf_r+0x250>)
 80072ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80072ce:	2206      	movs	r2, #6
 80072d0:	f7f8 ff86 	bl	80001e0 <memchr>
 80072d4:	2800      	cmp	r0, #0
 80072d6:	d03f      	beq.n	8007358 <_vfiprintf_r+0x22c>
 80072d8:	4b29      	ldr	r3, [pc, #164]	; (8007380 <_vfiprintf_r+0x254>)
 80072da:	bb1b      	cbnz	r3, 8007324 <_vfiprintf_r+0x1f8>
 80072dc:	9b03      	ldr	r3, [sp, #12]
 80072de:	3307      	adds	r3, #7
 80072e0:	f023 0307 	bic.w	r3, r3, #7
 80072e4:	3308      	adds	r3, #8
 80072e6:	9303      	str	r3, [sp, #12]
 80072e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072ea:	443b      	add	r3, r7
 80072ec:	9309      	str	r3, [sp, #36]	; 0x24
 80072ee:	e767      	b.n	80071c0 <_vfiprintf_r+0x94>
 80072f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80072f4:	460c      	mov	r4, r1
 80072f6:	2001      	movs	r0, #1
 80072f8:	e7a5      	b.n	8007246 <_vfiprintf_r+0x11a>
 80072fa:	2300      	movs	r3, #0
 80072fc:	3401      	adds	r4, #1
 80072fe:	9305      	str	r3, [sp, #20]
 8007300:	4619      	mov	r1, r3
 8007302:	f04f 0c0a 	mov.w	ip, #10
 8007306:	4620      	mov	r0, r4
 8007308:	f810 2b01 	ldrb.w	r2, [r0], #1
 800730c:	3a30      	subs	r2, #48	; 0x30
 800730e:	2a09      	cmp	r2, #9
 8007310:	d903      	bls.n	800731a <_vfiprintf_r+0x1ee>
 8007312:	2b00      	cmp	r3, #0
 8007314:	d0c5      	beq.n	80072a2 <_vfiprintf_r+0x176>
 8007316:	9105      	str	r1, [sp, #20]
 8007318:	e7c3      	b.n	80072a2 <_vfiprintf_r+0x176>
 800731a:	fb0c 2101 	mla	r1, ip, r1, r2
 800731e:	4604      	mov	r4, r0
 8007320:	2301      	movs	r3, #1
 8007322:	e7f0      	b.n	8007306 <_vfiprintf_r+0x1da>
 8007324:	ab03      	add	r3, sp, #12
 8007326:	9300      	str	r3, [sp, #0]
 8007328:	462a      	mov	r2, r5
 800732a:	4b16      	ldr	r3, [pc, #88]	; (8007384 <_vfiprintf_r+0x258>)
 800732c:	a904      	add	r1, sp, #16
 800732e:	4630      	mov	r0, r6
 8007330:	f3af 8000 	nop.w
 8007334:	4607      	mov	r7, r0
 8007336:	1c78      	adds	r0, r7, #1
 8007338:	d1d6      	bne.n	80072e8 <_vfiprintf_r+0x1bc>
 800733a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800733c:	07d9      	lsls	r1, r3, #31
 800733e:	d405      	bmi.n	800734c <_vfiprintf_r+0x220>
 8007340:	89ab      	ldrh	r3, [r5, #12]
 8007342:	059a      	lsls	r2, r3, #22
 8007344:	d402      	bmi.n	800734c <_vfiprintf_r+0x220>
 8007346:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007348:	f7ff fe1d 	bl	8006f86 <__retarget_lock_release_recursive>
 800734c:	89ab      	ldrh	r3, [r5, #12]
 800734e:	065b      	lsls	r3, r3, #25
 8007350:	f53f af12 	bmi.w	8007178 <_vfiprintf_r+0x4c>
 8007354:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007356:	e711      	b.n	800717c <_vfiprintf_r+0x50>
 8007358:	ab03      	add	r3, sp, #12
 800735a:	9300      	str	r3, [sp, #0]
 800735c:	462a      	mov	r2, r5
 800735e:	4b09      	ldr	r3, [pc, #36]	; (8007384 <_vfiprintf_r+0x258>)
 8007360:	a904      	add	r1, sp, #16
 8007362:	4630      	mov	r0, r6
 8007364:	f7ff fab2 	bl	80068cc <_printf_i>
 8007368:	e7e4      	b.n	8007334 <_vfiprintf_r+0x208>
 800736a:	bf00      	nop
 800736c:	08007ae4 	.word	0x08007ae4
 8007370:	08007b04 	.word	0x08007b04
 8007374:	08007ac4 	.word	0x08007ac4
 8007378:	08007a54 	.word	0x08007a54
 800737c:	08007a5e 	.word	0x08007a5e
 8007380:	00000000 	.word	0x00000000
 8007384:	08007109 	.word	0x08007109
 8007388:	08007a5a 	.word	0x08007a5a

0800738c <__swbuf_r>:
 800738c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800738e:	460e      	mov	r6, r1
 8007390:	4614      	mov	r4, r2
 8007392:	4605      	mov	r5, r0
 8007394:	b118      	cbz	r0, 800739e <__swbuf_r+0x12>
 8007396:	6983      	ldr	r3, [r0, #24]
 8007398:	b90b      	cbnz	r3, 800739e <__swbuf_r+0x12>
 800739a:	f7ff fd43 	bl	8006e24 <__sinit>
 800739e:	4b21      	ldr	r3, [pc, #132]	; (8007424 <__swbuf_r+0x98>)
 80073a0:	429c      	cmp	r4, r3
 80073a2:	d12b      	bne.n	80073fc <__swbuf_r+0x70>
 80073a4:	686c      	ldr	r4, [r5, #4]
 80073a6:	69a3      	ldr	r3, [r4, #24]
 80073a8:	60a3      	str	r3, [r4, #8]
 80073aa:	89a3      	ldrh	r3, [r4, #12]
 80073ac:	071a      	lsls	r2, r3, #28
 80073ae:	d52f      	bpl.n	8007410 <__swbuf_r+0x84>
 80073b0:	6923      	ldr	r3, [r4, #16]
 80073b2:	b36b      	cbz	r3, 8007410 <__swbuf_r+0x84>
 80073b4:	6923      	ldr	r3, [r4, #16]
 80073b6:	6820      	ldr	r0, [r4, #0]
 80073b8:	1ac0      	subs	r0, r0, r3
 80073ba:	6963      	ldr	r3, [r4, #20]
 80073bc:	b2f6      	uxtb	r6, r6
 80073be:	4283      	cmp	r3, r0
 80073c0:	4637      	mov	r7, r6
 80073c2:	dc04      	bgt.n	80073ce <__swbuf_r+0x42>
 80073c4:	4621      	mov	r1, r4
 80073c6:	4628      	mov	r0, r5
 80073c8:	f7ff fc98 	bl	8006cfc <_fflush_r>
 80073cc:	bb30      	cbnz	r0, 800741c <__swbuf_r+0x90>
 80073ce:	68a3      	ldr	r3, [r4, #8]
 80073d0:	3b01      	subs	r3, #1
 80073d2:	60a3      	str	r3, [r4, #8]
 80073d4:	6823      	ldr	r3, [r4, #0]
 80073d6:	1c5a      	adds	r2, r3, #1
 80073d8:	6022      	str	r2, [r4, #0]
 80073da:	701e      	strb	r6, [r3, #0]
 80073dc:	6963      	ldr	r3, [r4, #20]
 80073de:	3001      	adds	r0, #1
 80073e0:	4283      	cmp	r3, r0
 80073e2:	d004      	beq.n	80073ee <__swbuf_r+0x62>
 80073e4:	89a3      	ldrh	r3, [r4, #12]
 80073e6:	07db      	lsls	r3, r3, #31
 80073e8:	d506      	bpl.n	80073f8 <__swbuf_r+0x6c>
 80073ea:	2e0a      	cmp	r6, #10
 80073ec:	d104      	bne.n	80073f8 <__swbuf_r+0x6c>
 80073ee:	4621      	mov	r1, r4
 80073f0:	4628      	mov	r0, r5
 80073f2:	f7ff fc83 	bl	8006cfc <_fflush_r>
 80073f6:	b988      	cbnz	r0, 800741c <__swbuf_r+0x90>
 80073f8:	4638      	mov	r0, r7
 80073fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80073fc:	4b0a      	ldr	r3, [pc, #40]	; (8007428 <__swbuf_r+0x9c>)
 80073fe:	429c      	cmp	r4, r3
 8007400:	d101      	bne.n	8007406 <__swbuf_r+0x7a>
 8007402:	68ac      	ldr	r4, [r5, #8]
 8007404:	e7cf      	b.n	80073a6 <__swbuf_r+0x1a>
 8007406:	4b09      	ldr	r3, [pc, #36]	; (800742c <__swbuf_r+0xa0>)
 8007408:	429c      	cmp	r4, r3
 800740a:	bf08      	it	eq
 800740c:	68ec      	ldreq	r4, [r5, #12]
 800740e:	e7ca      	b.n	80073a6 <__swbuf_r+0x1a>
 8007410:	4621      	mov	r1, r4
 8007412:	4628      	mov	r0, r5
 8007414:	f000 f80c 	bl	8007430 <__swsetup_r>
 8007418:	2800      	cmp	r0, #0
 800741a:	d0cb      	beq.n	80073b4 <__swbuf_r+0x28>
 800741c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007420:	e7ea      	b.n	80073f8 <__swbuf_r+0x6c>
 8007422:	bf00      	nop
 8007424:	08007ae4 	.word	0x08007ae4
 8007428:	08007b04 	.word	0x08007b04
 800742c:	08007ac4 	.word	0x08007ac4

08007430 <__swsetup_r>:
 8007430:	4b32      	ldr	r3, [pc, #200]	; (80074fc <__swsetup_r+0xcc>)
 8007432:	b570      	push	{r4, r5, r6, lr}
 8007434:	681d      	ldr	r5, [r3, #0]
 8007436:	4606      	mov	r6, r0
 8007438:	460c      	mov	r4, r1
 800743a:	b125      	cbz	r5, 8007446 <__swsetup_r+0x16>
 800743c:	69ab      	ldr	r3, [r5, #24]
 800743e:	b913      	cbnz	r3, 8007446 <__swsetup_r+0x16>
 8007440:	4628      	mov	r0, r5
 8007442:	f7ff fcef 	bl	8006e24 <__sinit>
 8007446:	4b2e      	ldr	r3, [pc, #184]	; (8007500 <__swsetup_r+0xd0>)
 8007448:	429c      	cmp	r4, r3
 800744a:	d10f      	bne.n	800746c <__swsetup_r+0x3c>
 800744c:	686c      	ldr	r4, [r5, #4]
 800744e:	89a3      	ldrh	r3, [r4, #12]
 8007450:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007454:	0719      	lsls	r1, r3, #28
 8007456:	d42c      	bmi.n	80074b2 <__swsetup_r+0x82>
 8007458:	06dd      	lsls	r5, r3, #27
 800745a:	d411      	bmi.n	8007480 <__swsetup_r+0x50>
 800745c:	2309      	movs	r3, #9
 800745e:	6033      	str	r3, [r6, #0]
 8007460:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007464:	81a3      	strh	r3, [r4, #12]
 8007466:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800746a:	e03e      	b.n	80074ea <__swsetup_r+0xba>
 800746c:	4b25      	ldr	r3, [pc, #148]	; (8007504 <__swsetup_r+0xd4>)
 800746e:	429c      	cmp	r4, r3
 8007470:	d101      	bne.n	8007476 <__swsetup_r+0x46>
 8007472:	68ac      	ldr	r4, [r5, #8]
 8007474:	e7eb      	b.n	800744e <__swsetup_r+0x1e>
 8007476:	4b24      	ldr	r3, [pc, #144]	; (8007508 <__swsetup_r+0xd8>)
 8007478:	429c      	cmp	r4, r3
 800747a:	bf08      	it	eq
 800747c:	68ec      	ldreq	r4, [r5, #12]
 800747e:	e7e6      	b.n	800744e <__swsetup_r+0x1e>
 8007480:	0758      	lsls	r0, r3, #29
 8007482:	d512      	bpl.n	80074aa <__swsetup_r+0x7a>
 8007484:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007486:	b141      	cbz	r1, 800749a <__swsetup_r+0x6a>
 8007488:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800748c:	4299      	cmp	r1, r3
 800748e:	d002      	beq.n	8007496 <__swsetup_r+0x66>
 8007490:	4630      	mov	r0, r6
 8007492:	f7ff fda7 	bl	8006fe4 <_free_r>
 8007496:	2300      	movs	r3, #0
 8007498:	6363      	str	r3, [r4, #52]	; 0x34
 800749a:	89a3      	ldrh	r3, [r4, #12]
 800749c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80074a0:	81a3      	strh	r3, [r4, #12]
 80074a2:	2300      	movs	r3, #0
 80074a4:	6063      	str	r3, [r4, #4]
 80074a6:	6923      	ldr	r3, [r4, #16]
 80074a8:	6023      	str	r3, [r4, #0]
 80074aa:	89a3      	ldrh	r3, [r4, #12]
 80074ac:	f043 0308 	orr.w	r3, r3, #8
 80074b0:	81a3      	strh	r3, [r4, #12]
 80074b2:	6923      	ldr	r3, [r4, #16]
 80074b4:	b94b      	cbnz	r3, 80074ca <__swsetup_r+0x9a>
 80074b6:	89a3      	ldrh	r3, [r4, #12]
 80074b8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80074bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80074c0:	d003      	beq.n	80074ca <__swsetup_r+0x9a>
 80074c2:	4621      	mov	r1, r4
 80074c4:	4630      	mov	r0, r6
 80074c6:	f000 f84d 	bl	8007564 <__smakebuf_r>
 80074ca:	89a0      	ldrh	r0, [r4, #12]
 80074cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80074d0:	f010 0301 	ands.w	r3, r0, #1
 80074d4:	d00a      	beq.n	80074ec <__swsetup_r+0xbc>
 80074d6:	2300      	movs	r3, #0
 80074d8:	60a3      	str	r3, [r4, #8]
 80074da:	6963      	ldr	r3, [r4, #20]
 80074dc:	425b      	negs	r3, r3
 80074de:	61a3      	str	r3, [r4, #24]
 80074e0:	6923      	ldr	r3, [r4, #16]
 80074e2:	b943      	cbnz	r3, 80074f6 <__swsetup_r+0xc6>
 80074e4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80074e8:	d1ba      	bne.n	8007460 <__swsetup_r+0x30>
 80074ea:	bd70      	pop	{r4, r5, r6, pc}
 80074ec:	0781      	lsls	r1, r0, #30
 80074ee:	bf58      	it	pl
 80074f0:	6963      	ldrpl	r3, [r4, #20]
 80074f2:	60a3      	str	r3, [r4, #8]
 80074f4:	e7f4      	b.n	80074e0 <__swsetup_r+0xb0>
 80074f6:	2000      	movs	r0, #0
 80074f8:	e7f7      	b.n	80074ea <__swsetup_r+0xba>
 80074fa:	bf00      	nop
 80074fc:	2000000c 	.word	0x2000000c
 8007500:	08007ae4 	.word	0x08007ae4
 8007504:	08007b04 	.word	0x08007b04
 8007508:	08007ac4 	.word	0x08007ac4

0800750c <abort>:
 800750c:	b508      	push	{r3, lr}
 800750e:	2006      	movs	r0, #6
 8007510:	f000 f898 	bl	8007644 <raise>
 8007514:	2001      	movs	r0, #1
 8007516:	f7fa fa09 	bl	800192c <_exit>

0800751a <__swhatbuf_r>:
 800751a:	b570      	push	{r4, r5, r6, lr}
 800751c:	460e      	mov	r6, r1
 800751e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007522:	2900      	cmp	r1, #0
 8007524:	b096      	sub	sp, #88	; 0x58
 8007526:	4614      	mov	r4, r2
 8007528:	461d      	mov	r5, r3
 800752a:	da08      	bge.n	800753e <__swhatbuf_r+0x24>
 800752c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007530:	2200      	movs	r2, #0
 8007532:	602a      	str	r2, [r5, #0]
 8007534:	061a      	lsls	r2, r3, #24
 8007536:	d410      	bmi.n	800755a <__swhatbuf_r+0x40>
 8007538:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800753c:	e00e      	b.n	800755c <__swhatbuf_r+0x42>
 800753e:	466a      	mov	r2, sp
 8007540:	f000 f89c 	bl	800767c <_fstat_r>
 8007544:	2800      	cmp	r0, #0
 8007546:	dbf1      	blt.n	800752c <__swhatbuf_r+0x12>
 8007548:	9a01      	ldr	r2, [sp, #4]
 800754a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800754e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007552:	425a      	negs	r2, r3
 8007554:	415a      	adcs	r2, r3
 8007556:	602a      	str	r2, [r5, #0]
 8007558:	e7ee      	b.n	8007538 <__swhatbuf_r+0x1e>
 800755a:	2340      	movs	r3, #64	; 0x40
 800755c:	2000      	movs	r0, #0
 800755e:	6023      	str	r3, [r4, #0]
 8007560:	b016      	add	sp, #88	; 0x58
 8007562:	bd70      	pop	{r4, r5, r6, pc}

08007564 <__smakebuf_r>:
 8007564:	898b      	ldrh	r3, [r1, #12]
 8007566:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007568:	079d      	lsls	r5, r3, #30
 800756a:	4606      	mov	r6, r0
 800756c:	460c      	mov	r4, r1
 800756e:	d507      	bpl.n	8007580 <__smakebuf_r+0x1c>
 8007570:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007574:	6023      	str	r3, [r4, #0]
 8007576:	6123      	str	r3, [r4, #16]
 8007578:	2301      	movs	r3, #1
 800757a:	6163      	str	r3, [r4, #20]
 800757c:	b002      	add	sp, #8
 800757e:	bd70      	pop	{r4, r5, r6, pc}
 8007580:	ab01      	add	r3, sp, #4
 8007582:	466a      	mov	r2, sp
 8007584:	f7ff ffc9 	bl	800751a <__swhatbuf_r>
 8007588:	9900      	ldr	r1, [sp, #0]
 800758a:	4605      	mov	r5, r0
 800758c:	4630      	mov	r0, r6
 800758e:	f7fe ff5f 	bl	8006450 <_malloc_r>
 8007592:	b948      	cbnz	r0, 80075a8 <__smakebuf_r+0x44>
 8007594:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007598:	059a      	lsls	r2, r3, #22
 800759a:	d4ef      	bmi.n	800757c <__smakebuf_r+0x18>
 800759c:	f023 0303 	bic.w	r3, r3, #3
 80075a0:	f043 0302 	orr.w	r3, r3, #2
 80075a4:	81a3      	strh	r3, [r4, #12]
 80075a6:	e7e3      	b.n	8007570 <__smakebuf_r+0xc>
 80075a8:	4b0d      	ldr	r3, [pc, #52]	; (80075e0 <__smakebuf_r+0x7c>)
 80075aa:	62b3      	str	r3, [r6, #40]	; 0x28
 80075ac:	89a3      	ldrh	r3, [r4, #12]
 80075ae:	6020      	str	r0, [r4, #0]
 80075b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075b4:	81a3      	strh	r3, [r4, #12]
 80075b6:	9b00      	ldr	r3, [sp, #0]
 80075b8:	6163      	str	r3, [r4, #20]
 80075ba:	9b01      	ldr	r3, [sp, #4]
 80075bc:	6120      	str	r0, [r4, #16]
 80075be:	b15b      	cbz	r3, 80075d8 <__smakebuf_r+0x74>
 80075c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80075c4:	4630      	mov	r0, r6
 80075c6:	f000 f86b 	bl	80076a0 <_isatty_r>
 80075ca:	b128      	cbz	r0, 80075d8 <__smakebuf_r+0x74>
 80075cc:	89a3      	ldrh	r3, [r4, #12]
 80075ce:	f023 0303 	bic.w	r3, r3, #3
 80075d2:	f043 0301 	orr.w	r3, r3, #1
 80075d6:	81a3      	strh	r3, [r4, #12]
 80075d8:	89a0      	ldrh	r0, [r4, #12]
 80075da:	4305      	orrs	r5, r0
 80075dc:	81a5      	strh	r5, [r4, #12]
 80075de:	e7cd      	b.n	800757c <__smakebuf_r+0x18>
 80075e0:	08006dbd 	.word	0x08006dbd

080075e4 <_malloc_usable_size_r>:
 80075e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80075e8:	1f18      	subs	r0, r3, #4
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	bfbc      	itt	lt
 80075ee:	580b      	ldrlt	r3, [r1, r0]
 80075f0:	18c0      	addlt	r0, r0, r3
 80075f2:	4770      	bx	lr

080075f4 <_raise_r>:
 80075f4:	291f      	cmp	r1, #31
 80075f6:	b538      	push	{r3, r4, r5, lr}
 80075f8:	4604      	mov	r4, r0
 80075fa:	460d      	mov	r5, r1
 80075fc:	d904      	bls.n	8007608 <_raise_r+0x14>
 80075fe:	2316      	movs	r3, #22
 8007600:	6003      	str	r3, [r0, #0]
 8007602:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007606:	bd38      	pop	{r3, r4, r5, pc}
 8007608:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800760a:	b112      	cbz	r2, 8007612 <_raise_r+0x1e>
 800760c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007610:	b94b      	cbnz	r3, 8007626 <_raise_r+0x32>
 8007612:	4620      	mov	r0, r4
 8007614:	f000 f830 	bl	8007678 <_getpid_r>
 8007618:	462a      	mov	r2, r5
 800761a:	4601      	mov	r1, r0
 800761c:	4620      	mov	r0, r4
 800761e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007622:	f000 b817 	b.w	8007654 <_kill_r>
 8007626:	2b01      	cmp	r3, #1
 8007628:	d00a      	beq.n	8007640 <_raise_r+0x4c>
 800762a:	1c59      	adds	r1, r3, #1
 800762c:	d103      	bne.n	8007636 <_raise_r+0x42>
 800762e:	2316      	movs	r3, #22
 8007630:	6003      	str	r3, [r0, #0]
 8007632:	2001      	movs	r0, #1
 8007634:	e7e7      	b.n	8007606 <_raise_r+0x12>
 8007636:	2400      	movs	r4, #0
 8007638:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800763c:	4628      	mov	r0, r5
 800763e:	4798      	blx	r3
 8007640:	2000      	movs	r0, #0
 8007642:	e7e0      	b.n	8007606 <_raise_r+0x12>

08007644 <raise>:
 8007644:	4b02      	ldr	r3, [pc, #8]	; (8007650 <raise+0xc>)
 8007646:	4601      	mov	r1, r0
 8007648:	6818      	ldr	r0, [r3, #0]
 800764a:	f7ff bfd3 	b.w	80075f4 <_raise_r>
 800764e:	bf00      	nop
 8007650:	2000000c 	.word	0x2000000c

08007654 <_kill_r>:
 8007654:	b538      	push	{r3, r4, r5, lr}
 8007656:	4d07      	ldr	r5, [pc, #28]	; (8007674 <_kill_r+0x20>)
 8007658:	2300      	movs	r3, #0
 800765a:	4604      	mov	r4, r0
 800765c:	4608      	mov	r0, r1
 800765e:	4611      	mov	r1, r2
 8007660:	602b      	str	r3, [r5, #0]
 8007662:	f7fa f953 	bl	800190c <_kill>
 8007666:	1c43      	adds	r3, r0, #1
 8007668:	d102      	bne.n	8007670 <_kill_r+0x1c>
 800766a:	682b      	ldr	r3, [r5, #0]
 800766c:	b103      	cbz	r3, 8007670 <_kill_r+0x1c>
 800766e:	6023      	str	r3, [r4, #0]
 8007670:	bd38      	pop	{r3, r4, r5, pc}
 8007672:	bf00      	nop
 8007674:	20000408 	.word	0x20000408

08007678 <_getpid_r>:
 8007678:	f7fa b940 	b.w	80018fc <_getpid>

0800767c <_fstat_r>:
 800767c:	b538      	push	{r3, r4, r5, lr}
 800767e:	4d07      	ldr	r5, [pc, #28]	; (800769c <_fstat_r+0x20>)
 8007680:	2300      	movs	r3, #0
 8007682:	4604      	mov	r4, r0
 8007684:	4608      	mov	r0, r1
 8007686:	4611      	mov	r1, r2
 8007688:	602b      	str	r3, [r5, #0]
 800768a:	f7fa f99e 	bl	80019ca <_fstat>
 800768e:	1c43      	adds	r3, r0, #1
 8007690:	d102      	bne.n	8007698 <_fstat_r+0x1c>
 8007692:	682b      	ldr	r3, [r5, #0]
 8007694:	b103      	cbz	r3, 8007698 <_fstat_r+0x1c>
 8007696:	6023      	str	r3, [r4, #0]
 8007698:	bd38      	pop	{r3, r4, r5, pc}
 800769a:	bf00      	nop
 800769c:	20000408 	.word	0x20000408

080076a0 <_isatty_r>:
 80076a0:	b538      	push	{r3, r4, r5, lr}
 80076a2:	4d06      	ldr	r5, [pc, #24]	; (80076bc <_isatty_r+0x1c>)
 80076a4:	2300      	movs	r3, #0
 80076a6:	4604      	mov	r4, r0
 80076a8:	4608      	mov	r0, r1
 80076aa:	602b      	str	r3, [r5, #0]
 80076ac:	f7fa f99d 	bl	80019ea <_isatty>
 80076b0:	1c43      	adds	r3, r0, #1
 80076b2:	d102      	bne.n	80076ba <_isatty_r+0x1a>
 80076b4:	682b      	ldr	r3, [r5, #0]
 80076b6:	b103      	cbz	r3, 80076ba <_isatty_r+0x1a>
 80076b8:	6023      	str	r3, [r4, #0]
 80076ba:	bd38      	pop	{r3, r4, r5, pc}
 80076bc:	20000408 	.word	0x20000408

080076c0 <_init>:
 80076c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076c2:	bf00      	nop
 80076c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076c6:	bc08      	pop	{r3}
 80076c8:	469e      	mov	lr, r3
 80076ca:	4770      	bx	lr

080076cc <_fini>:
 80076cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076ce:	bf00      	nop
 80076d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076d2:	bc08      	pop	{r3}
 80076d4:	469e      	mov	lr, r3
 80076d6:	4770      	bx	lr
