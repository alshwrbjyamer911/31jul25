#ifndef RYLR898_LORA_INIT_H
#define RYLR898_LORA_INIT_H

#include "main.h"

// Role definitions
#define LORA_ROLE_TRANSMITTER 1
#define LORA_ROLE_RECEIVER    0
#define IAM LORA_ROLE_RECEIVER
extern UART_HandleTypeDef huart6;
extern UART_HandleTypeDef huart2;

// AT Commands
static const uint8_t LORA_AT_BAND[] = "AT+BAND=868000000\r\n";
static const uint8_t LORA_AT_PWD[] = "AT+CPIN=LoRaSecure1234\r\n";
static const uint8_t LORA_AT_GETID[] = "AT+NETWORKID\r\n";
static const uint8_t LORA_AT_GETADDR[] = "AT+ADDRESS\r\n";
extern uint8_t uart6passwotd [14];
 //LoRa configuration structure
typedef struct {
    uint8_t id;
    uint8_t addr;
    uint8_t receiver_id;
    uint8_t receiver_addr;
    uint32_t band;
    uint16_t password;

} LoRaConfig_t;

extern LoRaConfig_t lora_config;
extern uint8_t uart_rx_buffer[100];
extern UART_HandleTypeDef huart2;

// Initialization
void lora_init(void);
uint8_t get_id();
uint8_t get_address();


// Configuration
void lora_set_address(uint8_t addr);
void lora_set_network_id(uint8_t netid);
void lora_set_band(uint32_t freq);
void lora_set_password(const char *pwd);
void lora_config();

// Send/Receive
void lora_send_char(uint8_t data);
void lora_send_data(uint8_t *pdata, uint16_t len);
// HAL_StatusTypeDef lora_send_data_timeout(uint8_t *pdata, uint16_t len, uint32_t timeout);
uint8_t lora_receive_char(void);
uint8_t lora_receive_line(char *buffer, uint16_t max_len);

// Parsing & Utility
uint8_t process_message(const char *message);

// Optional Asynchronous Support
void lora_uart_rx_callback(uint8_t *data, uint16_t len);
void getargs();
#endif  // RYLR898_LORA_INIT_H
