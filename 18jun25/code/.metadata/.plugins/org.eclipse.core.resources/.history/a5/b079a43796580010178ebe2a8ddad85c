#include "ryrl898.h"
#include <cstring>
#include <cstdio>
#include <string.h>
//UART_HandleTypeDef huart2;

uint8_t uart_rx_buffer[100];
uint8_t uart6passwotd [14];

LoRaConfig_t lora_config;
void lora_init(){
	lora_config.receiver_id = get_id();
	lora_config.receiver_addr = get_address();

	HAL_UART_Transmit(&huart2, LORA_AT_BAND, sizeof(LORA_AT_BAND)-1, 100);
	HAL_UART_Transmit(&huart2, LORA_AT_PWD, sizeof(LORA_AT_PWD)-1, 100);

}
void lora_sendinit(uint8_t *pdata){
	HAL_UART_Transmit(&huart2, pdata, sizeof(pdata)-1, 100);
}

uint8_t lora_recive(){
	//+RCV=<Address>,<Length>,<Data>,<RSSI>,<SNR>
	return receive_message();
}

uint8_t receive_message(){
	memset(uart_rx_buffer,0,100);
	uint8_t cmd;
	HAL_UART_Receive(&huart2, uart_rx_buffer, 100, 100);

	if(strstr((const char*)uart_rx_buffer,"+RCV=")){
		cmd =process_message((const char*)uart_rx_buffer);
	}

	return cmd;
}
uint8_t process_message(const char *message){
	int address = 0;int rssi = 0;int lenth=0;
	uint8_t data=0;
	sscanf(message, "+RCV=%d,%d,%c,%d,%d",&address,&lenth,&data,&rssi,NULL);
	return data;
}
void lora_send_char(uint8_t data){
	uint8_t buffer[50];
	memset(buffer,0,50);
	sprintf((char*)buffer,"AT+SEND=%d,1,%c\r\n",lora_config.receiver_addr,data);
	HAL_UART_Transmit(&huart2, buffer, strlen((char*)buffer), 100);

}
void lora_send_data(uint8_t *pdata, uint16_t len){
	uint8_t buffer[250];
	memset(buffer,0,sizeof(buffer));
	sprintf((char*)buffer,"AT+SEND+%d,%d,%s\r\n",lora_config.receiver_addr,len,pdata);
	HAL_UART_Transmit(&huart2, buffer, strlen((char*)buffer), 100);
}

uint8_t get_id(){
	uint8_t buffer[25];

	HAL_UART_Transmit(&huart2, LORA_AT_GETID, sizeof(LORA_AT_GETID), 100);
//	HAL_Delay(10);
	HAL_UART_Receive(&huart2, buffer, sizeof(buffer), 100);
	sscanf((char*)buffer, "+NETWORKID=%d", &lora_config.id);
	if(IAM ==LORA_ROLE_TRANSMITTER)
		return lora_config.id+1;
	else if(IAM==LORA_ROLE_RECEIVER)
		return lora_config.id-1;

}
uint8_t get_address(){
	uint8_t buffer[25];
	HAL_UART_Transmit(&huart2, LORA_AT_GETADDR, sizeof(LORA_AT_GETADDR), 100);
//	HAL_Delay(10);
	HAL_UART_Receive(&huart2, buffer, sizeof(buffer), 100);
	sscanf((char*)buffer,"+ADDRESS=%d",&lora_config.addr);

	if(IAM ==LORA_ROLE_TRANSMITTER)
		return lora_config.addr+1;
	else if(IAM==LORA_ROLE_RECEIVER)
		return lora_config.addr-1;

}

//===========================configration ===============================
void lora_set_address(uint8_t addr){
	uint8_t buffer[50];
	memset(buffer, 0, sizeof(buffer));
	sprintf((char*)buffer, "AT+ADDRESS=%d\r\n", addr);
	HAL_UART_Transmit(&huart2, buffer, strlen((char*)buffer), 100);
}
void lora_set_network_id(uint8_t netid){
	uint8_t buffer[50];
	memset(buffer, 0, sizeof(buffer));
	sprintf((char*)buffer, "AT+NETWORKID=%d\r\n", netid);
	HAL_UART_Transmit(&huart2, buffer, strlen((char*)buffer), 100);
}
void lora_set_band(uint32_t freq){
	uint8_t buffer[50];
	memset(buffer, 0, sizeof(buffer));
	sprintf((char*)buffer,"AT+BAND=%d\r\n", freq);
	HAL_UART_Transmit(&huart2, buffer, strlen((char*)buffer), 100);
	
	
}
void lora_set_password(const char *pwd){
	uint8_t buffer[50];
	memset(buffer, 0, sizeof(buffer));
	sprintf((char*)buffer,"AT+PASSWORD=%s\r\n", pwd);
	HAL_UART_Transmit(&huart2, buffer, strlen((char*)buffer), 100);
}
void lora_config(){
	lora_set_address(lora_config.addr);
	lora_set_band(lora_config.band);
	lora_set_network_id(lora_config.id);
	lora_set_password(lora_config.password);
}
void getargs(){
	HAL_UART_Transmit(&huart6,(uint8_t*)"Write the config and start by edit password for deafult bassword contact alebel",strlen("Write the config and start by edit password for deafult bassword contact ALEBEL") , 1000);
	HAL_UART_Receive(&huart6,lora_config.password, sizeof(lora_config.password)-1, HAL_MAX_DELAY);
	HAL_UART_Transmit(&huart6,"Write the id ",strlen("Write the id ") , 1000);
	HAL_UART_Receive(&huart6,lora_config.id, sizeof(lora_config.id)-1, HAL_MAX_DELAY);
	HAL_UART_Transmit(&huart6,"Write the address",strlen("Write the address") , 1000);
	HAL_UART_Receive(&huart6,lora_config.addr, sizeof(lora_config.addr)-1, HAL_MAX_DELAY);
	HAL_UART_Transmit(&huart6,"enter band",strlen("enter band") , 1000);
	HAL_UART_Receive(&huart6,lora_config.band, sizeof(lora_config.band)-1, HAL_MAX_DELAY);
	if(IAM ==LORA_ROLE_TRANSMITTER)
		lora_config.receiver_id = lora_config.id+1;
	else if(IAM==LORA_ROLE_RECEIVER)
		lora_config.receiver_id = lora_config.id-1;

}
//==================================intrrupt configration handler ====================================
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
	// This function is called when a complete message is received
	// You can process the received data here or set a flag for later processing
	if (huart->Instance == USART6) {
		if(1)
			getargs();
		

	}
}
