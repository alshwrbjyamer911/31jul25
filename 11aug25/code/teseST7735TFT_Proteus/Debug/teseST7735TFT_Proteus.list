
teseST7735TFT_Proteus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000204c  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e04  080021e0  080021e0  000031e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002fe4  08002fe4  00004014  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08002fe4  08002fe4  00003fe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002fec  08002fec  00004014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002fec  08002fec  00003fec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002ff0  08002ff0  00003ff0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08002ff4  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  20000014  08003008  00004014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000008c  08003008  0000408c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004014  2**0
                  CONTENTS, READONLY
 12 .debug_info   000065a2  00000000  00000000  00004044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000179c  00000000  00000000  0000a5e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006e0  00000000  00000000  0000bd88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000004ff  00000000  00000000  0000c468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000158e1  00000000  00000000  0000c967  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008421  00000000  00000000  00022248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084325  00000000  00000000  0002a669  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ae98e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000019dc  00000000  00000000  000ae9d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000b03b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000014 	.word	0x20000014
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080021c8 	.word	0x080021c8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000018 	.word	0x20000018
 80001d0:	080021c8 	.word	0x080021c8

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001e8:	f000 b988 	b.w	80004fc <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	468e      	mov	lr, r1
 800020c:	4604      	mov	r4, r0
 800020e:	4688      	mov	r8, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14a      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d962      	bls.n	80002e0 <__udivmoddi4+0xdc>
 800021a:	fab2 f682 	clz	r6, r2
 800021e:	b14e      	cbz	r6, 8000234 <__udivmoddi4+0x30>
 8000220:	f1c6 0320 	rsb	r3, r6, #32
 8000224:	fa01 f806 	lsl.w	r8, r1, r6
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	40b7      	lsls	r7, r6
 800022e:	ea43 0808 	orr.w	r8, r3, r8
 8000232:	40b4      	lsls	r4, r6
 8000234:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000238:	fa1f fc87 	uxth.w	ip, r7
 800023c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000240:	0c23      	lsrs	r3, r4, #16
 8000242:	fb0e 8811 	mls	r8, lr, r1, r8
 8000246:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024a:	fb01 f20c 	mul.w	r2, r1, ip
 800024e:	429a      	cmp	r2, r3
 8000250:	d909      	bls.n	8000266 <__udivmoddi4+0x62>
 8000252:	18fb      	adds	r3, r7, r3
 8000254:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000258:	f080 80ea 	bcs.w	8000430 <__udivmoddi4+0x22c>
 800025c:	429a      	cmp	r2, r3
 800025e:	f240 80e7 	bls.w	8000430 <__udivmoddi4+0x22c>
 8000262:	3902      	subs	r1, #2
 8000264:	443b      	add	r3, r7
 8000266:	1a9a      	subs	r2, r3, r2
 8000268:	b2a3      	uxth	r3, r4
 800026a:	fbb2 f0fe 	udiv	r0, r2, lr
 800026e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000272:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000276:	fb00 fc0c 	mul.w	ip, r0, ip
 800027a:	459c      	cmp	ip, r3
 800027c:	d909      	bls.n	8000292 <__udivmoddi4+0x8e>
 800027e:	18fb      	adds	r3, r7, r3
 8000280:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000284:	f080 80d6 	bcs.w	8000434 <__udivmoddi4+0x230>
 8000288:	459c      	cmp	ip, r3
 800028a:	f240 80d3 	bls.w	8000434 <__udivmoddi4+0x230>
 800028e:	443b      	add	r3, r7
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000296:	eba3 030c 	sub.w	r3, r3, ip
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa2>
 800029e:	40f3      	lsrs	r3, r6
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xb6>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb0>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x14c>
 80002c2:	4573      	cmp	r3, lr
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xc8>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 8105 	bhi.w	80004d6 <__udivmoddi4+0x2d2>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	4690      	mov	r8, r2
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e5      	beq.n	80002a6 <__udivmoddi4+0xa2>
 80002da:	e9c5 4800 	strd	r4, r8, [r5]
 80002de:	e7e2      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002e0:	2a00      	cmp	r2, #0
 80002e2:	f000 8090 	beq.w	8000406 <__udivmoddi4+0x202>
 80002e6:	fab2 f682 	clz	r6, r2
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f040 80a4 	bne.w	8000438 <__udivmoddi4+0x234>
 80002f0:	1a8a      	subs	r2, r1, r2
 80002f2:	0c03      	lsrs	r3, r0, #16
 80002f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f8:	b280      	uxth	r0, r0
 80002fa:	b2bc      	uxth	r4, r7
 80002fc:	2101      	movs	r1, #1
 80002fe:	fbb2 fcfe 	udiv	ip, r2, lr
 8000302:	fb0e 221c 	mls	r2, lr, ip, r2
 8000306:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030a:	fb04 f20c 	mul.w	r2, r4, ip
 800030e:	429a      	cmp	r2, r3
 8000310:	d907      	bls.n	8000322 <__udivmoddi4+0x11e>
 8000312:	18fb      	adds	r3, r7, r3
 8000314:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000318:	d202      	bcs.n	8000320 <__udivmoddi4+0x11c>
 800031a:	429a      	cmp	r2, r3
 800031c:	f200 80e0 	bhi.w	80004e0 <__udivmoddi4+0x2dc>
 8000320:	46c4      	mov	ip, r8
 8000322:	1a9b      	subs	r3, r3, r2
 8000324:	fbb3 f2fe 	udiv	r2, r3, lr
 8000328:	fb0e 3312 	mls	r3, lr, r2, r3
 800032c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000330:	fb02 f404 	mul.w	r4, r2, r4
 8000334:	429c      	cmp	r4, r3
 8000336:	d907      	bls.n	8000348 <__udivmoddi4+0x144>
 8000338:	18fb      	adds	r3, r7, r3
 800033a:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x142>
 8000340:	429c      	cmp	r4, r3
 8000342:	f200 80ca 	bhi.w	80004da <__udivmoddi4+0x2d6>
 8000346:	4602      	mov	r2, r0
 8000348:	1b1b      	subs	r3, r3, r4
 800034a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x98>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa0e f401 	lsl.w	r4, lr, r1
 8000360:	fa20 f306 	lsr.w	r3, r0, r6
 8000364:	fa2e fe06 	lsr.w	lr, lr, r6
 8000368:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	fa1f fc87 	uxth.w	ip, r7
 8000376:	fbbe f0f9 	udiv	r0, lr, r9
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000380:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000384:	fb00 fe0c 	mul.w	lr, r0, ip
 8000388:	45a6      	cmp	lr, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x1a0>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000396:	f080 809c 	bcs.w	80004d2 <__udivmoddi4+0x2ce>
 800039a:	45a6      	cmp	lr, r4
 800039c:	f240 8099 	bls.w	80004d2 <__udivmoddi4+0x2ce>
 80003a0:	3802      	subs	r0, #2
 80003a2:	443c      	add	r4, r7
 80003a4:	eba4 040e 	sub.w	r4, r4, lr
 80003a8:	fa1f fe83 	uxth.w	lr, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003b8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003bc:	45a4      	cmp	ip, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1ce>
 80003c0:	193c      	adds	r4, r7, r4
 80003c2:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003c6:	f080 8082 	bcs.w	80004ce <__udivmoddi4+0x2ca>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d97f      	bls.n	80004ce <__udivmoddi4+0x2ca>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003d6:	eba4 040c 	sub.w	r4, r4, ip
 80003da:	fba0 ec02 	umull	lr, ip, r0, r2
 80003de:	4564      	cmp	r4, ip
 80003e0:	4673      	mov	r3, lr
 80003e2:	46e1      	mov	r9, ip
 80003e4:	d362      	bcc.n	80004ac <__udivmoddi4+0x2a8>
 80003e6:	d05f      	beq.n	80004a8 <__udivmoddi4+0x2a4>
 80003e8:	b15d      	cbz	r5, 8000402 <__udivmoddi4+0x1fe>
 80003ea:	ebb8 0203 	subs.w	r2, r8, r3
 80003ee:	eb64 0409 	sbc.w	r4, r4, r9
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	fa22 f301 	lsr.w	r3, r2, r1
 80003fa:	431e      	orrs	r6, r3
 80003fc:	40cc      	lsrs	r4, r1
 80003fe:	e9c5 6400 	strd	r6, r4, [r5]
 8000402:	2100      	movs	r1, #0
 8000404:	e74f      	b.n	80002a6 <__udivmoddi4+0xa2>
 8000406:	fbb1 fcf2 	udiv	ip, r1, r2
 800040a:	0c01      	lsrs	r1, r0, #16
 800040c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000410:	b280      	uxth	r0, r0
 8000412:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000416:	463b      	mov	r3, r7
 8000418:	4638      	mov	r0, r7
 800041a:	463c      	mov	r4, r7
 800041c:	46b8      	mov	r8, r7
 800041e:	46be      	mov	lr, r7
 8000420:	2620      	movs	r6, #32
 8000422:	fbb1 f1f7 	udiv	r1, r1, r7
 8000426:	eba2 0208 	sub.w	r2, r2, r8
 800042a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800042e:	e766      	b.n	80002fe <__udivmoddi4+0xfa>
 8000430:	4601      	mov	r1, r0
 8000432:	e718      	b.n	8000266 <__udivmoddi4+0x62>
 8000434:	4610      	mov	r0, r2
 8000436:	e72c      	b.n	8000292 <__udivmoddi4+0x8e>
 8000438:	f1c6 0220 	rsb	r2, r6, #32
 800043c:	fa2e f302 	lsr.w	r3, lr, r2
 8000440:	40b7      	lsls	r7, r6
 8000442:	40b1      	lsls	r1, r6
 8000444:	fa20 f202 	lsr.w	r2, r0, r2
 8000448:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800044c:	430a      	orrs	r2, r1
 800044e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000452:	b2bc      	uxth	r4, r7
 8000454:	fb0e 3318 	mls	r3, lr, r8, r3
 8000458:	0c11      	lsrs	r1, r2, #16
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb08 f904 	mul.w	r9, r8, r4
 8000462:	40b0      	lsls	r0, r6
 8000464:	4589      	cmp	r9, r1
 8000466:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046a:	b280      	uxth	r0, r0
 800046c:	d93e      	bls.n	80004ec <__udivmoddi4+0x2e8>
 800046e:	1879      	adds	r1, r7, r1
 8000470:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000474:	d201      	bcs.n	800047a <__udivmoddi4+0x276>
 8000476:	4589      	cmp	r9, r1
 8000478:	d81f      	bhi.n	80004ba <__udivmoddi4+0x2b6>
 800047a:	eba1 0109 	sub.w	r1, r1, r9
 800047e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000482:	fb09 f804 	mul.w	r8, r9, r4
 8000486:	fb0e 1119 	mls	r1, lr, r9, r1
 800048a:	b292      	uxth	r2, r2
 800048c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000490:	4542      	cmp	r2, r8
 8000492:	d229      	bcs.n	80004e8 <__udivmoddi4+0x2e4>
 8000494:	18ba      	adds	r2, r7, r2
 8000496:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800049a:	d2c4      	bcs.n	8000426 <__udivmoddi4+0x222>
 800049c:	4542      	cmp	r2, r8
 800049e:	d2c2      	bcs.n	8000426 <__udivmoddi4+0x222>
 80004a0:	f1a9 0102 	sub.w	r1, r9, #2
 80004a4:	443a      	add	r2, r7
 80004a6:	e7be      	b.n	8000426 <__udivmoddi4+0x222>
 80004a8:	45f0      	cmp	r8, lr
 80004aa:	d29d      	bcs.n	80003e8 <__udivmoddi4+0x1e4>
 80004ac:	ebbe 0302 	subs.w	r3, lr, r2
 80004b0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b4:	3801      	subs	r0, #1
 80004b6:	46e1      	mov	r9, ip
 80004b8:	e796      	b.n	80003e8 <__udivmoddi4+0x1e4>
 80004ba:	eba7 0909 	sub.w	r9, r7, r9
 80004be:	4449      	add	r1, r9
 80004c0:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c4:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c8:	fb09 f804 	mul.w	r8, r9, r4
 80004cc:	e7db      	b.n	8000486 <__udivmoddi4+0x282>
 80004ce:	4673      	mov	r3, lr
 80004d0:	e77f      	b.n	80003d2 <__udivmoddi4+0x1ce>
 80004d2:	4650      	mov	r0, sl
 80004d4:	e766      	b.n	80003a4 <__udivmoddi4+0x1a0>
 80004d6:	4608      	mov	r0, r1
 80004d8:	e6fd      	b.n	80002d6 <__udivmoddi4+0xd2>
 80004da:	443b      	add	r3, r7
 80004dc:	3a02      	subs	r2, #2
 80004de:	e733      	b.n	8000348 <__udivmoddi4+0x144>
 80004e0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e4:	443b      	add	r3, r7
 80004e6:	e71c      	b.n	8000322 <__udivmoddi4+0x11e>
 80004e8:	4649      	mov	r1, r9
 80004ea:	e79c      	b.n	8000426 <__udivmoddi4+0x222>
 80004ec:	eba1 0109 	sub.w	r1, r1, r9
 80004f0:	46c4      	mov	ip, r8
 80004f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f6:	fb09 f804 	mul.w	r8, r9, r4
 80004fa:	e7c4      	b.n	8000486 <__udivmoddi4+0x282>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b088      	sub	sp, #32
 8000504:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000506:	f107 030c 	add.w	r3, r7, #12
 800050a:	2200      	movs	r2, #0
 800050c:	601a      	str	r2, [r3, #0]
 800050e:	605a      	str	r2, [r3, #4]
 8000510:	609a      	str	r2, [r3, #8]
 8000512:	60da      	str	r2, [r3, #12]
 8000514:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000516:	2300      	movs	r3, #0
 8000518:	60bb      	str	r3, [r7, #8]
 800051a:	4b23      	ldr	r3, [pc, #140]	@ (80005a8 <MX_GPIO_Init+0xa8>)
 800051c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800051e:	4a22      	ldr	r2, [pc, #136]	@ (80005a8 <MX_GPIO_Init+0xa8>)
 8000520:	f043 0301 	orr.w	r3, r3, #1
 8000524:	6313      	str	r3, [r2, #48]	@ 0x30
 8000526:	4b20      	ldr	r3, [pc, #128]	@ (80005a8 <MX_GPIO_Init+0xa8>)
 8000528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800052a:	f003 0301 	and.w	r3, r3, #1
 800052e:	60bb      	str	r3, [r7, #8]
 8000530:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000532:	2300      	movs	r3, #0
 8000534:	607b      	str	r3, [r7, #4]
 8000536:	4b1c      	ldr	r3, [pc, #112]	@ (80005a8 <MX_GPIO_Init+0xa8>)
 8000538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800053a:	4a1b      	ldr	r2, [pc, #108]	@ (80005a8 <MX_GPIO_Init+0xa8>)
 800053c:	f043 0302 	orr.w	r3, r3, #2
 8000540:	6313      	str	r3, [r2, #48]	@ 0x30
 8000542:	4b19      	ldr	r3, [pc, #100]	@ (80005a8 <MX_GPIO_Init+0xa8>)
 8000544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000546:	f003 0302 	and.w	r3, r3, #2
 800054a:	607b      	str	r3, [r7, #4]
 800054c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_RESET);
 800054e:	2200      	movs	r2, #0
 8000550:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000554:	4815      	ldr	r0, [pc, #84]	@ (80005ac <MX_GPIO_Init+0xac>)
 8000556:	f000 fcd9 	bl	8000f0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_Pin|RST_Pin, GPIO_PIN_RESET);
 800055a:	2200      	movs	r2, #0
 800055c:	21c0      	movs	r1, #192	@ 0xc0
 800055e:	4814      	ldr	r0, [pc, #80]	@ (80005b0 <MX_GPIO_Init+0xb0>)
 8000560:	f000 fcd4 	bl	8000f0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DC_Pin */
  GPIO_InitStruct.Pin = DC_Pin;
 8000564:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000568:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800056a:	2301      	movs	r3, #1
 800056c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800056e:	2300      	movs	r3, #0
 8000570:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000572:	2300      	movs	r3, #0
 8000574:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DC_GPIO_Port, &GPIO_InitStruct);
 8000576:	f107 030c 	add.w	r3, r7, #12
 800057a:	4619      	mov	r1, r3
 800057c:	480b      	ldr	r0, [pc, #44]	@ (80005ac <MX_GPIO_Init+0xac>)
 800057e:	f000 fb41 	bl	8000c04 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_Pin RST_Pin */
  GPIO_InitStruct.Pin = CS_Pin|RST_Pin;
 8000582:	23c0      	movs	r3, #192	@ 0xc0
 8000584:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000586:	2301      	movs	r3, #1
 8000588:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800058a:	2300      	movs	r3, #0
 800058c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800058e:	2300      	movs	r3, #0
 8000590:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000592:	f107 030c 	add.w	r3, r7, #12
 8000596:	4619      	mov	r1, r3
 8000598:	4805      	ldr	r0, [pc, #20]	@ (80005b0 <MX_GPIO_Init+0xb0>)
 800059a:	f000 fb33 	bl	8000c04 <HAL_GPIO_Init>

}
 800059e:	bf00      	nop
 80005a0:	3720      	adds	r7, #32
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	40023800 	.word	0x40023800
 80005ac:	40020000 	.word	0x40020000
 80005b0:	40020400 	.word	0x40020400

080005b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b084      	sub	sp, #16
 80005b8:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ba:	f000 f9a7 	bl	800090c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005be:	f000 f821 	bl	8000604 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c2:	f7ff ff9d 	bl	8000500 <MX_GPIO_Init>
  MX_SPI1_Init();
 80005c6:	f000 f88d 	bl	80006e4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  ST7735_Init();
 80005ca:	f001 fc6f 	bl	8001eac <ST7735_Init>
  HAL_Delay(100);
 80005ce:	2064      	movs	r0, #100	@ 0x64
 80005d0:	f000 fa0e 	bl	80009f0 <HAL_Delay>
  ST7735_FillScreen(0xFEA0);
 80005d4:	f64f 60a0 	movw	r0, #65184	@ 0xfea0
 80005d8:	f001 fdb8 	bl	800214c <ST7735_FillScreen>
  ST7735_WriteString(10, 10, "Hi Iam Amer from ALEBEL company", Font_11x18, ST7735_CYAN, ST7735_BLUE);
 80005dc:	4b07      	ldr	r3, [pc, #28]	@ (80005fc <main+0x48>)
 80005de:	221f      	movs	r2, #31
 80005e0:	9202      	str	r2, [sp, #8]
 80005e2:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80005e6:	9201      	str	r2, [sp, #4]
 80005e8:	685a      	ldr	r2, [r3, #4]
 80005ea:	9200      	str	r2, [sp, #0]
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	4a04      	ldr	r2, [pc, #16]	@ (8000600 <main+0x4c>)
 80005f0:	210a      	movs	r1, #10
 80005f2:	200a      	movs	r0, #10
 80005f4:	f001 fceb 	bl	8001fce <ST7735_WriteString>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005f8:	bf00      	nop
 80005fa:	e7fd      	b.n	80005f8 <main+0x44>
 80005fc:	2000000c 	.word	0x2000000c
 8000600:	080021e0 	.word	0x080021e0

08000604 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b094      	sub	sp, #80	@ 0x50
 8000608:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060a:	f107 0320 	add.w	r3, r7, #32
 800060e:	2230      	movs	r2, #48	@ 0x30
 8000610:	2100      	movs	r1, #0
 8000612:	4618      	mov	r0, r3
 8000614:	f001 fdab 	bl	800216e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000618:	f107 030c 	add.w	r3, r7, #12
 800061c:	2200      	movs	r2, #0
 800061e:	601a      	str	r2, [r3, #0]
 8000620:	605a      	str	r2, [r3, #4]
 8000622:	609a      	str	r2, [r3, #8]
 8000624:	60da      	str	r2, [r3, #12]
 8000626:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000628:	2300      	movs	r3, #0
 800062a:	60bb      	str	r3, [r7, #8]
 800062c:	4b28      	ldr	r3, [pc, #160]	@ (80006d0 <SystemClock_Config+0xcc>)
 800062e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000630:	4a27      	ldr	r2, [pc, #156]	@ (80006d0 <SystemClock_Config+0xcc>)
 8000632:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000636:	6413      	str	r3, [r2, #64]	@ 0x40
 8000638:	4b25      	ldr	r3, [pc, #148]	@ (80006d0 <SystemClock_Config+0xcc>)
 800063a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800063c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000640:	60bb      	str	r3, [r7, #8]
 8000642:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000644:	2300      	movs	r3, #0
 8000646:	607b      	str	r3, [r7, #4]
 8000648:	4b22      	ldr	r3, [pc, #136]	@ (80006d4 <SystemClock_Config+0xd0>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000650:	4a20      	ldr	r2, [pc, #128]	@ (80006d4 <SystemClock_Config+0xd0>)
 8000652:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000656:	6013      	str	r3, [r2, #0]
 8000658:	4b1e      	ldr	r3, [pc, #120]	@ (80006d4 <SystemClock_Config+0xd0>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000660:	607b      	str	r3, [r7, #4]
 8000662:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000664:	2302      	movs	r3, #2
 8000666:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000668:	2301      	movs	r3, #1
 800066a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800066c:	2310      	movs	r3, #16
 800066e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000670:	2302      	movs	r3, #2
 8000672:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000674:	2300      	movs	r3, #0
 8000676:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000678:	2308      	movs	r3, #8
 800067a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 800067c:	2340      	movs	r3, #64	@ 0x40
 800067e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000680:	2302      	movs	r3, #2
 8000682:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000684:	2304      	movs	r3, #4
 8000686:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000688:	f107 0320 	add.w	r3, r7, #32
 800068c:	4618      	mov	r0, r3
 800068e:	f000 fc57 	bl	8000f40 <HAL_RCC_OscConfig>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000698:	f000 f81e 	bl	80006d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800069c:	230f      	movs	r3, #15
 800069e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a0:	2302      	movs	r3, #2
 80006a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV8;
 80006a4:	23a0      	movs	r3, #160	@ 0xa0
 80006a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ae:	2300      	movs	r3, #0
 80006b0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006b2:	f107 030c 	add.w	r3, r7, #12
 80006b6:	2100      	movs	r1, #0
 80006b8:	4618      	mov	r0, r3
 80006ba:	f000 feb9 	bl	8001430 <HAL_RCC_ClockConfig>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006c4:	f000 f808 	bl	80006d8 <Error_Handler>
  }
}
 80006c8:	bf00      	nop
 80006ca:	3750      	adds	r7, #80	@ 0x50
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	40023800 	.word	0x40023800
 80006d4:	40007000 	.word	0x40007000

080006d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006dc:	b672      	cpsid	i
}
 80006de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006e0:	bf00      	nop
 80006e2:	e7fd      	b.n	80006e0 <Error_Handler+0x8>

080006e4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80006e8:	4b18      	ldr	r3, [pc, #96]	@ (800074c <MX_SPI1_Init+0x68>)
 80006ea:	4a19      	ldr	r2, [pc, #100]	@ (8000750 <MX_SPI1_Init+0x6c>)
 80006ec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006ee:	4b17      	ldr	r3, [pc, #92]	@ (800074c <MX_SPI1_Init+0x68>)
 80006f0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80006f4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 80006f6:	4b15      	ldr	r3, [pc, #84]	@ (800074c <MX_SPI1_Init+0x68>)
 80006f8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80006fc:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006fe:	4b13      	ldr	r3, [pc, #76]	@ (800074c <MX_SPI1_Init+0x68>)
 8000700:	2200      	movs	r2, #0
 8000702:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000704:	4b11      	ldr	r3, [pc, #68]	@ (800074c <MX_SPI1_Init+0x68>)
 8000706:	2202      	movs	r2, #2
 8000708:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800070a:	4b10      	ldr	r3, [pc, #64]	@ (800074c <MX_SPI1_Init+0x68>)
 800070c:	2200      	movs	r2, #0
 800070e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000710:	4b0e      	ldr	r3, [pc, #56]	@ (800074c <MX_SPI1_Init+0x68>)
 8000712:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000716:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000718:	4b0c      	ldr	r3, [pc, #48]	@ (800074c <MX_SPI1_Init+0x68>)
 800071a:	2200      	movs	r2, #0
 800071c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800071e:	4b0b      	ldr	r3, [pc, #44]	@ (800074c <MX_SPI1_Init+0x68>)
 8000720:	2200      	movs	r2, #0
 8000722:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000724:	4b09      	ldr	r3, [pc, #36]	@ (800074c <MX_SPI1_Init+0x68>)
 8000726:	2200      	movs	r2, #0
 8000728:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800072a:	4b08      	ldr	r3, [pc, #32]	@ (800074c <MX_SPI1_Init+0x68>)
 800072c:	2200      	movs	r2, #0
 800072e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000730:	4b06      	ldr	r3, [pc, #24]	@ (800074c <MX_SPI1_Init+0x68>)
 8000732:	220a      	movs	r2, #10
 8000734:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000736:	4805      	ldr	r0, [pc, #20]	@ (800074c <MX_SPI1_Init+0x68>)
 8000738:	f001 f826 	bl	8001788 <HAL_SPI_Init>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8000742:	f7ff ffc9 	bl	80006d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000746:	bf00      	nop
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	20000030 	.word	0x20000030
 8000750:	40013000 	.word	0x40013000

08000754 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b08a      	sub	sp, #40	@ 0x28
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075c:	f107 0314 	add.w	r3, r7, #20
 8000760:	2200      	movs	r2, #0
 8000762:	601a      	str	r2, [r3, #0]
 8000764:	605a      	str	r2, [r3, #4]
 8000766:	609a      	str	r2, [r3, #8]
 8000768:	60da      	str	r2, [r3, #12]
 800076a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4a19      	ldr	r2, [pc, #100]	@ (80007d8 <HAL_SPI_MspInit+0x84>)
 8000772:	4293      	cmp	r3, r2
 8000774:	d12b      	bne.n	80007ce <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	613b      	str	r3, [r7, #16]
 800077a:	4b18      	ldr	r3, [pc, #96]	@ (80007dc <HAL_SPI_MspInit+0x88>)
 800077c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800077e:	4a17      	ldr	r2, [pc, #92]	@ (80007dc <HAL_SPI_MspInit+0x88>)
 8000780:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000784:	6453      	str	r3, [r2, #68]	@ 0x44
 8000786:	4b15      	ldr	r3, [pc, #84]	@ (80007dc <HAL_SPI_MspInit+0x88>)
 8000788:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800078a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800078e:	613b      	str	r3, [r7, #16]
 8000790:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	60fb      	str	r3, [r7, #12]
 8000796:	4b11      	ldr	r3, [pc, #68]	@ (80007dc <HAL_SPI_MspInit+0x88>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079a:	4a10      	ldr	r2, [pc, #64]	@ (80007dc <HAL_SPI_MspInit+0x88>)
 800079c:	f043 0301 	orr.w	r3, r3, #1
 80007a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007a2:	4b0e      	ldr	r3, [pc, #56]	@ (80007dc <HAL_SPI_MspInit+0x88>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a6:	f003 0301 	and.w	r3, r3, #1
 80007aa:	60fb      	str	r3, [r7, #12]
 80007ac:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80007ae:	23a0      	movs	r3, #160	@ 0xa0
 80007b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b2:	2302      	movs	r3, #2
 80007b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b6:	2300      	movs	r3, #0
 80007b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007ba:	2303      	movs	r3, #3
 80007bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80007be:	2305      	movs	r3, #5
 80007c0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c2:	f107 0314 	add.w	r3, r7, #20
 80007c6:	4619      	mov	r1, r3
 80007c8:	4805      	ldr	r0, [pc, #20]	@ (80007e0 <HAL_SPI_MspInit+0x8c>)
 80007ca:	f000 fa1b 	bl	8000c04 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80007ce:	bf00      	nop
 80007d0:	3728      	adds	r7, #40	@ 0x28
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	40013000 	.word	0x40013000
 80007dc:	40023800 	.word	0x40023800
 80007e0:	40020000 	.word	0x40020000

080007e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	b083      	sub	sp, #12
 80007e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	607b      	str	r3, [r7, #4]
 80007ee:	4b10      	ldr	r3, [pc, #64]	@ (8000830 <HAL_MspInit+0x4c>)
 80007f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007f2:	4a0f      	ldr	r2, [pc, #60]	@ (8000830 <HAL_MspInit+0x4c>)
 80007f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80007fa:	4b0d      	ldr	r3, [pc, #52]	@ (8000830 <HAL_MspInit+0x4c>)
 80007fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	603b      	str	r3, [r7, #0]
 800080a:	4b09      	ldr	r3, [pc, #36]	@ (8000830 <HAL_MspInit+0x4c>)
 800080c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800080e:	4a08      	ldr	r2, [pc, #32]	@ (8000830 <HAL_MspInit+0x4c>)
 8000810:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000814:	6413      	str	r3, [r2, #64]	@ 0x40
 8000816:	4b06      	ldr	r3, [pc, #24]	@ (8000830 <HAL_MspInit+0x4c>)
 8000818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800081a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800081e:	603b      	str	r3, [r7, #0]
 8000820:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000822:	bf00      	nop
 8000824:	370c      	adds	r7, #12
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop
 8000830:	40023800 	.word	0x40023800

08000834 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000838:	bf00      	nop
 800083a:	e7fd      	b.n	8000838 <NMI_Handler+0x4>

0800083c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000840:	bf00      	nop
 8000842:	e7fd      	b.n	8000840 <HardFault_Handler+0x4>

08000844 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000848:	bf00      	nop
 800084a:	e7fd      	b.n	8000848 <MemManage_Handler+0x4>

0800084c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000850:	bf00      	nop
 8000852:	e7fd      	b.n	8000850 <BusFault_Handler+0x4>

08000854 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000858:	bf00      	nop
 800085a:	e7fd      	b.n	8000858 <UsageFault_Handler+0x4>

0800085c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000860:	bf00      	nop
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr

0800086a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800086a:	b480      	push	{r7}
 800086c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800086e:	bf00      	nop
 8000870:	46bd      	mov	sp, r7
 8000872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000876:	4770      	bx	lr

08000878 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800087c:	bf00      	nop
 800087e:	46bd      	mov	sp, r7
 8000880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000884:	4770      	bx	lr

08000886 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000886:	b580      	push	{r7, lr}
 8000888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800088a:	f000 f891 	bl	80009b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800088e:	bf00      	nop
 8000890:	bd80      	pop	{r7, pc}
	...

08000894 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000898:	4b06      	ldr	r3, [pc, #24]	@ (80008b4 <SystemInit+0x20>)
 800089a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800089e:	4a05      	ldr	r2, [pc, #20]	@ (80008b4 <SystemInit+0x20>)
 80008a0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80008a4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008a8:	bf00      	nop
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr
 80008b2:	bf00      	nop
 80008b4:	e000ed00 	.word	0xe000ed00

080008b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80008b8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80008f0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80008bc:	f7ff ffea 	bl	8000894 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80008c0:	480c      	ldr	r0, [pc, #48]	@ (80008f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80008c2:	490d      	ldr	r1, [pc, #52]	@ (80008f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80008c4:	4a0d      	ldr	r2, [pc, #52]	@ (80008fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80008c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008c8:	e002      	b.n	80008d0 <LoopCopyDataInit>

080008ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008ce:	3304      	adds	r3, #4

080008d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008d4:	d3f9      	bcc.n	80008ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008d6:	4a0a      	ldr	r2, [pc, #40]	@ (8000900 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80008d8:	4c0a      	ldr	r4, [pc, #40]	@ (8000904 <LoopFillZerobss+0x22>)
  movs r3, #0
 80008da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008dc:	e001      	b.n	80008e2 <LoopFillZerobss>

080008de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008e0:	3204      	adds	r2, #4

080008e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008e4:	d3fb      	bcc.n	80008de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008e6:	f001 fc4b 	bl	8002180 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008ea:	f7ff fe63 	bl	80005b4 <main>
  bx  lr    
 80008ee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80008f0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80008f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008f8:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80008fc:	08002ff4 	.word	0x08002ff4
  ldr r2, =_sbss
 8000900:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000904:	2000008c 	.word	0x2000008c

08000908 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000908:	e7fe      	b.n	8000908 <ADC_IRQHandler>
	...

0800090c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000910:	4b0e      	ldr	r3, [pc, #56]	@ (800094c <HAL_Init+0x40>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a0d      	ldr	r2, [pc, #52]	@ (800094c <HAL_Init+0x40>)
 8000916:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800091a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800091c:	4b0b      	ldr	r3, [pc, #44]	@ (800094c <HAL_Init+0x40>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4a0a      	ldr	r2, [pc, #40]	@ (800094c <HAL_Init+0x40>)
 8000922:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000926:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000928:	4b08      	ldr	r3, [pc, #32]	@ (800094c <HAL_Init+0x40>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a07      	ldr	r2, [pc, #28]	@ (800094c <HAL_Init+0x40>)
 800092e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000932:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000934:	2003      	movs	r0, #3
 8000936:	f000 f931 	bl	8000b9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800093a:	200f      	movs	r0, #15
 800093c:	f000 f808 	bl	8000950 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000940:	f7ff ff50 	bl	80007e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000944:	2300      	movs	r3, #0
}
 8000946:	4618      	mov	r0, r3
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	40023c00 	.word	0x40023c00

08000950 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000958:	4b12      	ldr	r3, [pc, #72]	@ (80009a4 <HAL_InitTick+0x54>)
 800095a:	681a      	ldr	r2, [r3, #0]
 800095c:	4b12      	ldr	r3, [pc, #72]	@ (80009a8 <HAL_InitTick+0x58>)
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	4619      	mov	r1, r3
 8000962:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000966:	fbb3 f3f1 	udiv	r3, r3, r1
 800096a:	fbb2 f3f3 	udiv	r3, r2, r3
 800096e:	4618      	mov	r0, r3
 8000970:	f000 f93b 	bl	8000bea <HAL_SYSTICK_Config>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800097a:	2301      	movs	r3, #1
 800097c:	e00e      	b.n	800099c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	2b0f      	cmp	r3, #15
 8000982:	d80a      	bhi.n	800099a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000984:	2200      	movs	r2, #0
 8000986:	6879      	ldr	r1, [r7, #4]
 8000988:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800098c:	f000 f911 	bl	8000bb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000990:	4a06      	ldr	r2, [pc, #24]	@ (80009ac <HAL_InitTick+0x5c>)
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000996:	2300      	movs	r3, #0
 8000998:	e000      	b.n	800099c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800099a:	2301      	movs	r3, #1
}
 800099c:	4618      	mov	r0, r3
 800099e:	3708      	adds	r7, #8
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	20000000 	.word	0x20000000
 80009a8:	20000008 	.word	0x20000008
 80009ac:	20000004 	.word	0x20000004

080009b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009b4:	4b06      	ldr	r3, [pc, #24]	@ (80009d0 <HAL_IncTick+0x20>)
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	461a      	mov	r2, r3
 80009ba:	4b06      	ldr	r3, [pc, #24]	@ (80009d4 <HAL_IncTick+0x24>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	4413      	add	r3, r2
 80009c0:	4a04      	ldr	r2, [pc, #16]	@ (80009d4 <HAL_IncTick+0x24>)
 80009c2:	6013      	str	r3, [r2, #0]
}
 80009c4:	bf00      	nop
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop
 80009d0:	20000008 	.word	0x20000008
 80009d4:	20000088 	.word	0x20000088

080009d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  return uwTick;
 80009dc:	4b03      	ldr	r3, [pc, #12]	@ (80009ec <HAL_GetTick+0x14>)
 80009de:	681b      	ldr	r3, [r3, #0]
}
 80009e0:	4618      	mov	r0, r3
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop
 80009ec:	20000088 	.word	0x20000088

080009f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b084      	sub	sp, #16
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009f8:	f7ff ffee 	bl	80009d8 <HAL_GetTick>
 80009fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000a08:	d005      	beq.n	8000a16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a0a:	4b0a      	ldr	r3, [pc, #40]	@ (8000a34 <HAL_Delay+0x44>)
 8000a0c:	781b      	ldrb	r3, [r3, #0]
 8000a0e:	461a      	mov	r2, r3
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	4413      	add	r3, r2
 8000a14:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a16:	bf00      	nop
 8000a18:	f7ff ffde 	bl	80009d8 <HAL_GetTick>
 8000a1c:	4602      	mov	r2, r0
 8000a1e:	68bb      	ldr	r3, [r7, #8]
 8000a20:	1ad3      	subs	r3, r2, r3
 8000a22:	68fa      	ldr	r2, [r7, #12]
 8000a24:	429a      	cmp	r2, r3
 8000a26:	d8f7      	bhi.n	8000a18 <HAL_Delay+0x28>
  {
  }
}
 8000a28:	bf00      	nop
 8000a2a:	bf00      	nop
 8000a2c:	3710      	adds	r7, #16
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	20000008 	.word	0x20000008

08000a38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b085      	sub	sp, #20
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	f003 0307 	and.w	r3, r3, #7
 8000a46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a48:	4b0c      	ldr	r3, [pc, #48]	@ (8000a7c <__NVIC_SetPriorityGrouping+0x44>)
 8000a4a:	68db      	ldr	r3, [r3, #12]
 8000a4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a4e:	68ba      	ldr	r2, [r7, #8]
 8000a50:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a54:	4013      	ands	r3, r2
 8000a56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a5c:	68bb      	ldr	r3, [r7, #8]
 8000a5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a60:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a6a:	4a04      	ldr	r2, [pc, #16]	@ (8000a7c <__NVIC_SetPriorityGrouping+0x44>)
 8000a6c:	68bb      	ldr	r3, [r7, #8]
 8000a6e:	60d3      	str	r3, [r2, #12]
}
 8000a70:	bf00      	nop
 8000a72:	3714      	adds	r7, #20
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr
 8000a7c:	e000ed00 	.word	0xe000ed00

08000a80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a84:	4b04      	ldr	r3, [pc, #16]	@ (8000a98 <__NVIC_GetPriorityGrouping+0x18>)
 8000a86:	68db      	ldr	r3, [r3, #12]
 8000a88:	0a1b      	lsrs	r3, r3, #8
 8000a8a:	f003 0307 	and.w	r3, r3, #7
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr
 8000a98:	e000ed00 	.word	0xe000ed00

08000a9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b083      	sub	sp, #12
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	6039      	str	r1, [r7, #0]
 8000aa6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	db0a      	blt.n	8000ac6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	b2da      	uxtb	r2, r3
 8000ab4:	490c      	ldr	r1, [pc, #48]	@ (8000ae8 <__NVIC_SetPriority+0x4c>)
 8000ab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aba:	0112      	lsls	r2, r2, #4
 8000abc:	b2d2      	uxtb	r2, r2
 8000abe:	440b      	add	r3, r1
 8000ac0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ac4:	e00a      	b.n	8000adc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	b2da      	uxtb	r2, r3
 8000aca:	4908      	ldr	r1, [pc, #32]	@ (8000aec <__NVIC_SetPriority+0x50>)
 8000acc:	79fb      	ldrb	r3, [r7, #7]
 8000ace:	f003 030f 	and.w	r3, r3, #15
 8000ad2:	3b04      	subs	r3, #4
 8000ad4:	0112      	lsls	r2, r2, #4
 8000ad6:	b2d2      	uxtb	r2, r2
 8000ad8:	440b      	add	r3, r1
 8000ada:	761a      	strb	r2, [r3, #24]
}
 8000adc:	bf00      	nop
 8000ade:	370c      	adds	r7, #12
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr
 8000ae8:	e000e100 	.word	0xe000e100
 8000aec:	e000ed00 	.word	0xe000ed00

08000af0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b089      	sub	sp, #36	@ 0x24
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	60f8      	str	r0, [r7, #12]
 8000af8:	60b9      	str	r1, [r7, #8]
 8000afa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	f003 0307 	and.w	r3, r3, #7
 8000b02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b04:	69fb      	ldr	r3, [r7, #28]
 8000b06:	f1c3 0307 	rsb	r3, r3, #7
 8000b0a:	2b04      	cmp	r3, #4
 8000b0c:	bf28      	it	cs
 8000b0e:	2304      	movcs	r3, #4
 8000b10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b12:	69fb      	ldr	r3, [r7, #28]
 8000b14:	3304      	adds	r3, #4
 8000b16:	2b06      	cmp	r3, #6
 8000b18:	d902      	bls.n	8000b20 <NVIC_EncodePriority+0x30>
 8000b1a:	69fb      	ldr	r3, [r7, #28]
 8000b1c:	3b03      	subs	r3, #3
 8000b1e:	e000      	b.n	8000b22 <NVIC_EncodePriority+0x32>
 8000b20:	2300      	movs	r3, #0
 8000b22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b24:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000b28:	69bb      	ldr	r3, [r7, #24]
 8000b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b2e:	43da      	mvns	r2, r3
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	401a      	ands	r2, r3
 8000b34:	697b      	ldr	r3, [r7, #20]
 8000b36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b38:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b42:	43d9      	mvns	r1, r3
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b48:	4313      	orrs	r3, r2
         );
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	3724      	adds	r7, #36	@ 0x24
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
	...

08000b58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	3b01      	subs	r3, #1
 8000b64:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b68:	d301      	bcc.n	8000b6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	e00f      	b.n	8000b8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b6e:	4a0a      	ldr	r2, [pc, #40]	@ (8000b98 <SysTick_Config+0x40>)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	3b01      	subs	r3, #1
 8000b74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b76:	210f      	movs	r1, #15
 8000b78:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000b7c:	f7ff ff8e 	bl	8000a9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b80:	4b05      	ldr	r3, [pc, #20]	@ (8000b98 <SysTick_Config+0x40>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b86:	4b04      	ldr	r3, [pc, #16]	@ (8000b98 <SysTick_Config+0x40>)
 8000b88:	2207      	movs	r2, #7
 8000b8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b8c:	2300      	movs	r3, #0
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	e000e010 	.word	0xe000e010

08000b9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ba4:	6878      	ldr	r0, [r7, #4]
 8000ba6:	f7ff ff47 	bl	8000a38 <__NVIC_SetPriorityGrouping>
}
 8000baa:	bf00      	nop
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}

08000bb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bb2:	b580      	push	{r7, lr}
 8000bb4:	b086      	sub	sp, #24
 8000bb6:	af00      	add	r7, sp, #0
 8000bb8:	4603      	mov	r3, r0
 8000bba:	60b9      	str	r1, [r7, #8]
 8000bbc:	607a      	str	r2, [r7, #4]
 8000bbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bc4:	f7ff ff5c 	bl	8000a80 <__NVIC_GetPriorityGrouping>
 8000bc8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bca:	687a      	ldr	r2, [r7, #4]
 8000bcc:	68b9      	ldr	r1, [r7, #8]
 8000bce:	6978      	ldr	r0, [r7, #20]
 8000bd0:	f7ff ff8e 	bl	8000af0 <NVIC_EncodePriority>
 8000bd4:	4602      	mov	r2, r0
 8000bd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bda:	4611      	mov	r1, r2
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f7ff ff5d 	bl	8000a9c <__NVIC_SetPriority>
}
 8000be2:	bf00      	nop
 8000be4:	3718      	adds	r7, #24
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}

08000bea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bea:	b580      	push	{r7, lr}
 8000bec:	b082      	sub	sp, #8
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bf2:	6878      	ldr	r0, [r7, #4]
 8000bf4:	f7ff ffb0 	bl	8000b58 <SysTick_Config>
 8000bf8:	4603      	mov	r3, r0
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	3708      	adds	r7, #8
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
	...

08000c04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b089      	sub	sp, #36	@ 0x24
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
 8000c0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c12:	2300      	movs	r3, #0
 8000c14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c16:	2300      	movs	r3, #0
 8000c18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	61fb      	str	r3, [r7, #28]
 8000c1e:	e159      	b.n	8000ed4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c20:	2201      	movs	r2, #1
 8000c22:	69fb      	ldr	r3, [r7, #28]
 8000c24:	fa02 f303 	lsl.w	r3, r2, r3
 8000c28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	697a      	ldr	r2, [r7, #20]
 8000c30:	4013      	ands	r3, r2
 8000c32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c34:	693a      	ldr	r2, [r7, #16]
 8000c36:	697b      	ldr	r3, [r7, #20]
 8000c38:	429a      	cmp	r2, r3
 8000c3a:	f040 8148 	bne.w	8000ece <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	f003 0303 	and.w	r3, r3, #3
 8000c46:	2b01      	cmp	r3, #1
 8000c48:	d005      	beq.n	8000c56 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	685b      	ldr	r3, [r3, #4]
 8000c4e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c52:	2b02      	cmp	r3, #2
 8000c54:	d130      	bne.n	8000cb8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	689b      	ldr	r3, [r3, #8]
 8000c5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c5c:	69fb      	ldr	r3, [r7, #28]
 8000c5e:	005b      	lsls	r3, r3, #1
 8000c60:	2203      	movs	r2, #3
 8000c62:	fa02 f303 	lsl.w	r3, r2, r3
 8000c66:	43db      	mvns	r3, r3
 8000c68:	69ba      	ldr	r2, [r7, #24]
 8000c6a:	4013      	ands	r3, r2
 8000c6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	68da      	ldr	r2, [r3, #12]
 8000c72:	69fb      	ldr	r3, [r7, #28]
 8000c74:	005b      	lsls	r3, r3, #1
 8000c76:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7a:	69ba      	ldr	r2, [r7, #24]
 8000c7c:	4313      	orrs	r3, r2
 8000c7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	69ba      	ldr	r2, [r7, #24]
 8000c84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	69fb      	ldr	r3, [r7, #28]
 8000c90:	fa02 f303 	lsl.w	r3, r2, r3
 8000c94:	43db      	mvns	r3, r3
 8000c96:	69ba      	ldr	r2, [r7, #24]
 8000c98:	4013      	ands	r3, r2
 8000c9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	091b      	lsrs	r3, r3, #4
 8000ca2:	f003 0201 	and.w	r2, r3, #1
 8000ca6:	69fb      	ldr	r3, [r7, #28]
 8000ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cac:	69ba      	ldr	r2, [r7, #24]
 8000cae:	4313      	orrs	r3, r2
 8000cb0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	69ba      	ldr	r2, [r7, #24]
 8000cb6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	f003 0303 	and.w	r3, r3, #3
 8000cc0:	2b03      	cmp	r3, #3
 8000cc2:	d017      	beq.n	8000cf4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	68db      	ldr	r3, [r3, #12]
 8000cc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000cca:	69fb      	ldr	r3, [r7, #28]
 8000ccc:	005b      	lsls	r3, r3, #1
 8000cce:	2203      	movs	r2, #3
 8000cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd4:	43db      	mvns	r3, r3
 8000cd6:	69ba      	ldr	r2, [r7, #24]
 8000cd8:	4013      	ands	r3, r2
 8000cda:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	689a      	ldr	r2, [r3, #8]
 8000ce0:	69fb      	ldr	r3, [r7, #28]
 8000ce2:	005b      	lsls	r3, r3, #1
 8000ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce8:	69ba      	ldr	r2, [r7, #24]
 8000cea:	4313      	orrs	r3, r2
 8000cec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	69ba      	ldr	r2, [r7, #24]
 8000cf2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	f003 0303 	and.w	r3, r3, #3
 8000cfc:	2b02      	cmp	r3, #2
 8000cfe:	d123      	bne.n	8000d48 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d00:	69fb      	ldr	r3, [r7, #28]
 8000d02:	08da      	lsrs	r2, r3, #3
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	3208      	adds	r2, #8
 8000d08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d0e:	69fb      	ldr	r3, [r7, #28]
 8000d10:	f003 0307 	and.w	r3, r3, #7
 8000d14:	009b      	lsls	r3, r3, #2
 8000d16:	220f      	movs	r2, #15
 8000d18:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1c:	43db      	mvns	r3, r3
 8000d1e:	69ba      	ldr	r2, [r7, #24]
 8000d20:	4013      	ands	r3, r2
 8000d22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	691a      	ldr	r2, [r3, #16]
 8000d28:	69fb      	ldr	r3, [r7, #28]
 8000d2a:	f003 0307 	and.w	r3, r3, #7
 8000d2e:	009b      	lsls	r3, r3, #2
 8000d30:	fa02 f303 	lsl.w	r3, r2, r3
 8000d34:	69ba      	ldr	r2, [r7, #24]
 8000d36:	4313      	orrs	r3, r2
 8000d38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d3a:	69fb      	ldr	r3, [r7, #28]
 8000d3c:	08da      	lsrs	r2, r3, #3
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	3208      	adds	r2, #8
 8000d42:	69b9      	ldr	r1, [r7, #24]
 8000d44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	005b      	lsls	r3, r3, #1
 8000d52:	2203      	movs	r2, #3
 8000d54:	fa02 f303 	lsl.w	r3, r2, r3
 8000d58:	43db      	mvns	r3, r3
 8000d5a:	69ba      	ldr	r2, [r7, #24]
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	f003 0203 	and.w	r2, r3, #3
 8000d68:	69fb      	ldr	r3, [r7, #28]
 8000d6a:	005b      	lsls	r3, r3, #1
 8000d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d70:	69ba      	ldr	r2, [r7, #24]
 8000d72:	4313      	orrs	r3, r2
 8000d74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	69ba      	ldr	r2, [r7, #24]
 8000d7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	f000 80a2 	beq.w	8000ece <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	60fb      	str	r3, [r7, #12]
 8000d8e:	4b57      	ldr	r3, [pc, #348]	@ (8000eec <HAL_GPIO_Init+0x2e8>)
 8000d90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d92:	4a56      	ldr	r2, [pc, #344]	@ (8000eec <HAL_GPIO_Init+0x2e8>)
 8000d94:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d98:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d9a:	4b54      	ldr	r3, [pc, #336]	@ (8000eec <HAL_GPIO_Init+0x2e8>)
 8000d9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000da2:	60fb      	str	r3, [r7, #12]
 8000da4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000da6:	4a52      	ldr	r2, [pc, #328]	@ (8000ef0 <HAL_GPIO_Init+0x2ec>)
 8000da8:	69fb      	ldr	r3, [r7, #28]
 8000daa:	089b      	lsrs	r3, r3, #2
 8000dac:	3302      	adds	r3, #2
 8000dae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000db2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000db4:	69fb      	ldr	r3, [r7, #28]
 8000db6:	f003 0303 	and.w	r3, r3, #3
 8000dba:	009b      	lsls	r3, r3, #2
 8000dbc:	220f      	movs	r2, #15
 8000dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc2:	43db      	mvns	r3, r3
 8000dc4:	69ba      	ldr	r2, [r7, #24]
 8000dc6:	4013      	ands	r3, r2
 8000dc8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	4a49      	ldr	r2, [pc, #292]	@ (8000ef4 <HAL_GPIO_Init+0x2f0>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d019      	beq.n	8000e06 <HAL_GPIO_Init+0x202>
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4a48      	ldr	r2, [pc, #288]	@ (8000ef8 <HAL_GPIO_Init+0x2f4>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d013      	beq.n	8000e02 <HAL_GPIO_Init+0x1fe>
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4a47      	ldr	r2, [pc, #284]	@ (8000efc <HAL_GPIO_Init+0x2f8>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d00d      	beq.n	8000dfe <HAL_GPIO_Init+0x1fa>
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	4a46      	ldr	r2, [pc, #280]	@ (8000f00 <HAL_GPIO_Init+0x2fc>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d007      	beq.n	8000dfa <HAL_GPIO_Init+0x1f6>
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	4a45      	ldr	r2, [pc, #276]	@ (8000f04 <HAL_GPIO_Init+0x300>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d101      	bne.n	8000df6 <HAL_GPIO_Init+0x1f2>
 8000df2:	2304      	movs	r3, #4
 8000df4:	e008      	b.n	8000e08 <HAL_GPIO_Init+0x204>
 8000df6:	2307      	movs	r3, #7
 8000df8:	e006      	b.n	8000e08 <HAL_GPIO_Init+0x204>
 8000dfa:	2303      	movs	r3, #3
 8000dfc:	e004      	b.n	8000e08 <HAL_GPIO_Init+0x204>
 8000dfe:	2302      	movs	r3, #2
 8000e00:	e002      	b.n	8000e08 <HAL_GPIO_Init+0x204>
 8000e02:	2301      	movs	r3, #1
 8000e04:	e000      	b.n	8000e08 <HAL_GPIO_Init+0x204>
 8000e06:	2300      	movs	r3, #0
 8000e08:	69fa      	ldr	r2, [r7, #28]
 8000e0a:	f002 0203 	and.w	r2, r2, #3
 8000e0e:	0092      	lsls	r2, r2, #2
 8000e10:	4093      	lsls	r3, r2
 8000e12:	69ba      	ldr	r2, [r7, #24]
 8000e14:	4313      	orrs	r3, r2
 8000e16:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e18:	4935      	ldr	r1, [pc, #212]	@ (8000ef0 <HAL_GPIO_Init+0x2ec>)
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	089b      	lsrs	r3, r3, #2
 8000e1e:	3302      	adds	r3, #2
 8000e20:	69ba      	ldr	r2, [r7, #24]
 8000e22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e26:	4b38      	ldr	r3, [pc, #224]	@ (8000f08 <HAL_GPIO_Init+0x304>)
 8000e28:	689b      	ldr	r3, [r3, #8]
 8000e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e2c:	693b      	ldr	r3, [r7, #16]
 8000e2e:	43db      	mvns	r3, r3
 8000e30:	69ba      	ldr	r2, [r7, #24]
 8000e32:	4013      	ands	r3, r2
 8000e34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d003      	beq.n	8000e4a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000e42:	69ba      	ldr	r2, [r7, #24]
 8000e44:	693b      	ldr	r3, [r7, #16]
 8000e46:	4313      	orrs	r3, r2
 8000e48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e4a:	4a2f      	ldr	r2, [pc, #188]	@ (8000f08 <HAL_GPIO_Init+0x304>)
 8000e4c:	69bb      	ldr	r3, [r7, #24]
 8000e4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e50:	4b2d      	ldr	r3, [pc, #180]	@ (8000f08 <HAL_GPIO_Init+0x304>)
 8000e52:	68db      	ldr	r3, [r3, #12]
 8000e54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e56:	693b      	ldr	r3, [r7, #16]
 8000e58:	43db      	mvns	r3, r3
 8000e5a:	69ba      	ldr	r2, [r7, #24]
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d003      	beq.n	8000e74 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000e6c:	69ba      	ldr	r2, [r7, #24]
 8000e6e:	693b      	ldr	r3, [r7, #16]
 8000e70:	4313      	orrs	r3, r2
 8000e72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e74:	4a24      	ldr	r2, [pc, #144]	@ (8000f08 <HAL_GPIO_Init+0x304>)
 8000e76:	69bb      	ldr	r3, [r7, #24]
 8000e78:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000e7a:	4b23      	ldr	r3, [pc, #140]	@ (8000f08 <HAL_GPIO_Init+0x304>)
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e80:	693b      	ldr	r3, [r7, #16]
 8000e82:	43db      	mvns	r3, r3
 8000e84:	69ba      	ldr	r2, [r7, #24]
 8000e86:	4013      	ands	r3, r2
 8000e88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d003      	beq.n	8000e9e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000e96:	69ba      	ldr	r2, [r7, #24]
 8000e98:	693b      	ldr	r3, [r7, #16]
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e9e:	4a1a      	ldr	r2, [pc, #104]	@ (8000f08 <HAL_GPIO_Init+0x304>)
 8000ea0:	69bb      	ldr	r3, [r7, #24]
 8000ea2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ea4:	4b18      	ldr	r3, [pc, #96]	@ (8000f08 <HAL_GPIO_Init+0x304>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eaa:	693b      	ldr	r3, [r7, #16]
 8000eac:	43db      	mvns	r3, r3
 8000eae:	69ba      	ldr	r2, [r7, #24]
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d003      	beq.n	8000ec8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000ec0:	69ba      	ldr	r2, [r7, #24]
 8000ec2:	693b      	ldr	r3, [r7, #16]
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ec8:	4a0f      	ldr	r2, [pc, #60]	@ (8000f08 <HAL_GPIO_Init+0x304>)
 8000eca:	69bb      	ldr	r3, [r7, #24]
 8000ecc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	61fb      	str	r3, [r7, #28]
 8000ed4:	69fb      	ldr	r3, [r7, #28]
 8000ed6:	2b0f      	cmp	r3, #15
 8000ed8:	f67f aea2 	bls.w	8000c20 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000edc:	bf00      	nop
 8000ede:	bf00      	nop
 8000ee0:	3724      	adds	r7, #36	@ 0x24
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	40023800 	.word	0x40023800
 8000ef0:	40013800 	.word	0x40013800
 8000ef4:	40020000 	.word	0x40020000
 8000ef8:	40020400 	.word	0x40020400
 8000efc:	40020800 	.word	0x40020800
 8000f00:	40020c00 	.word	0x40020c00
 8000f04:	40021000 	.word	0x40021000
 8000f08:	40013c00 	.word	0x40013c00

08000f0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
 8000f14:	460b      	mov	r3, r1
 8000f16:	807b      	strh	r3, [r7, #2]
 8000f18:	4613      	mov	r3, r2
 8000f1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f1c:	787b      	ldrb	r3, [r7, #1]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d003      	beq.n	8000f2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f22:	887a      	ldrh	r2, [r7, #2]
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000f28:	e003      	b.n	8000f32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f2a:	887b      	ldrh	r3, [r7, #2]
 8000f2c:	041a      	lsls	r2, r3, #16
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	619a      	str	r2, [r3, #24]
}
 8000f32:	bf00      	nop
 8000f34:	370c      	adds	r7, #12
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
	...

08000f40 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b086      	sub	sp, #24
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d101      	bne.n	8000f52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	e267      	b.n	8001422 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f003 0301 	and.w	r3, r3, #1
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d075      	beq.n	800104a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000f5e:	4b88      	ldr	r3, [pc, #544]	@ (8001180 <HAL_RCC_OscConfig+0x240>)
 8000f60:	689b      	ldr	r3, [r3, #8]
 8000f62:	f003 030c 	and.w	r3, r3, #12
 8000f66:	2b04      	cmp	r3, #4
 8000f68:	d00c      	beq.n	8000f84 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f6a:	4b85      	ldr	r3, [pc, #532]	@ (8001180 <HAL_RCC_OscConfig+0x240>)
 8000f6c:	689b      	ldr	r3, [r3, #8]
 8000f6e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000f72:	2b08      	cmp	r3, #8
 8000f74:	d112      	bne.n	8000f9c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f76:	4b82      	ldr	r3, [pc, #520]	@ (8001180 <HAL_RCC_OscConfig+0x240>)
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000f7e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8000f82:	d10b      	bne.n	8000f9c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f84:	4b7e      	ldr	r3, [pc, #504]	@ (8001180 <HAL_RCC_OscConfig+0x240>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d05b      	beq.n	8001048 <HAL_RCC_OscConfig+0x108>
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d157      	bne.n	8001048 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	e242      	b.n	8001422 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000fa4:	d106      	bne.n	8000fb4 <HAL_RCC_OscConfig+0x74>
 8000fa6:	4b76      	ldr	r3, [pc, #472]	@ (8001180 <HAL_RCC_OscConfig+0x240>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4a75      	ldr	r2, [pc, #468]	@ (8001180 <HAL_RCC_OscConfig+0x240>)
 8000fac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000fb0:	6013      	str	r3, [r2, #0]
 8000fb2:	e01d      	b.n	8000ff0 <HAL_RCC_OscConfig+0xb0>
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000fbc:	d10c      	bne.n	8000fd8 <HAL_RCC_OscConfig+0x98>
 8000fbe:	4b70      	ldr	r3, [pc, #448]	@ (8001180 <HAL_RCC_OscConfig+0x240>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4a6f      	ldr	r2, [pc, #444]	@ (8001180 <HAL_RCC_OscConfig+0x240>)
 8000fc4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000fc8:	6013      	str	r3, [r2, #0]
 8000fca:	4b6d      	ldr	r3, [pc, #436]	@ (8001180 <HAL_RCC_OscConfig+0x240>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4a6c      	ldr	r2, [pc, #432]	@ (8001180 <HAL_RCC_OscConfig+0x240>)
 8000fd0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000fd4:	6013      	str	r3, [r2, #0]
 8000fd6:	e00b      	b.n	8000ff0 <HAL_RCC_OscConfig+0xb0>
 8000fd8:	4b69      	ldr	r3, [pc, #420]	@ (8001180 <HAL_RCC_OscConfig+0x240>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a68      	ldr	r2, [pc, #416]	@ (8001180 <HAL_RCC_OscConfig+0x240>)
 8000fde:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000fe2:	6013      	str	r3, [r2, #0]
 8000fe4:	4b66      	ldr	r3, [pc, #408]	@ (8001180 <HAL_RCC_OscConfig+0x240>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a65      	ldr	r2, [pc, #404]	@ (8001180 <HAL_RCC_OscConfig+0x240>)
 8000fea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000fee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d013      	beq.n	8001020 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ff8:	f7ff fcee 	bl	80009d8 <HAL_GetTick>
 8000ffc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ffe:	e008      	b.n	8001012 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001000:	f7ff fcea 	bl	80009d8 <HAL_GetTick>
 8001004:	4602      	mov	r2, r0
 8001006:	693b      	ldr	r3, [r7, #16]
 8001008:	1ad3      	subs	r3, r2, r3
 800100a:	2b64      	cmp	r3, #100	@ 0x64
 800100c:	d901      	bls.n	8001012 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800100e:	2303      	movs	r3, #3
 8001010:	e207      	b.n	8001422 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001012:	4b5b      	ldr	r3, [pc, #364]	@ (8001180 <HAL_RCC_OscConfig+0x240>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800101a:	2b00      	cmp	r3, #0
 800101c:	d0f0      	beq.n	8001000 <HAL_RCC_OscConfig+0xc0>
 800101e:	e014      	b.n	800104a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001020:	f7ff fcda 	bl	80009d8 <HAL_GetTick>
 8001024:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001026:	e008      	b.n	800103a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001028:	f7ff fcd6 	bl	80009d8 <HAL_GetTick>
 800102c:	4602      	mov	r2, r0
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	1ad3      	subs	r3, r2, r3
 8001032:	2b64      	cmp	r3, #100	@ 0x64
 8001034:	d901      	bls.n	800103a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001036:	2303      	movs	r3, #3
 8001038:	e1f3      	b.n	8001422 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800103a:	4b51      	ldr	r3, [pc, #324]	@ (8001180 <HAL_RCC_OscConfig+0x240>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001042:	2b00      	cmp	r3, #0
 8001044:	d1f0      	bne.n	8001028 <HAL_RCC_OscConfig+0xe8>
 8001046:	e000      	b.n	800104a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001048:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f003 0302 	and.w	r3, r3, #2
 8001052:	2b00      	cmp	r3, #0
 8001054:	d063      	beq.n	800111e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001056:	4b4a      	ldr	r3, [pc, #296]	@ (8001180 <HAL_RCC_OscConfig+0x240>)
 8001058:	689b      	ldr	r3, [r3, #8]
 800105a:	f003 030c 	and.w	r3, r3, #12
 800105e:	2b00      	cmp	r3, #0
 8001060:	d00b      	beq.n	800107a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001062:	4b47      	ldr	r3, [pc, #284]	@ (8001180 <HAL_RCC_OscConfig+0x240>)
 8001064:	689b      	ldr	r3, [r3, #8]
 8001066:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800106a:	2b08      	cmp	r3, #8
 800106c:	d11c      	bne.n	80010a8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800106e:	4b44      	ldr	r3, [pc, #272]	@ (8001180 <HAL_RCC_OscConfig+0x240>)
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001076:	2b00      	cmp	r3, #0
 8001078:	d116      	bne.n	80010a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800107a:	4b41      	ldr	r3, [pc, #260]	@ (8001180 <HAL_RCC_OscConfig+0x240>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f003 0302 	and.w	r3, r3, #2
 8001082:	2b00      	cmp	r3, #0
 8001084:	d005      	beq.n	8001092 <HAL_RCC_OscConfig+0x152>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	68db      	ldr	r3, [r3, #12]
 800108a:	2b01      	cmp	r3, #1
 800108c:	d001      	beq.n	8001092 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800108e:	2301      	movs	r3, #1
 8001090:	e1c7      	b.n	8001422 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001092:	4b3b      	ldr	r3, [pc, #236]	@ (8001180 <HAL_RCC_OscConfig+0x240>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	691b      	ldr	r3, [r3, #16]
 800109e:	00db      	lsls	r3, r3, #3
 80010a0:	4937      	ldr	r1, [pc, #220]	@ (8001180 <HAL_RCC_OscConfig+0x240>)
 80010a2:	4313      	orrs	r3, r2
 80010a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010a6:	e03a      	b.n	800111e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	68db      	ldr	r3, [r3, #12]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d020      	beq.n	80010f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010b0:	4b34      	ldr	r3, [pc, #208]	@ (8001184 <HAL_RCC_OscConfig+0x244>)
 80010b2:	2201      	movs	r2, #1
 80010b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010b6:	f7ff fc8f 	bl	80009d8 <HAL_GetTick>
 80010ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010bc:	e008      	b.n	80010d0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010be:	f7ff fc8b 	bl	80009d8 <HAL_GetTick>
 80010c2:	4602      	mov	r2, r0
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	1ad3      	subs	r3, r2, r3
 80010c8:	2b02      	cmp	r3, #2
 80010ca:	d901      	bls.n	80010d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80010cc:	2303      	movs	r3, #3
 80010ce:	e1a8      	b.n	8001422 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010d0:	4b2b      	ldr	r3, [pc, #172]	@ (8001180 <HAL_RCC_OscConfig+0x240>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f003 0302 	and.w	r3, r3, #2
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d0f0      	beq.n	80010be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010dc:	4b28      	ldr	r3, [pc, #160]	@ (8001180 <HAL_RCC_OscConfig+0x240>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	691b      	ldr	r3, [r3, #16]
 80010e8:	00db      	lsls	r3, r3, #3
 80010ea:	4925      	ldr	r1, [pc, #148]	@ (8001180 <HAL_RCC_OscConfig+0x240>)
 80010ec:	4313      	orrs	r3, r2
 80010ee:	600b      	str	r3, [r1, #0]
 80010f0:	e015      	b.n	800111e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010f2:	4b24      	ldr	r3, [pc, #144]	@ (8001184 <HAL_RCC_OscConfig+0x244>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010f8:	f7ff fc6e 	bl	80009d8 <HAL_GetTick>
 80010fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010fe:	e008      	b.n	8001112 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001100:	f7ff fc6a 	bl	80009d8 <HAL_GetTick>
 8001104:	4602      	mov	r2, r0
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	1ad3      	subs	r3, r2, r3
 800110a:	2b02      	cmp	r3, #2
 800110c:	d901      	bls.n	8001112 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800110e:	2303      	movs	r3, #3
 8001110:	e187      	b.n	8001422 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001112:	4b1b      	ldr	r3, [pc, #108]	@ (8001180 <HAL_RCC_OscConfig+0x240>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f003 0302 	and.w	r3, r3, #2
 800111a:	2b00      	cmp	r3, #0
 800111c:	d1f0      	bne.n	8001100 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f003 0308 	and.w	r3, r3, #8
 8001126:	2b00      	cmp	r3, #0
 8001128:	d036      	beq.n	8001198 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	695b      	ldr	r3, [r3, #20]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d016      	beq.n	8001160 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001132:	4b15      	ldr	r3, [pc, #84]	@ (8001188 <HAL_RCC_OscConfig+0x248>)
 8001134:	2201      	movs	r2, #1
 8001136:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001138:	f7ff fc4e 	bl	80009d8 <HAL_GetTick>
 800113c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800113e:	e008      	b.n	8001152 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001140:	f7ff fc4a 	bl	80009d8 <HAL_GetTick>
 8001144:	4602      	mov	r2, r0
 8001146:	693b      	ldr	r3, [r7, #16]
 8001148:	1ad3      	subs	r3, r2, r3
 800114a:	2b02      	cmp	r3, #2
 800114c:	d901      	bls.n	8001152 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800114e:	2303      	movs	r3, #3
 8001150:	e167      	b.n	8001422 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001152:	4b0b      	ldr	r3, [pc, #44]	@ (8001180 <HAL_RCC_OscConfig+0x240>)
 8001154:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001156:	f003 0302 	and.w	r3, r3, #2
 800115a:	2b00      	cmp	r3, #0
 800115c:	d0f0      	beq.n	8001140 <HAL_RCC_OscConfig+0x200>
 800115e:	e01b      	b.n	8001198 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001160:	4b09      	ldr	r3, [pc, #36]	@ (8001188 <HAL_RCC_OscConfig+0x248>)
 8001162:	2200      	movs	r2, #0
 8001164:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001166:	f7ff fc37 	bl	80009d8 <HAL_GetTick>
 800116a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800116c:	e00e      	b.n	800118c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800116e:	f7ff fc33 	bl	80009d8 <HAL_GetTick>
 8001172:	4602      	mov	r2, r0
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	1ad3      	subs	r3, r2, r3
 8001178:	2b02      	cmp	r3, #2
 800117a:	d907      	bls.n	800118c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800117c:	2303      	movs	r3, #3
 800117e:	e150      	b.n	8001422 <HAL_RCC_OscConfig+0x4e2>
 8001180:	40023800 	.word	0x40023800
 8001184:	42470000 	.word	0x42470000
 8001188:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800118c:	4b88      	ldr	r3, [pc, #544]	@ (80013b0 <HAL_RCC_OscConfig+0x470>)
 800118e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001190:	f003 0302 	and.w	r3, r3, #2
 8001194:	2b00      	cmp	r3, #0
 8001196:	d1ea      	bne.n	800116e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f003 0304 	and.w	r3, r3, #4
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	f000 8097 	beq.w	80012d4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011a6:	2300      	movs	r3, #0
 80011a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011aa:	4b81      	ldr	r3, [pc, #516]	@ (80013b0 <HAL_RCC_OscConfig+0x470>)
 80011ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d10f      	bne.n	80011d6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	60bb      	str	r3, [r7, #8]
 80011ba:	4b7d      	ldr	r3, [pc, #500]	@ (80013b0 <HAL_RCC_OscConfig+0x470>)
 80011bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011be:	4a7c      	ldr	r2, [pc, #496]	@ (80013b0 <HAL_RCC_OscConfig+0x470>)
 80011c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80011c6:	4b7a      	ldr	r3, [pc, #488]	@ (80013b0 <HAL_RCC_OscConfig+0x470>)
 80011c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011ce:	60bb      	str	r3, [r7, #8]
 80011d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80011d2:	2301      	movs	r3, #1
 80011d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011d6:	4b77      	ldr	r3, [pc, #476]	@ (80013b4 <HAL_RCC_OscConfig+0x474>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d118      	bne.n	8001214 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011e2:	4b74      	ldr	r3, [pc, #464]	@ (80013b4 <HAL_RCC_OscConfig+0x474>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4a73      	ldr	r2, [pc, #460]	@ (80013b4 <HAL_RCC_OscConfig+0x474>)
 80011e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011ee:	f7ff fbf3 	bl	80009d8 <HAL_GetTick>
 80011f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011f4:	e008      	b.n	8001208 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011f6:	f7ff fbef 	bl	80009d8 <HAL_GetTick>
 80011fa:	4602      	mov	r2, r0
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	1ad3      	subs	r3, r2, r3
 8001200:	2b02      	cmp	r3, #2
 8001202:	d901      	bls.n	8001208 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001204:	2303      	movs	r3, #3
 8001206:	e10c      	b.n	8001422 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001208:	4b6a      	ldr	r3, [pc, #424]	@ (80013b4 <HAL_RCC_OscConfig+0x474>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001210:	2b00      	cmp	r3, #0
 8001212:	d0f0      	beq.n	80011f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	689b      	ldr	r3, [r3, #8]
 8001218:	2b01      	cmp	r3, #1
 800121a:	d106      	bne.n	800122a <HAL_RCC_OscConfig+0x2ea>
 800121c:	4b64      	ldr	r3, [pc, #400]	@ (80013b0 <HAL_RCC_OscConfig+0x470>)
 800121e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001220:	4a63      	ldr	r2, [pc, #396]	@ (80013b0 <HAL_RCC_OscConfig+0x470>)
 8001222:	f043 0301 	orr.w	r3, r3, #1
 8001226:	6713      	str	r3, [r2, #112]	@ 0x70
 8001228:	e01c      	b.n	8001264 <HAL_RCC_OscConfig+0x324>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	689b      	ldr	r3, [r3, #8]
 800122e:	2b05      	cmp	r3, #5
 8001230:	d10c      	bne.n	800124c <HAL_RCC_OscConfig+0x30c>
 8001232:	4b5f      	ldr	r3, [pc, #380]	@ (80013b0 <HAL_RCC_OscConfig+0x470>)
 8001234:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001236:	4a5e      	ldr	r2, [pc, #376]	@ (80013b0 <HAL_RCC_OscConfig+0x470>)
 8001238:	f043 0304 	orr.w	r3, r3, #4
 800123c:	6713      	str	r3, [r2, #112]	@ 0x70
 800123e:	4b5c      	ldr	r3, [pc, #368]	@ (80013b0 <HAL_RCC_OscConfig+0x470>)
 8001240:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001242:	4a5b      	ldr	r2, [pc, #364]	@ (80013b0 <HAL_RCC_OscConfig+0x470>)
 8001244:	f043 0301 	orr.w	r3, r3, #1
 8001248:	6713      	str	r3, [r2, #112]	@ 0x70
 800124a:	e00b      	b.n	8001264 <HAL_RCC_OscConfig+0x324>
 800124c:	4b58      	ldr	r3, [pc, #352]	@ (80013b0 <HAL_RCC_OscConfig+0x470>)
 800124e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001250:	4a57      	ldr	r2, [pc, #348]	@ (80013b0 <HAL_RCC_OscConfig+0x470>)
 8001252:	f023 0301 	bic.w	r3, r3, #1
 8001256:	6713      	str	r3, [r2, #112]	@ 0x70
 8001258:	4b55      	ldr	r3, [pc, #340]	@ (80013b0 <HAL_RCC_OscConfig+0x470>)
 800125a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800125c:	4a54      	ldr	r2, [pc, #336]	@ (80013b0 <HAL_RCC_OscConfig+0x470>)
 800125e:	f023 0304 	bic.w	r3, r3, #4
 8001262:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	689b      	ldr	r3, [r3, #8]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d015      	beq.n	8001298 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800126c:	f7ff fbb4 	bl	80009d8 <HAL_GetTick>
 8001270:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001272:	e00a      	b.n	800128a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001274:	f7ff fbb0 	bl	80009d8 <HAL_GetTick>
 8001278:	4602      	mov	r2, r0
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001282:	4293      	cmp	r3, r2
 8001284:	d901      	bls.n	800128a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001286:	2303      	movs	r3, #3
 8001288:	e0cb      	b.n	8001422 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800128a:	4b49      	ldr	r3, [pc, #292]	@ (80013b0 <HAL_RCC_OscConfig+0x470>)
 800128c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800128e:	f003 0302 	and.w	r3, r3, #2
 8001292:	2b00      	cmp	r3, #0
 8001294:	d0ee      	beq.n	8001274 <HAL_RCC_OscConfig+0x334>
 8001296:	e014      	b.n	80012c2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001298:	f7ff fb9e 	bl	80009d8 <HAL_GetTick>
 800129c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800129e:	e00a      	b.n	80012b6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012a0:	f7ff fb9a 	bl	80009d8 <HAL_GetTick>
 80012a4:	4602      	mov	r2, r0
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d901      	bls.n	80012b6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80012b2:	2303      	movs	r3, #3
 80012b4:	e0b5      	b.n	8001422 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012b6:	4b3e      	ldr	r3, [pc, #248]	@ (80013b0 <HAL_RCC_OscConfig+0x470>)
 80012b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80012ba:	f003 0302 	and.w	r3, r3, #2
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d1ee      	bne.n	80012a0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80012c2:	7dfb      	ldrb	r3, [r7, #23]
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	d105      	bne.n	80012d4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012c8:	4b39      	ldr	r3, [pc, #228]	@ (80013b0 <HAL_RCC_OscConfig+0x470>)
 80012ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012cc:	4a38      	ldr	r2, [pc, #224]	@ (80013b0 <HAL_RCC_OscConfig+0x470>)
 80012ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80012d2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	699b      	ldr	r3, [r3, #24]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	f000 80a1 	beq.w	8001420 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80012de:	4b34      	ldr	r3, [pc, #208]	@ (80013b0 <HAL_RCC_OscConfig+0x470>)
 80012e0:	689b      	ldr	r3, [r3, #8]
 80012e2:	f003 030c 	and.w	r3, r3, #12
 80012e6:	2b08      	cmp	r3, #8
 80012e8:	d05c      	beq.n	80013a4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	699b      	ldr	r3, [r3, #24]
 80012ee:	2b02      	cmp	r3, #2
 80012f0:	d141      	bne.n	8001376 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012f2:	4b31      	ldr	r3, [pc, #196]	@ (80013b8 <HAL_RCC_OscConfig+0x478>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f8:	f7ff fb6e 	bl	80009d8 <HAL_GetTick>
 80012fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012fe:	e008      	b.n	8001312 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001300:	f7ff fb6a 	bl	80009d8 <HAL_GetTick>
 8001304:	4602      	mov	r2, r0
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	2b02      	cmp	r3, #2
 800130c:	d901      	bls.n	8001312 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800130e:	2303      	movs	r3, #3
 8001310:	e087      	b.n	8001422 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001312:	4b27      	ldr	r3, [pc, #156]	@ (80013b0 <HAL_RCC_OscConfig+0x470>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800131a:	2b00      	cmp	r3, #0
 800131c:	d1f0      	bne.n	8001300 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	69da      	ldr	r2, [r3, #28]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6a1b      	ldr	r3, [r3, #32]
 8001326:	431a      	orrs	r2, r3
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800132c:	019b      	lsls	r3, r3, #6
 800132e:	431a      	orrs	r2, r3
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001334:	085b      	lsrs	r3, r3, #1
 8001336:	3b01      	subs	r3, #1
 8001338:	041b      	lsls	r3, r3, #16
 800133a:	431a      	orrs	r2, r3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001340:	061b      	lsls	r3, r3, #24
 8001342:	491b      	ldr	r1, [pc, #108]	@ (80013b0 <HAL_RCC_OscConfig+0x470>)
 8001344:	4313      	orrs	r3, r2
 8001346:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001348:	4b1b      	ldr	r3, [pc, #108]	@ (80013b8 <HAL_RCC_OscConfig+0x478>)
 800134a:	2201      	movs	r2, #1
 800134c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800134e:	f7ff fb43 	bl	80009d8 <HAL_GetTick>
 8001352:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001354:	e008      	b.n	8001368 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001356:	f7ff fb3f 	bl	80009d8 <HAL_GetTick>
 800135a:	4602      	mov	r2, r0
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	1ad3      	subs	r3, r2, r3
 8001360:	2b02      	cmp	r3, #2
 8001362:	d901      	bls.n	8001368 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001364:	2303      	movs	r3, #3
 8001366:	e05c      	b.n	8001422 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001368:	4b11      	ldr	r3, [pc, #68]	@ (80013b0 <HAL_RCC_OscConfig+0x470>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001370:	2b00      	cmp	r3, #0
 8001372:	d0f0      	beq.n	8001356 <HAL_RCC_OscConfig+0x416>
 8001374:	e054      	b.n	8001420 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001376:	4b10      	ldr	r3, [pc, #64]	@ (80013b8 <HAL_RCC_OscConfig+0x478>)
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800137c:	f7ff fb2c 	bl	80009d8 <HAL_GetTick>
 8001380:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001382:	e008      	b.n	8001396 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001384:	f7ff fb28 	bl	80009d8 <HAL_GetTick>
 8001388:	4602      	mov	r2, r0
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	2b02      	cmp	r3, #2
 8001390:	d901      	bls.n	8001396 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001392:	2303      	movs	r3, #3
 8001394:	e045      	b.n	8001422 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001396:	4b06      	ldr	r3, [pc, #24]	@ (80013b0 <HAL_RCC_OscConfig+0x470>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d1f0      	bne.n	8001384 <HAL_RCC_OscConfig+0x444>
 80013a2:	e03d      	b.n	8001420 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	699b      	ldr	r3, [r3, #24]
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	d107      	bne.n	80013bc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80013ac:	2301      	movs	r3, #1
 80013ae:	e038      	b.n	8001422 <HAL_RCC_OscConfig+0x4e2>
 80013b0:	40023800 	.word	0x40023800
 80013b4:	40007000 	.word	0x40007000
 80013b8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80013bc:	4b1b      	ldr	r3, [pc, #108]	@ (800142c <HAL_RCC_OscConfig+0x4ec>)
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	699b      	ldr	r3, [r3, #24]
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	d028      	beq.n	800141c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80013d4:	429a      	cmp	r2, r3
 80013d6:	d121      	bne.n	800141c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013e2:	429a      	cmp	r2, r3
 80013e4:	d11a      	bne.n	800141c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80013e6:	68fa      	ldr	r2, [r7, #12]
 80013e8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80013ec:	4013      	ands	r3, r2
 80013ee:	687a      	ldr	r2, [r7, #4]
 80013f0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80013f2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d111      	bne.n	800141c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001402:	085b      	lsrs	r3, r3, #1
 8001404:	3b01      	subs	r3, #1
 8001406:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001408:	429a      	cmp	r2, r3
 800140a:	d107      	bne.n	800141c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001416:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001418:	429a      	cmp	r2, r3
 800141a:	d001      	beq.n	8001420 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800141c:	2301      	movs	r3, #1
 800141e:	e000      	b.n	8001422 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001420:	2300      	movs	r3, #0
}
 8001422:	4618      	mov	r0, r3
 8001424:	3718      	adds	r7, #24
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	40023800 	.word	0x40023800

08001430 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d101      	bne.n	8001444 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001440:	2301      	movs	r3, #1
 8001442:	e0cc      	b.n	80015de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001444:	4b68      	ldr	r3, [pc, #416]	@ (80015e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f003 0307 	and.w	r3, r3, #7
 800144c:	683a      	ldr	r2, [r7, #0]
 800144e:	429a      	cmp	r2, r3
 8001450:	d90c      	bls.n	800146c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001452:	4b65      	ldr	r3, [pc, #404]	@ (80015e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001454:	683a      	ldr	r2, [r7, #0]
 8001456:	b2d2      	uxtb	r2, r2
 8001458:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800145a:	4b63      	ldr	r3, [pc, #396]	@ (80015e8 <HAL_RCC_ClockConfig+0x1b8>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f003 0307 	and.w	r3, r3, #7
 8001462:	683a      	ldr	r2, [r7, #0]
 8001464:	429a      	cmp	r2, r3
 8001466:	d001      	beq.n	800146c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001468:	2301      	movs	r3, #1
 800146a:	e0b8      	b.n	80015de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f003 0302 	and.w	r3, r3, #2
 8001474:	2b00      	cmp	r3, #0
 8001476:	d020      	beq.n	80014ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f003 0304 	and.w	r3, r3, #4
 8001480:	2b00      	cmp	r3, #0
 8001482:	d005      	beq.n	8001490 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001484:	4b59      	ldr	r3, [pc, #356]	@ (80015ec <HAL_RCC_ClockConfig+0x1bc>)
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	4a58      	ldr	r2, [pc, #352]	@ (80015ec <HAL_RCC_ClockConfig+0x1bc>)
 800148a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800148e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f003 0308 	and.w	r3, r3, #8
 8001498:	2b00      	cmp	r3, #0
 800149a:	d005      	beq.n	80014a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800149c:	4b53      	ldr	r3, [pc, #332]	@ (80015ec <HAL_RCC_ClockConfig+0x1bc>)
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	4a52      	ldr	r2, [pc, #328]	@ (80015ec <HAL_RCC_ClockConfig+0x1bc>)
 80014a2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80014a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014a8:	4b50      	ldr	r3, [pc, #320]	@ (80015ec <HAL_RCC_ClockConfig+0x1bc>)
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	494d      	ldr	r1, [pc, #308]	@ (80015ec <HAL_RCC_ClockConfig+0x1bc>)
 80014b6:	4313      	orrs	r3, r2
 80014b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f003 0301 	and.w	r3, r3, #1
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d044      	beq.n	8001550 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d107      	bne.n	80014de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014ce:	4b47      	ldr	r3, [pc, #284]	@ (80015ec <HAL_RCC_ClockConfig+0x1bc>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d119      	bne.n	800150e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014da:	2301      	movs	r3, #1
 80014dc:	e07f      	b.n	80015de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	2b02      	cmp	r3, #2
 80014e4:	d003      	beq.n	80014ee <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014ea:	2b03      	cmp	r3, #3
 80014ec:	d107      	bne.n	80014fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014ee:	4b3f      	ldr	r3, [pc, #252]	@ (80015ec <HAL_RCC_ClockConfig+0x1bc>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d109      	bne.n	800150e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e06f      	b.n	80015de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014fe:	4b3b      	ldr	r3, [pc, #236]	@ (80015ec <HAL_RCC_ClockConfig+0x1bc>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f003 0302 	and.w	r3, r3, #2
 8001506:	2b00      	cmp	r3, #0
 8001508:	d101      	bne.n	800150e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e067      	b.n	80015de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800150e:	4b37      	ldr	r3, [pc, #220]	@ (80015ec <HAL_RCC_ClockConfig+0x1bc>)
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	f023 0203 	bic.w	r2, r3, #3
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	4934      	ldr	r1, [pc, #208]	@ (80015ec <HAL_RCC_ClockConfig+0x1bc>)
 800151c:	4313      	orrs	r3, r2
 800151e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001520:	f7ff fa5a 	bl	80009d8 <HAL_GetTick>
 8001524:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001526:	e00a      	b.n	800153e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001528:	f7ff fa56 	bl	80009d8 <HAL_GetTick>
 800152c:	4602      	mov	r2, r0
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001536:	4293      	cmp	r3, r2
 8001538:	d901      	bls.n	800153e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800153a:	2303      	movs	r3, #3
 800153c:	e04f      	b.n	80015de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800153e:	4b2b      	ldr	r3, [pc, #172]	@ (80015ec <HAL_RCC_ClockConfig+0x1bc>)
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	f003 020c 	and.w	r2, r3, #12
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	429a      	cmp	r2, r3
 800154e:	d1eb      	bne.n	8001528 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001550:	4b25      	ldr	r3, [pc, #148]	@ (80015e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f003 0307 	and.w	r3, r3, #7
 8001558:	683a      	ldr	r2, [r7, #0]
 800155a:	429a      	cmp	r2, r3
 800155c:	d20c      	bcs.n	8001578 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800155e:	4b22      	ldr	r3, [pc, #136]	@ (80015e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001560:	683a      	ldr	r2, [r7, #0]
 8001562:	b2d2      	uxtb	r2, r2
 8001564:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001566:	4b20      	ldr	r3, [pc, #128]	@ (80015e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 0307 	and.w	r3, r3, #7
 800156e:	683a      	ldr	r2, [r7, #0]
 8001570:	429a      	cmp	r2, r3
 8001572:	d001      	beq.n	8001578 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001574:	2301      	movs	r3, #1
 8001576:	e032      	b.n	80015de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f003 0304 	and.w	r3, r3, #4
 8001580:	2b00      	cmp	r3, #0
 8001582:	d008      	beq.n	8001596 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001584:	4b19      	ldr	r3, [pc, #100]	@ (80015ec <HAL_RCC_ClockConfig+0x1bc>)
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	4916      	ldr	r1, [pc, #88]	@ (80015ec <HAL_RCC_ClockConfig+0x1bc>)
 8001592:	4313      	orrs	r3, r2
 8001594:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f003 0308 	and.w	r3, r3, #8
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d009      	beq.n	80015b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80015a2:	4b12      	ldr	r3, [pc, #72]	@ (80015ec <HAL_RCC_ClockConfig+0x1bc>)
 80015a4:	689b      	ldr	r3, [r3, #8]
 80015a6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	691b      	ldr	r3, [r3, #16]
 80015ae:	00db      	lsls	r3, r3, #3
 80015b0:	490e      	ldr	r1, [pc, #56]	@ (80015ec <HAL_RCC_ClockConfig+0x1bc>)
 80015b2:	4313      	orrs	r3, r2
 80015b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80015b6:	f000 f821 	bl	80015fc <HAL_RCC_GetSysClockFreq>
 80015ba:	4602      	mov	r2, r0
 80015bc:	4b0b      	ldr	r3, [pc, #44]	@ (80015ec <HAL_RCC_ClockConfig+0x1bc>)
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	091b      	lsrs	r3, r3, #4
 80015c2:	f003 030f 	and.w	r3, r3, #15
 80015c6:	490a      	ldr	r1, [pc, #40]	@ (80015f0 <HAL_RCC_ClockConfig+0x1c0>)
 80015c8:	5ccb      	ldrb	r3, [r1, r3]
 80015ca:	fa22 f303 	lsr.w	r3, r2, r3
 80015ce:	4a09      	ldr	r2, [pc, #36]	@ (80015f4 <HAL_RCC_ClockConfig+0x1c4>)
 80015d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80015d2:	4b09      	ldr	r3, [pc, #36]	@ (80015f8 <HAL_RCC_ClockConfig+0x1c8>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4618      	mov	r0, r3
 80015d8:	f7ff f9ba 	bl	8000950 <HAL_InitTick>

  return HAL_OK;
 80015dc:	2300      	movs	r3, #0
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3710      	adds	r7, #16
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	40023c00 	.word	0x40023c00
 80015ec:	40023800 	.word	0x40023800
 80015f0:	08002200 	.word	0x08002200
 80015f4:	20000000 	.word	0x20000000
 80015f8:	20000004 	.word	0x20000004

080015fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001600:	b090      	sub	sp, #64	@ 0x40
 8001602:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001604:	2300      	movs	r3, #0
 8001606:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8001608:	2300      	movs	r3, #0
 800160a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800160c:	2300      	movs	r3, #0
 800160e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001610:	2300      	movs	r3, #0
 8001612:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001614:	4b59      	ldr	r3, [pc, #356]	@ (800177c <HAL_RCC_GetSysClockFreq+0x180>)
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	f003 030c 	and.w	r3, r3, #12
 800161c:	2b08      	cmp	r3, #8
 800161e:	d00d      	beq.n	800163c <HAL_RCC_GetSysClockFreq+0x40>
 8001620:	2b08      	cmp	r3, #8
 8001622:	f200 80a1 	bhi.w	8001768 <HAL_RCC_GetSysClockFreq+0x16c>
 8001626:	2b00      	cmp	r3, #0
 8001628:	d002      	beq.n	8001630 <HAL_RCC_GetSysClockFreq+0x34>
 800162a:	2b04      	cmp	r3, #4
 800162c:	d003      	beq.n	8001636 <HAL_RCC_GetSysClockFreq+0x3a>
 800162e:	e09b      	b.n	8001768 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001630:	4b53      	ldr	r3, [pc, #332]	@ (8001780 <HAL_RCC_GetSysClockFreq+0x184>)
 8001632:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001634:	e09b      	b.n	800176e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001636:	4b53      	ldr	r3, [pc, #332]	@ (8001784 <HAL_RCC_GetSysClockFreq+0x188>)
 8001638:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800163a:	e098      	b.n	800176e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800163c:	4b4f      	ldr	r3, [pc, #316]	@ (800177c <HAL_RCC_GetSysClockFreq+0x180>)
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001644:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001646:	4b4d      	ldr	r3, [pc, #308]	@ (800177c <HAL_RCC_GetSysClockFreq+0x180>)
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800164e:	2b00      	cmp	r3, #0
 8001650:	d028      	beq.n	80016a4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001652:	4b4a      	ldr	r3, [pc, #296]	@ (800177c <HAL_RCC_GetSysClockFreq+0x180>)
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	099b      	lsrs	r3, r3, #6
 8001658:	2200      	movs	r2, #0
 800165a:	623b      	str	r3, [r7, #32]
 800165c:	627a      	str	r2, [r7, #36]	@ 0x24
 800165e:	6a3b      	ldr	r3, [r7, #32]
 8001660:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001664:	2100      	movs	r1, #0
 8001666:	4b47      	ldr	r3, [pc, #284]	@ (8001784 <HAL_RCC_GetSysClockFreq+0x188>)
 8001668:	fb03 f201 	mul.w	r2, r3, r1
 800166c:	2300      	movs	r3, #0
 800166e:	fb00 f303 	mul.w	r3, r0, r3
 8001672:	4413      	add	r3, r2
 8001674:	4a43      	ldr	r2, [pc, #268]	@ (8001784 <HAL_RCC_GetSysClockFreq+0x188>)
 8001676:	fba0 1202 	umull	r1, r2, r0, r2
 800167a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800167c:	460a      	mov	r2, r1
 800167e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001680:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001682:	4413      	add	r3, r2
 8001684:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001686:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001688:	2200      	movs	r2, #0
 800168a:	61bb      	str	r3, [r7, #24]
 800168c:	61fa      	str	r2, [r7, #28]
 800168e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001692:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001696:	f7fe fd9d 	bl	80001d4 <__aeabi_uldivmod>
 800169a:	4602      	mov	r2, r0
 800169c:	460b      	mov	r3, r1
 800169e:	4613      	mov	r3, r2
 80016a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80016a2:	e053      	b.n	800174c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016a4:	4b35      	ldr	r3, [pc, #212]	@ (800177c <HAL_RCC_GetSysClockFreq+0x180>)
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	099b      	lsrs	r3, r3, #6
 80016aa:	2200      	movs	r2, #0
 80016ac:	613b      	str	r3, [r7, #16]
 80016ae:	617a      	str	r2, [r7, #20]
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80016b6:	f04f 0b00 	mov.w	fp, #0
 80016ba:	4652      	mov	r2, sl
 80016bc:	465b      	mov	r3, fp
 80016be:	f04f 0000 	mov.w	r0, #0
 80016c2:	f04f 0100 	mov.w	r1, #0
 80016c6:	0159      	lsls	r1, r3, #5
 80016c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80016cc:	0150      	lsls	r0, r2, #5
 80016ce:	4602      	mov	r2, r0
 80016d0:	460b      	mov	r3, r1
 80016d2:	ebb2 080a 	subs.w	r8, r2, sl
 80016d6:	eb63 090b 	sbc.w	r9, r3, fp
 80016da:	f04f 0200 	mov.w	r2, #0
 80016de:	f04f 0300 	mov.w	r3, #0
 80016e2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80016e6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80016ea:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80016ee:	ebb2 0408 	subs.w	r4, r2, r8
 80016f2:	eb63 0509 	sbc.w	r5, r3, r9
 80016f6:	f04f 0200 	mov.w	r2, #0
 80016fa:	f04f 0300 	mov.w	r3, #0
 80016fe:	00eb      	lsls	r3, r5, #3
 8001700:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001704:	00e2      	lsls	r2, r4, #3
 8001706:	4614      	mov	r4, r2
 8001708:	461d      	mov	r5, r3
 800170a:	eb14 030a 	adds.w	r3, r4, sl
 800170e:	603b      	str	r3, [r7, #0]
 8001710:	eb45 030b 	adc.w	r3, r5, fp
 8001714:	607b      	str	r3, [r7, #4]
 8001716:	f04f 0200 	mov.w	r2, #0
 800171a:	f04f 0300 	mov.w	r3, #0
 800171e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001722:	4629      	mov	r1, r5
 8001724:	028b      	lsls	r3, r1, #10
 8001726:	4621      	mov	r1, r4
 8001728:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800172c:	4621      	mov	r1, r4
 800172e:	028a      	lsls	r2, r1, #10
 8001730:	4610      	mov	r0, r2
 8001732:	4619      	mov	r1, r3
 8001734:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001736:	2200      	movs	r2, #0
 8001738:	60bb      	str	r3, [r7, #8]
 800173a:	60fa      	str	r2, [r7, #12]
 800173c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001740:	f7fe fd48 	bl	80001d4 <__aeabi_uldivmod>
 8001744:	4602      	mov	r2, r0
 8001746:	460b      	mov	r3, r1
 8001748:	4613      	mov	r3, r2
 800174a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800174c:	4b0b      	ldr	r3, [pc, #44]	@ (800177c <HAL_RCC_GetSysClockFreq+0x180>)
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	0c1b      	lsrs	r3, r3, #16
 8001752:	f003 0303 	and.w	r3, r3, #3
 8001756:	3301      	adds	r3, #1
 8001758:	005b      	lsls	r3, r3, #1
 800175a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800175c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800175e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001760:	fbb2 f3f3 	udiv	r3, r2, r3
 8001764:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001766:	e002      	b.n	800176e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001768:	4b05      	ldr	r3, [pc, #20]	@ (8001780 <HAL_RCC_GetSysClockFreq+0x184>)
 800176a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800176c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800176e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001770:	4618      	mov	r0, r3
 8001772:	3740      	adds	r7, #64	@ 0x40
 8001774:	46bd      	mov	sp, r7
 8001776:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800177a:	bf00      	nop
 800177c:	40023800 	.word	0x40023800
 8001780:	00f42400 	.word	0x00f42400
 8001784:	017d7840 	.word	0x017d7840

08001788 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d101      	bne.n	800179a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e07b      	b.n	8001892 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d108      	bne.n	80017b4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80017aa:	d009      	beq.n	80017c0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2200      	movs	r2, #0
 80017b0:	61da      	str	r2, [r3, #28]
 80017b2:	e005      	b.n	80017c0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2200      	movs	r2, #0
 80017b8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2200      	movs	r2, #0
 80017be:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2200      	movs	r2, #0
 80017c4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d106      	bne.n	80017e0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2200      	movs	r2, #0
 80017d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f7fe ffba 	bl	8000754 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2202      	movs	r2, #2
 80017e4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80017f6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001808:	431a      	orrs	r2, r3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	68db      	ldr	r3, [r3, #12]
 800180e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001812:	431a      	orrs	r2, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	691b      	ldr	r3, [r3, #16]
 8001818:	f003 0302 	and.w	r3, r3, #2
 800181c:	431a      	orrs	r2, r3
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	695b      	ldr	r3, [r3, #20]
 8001822:	f003 0301 	and.w	r3, r3, #1
 8001826:	431a      	orrs	r2, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	699b      	ldr	r3, [r3, #24]
 800182c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001830:	431a      	orrs	r2, r3
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	69db      	ldr	r3, [r3, #28]
 8001836:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800183a:	431a      	orrs	r2, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6a1b      	ldr	r3, [r3, #32]
 8001840:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001844:	ea42 0103 	orr.w	r1, r2, r3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800184c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	430a      	orrs	r2, r1
 8001856:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	699b      	ldr	r3, [r3, #24]
 800185c:	0c1b      	lsrs	r3, r3, #16
 800185e:	f003 0104 	and.w	r1, r3, #4
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001866:	f003 0210 	and.w	r2, r3, #16
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	430a      	orrs	r2, r1
 8001870:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	69da      	ldr	r2, [r3, #28]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001880:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2200      	movs	r2, #0
 8001886:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2201      	movs	r2, #1
 800188c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8001890:	2300      	movs	r3, #0
}
 8001892:	4618      	mov	r0, r3
 8001894:	3708      	adds	r7, #8
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}

0800189a <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800189a:	b580      	push	{r7, lr}
 800189c:	b088      	sub	sp, #32
 800189e:	af00      	add	r7, sp, #0
 80018a0:	60f8      	str	r0, [r7, #12]
 80018a2:	60b9      	str	r1, [r7, #8]
 80018a4:	603b      	str	r3, [r7, #0]
 80018a6:	4613      	mov	r3, r2
 80018a8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80018aa:	f7ff f895 	bl	80009d8 <HAL_GetTick>
 80018ae:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80018b0:	88fb      	ldrh	r3, [r7, #6]
 80018b2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80018ba:	b2db      	uxtb	r3, r3
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d001      	beq.n	80018c4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80018c0:	2302      	movs	r3, #2
 80018c2:	e12a      	b.n	8001b1a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d002      	beq.n	80018d0 <HAL_SPI_Transmit+0x36>
 80018ca:	88fb      	ldrh	r3, [r7, #6]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d101      	bne.n	80018d4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	e122      	b.n	8001b1a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d101      	bne.n	80018e2 <HAL_SPI_Transmit+0x48>
 80018de:	2302      	movs	r3, #2
 80018e0:	e11b      	b.n	8001b1a <HAL_SPI_Transmit+0x280>
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	2201      	movs	r2, #1
 80018e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	2203      	movs	r2, #3
 80018ee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	2200      	movs	r2, #0
 80018f6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	68ba      	ldr	r2, [r7, #8]
 80018fc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	88fa      	ldrh	r2, [r7, #6]
 8001902:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	88fa      	ldrh	r2, [r7, #6]
 8001908:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	2200      	movs	r2, #0
 800190e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	2200      	movs	r2, #0
 8001914:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	2200      	movs	r2, #0
 800191a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	2200      	movs	r2, #0
 8001920:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	2200      	movs	r2, #0
 8001926:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001930:	d10f      	bne.n	8001952 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001940:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001950:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800195c:	2b40      	cmp	r3, #64	@ 0x40
 800195e:	d007      	beq.n	8001970 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800196e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001978:	d152      	bne.n	8001a20 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d002      	beq.n	8001988 <HAL_SPI_Transmit+0xee>
 8001982:	8b7b      	ldrh	r3, [r7, #26]
 8001984:	2b01      	cmp	r3, #1
 8001986:	d145      	bne.n	8001a14 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800198c:	881a      	ldrh	r2, [r3, #0]
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001998:	1c9a      	adds	r2, r3, #2
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80019a2:	b29b      	uxth	r3, r3
 80019a4:	3b01      	subs	r3, #1
 80019a6:	b29a      	uxth	r2, r3
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80019ac:	e032      	b.n	8001a14 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	f003 0302 	and.w	r3, r3, #2
 80019b8:	2b02      	cmp	r3, #2
 80019ba:	d112      	bne.n	80019e2 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019c0:	881a      	ldrh	r2, [r3, #0]
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019cc:	1c9a      	adds	r2, r3, #2
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80019d6:	b29b      	uxth	r3, r3
 80019d8:	3b01      	subs	r3, #1
 80019da:	b29a      	uxth	r2, r3
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	86da      	strh	r2, [r3, #54]	@ 0x36
 80019e0:	e018      	b.n	8001a14 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80019e2:	f7fe fff9 	bl	80009d8 <HAL_GetTick>
 80019e6:	4602      	mov	r2, r0
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	1ad3      	subs	r3, r2, r3
 80019ec:	683a      	ldr	r2, [r7, #0]
 80019ee:	429a      	cmp	r2, r3
 80019f0:	d803      	bhi.n	80019fa <HAL_SPI_Transmit+0x160>
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80019f8:	d102      	bne.n	8001a00 <HAL_SPI_Transmit+0x166>
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d109      	bne.n	8001a14 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	2201      	movs	r2, #1
 8001a04:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8001a10:	2303      	movs	r3, #3
 8001a12:	e082      	b.n	8001b1a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001a18:	b29b      	uxth	r3, r3
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d1c7      	bne.n	80019ae <HAL_SPI_Transmit+0x114>
 8001a1e:	e053      	b.n	8001ac8 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d002      	beq.n	8001a2e <HAL_SPI_Transmit+0x194>
 8001a28:	8b7b      	ldrh	r3, [r7, #26]
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d147      	bne.n	8001abe <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	330c      	adds	r3, #12
 8001a38:	7812      	ldrb	r2, [r2, #0]
 8001a3a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a40:	1c5a      	adds	r2, r3, #1
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001a4a:	b29b      	uxth	r3, r3
 8001a4c:	3b01      	subs	r3, #1
 8001a4e:	b29a      	uxth	r2, r3
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001a54:	e033      	b.n	8001abe <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	f003 0302 	and.w	r3, r3, #2
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d113      	bne.n	8001a8c <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	330c      	adds	r3, #12
 8001a6e:	7812      	ldrb	r2, [r2, #0]
 8001a70:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a76:	1c5a      	adds	r2, r3, #1
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001a80:	b29b      	uxth	r3, r3
 8001a82:	3b01      	subs	r3, #1
 8001a84:	b29a      	uxth	r2, r3
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	86da      	strh	r2, [r3, #54]	@ 0x36
 8001a8a:	e018      	b.n	8001abe <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001a8c:	f7fe ffa4 	bl	80009d8 <HAL_GetTick>
 8001a90:	4602      	mov	r2, r0
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	683a      	ldr	r2, [r7, #0]
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d803      	bhi.n	8001aa4 <HAL_SPI_Transmit+0x20a>
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001aa2:	d102      	bne.n	8001aaa <HAL_SPI_Transmit+0x210>
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d109      	bne.n	8001abe <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	2201      	movs	r2, #1
 8001aae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8001aba:	2303      	movs	r3, #3
 8001abc:	e02d      	b.n	8001b1a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001ac2:	b29b      	uxth	r3, r3
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d1c6      	bne.n	8001a56 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001ac8:	69fa      	ldr	r2, [r7, #28]
 8001aca:	6839      	ldr	r1, [r7, #0]
 8001acc:	68f8      	ldr	r0, [r7, #12]
 8001ace:	f000 f8b1 	bl	8001c34 <SPI_EndRxTxTransaction>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d002      	beq.n	8001ade <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	2220      	movs	r2, #32
 8001adc:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d10a      	bne.n	8001afc <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	617b      	str	r3, [r7, #20]
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	617b      	str	r3, [r7, #20]
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	617b      	str	r3, [r7, #20]
 8001afa:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	2201      	movs	r2, #1
 8001b00:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	2200      	movs	r2, #0
 8001b08:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e000      	b.n	8001b1a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8001b18:	2300      	movs	r3, #0
  }
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3720      	adds	r7, #32
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
	...

08001b24 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b088      	sub	sp, #32
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	60f8      	str	r0, [r7, #12]
 8001b2c:	60b9      	str	r1, [r7, #8]
 8001b2e:	603b      	str	r3, [r7, #0]
 8001b30:	4613      	mov	r3, r2
 8001b32:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001b34:	f7fe ff50 	bl	80009d8 <HAL_GetTick>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b3c:	1a9b      	subs	r3, r3, r2
 8001b3e:	683a      	ldr	r2, [r7, #0]
 8001b40:	4413      	add	r3, r2
 8001b42:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001b44:	f7fe ff48 	bl	80009d8 <HAL_GetTick>
 8001b48:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001b4a:	4b39      	ldr	r3, [pc, #228]	@ (8001c30 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	015b      	lsls	r3, r3, #5
 8001b50:	0d1b      	lsrs	r3, r3, #20
 8001b52:	69fa      	ldr	r2, [r7, #28]
 8001b54:	fb02 f303 	mul.w	r3, r2, r3
 8001b58:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001b5a:	e055      	b.n	8001c08 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001b62:	d051      	beq.n	8001c08 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001b64:	f7fe ff38 	bl	80009d8 <HAL_GetTick>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	69bb      	ldr	r3, [r7, #24]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	69fa      	ldr	r2, [r7, #28]
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d902      	bls.n	8001b7a <SPI_WaitFlagStateUntilTimeout+0x56>
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d13d      	bne.n	8001bf6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	685a      	ldr	r2, [r3, #4]
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8001b88:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001b92:	d111      	bne.n	8001bb8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001b9c:	d004      	beq.n	8001ba8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ba6:	d107      	bne.n	8001bb8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001bb6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bbc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001bc0:	d10f      	bne.n	8001be2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001bd0:	601a      	str	r2, [r3, #0]
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001be0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	2201      	movs	r2, #1
 8001be6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	2200      	movs	r2, #0
 8001bee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	e018      	b.n	8001c28 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d102      	bne.n	8001c02 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	61fb      	str	r3, [r7, #28]
 8001c00:	e002      	b.n	8001c08 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	3b01      	subs	r3, #1
 8001c06:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	689a      	ldr	r2, [r3, #8]
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	4013      	ands	r3, r2
 8001c12:	68ba      	ldr	r2, [r7, #8]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	bf0c      	ite	eq
 8001c18:	2301      	moveq	r3, #1
 8001c1a:	2300      	movne	r3, #0
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	461a      	mov	r2, r3
 8001c20:	79fb      	ldrb	r3, [r7, #7]
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d19a      	bne.n	8001b5c <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8001c26:	2300      	movs	r3, #0
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3720      	adds	r7, #32
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	20000000 	.word	0x20000000

08001c34 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b088      	sub	sp, #32
 8001c38:	af02      	add	r7, sp, #8
 8001c3a:	60f8      	str	r0, [r7, #12]
 8001c3c:	60b9      	str	r1, [r7, #8]
 8001c3e:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	9300      	str	r3, [sp, #0]
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	2201      	movs	r2, #1
 8001c48:	2102      	movs	r1, #2
 8001c4a:	68f8      	ldr	r0, [r7, #12]
 8001c4c:	f7ff ff6a 	bl	8001b24 <SPI_WaitFlagStateUntilTimeout>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d007      	beq.n	8001c66 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c5a:	f043 0220 	orr.w	r2, r3, #32
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8001c62:	2303      	movs	r3, #3
 8001c64:	e032      	b.n	8001ccc <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8001c66:	4b1b      	ldr	r3, [pc, #108]	@ (8001cd4 <SPI_EndRxTxTransaction+0xa0>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a1b      	ldr	r2, [pc, #108]	@ (8001cd8 <SPI_EndRxTxTransaction+0xa4>)
 8001c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c70:	0d5b      	lsrs	r3, r3, #21
 8001c72:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001c76:	fb02 f303 	mul.w	r3, r2, r3
 8001c7a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001c84:	d112      	bne.n	8001cac <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	9300      	str	r3, [sp, #0]
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	2180      	movs	r1, #128	@ 0x80
 8001c90:	68f8      	ldr	r0, [r7, #12]
 8001c92:	f7ff ff47 	bl	8001b24 <SPI_WaitFlagStateUntilTimeout>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d016      	beq.n	8001cca <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ca0:	f043 0220 	orr.w	r2, r3, #32
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8001ca8:	2303      	movs	r3, #3
 8001caa:	e00f      	b.n	8001ccc <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d00a      	beq.n	8001cc8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	3b01      	subs	r3, #1
 8001cb6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cc2:	2b80      	cmp	r3, #128	@ 0x80
 8001cc4:	d0f2      	beq.n	8001cac <SPI_EndRxTxTransaction+0x78>
 8001cc6:	e000      	b.n	8001cca <SPI_EndRxTxTransaction+0x96>
        break;
 8001cc8:	bf00      	nop
  }

  return HAL_OK;
 8001cca:	2300      	movs	r3, #0
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3718      	adds	r7, #24
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	20000000 	.word	0x20000000
 8001cd8:	165e9f81 	.word	0x165e9f81

08001cdc <ST7735_Select>:
    ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

static void ST7735_Select() {
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	2140      	movs	r1, #64	@ 0x40
 8001ce4:	4802      	ldr	r0, [pc, #8]	@ (8001cf0 <ST7735_Select+0x14>)
 8001ce6:	f7ff f911 	bl	8000f0c <HAL_GPIO_WritePin>
}
 8001cea:	bf00      	nop
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	40020400 	.word	0x40020400

08001cf4 <ST7735_Unselect>:

void ST7735_Unselect() {
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	2140      	movs	r1, #64	@ 0x40
 8001cfc:	4802      	ldr	r0, [pc, #8]	@ (8001d08 <ST7735_Unselect+0x14>)
 8001cfe:	f7ff f905 	bl	8000f0c <HAL_GPIO_WritePin>
}
 8001d02:	bf00      	nop
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	40020400 	.word	0x40020400

08001d0c <ST7735_Reset>:

static void ST7735_Reset() {
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 8001d10:	2200      	movs	r2, #0
 8001d12:	2180      	movs	r1, #128	@ 0x80
 8001d14:	4806      	ldr	r0, [pc, #24]	@ (8001d30 <ST7735_Reset+0x24>)
 8001d16:	f7ff f8f9 	bl	8000f0c <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8001d1a:	2005      	movs	r0, #5
 8001d1c:	f7fe fe68 	bl	80009f0 <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 8001d20:	2201      	movs	r2, #1
 8001d22:	2180      	movs	r1, #128	@ 0x80
 8001d24:	4802      	ldr	r0, [pc, #8]	@ (8001d30 <ST7735_Reset+0x24>)
 8001d26:	f7ff f8f1 	bl	8000f0c <HAL_GPIO_WritePin>
}
 8001d2a:	bf00      	nop
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	40020400 	.word	0x40020400

08001d34 <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 8001d3e:	2200      	movs	r2, #0
 8001d40:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001d44:	4806      	ldr	r0, [pc, #24]	@ (8001d60 <ST7735_WriteCommand+0x2c>)
 8001d46:	f7ff f8e1 	bl	8000f0c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8001d4a:	1df9      	adds	r1, r7, #7
 8001d4c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d50:	2201      	movs	r2, #1
 8001d52:	4804      	ldr	r0, [pc, #16]	@ (8001d64 <ST7735_WriteCommand+0x30>)
 8001d54:	f7ff fda1 	bl	800189a <HAL_SPI_Transmit>
}
 8001d58:	bf00      	nop
 8001d5a:	3708      	adds	r7, #8
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	40020000 	.word	0x40020000
 8001d64:	20000030 	.word	0x20000030

08001d68 <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8001d72:	2201      	movs	r2, #1
 8001d74:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001d78:	4807      	ldr	r0, [pc, #28]	@ (8001d98 <ST7735_WriteData+0x30>)
 8001d7a:	f7ff f8c7 	bl	8000f0c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	b29a      	uxth	r2, r3
 8001d82:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d86:	6879      	ldr	r1, [r7, #4]
 8001d88:	4804      	ldr	r0, [pc, #16]	@ (8001d9c <ST7735_WriteData+0x34>)
 8001d8a:	f7ff fd86 	bl	800189a <HAL_SPI_Transmit>
}
 8001d8e:	bf00      	nop
 8001d90:	3708      	adds	r7, #8
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	40020000 	.word	0x40020000
 8001d9c:	20000030 	.word	0x20000030

08001da0 <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b084      	sub	sp, #16
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	1c5a      	adds	r2, r3, #1
 8001dac:	607a      	str	r2, [r7, #4]
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 8001db2:	e034      	b.n	8001e1e <ST7735_ExecuteCommandList+0x7e>
        uint8_t cmd = *addr++;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	1c5a      	adds	r2, r3, #1
 8001db8:	607a      	str	r2, [r7, #4]
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 8001dbe:	7afb      	ldrb	r3, [r7, #11]
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7ff ffb7 	bl	8001d34 <ST7735_WriteCommand>

        numArgs = *addr++;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	1c5a      	adds	r2, r3, #1
 8001dca:	607a      	str	r2, [r7, #4]
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8001dd0:	7abb      	ldrb	r3, [r7, #10]
 8001dd2:	b29b      	uxth	r3, r3
 8001dd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001dd8:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 8001dda:	7abb      	ldrb	r3, [r7, #10]
 8001ddc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001de0:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 8001de2:	7abb      	ldrb	r3, [r7, #10]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d008      	beq.n	8001dfa <ST7735_ExecuteCommandList+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8001de8:	7abb      	ldrb	r3, [r7, #10]
 8001dea:	4619      	mov	r1, r3
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f7ff ffbb 	bl	8001d68 <ST7735_WriteData>
            addr += numArgs;
 8001df2:	7abb      	ldrb	r3, [r7, #10]
 8001df4:	687a      	ldr	r2, [r7, #4]
 8001df6:	4413      	add	r3, r2
 8001df8:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8001dfa:	89bb      	ldrh	r3, [r7, #12]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d00e      	beq.n	8001e1e <ST7735_ExecuteCommandList+0x7e>
            ms = *addr++;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	1c5a      	adds	r2, r3, #1
 8001e04:	607a      	str	r2, [r7, #4]
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 8001e0a:	89bb      	ldrh	r3, [r7, #12]
 8001e0c:	2bff      	cmp	r3, #255	@ 0xff
 8001e0e:	d102      	bne.n	8001e16 <ST7735_ExecuteCommandList+0x76>
 8001e10:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001e14:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 8001e16:	89bb      	ldrh	r3, [r7, #12]
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7fe fde9 	bl	80009f0 <HAL_Delay>
    while(numCommands--) {
 8001e1e:	7bfb      	ldrb	r3, [r7, #15]
 8001e20:	1e5a      	subs	r2, r3, #1
 8001e22:	73fa      	strb	r2, [r7, #15]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d1c5      	bne.n	8001db4 <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 8001e28:	bf00      	nop
 8001e2a:	bf00      	nop
 8001e2c:	3710      	adds	r7, #16
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}

08001e32 <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 8001e32:	b590      	push	{r4, r7, lr}
 8001e34:	b085      	sub	sp, #20
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	4604      	mov	r4, r0
 8001e3a:	4608      	mov	r0, r1
 8001e3c:	4611      	mov	r1, r2
 8001e3e:	461a      	mov	r2, r3
 8001e40:	4623      	mov	r3, r4
 8001e42:	71fb      	strb	r3, [r7, #7]
 8001e44:	4603      	mov	r3, r0
 8001e46:	71bb      	strb	r3, [r7, #6]
 8001e48:	460b      	mov	r3, r1
 8001e4a:	717b      	strb	r3, [r7, #5]
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8001e50:	202a      	movs	r0, #42	@ 0x2a
 8001e52:	f7ff ff6f 	bl	8001d34 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 8001e56:	2300      	movs	r3, #0
 8001e58:	733b      	strb	r3, [r7, #12]
 8001e5a:	79fb      	ldrb	r3, [r7, #7]
 8001e5c:	3301      	adds	r3, #1
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	737b      	strb	r3, [r7, #13]
 8001e62:	2300      	movs	r3, #0
 8001e64:	73bb      	strb	r3, [r7, #14]
 8001e66:	797b      	ldrb	r3, [r7, #5]
 8001e68:	3301      	adds	r3, #1
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8001e6e:	f107 030c 	add.w	r3, r7, #12
 8001e72:	2104      	movs	r1, #4
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7ff ff77 	bl	8001d68 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8001e7a:	202b      	movs	r0, #43	@ 0x2b
 8001e7c:	f7ff ff5a 	bl	8001d34 <ST7735_WriteCommand>
    data[1] = y0 + ST7735_YSTART;
 8001e80:	79bb      	ldrb	r3, [r7, #6]
 8001e82:	3302      	adds	r3, #2
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + ST7735_YSTART;
 8001e88:	793b      	ldrb	r3, [r7, #4]
 8001e8a:	3302      	adds	r3, #2
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8001e90:	f107 030c 	add.w	r3, r7, #12
 8001e94:	2104      	movs	r1, #4
 8001e96:	4618      	mov	r0, r3
 8001e98:	f7ff ff66 	bl	8001d68 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8001e9c:	202c      	movs	r0, #44	@ 0x2c
 8001e9e:	f7ff ff49 	bl	8001d34 <ST7735_WriteCommand>
}
 8001ea2:	bf00      	nop
 8001ea4:	3714      	adds	r7, #20
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd90      	pop	{r4, r7, pc}
	...

08001eac <ST7735_Init>:

void ST7735_Init() {
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
    ST7735_Select();
 8001eb0:	f7ff ff14 	bl	8001cdc <ST7735_Select>
    ST7735_Reset();
 8001eb4:	f7ff ff2a 	bl	8001d0c <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 8001eb8:	4806      	ldr	r0, [pc, #24]	@ (8001ed4 <ST7735_Init+0x28>)
 8001eba:	f7ff ff71 	bl	8001da0 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 8001ebe:	4806      	ldr	r0, [pc, #24]	@ (8001ed8 <ST7735_Init+0x2c>)
 8001ec0:	f7ff ff6e 	bl	8001da0 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 8001ec4:	4805      	ldr	r0, [pc, #20]	@ (8001edc <ST7735_Init+0x30>)
 8001ec6:	f7ff ff6b 	bl	8001da0 <ST7735_ExecuteCommandList>
    ST7735_Unselect();
 8001eca:	f7ff ff13 	bl	8001cf4 <ST7735_Unselect>
}
 8001ece:	bf00      	nop
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	08002f6c 	.word	0x08002f6c
 8001ed8:	08002fa8 	.word	0x08002fa8
 8001edc:	08002fb8 	.word	0x08002fb8

08001ee0 <ST7735_WriteChar>:
    ST7735_WriteData(data, sizeof(data));

    ST7735_Unselect();
}

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8001ee0:	b082      	sub	sp, #8
 8001ee2:	b590      	push	{r4, r7, lr}
 8001ee4:	b089      	sub	sp, #36	@ 0x24
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	637b      	str	r3, [r7, #52]	@ 0x34
 8001eea:	4603      	mov	r3, r0
 8001eec:	80fb      	strh	r3, [r7, #6]
 8001eee:	460b      	mov	r3, r1
 8001ef0:	80bb      	strh	r3, [r7, #4]
 8001ef2:	4613      	mov	r3, r2
 8001ef4:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8001ef6:	88fb      	ldrh	r3, [r7, #6]
 8001ef8:	b2d8      	uxtb	r0, r3
 8001efa:	88bb      	ldrh	r3, [r7, #4]
 8001efc:	b2d9      	uxtb	r1, r3
 8001efe:	88fb      	ldrh	r3, [r7, #6]
 8001f00:	b2da      	uxtb	r2, r3
 8001f02:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001f06:	4413      	add	r3, r2
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	3b01      	subs	r3, #1
 8001f0c:	b2dc      	uxtb	r4, r3
 8001f0e:	88bb      	ldrh	r3, [r7, #4]
 8001f10:	b2da      	uxtb	r2, r3
 8001f12:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8001f16:	4413      	add	r3, r2
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	3b01      	subs	r3, #1
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	4622      	mov	r2, r4
 8001f20:	f7ff ff87 	bl	8001e32 <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8001f24:	2300      	movs	r3, #0
 8001f26:	61fb      	str	r3, [r7, #28]
 8001f28:	e043      	b.n	8001fb2 <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 8001f2a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001f2c:	78fb      	ldrb	r3, [r7, #3]
 8001f2e:	3b20      	subs	r3, #32
 8001f30:	f897 1035 	ldrb.w	r1, [r7, #53]	@ 0x35
 8001f34:	fb01 f303 	mul.w	r3, r1, r3
 8001f38:	4619      	mov	r1, r3
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	440b      	add	r3, r1
 8001f3e:	005b      	lsls	r3, r3, #1
 8001f40:	4413      	add	r3, r2
 8001f42:	881b      	ldrh	r3, [r3, #0]
 8001f44:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 8001f46:	2300      	movs	r3, #0
 8001f48:	61bb      	str	r3, [r7, #24]
 8001f4a:	e029      	b.n	8001fa0 <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 8001f4c:	697a      	ldr	r2, [r7, #20]
 8001f4e:	69bb      	ldr	r3, [r7, #24]
 8001f50:	fa02 f303 	lsl.w	r3, r2, r3
 8001f54:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d00e      	beq.n	8001f7a <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8001f5c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001f5e:	0a1b      	lsrs	r3, r3, #8
 8001f60:	b29b      	uxth	r3, r3
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	743b      	strb	r3, [r7, #16]
 8001f66:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 8001f6c:	f107 0310 	add.w	r3, r7, #16
 8001f70:	2102      	movs	r1, #2
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7ff fef8 	bl	8001d68 <ST7735_WriteData>
 8001f78:	e00f      	b.n	8001f9a <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8001f7a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001f7e:	0a1b      	lsrs	r3, r3, #8
 8001f80:	b29b      	uxth	r3, r3
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	733b      	strb	r3, [r7, #12]
 8001f86:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 8001f8e:	f107 030c 	add.w	r3, r7, #12
 8001f92:	2102      	movs	r1, #2
 8001f94:	4618      	mov	r0, r3
 8001f96:	f7ff fee7 	bl	8001d68 <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 8001f9a:	69bb      	ldr	r3, [r7, #24]
 8001f9c:	3301      	adds	r3, #1
 8001f9e:	61bb      	str	r3, [r7, #24]
 8001fa0:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	69bb      	ldr	r3, [r7, #24]
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d3cf      	bcc.n	8001f4c <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	3301      	adds	r3, #1
 8001fb0:	61fb      	str	r3, [r7, #28]
 8001fb2:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	69fb      	ldr	r3, [r7, #28]
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d3b5      	bcc.n	8001f2a <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 8001fbe:	bf00      	nop
 8001fc0:	bf00      	nop
 8001fc2:	3724      	adds	r7, #36	@ 0x24
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001fca:	b002      	add	sp, #8
 8001fcc:	4770      	bx	lr

08001fce <ST7735_WriteString>:
        }
    }
}
*/

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8001fce:	b082      	sub	sp, #8
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b086      	sub	sp, #24
 8001fd4:	af04      	add	r7, sp, #16
 8001fd6:	603a      	str	r2, [r7, #0]
 8001fd8:	617b      	str	r3, [r7, #20]
 8001fda:	4603      	mov	r3, r0
 8001fdc:	80fb      	strh	r3, [r7, #6]
 8001fde:	460b      	mov	r3, r1
 8001fe0:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 8001fe2:	f7ff fe7b 	bl	8001cdc <ST7735_Select>

    while(*str) {
 8001fe6:	e02d      	b.n	8002044 <ST7735_WriteString+0x76>
        if(x + font.width >= ST7735_WIDTH) {
 8001fe8:	88fb      	ldrh	r3, [r7, #6]
 8001fea:	7d3a      	ldrb	r2, [r7, #20]
 8001fec:	4413      	add	r3, r2
 8001fee:	2b9f      	cmp	r3, #159	@ 0x9f
 8001ff0:	dd13      	ble.n	800201a <ST7735_WriteString+0x4c>
            x = 0;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8001ff6:	7d7b      	ldrb	r3, [r7, #21]
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	88bb      	ldrh	r3, [r7, #4]
 8001ffc:	4413      	add	r3, r2
 8001ffe:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ST7735_HEIGHT) {
 8002000:	88bb      	ldrh	r3, [r7, #4]
 8002002:	7d7a      	ldrb	r2, [r7, #21]
 8002004:	4413      	add	r3, r2
 8002006:	2b7f      	cmp	r3, #127	@ 0x7f
 8002008:	dc21      	bgt.n	800204e <ST7735_WriteString+0x80>
                break;
            }

            if(*str == ' ') {
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	2b20      	cmp	r3, #32
 8002010:	d103      	bne.n	800201a <ST7735_WriteString+0x4c>
                // skip spaces in the beginning of the new line
                str++;
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	3301      	adds	r3, #1
 8002016:	603b      	str	r3, [r7, #0]
                continue;
 8002018:	e014      	b.n	8002044 <ST7735_WriteString+0x76>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	781a      	ldrb	r2, [r3, #0]
 800201e:	88b9      	ldrh	r1, [r7, #4]
 8002020:	88f8      	ldrh	r0, [r7, #6]
 8002022:	8c3b      	ldrh	r3, [r7, #32]
 8002024:	9302      	str	r3, [sp, #8]
 8002026:	8bbb      	ldrh	r3, [r7, #28]
 8002028:	9301      	str	r3, [sp, #4]
 800202a:	69bb      	ldr	r3, [r7, #24]
 800202c:	9300      	str	r3, [sp, #0]
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	f7ff ff56 	bl	8001ee0 <ST7735_WriteChar>
        x += font.width;
 8002034:	7d3b      	ldrb	r3, [r7, #20]
 8002036:	461a      	mov	r2, r3
 8002038:	88fb      	ldrh	r3, [r7, #6]
 800203a:	4413      	add	r3, r2
 800203c:	80fb      	strh	r3, [r7, #6]
        str++;
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	3301      	adds	r3, #1
 8002042:	603b      	str	r3, [r7, #0]
    while(*str) {
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d1cd      	bne.n	8001fe8 <ST7735_WriteString+0x1a>
 800204c:	e000      	b.n	8002050 <ST7735_WriteString+0x82>
                break;
 800204e:	bf00      	nop
    }

    ST7735_Unselect();
 8002050:	f7ff fe50 	bl	8001cf4 <ST7735_Unselect>
}
 8002054:	bf00      	nop
 8002056:	3708      	adds	r7, #8
 8002058:	46bd      	mov	sp, r7
 800205a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800205e:	b002      	add	sp, #8
 8002060:	4770      	bx	lr
	...

08002064 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8002064:	b590      	push	{r4, r7, lr}
 8002066:	b085      	sub	sp, #20
 8002068:	af00      	add	r7, sp, #0
 800206a:	4604      	mov	r4, r0
 800206c:	4608      	mov	r0, r1
 800206e:	4611      	mov	r1, r2
 8002070:	461a      	mov	r2, r3
 8002072:	4623      	mov	r3, r4
 8002074:	80fb      	strh	r3, [r7, #6]
 8002076:	4603      	mov	r3, r0
 8002078:	80bb      	strh	r3, [r7, #4]
 800207a:	460b      	mov	r3, r1
 800207c:	807b      	strh	r3, [r7, #2]
 800207e:	4613      	mov	r3, r2
 8002080:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8002082:	88fb      	ldrh	r3, [r7, #6]
 8002084:	2b9f      	cmp	r3, #159	@ 0x9f
 8002086:	d858      	bhi.n	800213a <ST7735_FillRectangle+0xd6>
 8002088:	88bb      	ldrh	r3, [r7, #4]
 800208a:	2b7f      	cmp	r3, #127	@ 0x7f
 800208c:	d855      	bhi.n	800213a <ST7735_FillRectangle+0xd6>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 800208e:	88fa      	ldrh	r2, [r7, #6]
 8002090:	887b      	ldrh	r3, [r7, #2]
 8002092:	4413      	add	r3, r2
 8002094:	2ba0      	cmp	r3, #160	@ 0xa0
 8002096:	dd03      	ble.n	80020a0 <ST7735_FillRectangle+0x3c>
 8002098:	88fb      	ldrh	r3, [r7, #6]
 800209a:	f1c3 03a0 	rsb	r3, r3, #160	@ 0xa0
 800209e:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 80020a0:	88ba      	ldrh	r2, [r7, #4]
 80020a2:	883b      	ldrh	r3, [r7, #0]
 80020a4:	4413      	add	r3, r2
 80020a6:	2b80      	cmp	r3, #128	@ 0x80
 80020a8:	dd03      	ble.n	80020b2 <ST7735_FillRectangle+0x4e>
 80020aa:	88bb      	ldrh	r3, [r7, #4]
 80020ac:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 80020b0:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 80020b2:	f7ff fe13 	bl	8001cdc <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 80020b6:	88fb      	ldrh	r3, [r7, #6]
 80020b8:	b2d8      	uxtb	r0, r3
 80020ba:	88bb      	ldrh	r3, [r7, #4]
 80020bc:	b2d9      	uxtb	r1, r3
 80020be:	88fb      	ldrh	r3, [r7, #6]
 80020c0:	b2da      	uxtb	r2, r3
 80020c2:	887b      	ldrh	r3, [r7, #2]
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	4413      	add	r3, r2
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	3b01      	subs	r3, #1
 80020cc:	b2dc      	uxtb	r4, r3
 80020ce:	88bb      	ldrh	r3, [r7, #4]
 80020d0:	b2da      	uxtb	r2, r3
 80020d2:	883b      	ldrh	r3, [r7, #0]
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	4413      	add	r3, r2
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	3b01      	subs	r3, #1
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	4622      	mov	r2, r4
 80020e0:	f7ff fea7 	bl	8001e32 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 80020e4:	8c3b      	ldrh	r3, [r7, #32]
 80020e6:	0a1b      	lsrs	r3, r3, #8
 80020e8:	b29b      	uxth	r3, r3
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	733b      	strb	r3, [r7, #12]
 80020ee:	8c3b      	ldrh	r3, [r7, #32]
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 80020f4:	2201      	movs	r2, #1
 80020f6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80020fa:	4812      	ldr	r0, [pc, #72]	@ (8002144 <ST7735_FillRectangle+0xe0>)
 80020fc:	f7fe ff06 	bl	8000f0c <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8002100:	883b      	ldrh	r3, [r7, #0]
 8002102:	80bb      	strh	r3, [r7, #4]
 8002104:	e013      	b.n	800212e <ST7735_FillRectangle+0xca>
        for(x = w; x > 0; x--) {
 8002106:	887b      	ldrh	r3, [r7, #2]
 8002108:	80fb      	strh	r3, [r7, #6]
 800210a:	e00a      	b.n	8002122 <ST7735_FillRectangle+0xbe>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 800210c:	f107 010c 	add.w	r1, r7, #12
 8002110:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002114:	2202      	movs	r2, #2
 8002116:	480c      	ldr	r0, [pc, #48]	@ (8002148 <ST7735_FillRectangle+0xe4>)
 8002118:	f7ff fbbf 	bl	800189a <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 800211c:	88fb      	ldrh	r3, [r7, #6]
 800211e:	3b01      	subs	r3, #1
 8002120:	80fb      	strh	r3, [r7, #6]
 8002122:	88fb      	ldrh	r3, [r7, #6]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d1f1      	bne.n	800210c <ST7735_FillRectangle+0xa8>
    for(y = h; y > 0; y--) {
 8002128:	88bb      	ldrh	r3, [r7, #4]
 800212a:	3b01      	subs	r3, #1
 800212c:	80bb      	strh	r3, [r7, #4]
 800212e:	88bb      	ldrh	r3, [r7, #4]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d1e8      	bne.n	8002106 <ST7735_FillRectangle+0xa2>
        }
    }

    ST7735_Unselect();
 8002134:	f7ff fdde 	bl	8001cf4 <ST7735_Unselect>
 8002138:	e000      	b.n	800213c <ST7735_FillRectangle+0xd8>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 800213a:	bf00      	nop
}
 800213c:	3714      	adds	r7, #20
 800213e:	46bd      	mov	sp, r7
 8002140:	bd90      	pop	{r4, r7, pc}
 8002142:	bf00      	nop
 8002144:	40020000 	.word	0x40020000
 8002148:	20000030 	.word	0x20000030

0800214c <ST7735_FillScreen>:

    free(line);
    ST7735_Unselect();
}

void ST7735_FillScreen(uint16_t color) {
 800214c:	b580      	push	{r7, lr}
 800214e:	b084      	sub	sp, #16
 8002150:	af02      	add	r7, sp, #8
 8002152:	4603      	mov	r3, r0
 8002154:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 8002156:	88fb      	ldrh	r3, [r7, #6]
 8002158:	9300      	str	r3, [sp, #0]
 800215a:	2380      	movs	r3, #128	@ 0x80
 800215c:	22a0      	movs	r2, #160	@ 0xa0
 800215e:	2100      	movs	r1, #0
 8002160:	2000      	movs	r0, #0
 8002162:	f7ff ff7f 	bl	8002064 <ST7735_FillRectangle>
}
 8002166:	bf00      	nop
 8002168:	3708      	adds	r7, #8
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}

0800216e <memset>:
 800216e:	4402      	add	r2, r0
 8002170:	4603      	mov	r3, r0
 8002172:	4293      	cmp	r3, r2
 8002174:	d100      	bne.n	8002178 <memset+0xa>
 8002176:	4770      	bx	lr
 8002178:	f803 1b01 	strb.w	r1, [r3], #1
 800217c:	e7f9      	b.n	8002172 <memset+0x4>
	...

08002180 <__libc_init_array>:
 8002180:	b570      	push	{r4, r5, r6, lr}
 8002182:	4d0d      	ldr	r5, [pc, #52]	@ (80021b8 <__libc_init_array+0x38>)
 8002184:	4c0d      	ldr	r4, [pc, #52]	@ (80021bc <__libc_init_array+0x3c>)
 8002186:	1b64      	subs	r4, r4, r5
 8002188:	10a4      	asrs	r4, r4, #2
 800218a:	2600      	movs	r6, #0
 800218c:	42a6      	cmp	r6, r4
 800218e:	d109      	bne.n	80021a4 <__libc_init_array+0x24>
 8002190:	4d0b      	ldr	r5, [pc, #44]	@ (80021c0 <__libc_init_array+0x40>)
 8002192:	4c0c      	ldr	r4, [pc, #48]	@ (80021c4 <__libc_init_array+0x44>)
 8002194:	f000 f818 	bl	80021c8 <_init>
 8002198:	1b64      	subs	r4, r4, r5
 800219a:	10a4      	asrs	r4, r4, #2
 800219c:	2600      	movs	r6, #0
 800219e:	42a6      	cmp	r6, r4
 80021a0:	d105      	bne.n	80021ae <__libc_init_array+0x2e>
 80021a2:	bd70      	pop	{r4, r5, r6, pc}
 80021a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80021a8:	4798      	blx	r3
 80021aa:	3601      	adds	r6, #1
 80021ac:	e7ee      	b.n	800218c <__libc_init_array+0xc>
 80021ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80021b2:	4798      	blx	r3
 80021b4:	3601      	adds	r6, #1
 80021b6:	e7f2      	b.n	800219e <__libc_init_array+0x1e>
 80021b8:	08002fec 	.word	0x08002fec
 80021bc:	08002fec 	.word	0x08002fec
 80021c0:	08002fec 	.word	0x08002fec
 80021c4:	08002ff0 	.word	0x08002ff0

080021c8 <_init>:
 80021c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021ca:	bf00      	nop
 80021cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021ce:	bc08      	pop	{r3}
 80021d0:	469e      	mov	lr, r3
 80021d2:	4770      	bx	lr

080021d4 <_fini>:
 80021d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021d6:	bf00      	nop
 80021d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021da:	bc08      	pop	{r3}
 80021dc:	469e      	mov	lr, r3
 80021de:	4770      	bx	lr
