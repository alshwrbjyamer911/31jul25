#ifndef SOC_LOOKUP_H
#define SOC_LOOKUP_H

float soc_25c[101] = {
    2.5000, 2.5500, 2.6000, 2.6500, 2.7000, 2.7500, 2.8000, 2.8500, 2.9000, 2.9500,
    3.0000, 3.0200, 3.0400, 3.0600, 3.0800, 3.1000, 3.1200, 3.1400, 3.1600, 3.1800,
    3.2000, 3.2020, 3.2040, 3.2060, 3.2080, 3.2100, 3.2120, 3.2140, 3.2160, 3.2180,
    3.2200, 3.2230, 3.2260, 3.2290, 3.2320, 3.2350, 3.2380, 3.2410, 3.2440, 3.2470,
    3.2500, 3.2510, 3.2520, 3.2530, 3.2540, 3.2550, 3.2560, 3.2570, 3.2580, 3.2590,
    3.2600, 3.2610, 3.2620, 3.2630, 3.2640, 3.2650, 3.2660, 3.2670, 3.2680, 3.2690,
    3.2700, 3.2730, 3.2760, 3.2790, 3.2820, 3.2850, 3.2880, 3.2910, 3.2940, 3.2970,
    3.3000, 3.3020, 3.3040, 3.3060, 3.3080, 3.3100, 3.3120, 3.3140, 3.3160, 3.3180,
    3.3200, 3.3230, 3.3260, 3.3290, 3.3320, 3.3350, 3.3380, 3.3410, 3.3440, 3.3470,
    3.3500, 3.3550, 3.3600, 3.3650, 3.3700, 3.3750, 3.3800, 3.3850, 3.3900, 3.3950,
    3.4000
};

float soc_35c[101] = {
    2.5125, 2.5638, 2.6150, 2.6663, 2.7175, 2.7688, 2.8200, 2.8713, 2.9225, 2.9738,
    3.0250, 3.0455, 3.0660, 3.0865, 3.1070, 3.1275, 3.1480, 3.1685, 3.1890, 3.2095,
    3.2300, 3.2324, 3.2348, 3.2372, 3.2396, 3.2420, 3.2444, 3.2468, 3.2492, 3.2516,
    3.2540, 3.2575, 3.2610, 3.2645, 3.2680, 3.2715, 3.2750, 3.2785, 3.2820, 3.2855,
    3.2890, 3.2900, 3.2910, 3.2920, 3.2930, 3.2940, 3.2950, 3.2960, 3.2970, 3.2980,
    3.2990, 3.3000, 3.3010, 3.3020, 3.3030, 3.3040, 3.3050, 3.3060, 3.3070, 3.3080,
    3.3090, 3.3125, 3.3160, 3.3195, 3.3230, 3.3265, 3.3300, 3.3335, 3.3370, 3.3405,
    3.3440, 3.3460, 3.3480, 3.3500, 3.3520, 3.3540, 3.3560, 3.3580, 3.3600, 3.3620,
    3.3640, 3.3675, 3.3710, 3.3745, 3.3780, 3.3815, 3.3850, 3.3885, 3.3920, 3.3955,
    3.3990, 3.4050, 3.4110, 3.4170, 3.4230, 3.4290, 3.4350, 3.4410, 3.4470, 3.4530,
    3.4590
};

float soc_40c[101] = {
    2.5250, 2.5775, 2.6300, 2.6825, 2.7350, 2.7875, 2.8400, 2.8925, 2.9450, 2.9975,
    3.0500, 3.0710, 3.0920, 3.1130, 3.1340, 3.1550, 3.1760, 3.1970, 3.2180, 3.2390,
    3.2600, 3.2626, 3.2652, 3.2678, 3.2704, 3.2730, 3.2756, 3.2782, 3.2808, 3.2834,
    3.2860, 3.2900, 3.2940, 3.2980, 3.3020, 3.3060, 3.3100, 3.3140, 3.3180, 3.3220,
    3.3260, 3.3275, 3.3290, 3.3305, 3.3320, 3.3335, 3.3350, 3.3365, 3.3380, 3.3395,
    3.3410, 3.3425, 3.3440, 3.3455, 3.3470, 3.3485, 3.3500, 3.3515, 3.3530, 3.3545,
    3.3560, 3.3600, 3.3640, 3.3680, 3.3720, 3.3760, 3.3800, 3.3840, 3.3880, 3.3920,
    3.3960, 3.3985, 3.4010, 3.4035, 3.4060, 3.4085, 3.4110, 3.4135, 3.4160, 3.4185,
    3.4210, 3.4250, 3.4290, 3.4330, 3.4370, 3.4410, 3.4450, 3.4490, 3.4530, 3.4570,
    3.4610, 3.4680, 3.4750, 3.4820, 3.4890, 3.4960, 3.5030, 3.5100, 3.5170, 3.5240,
    3.5310
};

float soc_45c[101] = {
    2.5375, 2.5913, 2.6450, 2.6988, 2.7525, 2.8063, 2.8600, 2.9138, 2.9675, 3.0213,
    3.0750, 3.0965, 3.1180, 3.1395, 3.1610, 3.1825, 3.2040, 3.2255, 3.2470, 3.2685,
    3.2900, 3.2932, 3.2964, 3.2996, 3.3028, 3.3060, 3.3092, 3.3124, 3.3156, 3.3188,
    3.3220, 3.3265, 3.3310, 3.3355, 3.3400, 3.3445, 3.3490, 3.3535, 3.3580, 3.3625,
    3.3670, 3.3688, 3.3705, 3.3723, 3.3740, 3.3758, 3.3775, 3.3793, 3.3810, 3.3828,
    3.3845, 3.3863, 3.3880, 3.3898, 3.3915, 3.3933, 3.3950, 3.3968, 3.3985, 3.4003,
    3.4020, 3.4070, 3.4120, 3.4170, 3.4220, 3.4270, 3.4320, 3.4370, 3.4420, 3.4470,
    3.4520, 3.4550, 3.4580, 3.4610, 3.4640, 3.4670, 3.4700, 3.4730, 3.4760, 3.4790,
    3.4820, 3.4870, 3.4920, 3.4970, 3.5020, 3.5070, 3.5120, 3.5170, 3.5220, 3.5270,
    3.5320, 3.5400, 3.5480, 3.5560, 3.5640, 3.5720, 3.5800, 3.5880, 3.5960, 3.6040,
    3.6120
};

float soc_50c[101] = {
    2.5500, 2.6050, 2.6600, 2.7150, 2.7700, 2.8250, 2.8800, 2.9350, 2.9900, 3.0450,
    3.1000, 3.1220, 3.1440, 3.1660, 3.1880, 3.2100, 3.2320, 3.2540, 3.2760, 3.2980,
    3.3200, 3.3240, 3.3280, 3.3320, 3.3360, 3.3400, 3.3440, 3.3480, 3.3520, 3.3560,
    3.3600, 3.3650, 3.3700, 3.3750, 3.3800, 3.3850, 3.3900, 3.3950, 3.4000, 3.4050,
    3.4100, 3.4125, 3.4150, 3.4175, 3.4200, 3.4225, 3.4250, 3.4275, 3.4300, 3.4325,
    3.4350, 3.4375, 3.4400, 3.4425, 3.4450, 3.4475, 3.4500, 3.4525, 3.4550, 3.4575,
    3.4600, 3.4650, 3.4700, 3.4750, 3.4800, 3.4850, 3.4900, 3.4950, 3.5000, 3.5050,
    3.5100, 3.5135, 3.5170, 3.5205, 3.5240, 3.5275, 3.5310, 3.5345, 3.5380, 3.5415,
    3.5450, 3.5500, 3.5550, 3.5600, 3.5650, 3.5700, 3.5750, 3.5800, 3.5850, 3.5900,
    3.5950, 3.6040, 3.6130, 3.6220, 3.6310, 3.6400, 3.6490, 3.6580, 3.6670, 3.6760,
    3.6850
};

static float temps[5] = {25.0, 35.0, 40.0, 45.0, 50.0};
static float *soc_tables[5] = {soc_25c, soc_35c, soc_40c, soc_45c, soc_50c};

static float interpolate_volt(int soc, int low_idx, int high_idx, float factor) {
    float v_low = soc_tables[low_idx][soc];
    if (low_idx == high_idx) return v_low;
    float v_high = soc_tables[high_idx][soc];
    return v_low + factor * (v_high - v_low);
}

float get_soc(float temp, float volt) {
    int num_temps = 5;
    int low_idx = -1, high_idx = -1;

    // Find the temperature interval
    for (int j = 0; j < num_temps - 1; j++) {
        if (temp >= temps[j] && temp <= temps[j + 1]) {
            low_idx = j;
            high_idx = j + 1;
            break;
        }
    }

    // Handle out of range by clamping
    if (low_idx == -1) {
        if (temp < temps[0]) {
            low_idx = high_idx = 0;
        } else {
            low_idx = high_idx = num_temps - 1;
        }
    }

    float factor = 0.0;
    if (low_idx != high_idx) {
        factor = (temp - temps[low_idx]) / (temps[high_idx] - temps[low_idx]);
    }

    // Now, find the SOC by linear search and interpolation
    float prev_volt = interpolate_volt(0, low_idx, high_idx, factor);
    if (volt <= prev_volt) return 0.0;

    for (int soc = 1; soc <= 100; soc++) {
        float curr_volt = interpolate_volt(soc, low_idx, high_idx, factor);
        if (volt <= curr_volt) {
            // Linear interpolation for SOC
            float frac = (volt - prev_volt) / (curr_volt - prev_volt);
            return (float)(soc - 1) + frac;
        }
        prev_volt = curr_volt;
    }

    return 100.0;
}

#endif